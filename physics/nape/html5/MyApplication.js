$estr = function() { return js.Boot.__string_rec(this,''); }
IntHash = function(p) {
	if( p === $_ ) return;
	this.h = {}
	if(this.h.__proto__ != null) {
		this.h.__proto__ = null;
		delete(this.h.__proto__);
	}
}
IntHash.__name__ = ["IntHash"];
IntHash.prototype.h = null;
IntHash.prototype.set = function(key,value) {
	this.h[key] = value;
}
IntHash.prototype.get = function(key) {
	return this.h[key];
}
IntHash.prototype.exists = function(key) {
	return this.h[key] != null;
}
IntHash.prototype.remove = function(key) {
	if(this.h[key] == null) return false;
	delete(this.h[key]);
	return true;
}
IntHash.prototype.keys = function() {
	var a = new Array();
	for( x in this.h ) a.push(x);
	return a.iterator();
}
IntHash.prototype.iterator = function() {
	return { ref : this.h, it : this.keys(), hasNext : function() {
		return this.it.hasNext();
	}, next : function() {
		var i = this.it.next();
		return this.ref[i];
	}};
}
IntHash.prototype.toString = function() {
	var s = new StringBuf();
	s.b[s.b.length] = "{" == null?"null":"{";
	var it = this.keys();
	while( it.hasNext() ) {
		var i = it.next();
		s.b[s.b.length] = i == null?"null":i;
		s.b[s.b.length] = " => " == null?"null":" => ";
		s.add(Std.string(this.get(i)));
		if(it.hasNext()) s.b[s.b.length] = ", " == null?"null":", ";
	}
	s.b[s.b.length] = "}" == null?"null":"}";
	return s.b.join("");
}
IntHash.prototype.__class__ = IntHash;
if(typeof zpp_nape=='undefined') zpp_nape = {}
if(!zpp_nape.constraint) zpp_nape.constraint = {}
zpp_nape.constraint.ZPP_Constraint = function(p) {
	if( p === $_ ) return;
	this.__velocity = false;
	this.id = zpp_nape.constraint.ZPP_Constraint.nextId++;
	this.stiff = true;
	this.active = true;
	this.ignore = false;
	this.frequency = 10;
	this.damping = 1;
	this.maxForce = Math.POSITIVE_INFINITY;
	this.maxError = Math.POSITIVE_INFINITY;
	this.breakUnderForce = false;
	this.cbType = zpp_nape.callbacks.ZPP_CbType.DEFAULT;
	this.removeOnBreak = true;
	this.pre_dt = -1.0;
}
zpp_nape.constraint.ZPP_Constraint.__name__ = ["zpp_nape","constraint","ZPP_Constraint"];
zpp_nape.constraint.ZPP_Constraint.prototype.outer = null;
zpp_nape.constraint.ZPP_Constraint.prototype.clear = function() {
}
zpp_nape.constraint.ZPP_Constraint.prototype.id = null;
zpp_nape.constraint.ZPP_Constraint.prototype.space = null;
zpp_nape.constraint.ZPP_Constraint.prototype.active = null;
zpp_nape.constraint.ZPP_Constraint.prototype.stiff = null;
zpp_nape.constraint.ZPP_Constraint.prototype.frequency = null;
zpp_nape.constraint.ZPP_Constraint.prototype.damping = null;
zpp_nape.constraint.ZPP_Constraint.prototype.maxForce = null;
zpp_nape.constraint.ZPP_Constraint.prototype.maxError = null;
zpp_nape.constraint.ZPP_Constraint.prototype.breakUnderForce = null;
zpp_nape.constraint.ZPP_Constraint.prototype.breakUnderError = null;
zpp_nape.constraint.ZPP_Constraint.prototype.removeOnBreak = null;
zpp_nape.constraint.ZPP_Constraint.prototype.component = null;
zpp_nape.constraint.ZPP_Constraint.prototype.ignore = null;
zpp_nape.constraint.ZPP_Constraint.prototype.__velocity = null;
zpp_nape.constraint.ZPP_Constraint.prototype.setCbType = function(cbType) {
	if(this.cbType != cbType) {
		if(this.space != null && this.active) {
			if(this.cbType != null) this.cbType.constraints.remove(this);
		}
		this.cbType = cbType;
		if(this.space != null && this.active) cbType.constraints.add(this);
		if(this.space != null) this.space.wake_constraint(this);
	}
}
zpp_nape.constraint.ZPP_Constraint.prototype.activate = function() {
	if(this.space != null) this.activeInSpace();
}
zpp_nape.constraint.ZPP_Constraint.prototype.deactivate = function() {
	if(this.space != null) this.inactiveOrOutSpace();
}
zpp_nape.constraint.ZPP_Constraint.prototype.addedToSpace = function() {
	if(this.active) this.activeInSpace();
}
zpp_nape.constraint.ZPP_Constraint.prototype.removedFromSpace = function() {
	if(this.active) this.inactiveOrOutSpace();
}
zpp_nape.constraint.ZPP_Constraint.prototype.activeInSpace = function() {
	this.cbType.constraints.add(this);
	this.component = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.space.ZPP_Component.zpp_pool == null) ret = new zpp_nape.space.ZPP_Component(); else {
			ret = zpp_nape.space.ZPP_Component.zpp_pool;
			zpp_nape.space.ZPP_Component.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	this.component.isBody = false;
	this.component.constraint = this;
	this.activeBodies();
}
zpp_nape.constraint.ZPP_Constraint.prototype.inactiveOrOutSpace = function() {
	this.cbType.constraints.remove(this);
	var o = this.component;
	{
		o.body = null;
		o.constraint = null;
		null;
	}
	o.next = zpp_nape.space.ZPP_Component.zpp_pool;
	zpp_nape.space.ZPP_Component.zpp_pool = o;
	this.component = null;
	this.inactiveBodies();
}
zpp_nape.constraint.ZPP_Constraint.prototype.activeBodies = function() {
}
zpp_nape.constraint.ZPP_Constraint.prototype.inactiveBodies = function() {
}
zpp_nape.constraint.ZPP_Constraint.prototype.clearcache = function() {
}
zpp_nape.constraint.ZPP_Constraint.prototype.validate = function() {
}
zpp_nape.constraint.ZPP_Constraint.prototype.wake_connected = function() {
}
zpp_nape.constraint.ZPP_Constraint.prototype.forest = function() {
}
zpp_nape.constraint.ZPP_Constraint.prototype.pair_exists = function(id,di) {
	return false;
}
zpp_nape.constraint.ZPP_Constraint.prototype.destroy = function() {
}
zpp_nape.constraint.ZPP_Constraint.prototype.warmStart = function() {
}
zpp_nape.constraint.ZPP_Constraint.prototype.pre_dt = null;
zpp_nape.constraint.ZPP_Constraint.prototype.preStep = function(dt) {
	return false;
}
zpp_nape.constraint.ZPP_Constraint.prototype.applyImpulseVel = function() {
	return false;
}
zpp_nape.constraint.ZPP_Constraint.prototype.applyImpulsePos = function() {
	return false;
}
zpp_nape.constraint.ZPP_Constraint.prototype.wake = function() {
	if(this.space != null) this.space.wake_constraint(this);
}
zpp_nape.constraint.ZPP_Constraint.prototype.cbType = null;
zpp_nape.constraint.ZPP_Constraint.prototype.__class__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_MotorJoint = function(p) {
	if( p === $_ ) return;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.jAcc = 0;
	this.stepped = false;
	this.__velocity = true;
}
zpp_nape.constraint.ZPP_MotorJoint.__name__ = ["zpp_nape","constraint","ZPP_MotorJoint"];
zpp_nape.constraint.ZPP_MotorJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
for(var k in zpp_nape.constraint.ZPP_Constraint.prototype ) zpp_nape.constraint.ZPP_MotorJoint.prototype[k] = zpp_nape.constraint.ZPP_Constraint.prototype[k];
zpp_nape.constraint.ZPP_MotorJoint.prototype.outer_zn = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.ratio = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.rate = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		if(b == this.b1) return new nape.geom.Vec3(0,0,-(this.pjAcc + this.jAcc)); else return new nape.geom.Vec3(0,0,this.ratio * (this.pjAcc + this.jAcc));
	} else return new nape.geom.Vec3(0,0,0);
}
zpp_nape.constraint.ZPP_MotorJoint.prototype.activeBodies = function() {
	this.b1.constraints.add(this);
	if(this.b2 != this.b1) this.b2.constraints.add(this);
}
zpp_nape.constraint.ZPP_MotorJoint.prototype.inactiveBodies = function() {
	this.b1.constraints.remove(this);
	if(this.b2 != this.b1) this.b2.constraints.remove(this);
}
zpp_nape.constraint.ZPP_MotorJoint.prototype.b1 = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.b2 = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.kMass = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.jAcc = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.pjAcc = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.jMax = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.stepped = null;
zpp_nape.constraint.ZPP_MotorJoint.prototype.validate = function() {
	if(this.b1 == this.b2) throw "Error: MotorJoint cannot be simulated with body1 == body2";
	if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
	if(!(this.b1.type == 2) && !(this.b2.type == 2)) throw "Error: Constraints cannot have both bodies non-dynamic";
}
zpp_nape.constraint.ZPP_MotorJoint.prototype.wake_connected = function() {
	if(this.b1.type == 2) this.b1.wake();
	if(this.b2.type == 2) this.b2.wake();
}
zpp_nape.constraint.ZPP_MotorJoint.prototype.forest = function() {
	if(this.b1.type == 2) {
		var xr = this.b1.component == this.b1.component.parent?this.b1.component:(function($this) {
			var $r;
			var obj = $this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		var yr = this.component == this.component.parent?this.component:(function($this) {
			var $r;
			var obj = $this.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == 2) {
		var xr = this.b2.component == this.b2.component.parent?this.b2.component:(function($this) {
			var $r;
			var obj = $this.b2.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		var yr = this.component == this.component.parent?this.component:(function($this) {
			var $r;
			var obj = $this.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
}
zpp_nape.constraint.ZPP_MotorJoint.prototype.pair_exists = function(id,di) {
	return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
}
zpp_nape.constraint.ZPP_MotorJoint.prototype.destroy = function() {
	this.b1.constraints.remove(this);
	if(this.b2 != this.b1) this.b2.constraints.remove(this);
}
zpp_nape.constraint.ZPP_MotorJoint.prototype.clearcache = function() {
	this.jAcc = 0;
	this.pjAcc = 0.0;
	this.pre_dt = -1.0;
}
zpp_nape.constraint.ZPP_MotorJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
	this.kMass = 1.0 / this.kMass;
	this.jAcc *= dtratio;
	this.jMax = this.maxForce * dt;
	return false;
}
zpp_nape.constraint.ZPP_MotorJoint.prototype.warmStart = function() {
	this.b1.angvel -= this.b1.iinertia * this.jAcc;
	this.b2.angvel += this.ratio * this.b2.iinertia * this.jAcc;
	this.pjAcc = this.jAcc;
}
zpp_nape.constraint.ZPP_MotorJoint.prototype.applyImpulseVel = function() {
	var E = this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel - this.rate;
	var j = -this.kMass * E;
	var jOld = this.jAcc;
	this.jAcc += j;
	if(this.breakUnderForce) {
		if(this.jAcc > this.jMax || this.jAcc < -this.jMax) return true;
	} else if(this.jAcc < -this.jMax) this.jAcc = -this.jMax; else if(this.jAcc > this.jMax) this.jAcc = this.jMax;
	j = this.jAcc - jOld;
	this.b1.angvel -= this.b1.iinertia * j;
	this.b2.angvel += this.ratio * this.b2.iinertia * j;
	return false;
}
zpp_nape.constraint.ZPP_MotorJoint.prototype.applyImpulsePos = function() {
	return false;
}
zpp_nape.constraint.ZPP_MotorJoint.prototype.__class__ = zpp_nape.constraint.ZPP_MotorJoint;
zpp_nape.constraint.ZPP_DistanceJoint = function(p) {
	if( p === $_ ) return;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.jAcc = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
	this.cx1 = this.cx2 = 0;
}
zpp_nape.constraint.ZPP_DistanceJoint.__name__ = ["zpp_nape","constraint","ZPP_DistanceJoint"];
zpp_nape.constraint.ZPP_DistanceJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
for(var k in zpp_nape.constraint.ZPP_Constraint.prototype ) zpp_nape.constraint.ZPP_DistanceJoint.prototype[k] = zpp_nape.constraint.ZPP_Constraint.prototype[k];
zpp_nape.constraint.ZPP_DistanceJoint.prototype.outer_zn = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.jointMin = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.jointMax = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.slack = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.equal = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.nx = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.ny = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.cx1 = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.cx2 = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		var jcc = this.jAcc + this.pjAcc;
		if(b == this.b1) return new nape.geom.Vec3(-jcc * this.nx,-jcc * this.ny,-this.cx1 * jcc); else return new nape.geom.Vec3(jcc * this.nx,jcc * this.ny,this.cx2 * jcc);
	} else return new nape.geom.Vec3(0,0,0);
}
zpp_nape.constraint.ZPP_DistanceJoint.prototype.activeBodies = function() {
	this.b1.constraints.add(this);
	if(this.b2 != this.b1) this.b2.constraints.add(this);
}
zpp_nape.constraint.ZPP_DistanceJoint.prototype.inactiveBodies = function() {
	this.b1.constraints.remove(this);
	if(this.b2 != this.b1) this.b2.constraints.remove(this);
}
zpp_nape.constraint.ZPP_DistanceJoint.prototype.b1 = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a1localx = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a1localy = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a1relx = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a1rely = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.setup_a1 = function() {
	var me = this;
	this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
	this.wrap_a1.zpp_inner.inuse = true;
	this.wrap_a1.zpp_inner._validate = function() {
		me.wrap_a1.zpp_inner.x = me.a1localx;
		me.wrap_a1.zpp_inner.y = me.a1localy;
	};
	this.wrap_a1.zpp_inner._invalidate = function(x) {
		me.a1localx = x.x;
		me.a1localy = x.y;
		if(me.space != null) me.space.wake_constraint(me);
	};
}
zpp_nape.constraint.ZPP_DistanceJoint.prototype.wrap_a1 = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.b2 = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a2localx = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a2localy = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a2relx = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.a2rely = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.setup_a2 = function() {
	var me = this;
	this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
	this.wrap_a2.zpp_inner.inuse = true;
	this.wrap_a2.zpp_inner._validate = function() {
		me.wrap_a2.zpp_inner.x = me.a2localx;
		me.wrap_a2.zpp_inner.y = me.a2localy;
	};
	this.wrap_a2.zpp_inner._invalidate = function(x) {
		me.a2localx = x.x;
		me.a2localy = x.y;
		if(me.space != null) me.space.wake_constraint(me);
	};
}
zpp_nape.constraint.ZPP_DistanceJoint.prototype.wrap_a2 = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.kMass = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.jAcc = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.pjAcc = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.jMax = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.gamma = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.bias = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.stepped = null;
zpp_nape.constraint.ZPP_DistanceJoint.prototype.validate = function() {
	if(this.b1 == this.b2) throw "Error: DistanceJoint cannot be simulated with body1 == body2";
	if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
	if(this.jointMin > this.jointMax) throw "Error: DistanceJoint must have jointMin <= jointMax";
	if(!(this.b1.type == 2) && !(this.b2.type == 2)) throw "Error: Constraints cannot have both bodies non-dynamic";
}
zpp_nape.constraint.ZPP_DistanceJoint.prototype.wake_connected = function() {
	if(this.b1.type == 2) this.b1.wake();
	if(this.b2.type == 2) this.b2.wake();
}
zpp_nape.constraint.ZPP_DistanceJoint.prototype.forest = function() {
	if(this.b1.type == 2) {
		var xr = this.b1.component == this.b1.component.parent?this.b1.component:(function($this) {
			var $r;
			var obj = $this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		var yr = this.component == this.component.parent?this.component:(function($this) {
			var $r;
			var obj = $this.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == 2) {
		var xr = this.b2.component == this.b2.component.parent?this.b2.component:(function($this) {
			var $r;
			var obj = $this.b2.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		var yr = this.component == this.component.parent?this.component:(function($this) {
			var $r;
			var obj = $this.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
}
zpp_nape.constraint.ZPP_DistanceJoint.prototype.pair_exists = function(id,di) {
	return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
}
zpp_nape.constraint.ZPP_DistanceJoint.prototype.destroy = function() {
	this.b1.constraints.remove(this);
	if(this.b2 != this.b1) this.b2.constraints.remove(this);
}
zpp_nape.constraint.ZPP_DistanceJoint.prototype.clearcache = function() {
	this.jAcc = 0;
	this.pjAcc = 0;
	this.pre_dt = -1.0;
}
zpp_nape.constraint.ZPP_DistanceJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.equal = this.jointMin == this.jointMax;
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var C = (function($this) {
		var $r;
		$this.nx = $this.b2.posx + $this.a2relx - ($this.b1.posx + $this.a1relx);
		$this.ny = $this.b2.posy + $this.a2rely - ($this.b1.posy + $this.a1rely);
		var C = $this.nx * $this.nx + $this.ny * $this.ny;
		if(C < 1e-8) {
			$this.nx = 0;
			$this.ny = 0;
			C = 0;
			$this.slack = true;
		} else {
			C = (function($this) {
				var $r;
				{
				}
				$r = Math.sqrt(C);
				return $r;
			}($this));
			var t = 1.0 / C;
			$this.nx *= t;
			$this.ny *= t;
			if($this.equal) {
				C -= $this.jointMax;
				$this.slack = false;
			} else if(C < $this.jointMin) {
				C = $this.jointMin - C;
				$this.nx = -$this.nx;
				$this.ny = -$this.ny;
				$this.slack = false;
			} else if(C > $this.jointMax) {
				C -= $this.jointMax;
				$this.slack = false;
			} else {
				$this.nx = 0;
				$this.ny = 0;
				C = 0;
				$this.slack = true;
			}
		}
		$r = C;
		return $r;
	}(this));
	if(!this.slack) {
		this.kMass = (function($this) {
			var $r;
			$this.cx1 = $this.ny * $this.a1relx - $this.nx * $this.a1rely;
			$this.cx2 = $this.ny * $this.a2relx - $this.nx * $this.a2rely;
			$r = $this.b1.smass + $this.b2.smass + $this.cx1 * $this.cx1 * $this.b1.sinertia + $this.cx2 * $this.cx2 * $this.b2.sinertia;
			return $r;
		}(this));
		if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
		if(!this.stiff) {
			if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
			var biasCoef;
			this.kMass *= (function($this) {
				var $r;
				var omega = 2 * Math.PI * $this.frequency;
				$this.gamma = 1 / (omega * dt * (2 * $this.damping + omega * dt));
				var ig = 1 / (1 + $this.gamma);
				biasCoef = omega * omega * $this.gamma;
				$this.gamma *= ig;
				$r = ig;
				return $r;
			}(this));
			this.bias = -C * dt * biasCoef;
			if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
		} else {
			this.bias = 0;
			this.gamma = 0;
		}
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
	}
	return false;
}
zpp_nape.constraint.ZPP_DistanceJoint.prototype.warmStart = function() {
	if(!this.slack) {
		var t = this.b1.imass * this.jAcc;
		this.b1.velx -= this.nx * t;
		this.b1.vely -= this.ny * t;
		var t = this.b2.imass * this.jAcc;
		this.b2.velx += this.nx * t;
		this.b2.vely += this.ny * t;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
	}
	this.pjAcc = this.jAcc;
}
zpp_nape.constraint.ZPP_DistanceJoint.prototype.applyImpulseVel = function() {
	if(this.slack) return false;
	var E = this.nx * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.ny * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1;
	var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
	var jOld = this.jAcc;
	this.jAcc += j;
	if(this.breakUnderForce) {
		if(this.jAcc > this.jMax || this.jAcc < -this.jMax) return true; else if(!this.equal && this.jAcc > 0) this.jAcc = 0;
	} else if(!this.stiff) {
		if(this.equal) {
			if(this.jAcc < -this.jMax) this.jAcc = -this.jMax; else if(this.jAcc > this.jMax) this.jAcc = this.jMax;
		} else if(this.jAcc > 0) this.jAcc = 0; else if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
	} else if(!this.equal && this.jAcc > 0) this.jAcc = 0;
	j = this.jAcc - jOld;
	var t = this.b1.imass * j;
	this.b1.velx -= this.nx * t;
	this.b1.vely -= this.ny * t;
	var t = this.b2.imass * j;
	this.b2.velx += this.nx * t;
	this.b2.vely += this.ny * t;
	this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
	this.b2.angvel += this.cx2 * this.b2.iinertia * j;
	return false;
}
zpp_nape.constraint.ZPP_DistanceJoint.prototype.applyImpulsePos = function() {
	var E;
	var j;
	var r1x;
	var r1y;
	r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	var r2x;
	var r2y;
	r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var slack;
	var nx;
	var ny;
	E = (function($this) {
		var $r;
		nx = $this.b2.posx + r2x - ($this.b1.posx + r1x);
		ny = $this.b2.posy + r2y - ($this.b1.posy + r1y);
		var C = nx * nx + ny * ny;
		if(C < 1e-8) {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		} else {
			C = (function($this) {
				var $r;
				{
				}
				$r = Math.sqrt(C);
				return $r;
			}($this));
			var t = 1.0 / C;
			nx *= t;
			ny *= t;
			if($this.equal) {
				C -= $this.jointMax;
				slack = false;
			} else if(C < $this.jointMin) {
				C = $this.jointMin - C;
				nx = -nx;
				ny = -ny;
				slack = false;
			} else if(C > $this.jointMax) {
				C -= $this.jointMax;
				slack = false;
			} else {
				nx = 0;
				ny = 0;
				C = 0;
				slack = true;
			}
		}
		$r = C;
		return $r;
	}(this));
	if(!slack) {
		if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
		if(E * E < 0.01) return false;
		E *= 0.5;
		if(E * E > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > 1e-8) {
				k = 0.75 / k;
				j = -E * k;
				if(this.equal || j < 0) {
					var t = j * this.b1.imass;
					this.b1.posx -= nx * t;
					this.b1.posy -= ny * t;
					var t = j * this.b2.imass;
					this.b2.posx += nx * t;
					this.b2.posy += ny * t;
					E = (function($this) {
						var $r;
						nx = $this.b2.posx + r2x - ($this.b1.posx + r1x);
						ny = $this.b2.posy + r2y - ($this.b1.posy + r1y);
						var C = nx * nx + ny * ny;
						if(C < 1e-8) {
							nx = 0;
							ny = 0;
							C = 0;
							slack = true;
						} else {
							C = (function($this) {
								var $r;
								{
								}
								$r = Math.sqrt(C);
								return $r;
							}($this));
							var t = 1.0 / C;
							nx *= t;
							ny *= t;
							if($this.equal) {
								C -= $this.jointMax;
								slack = false;
							} else if(C < $this.jointMin) {
								C = $this.jointMin - C;
								nx = -nx;
								ny = -ny;
								slack = false;
							} else if(C > $this.jointMax) {
								C -= $this.jointMax;
								slack = false;
							} else {
								nx = 0;
								ny = 0;
								C = 0;
								slack = true;
							}
						}
						$r = C;
						return $r;
					}(this));
					E *= 0.5;
				}
			}
		}
		var cx1, cx2;
		var k = (function($this) {
			var $r;
			cx1 = ny * r1x - nx * r1y;
			cx2 = ny * r2x - nx * r2y;
			$r = $this.b1.smass + $this.b2.smass + cx1 * cx1 * $this.b1.sinertia + cx2 * cx2 * $this.b2.sinertia;
			return $r;
		}(this));
		if(k != 0) k = 1 / k;
		j = -E * k;
		if(this.equal || j < 0) {
			var t = this.b1.imass * j;
			this.b1.posx -= nx * t;
			this.b1.posy -= ny * t;
			var t = this.b2.imass * j;
			this.b2.posx += nx * t;
			this.b2.posy += ny * t;
			this.b1.delta_rot(-cx1 * this.b1.iinertia * j);
			this.b2.delta_rot(cx2 * this.b2.iinertia * j);
		}
	}
	return false;
}
zpp_nape.constraint.ZPP_DistanceJoint.prototype.__class__ = zpp_nape.constraint.ZPP_DistanceJoint;
if(typeof jeash=='undefined') jeash = {}
if(!jeash.errors) jeash.errors = {}
jeash.errors.Error = function(message,id) {
	if( message === $_ ) return;
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
}
jeash.errors.Error.__name__ = ["jeash","errors","Error"];
jeash.errors.Error.prototype.errorID = null;
jeash.errors.Error.prototype.message = null;
jeash.errors.Error.prototype.name = null;
jeash.errors.Error.prototype.getStackTrace = function() {
	return haxe.Stack.toString(haxe.Stack.exceptionStack());
}
jeash.errors.Error.prototype.toString = function() {
	if(this.message != null) return this.message; else return "Error";
}
jeash.errors.Error.prototype.__class__ = jeash.errors.Error;
if(!jeash.display) jeash.display = {}
jeash.display.InterpolationMethod = { __ename__ : ["jeash","display","InterpolationMethod"], __constructs__ : ["RGB","LINEAR_RGB"] }
jeash.display.InterpolationMethod.RGB = ["RGB",0];
jeash.display.InterpolationMethod.RGB.toString = $estr;
jeash.display.InterpolationMethod.RGB.__enum__ = jeash.display.InterpolationMethod;
jeash.display.InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
jeash.display.InterpolationMethod.LINEAR_RGB.toString = $estr;
jeash.display.InterpolationMethod.LINEAR_RGB.__enum__ = jeash.display.InterpolationMethod;
if(!jeash.events) jeash.events = {}
jeash.events.IEventDispatcher = function() { }
jeash.events.IEventDispatcher.__name__ = ["jeash","events","IEventDispatcher"];
jeash.events.IEventDispatcher.prototype.addEventListener = null;
jeash.events.IEventDispatcher.prototype.dispatchEvent = null;
jeash.events.IEventDispatcher.prototype.hasEventListener = null;
jeash.events.IEventDispatcher.prototype.removeEventListener = null;
jeash.events.IEventDispatcher.prototype.willTrigger = null;
jeash.events.IEventDispatcher.prototype.__class__ = jeash.events.IEventDispatcher;
jeash.events.EventDispatcher = function(target) {
	if( target === $_ ) return;
	if(target != null) this.jeashTarget = target; else this.jeashTarget = this;
	this.jeashEventMap = [];
}
jeash.events.EventDispatcher.__name__ = ["jeash","events","EventDispatcher"];
jeash.events.EventDispatcher.compareListeners = function(l1,l2) {
	return l1.mPriority == l2.mPriority?0:l1.mPriority > l2.mPriority?-1:1;
}
jeash.events.EventDispatcher.prototype.jeashTarget = null;
jeash.events.EventDispatcher.prototype.jeashEventMap = null;
jeash.events.EventDispatcher.prototype.getList = function(type) {
	return this.jeashEventMap[type];
}
jeash.events.EventDispatcher.prototype.setList = function(type,list) {
	this.jeashEventMap[type] = list;
}
jeash.events.EventDispatcher.prototype.existList = function(type) {
	return this.jeashEventMap[type] != undefined;
}
jeash.events.EventDispatcher.prototype.addEventListener = function(type,inListener,useCapture,inPriority,useWeakReference) {
	var capture = useCapture == null?false:useCapture;
	var priority = inPriority == null?0:inPriority;
	var list = this.getList(type);
	if(!this.existList(type)) {
		list = new Array();
		this.setList(type,list);
	}
	var l = new jeash.events.Listener(inListener,capture,priority);
	list.push(l);
}
jeash.events.EventDispatcher.prototype.dispatchEvent = function(event) {
	if(event.target == null) event.target = this.jeashTarget;
	var list = this.getList(event.type);
	var capture = event.eventPhase == jeash.events.EventPhase.CAPTURING_PHASE;
	if(this.existList(event.type)) {
		list.sort(jeash.events.EventDispatcher.compareListeners);
		var idx = 0;
		while(idx < list.length) {
			var listener = list[idx];
			if(listener.mUseCapture == capture) {
				listener.dispatchEvent(event);
				if(event.jeashGetIsCancelledNow()) return true;
			}
			if(idx < list.length && listener != list[idx]) {
			} else idx++;
		}
		return true;
	}
	return false;
}
jeash.events.EventDispatcher.prototype.hasEventListener = function(type) {
	return this.existList(type);
}
jeash.events.EventDispatcher.prototype.removeEventListener = function(type,listener,inCapture) {
	if(!this.existList(type)) return;
	var list = this.getList(type);
	var capture = inCapture == null?false:inCapture;
	var _g1 = 0, _g = list.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(list[i].Is(listener,capture)) {
			list.splice(i,1);
			return;
		}
	}
}
jeash.events.EventDispatcher.prototype.toString = function() {
	return "[ " + this.__name__ + " ]";
}
jeash.events.EventDispatcher.prototype.willTrigger = function(type) {
	return this.hasEventListener(type);
}
jeash.events.EventDispatcher.prototype.__class__ = jeash.events.EventDispatcher;
jeash.events.EventDispatcher.__interfaces__ = [jeash.events.IEventDispatcher];
jeash.display.IBitmapDrawable = function() { }
jeash.display.IBitmapDrawable.__name__ = ["jeash","display","IBitmapDrawable"];
jeash.display.IBitmapDrawable.prototype.drawToSurface = null;
jeash.display.IBitmapDrawable.prototype.__class__ = jeash.display.IBitmapDrawable;
jeash.display.DisplayObject = function(p) {
	if( p === $_ ) return;
	this.parent = null;
	jeash.events.EventDispatcher.call(this,null);
	this.jeashSetX(this.jeashSetY(0));
	this.jeashScaleX = this.jeashScaleY = 1.0;
	this.alpha = 1.0;
	this.jeashSetRotation(0.0);
	this.__swf_depth = 0;
	this.mMatrix = new jeash.geom.Matrix();
	this.mFullMatrix = new jeash.geom.Matrix();
	this.mMask = null;
	this.mMaskingObj = null;
	this.mBoundsRect = new jeash.geom.Rectangle();
	this.mGraphicsBounds = null;
	this.mMaskHandle = null;
	this.name = "DisplayObject " + jeash.display.DisplayObject.mNameID++;
	this.jeashSetVisible(true);
}
jeash.display.DisplayObject.__name__ = ["jeash","display","DisplayObject"];
jeash.display.DisplayObject.__super__ = jeash.events.EventDispatcher;
for(var k in jeash.events.EventDispatcher.prototype ) jeash.display.DisplayObject.prototype[k] = jeash.events.EventDispatcher.prototype[k];
jeash.display.DisplayObject.prototype.x = null;
jeash.display.DisplayObject.prototype.y = null;
jeash.display.DisplayObject.prototype.scaleX = null;
jeash.display.DisplayObject.prototype.scaleY = null;
jeash.display.DisplayObject.prototype.rotation = null;
jeash.display.DisplayObject.prototype.accessibilityProperties = null;
jeash.display.DisplayObject.prototype.alpha = null;
jeash.display.DisplayObject.prototype.name = null;
jeash.display.DisplayObject.prototype.cacheAsBitmap = null;
jeash.display.DisplayObject.prototype.width = null;
jeash.display.DisplayObject.prototype.height = null;
jeash.display.DisplayObject.prototype.visible = null;
jeash.display.DisplayObject.prototype.opaqueBackground = null;
jeash.display.DisplayObject.prototype.mouseX = null;
jeash.display.DisplayObject.prototype.mouseY = null;
jeash.display.DisplayObject.prototype.parent = null;
jeash.display.DisplayObject.prototype.stage = null;
jeash.display.DisplayObject.prototype.scrollRect = null;
jeash.display.DisplayObject.prototype.mask = null;
jeash.display.DisplayObject.prototype.filters = null;
jeash.display.DisplayObject.prototype.blendMode = null;
jeash.display.DisplayObject.prototype.loaderInfo = null;
jeash.display.DisplayObject.prototype.__swf_depth = null;
jeash.display.DisplayObject.prototype.transform = null;
jeash.display.DisplayObject.prototype.mBoundsDirty = null;
jeash.display.DisplayObject.prototype.mMtxChainDirty = null;
jeash.display.DisplayObject.prototype.mMtxDirty = null;
jeash.display.DisplayObject.prototype.mBoundsRect = null;
jeash.display.DisplayObject.prototype.mGraphicsBounds = null;
jeash.display.DisplayObject.prototype.mScale9Grid = null;
jeash.display.DisplayObject.prototype.mMatrix = null;
jeash.display.DisplayObject.prototype.mFullMatrix = null;
jeash.display.DisplayObject.prototype.jeashX = null;
jeash.display.DisplayObject.prototype.jeashY = null;
jeash.display.DisplayObject.prototype.jeashScaleX = null;
jeash.display.DisplayObject.prototype.jeashScaleY = null;
jeash.display.DisplayObject.prototype.jeashRotation = null;
jeash.display.DisplayObject.prototype.jeashVisible = null;
jeash.display.DisplayObject.prototype.mScrollRect = null;
jeash.display.DisplayObject.prototype.mOpaqueBackground = null;
jeash.display.DisplayObject.prototype.mMask = null;
jeash.display.DisplayObject.prototype.mMaskingObj = null;
jeash.display.DisplayObject.prototype.mMaskHandle = null;
jeash.display.DisplayObject.prototype.jeashFilters = null;
jeash.display.DisplayObject.prototype.toString = function() {
	return this.name;
}
jeash.display.DisplayObject.prototype.jeashDoAdded = function(inObj) {
	if(inObj == this) {
		var evt = new jeash.events.Event(jeash.events.Event.ADDED,true,false);
		evt.target = inObj;
		this.dispatchEvent(evt);
	}
	var evt = new jeash.events.Event(jeash.events.Event.ADDED_TO_STAGE,false,false);
	evt.target = inObj;
	this.dispatchEvent(evt);
}
jeash.display.DisplayObject.prototype.jeashDoRemoved = function(inObj) {
	if(inObj == this) {
		var evt = new jeash.events.Event(jeash.events.Event.REMOVED,true,false);
		evt.target = inObj;
		this.dispatchEvent(evt);
	}
	var evt = new jeash.events.Event(jeash.events.Event.REMOVED_FROM_STAGE,false,false);
	evt.target = inObj;
	this.dispatchEvent(evt);
	var gfx = this.jeashGetGraphics();
	if(gfx != null) jeash.Lib.jeashRemoveSurface(gfx.jeashSurface);
}
jeash.display.DisplayObject.prototype.DoMouseEnter = function() {
}
jeash.display.DisplayObject.prototype.DoMouseLeave = function() {
}
jeash.display.DisplayObject.prototype.jeashSetParent = function(parent) {
	if(parent == this.parent) return;
	this.mMtxChainDirty = true;
	if(this.parent != null) {
		this.parent.__removeChild(this);
		this.parent.jeashInvalidateBounds();
	}
	if(parent != null) parent.jeashInvalidateBounds();
	if(this.parent == null && parent != null) {
		this.parent = parent;
		this.jeashDoAdded(this);
	} else if(this.parent != null && parent == null) {
		this.parent = parent;
		this.jeashDoRemoved(this);
	} else this.parent = parent;
}
jeash.display.DisplayObject.prototype.GetStage = function() {
	return jeash.Lib.jeashGetStage();
}
jeash.display.DisplayObject.prototype.AsContainer = function() {
	return null;
}
jeash.display.DisplayObject.prototype.GetScrollRect = function() {
	if(this.mScrollRect == null) return null;
	return this.mScrollRect.clone();
}
jeash.display.DisplayObject.prototype.jeashAsInteractiveObject = function() {
	return null;
}
jeash.display.DisplayObject.prototype.SetScrollRect = function(inRect) {
	this.mScrollRect = inRect;
	return this.GetScrollRect();
}
jeash.display.DisplayObject.prototype.hitTestObject = function(obj) {
	return false;
}
jeash.display.DisplayObject.prototype.hitTestPoint = function(x,y,shapeFlag) {
	var bounding_box = shapeFlag == null?true:!shapeFlag;
	return true;
}
jeash.display.DisplayObject.prototype.localToGlobal = function(point) {
	if(this.parent == null) return new jeash.geom.Point(this.jeashGetX() + point.x,this.jeashGetY() + point.y); else {
		point.x = point.x + this.jeashGetX();
		point.y = point.y + this.jeashGetY();
		return this.parent.localToGlobal(point);
	}
}
jeash.display.DisplayObject.prototype.jeashGetMouseX = function() {
	return this.globalToLocal(new jeash.geom.Point(this.GetStage().jeashGetMouseX(),0)).x;
}
jeash.display.DisplayObject.prototype.jeashSetMouseX = function(x) {
	return null;
}
jeash.display.DisplayObject.prototype.jeashGetMouseY = function() {
	return this.globalToLocal(new jeash.geom.Point(0,this.GetStage().jeashGetMouseY())).y;
}
jeash.display.DisplayObject.prototype.jeashSetMouseY = function(y) {
	return null;
}
jeash.display.DisplayObject.prototype.GetTransform = function() {
	return new jeash.geom.Transform(this);
}
jeash.display.DisplayObject.prototype.SetTransform = function(trans) {
	this.mMatrix = trans.jeashGetMatrix().clone();
	return trans;
}
jeash.display.DisplayObject.prototype.getFullMatrix = function(childMatrix) {
	if(childMatrix == null) return this.mFullMatrix.clone(); else return childMatrix.mult(this.mFullMatrix);
}
jeash.display.DisplayObject.prototype.getBounds = function(targetCoordinateSpace) {
	if(this.mMtxDirty || this.mMtxChainDirty) this.jeashValidateMatrix();
	if(this.mBoundsDirty) this.BuildBounds();
	var mtx = this.mFullMatrix.clone();
	mtx.concat(targetCoordinateSpace.mFullMatrix.clone().invert());
	var rect = this.mBoundsRect.transform(mtx);
	return rect;
}
jeash.display.DisplayObject.prototype.getRect = function(targetCoordinateSpace) {
	return null;
}
jeash.display.DisplayObject.prototype.globalToLocal = function(inPos) {
	return this.mFullMatrix.clone().invert().transformPoint(inPos);
}
jeash.display.DisplayObject.prototype.jeashGetNumChildren = function() {
	return 0;
}
jeash.display.DisplayObject.prototype.jeashGetMatrix = function() {
	return this.mMatrix.clone();
}
jeash.display.DisplayObject.prototype.jeashSetMatrix = function(inMatrix) {
	this.mMatrix = inMatrix.clone();
	return inMatrix;
}
jeash.display.DisplayObject.prototype.jeashGetGraphics = function() {
	return null;
}
jeash.display.DisplayObject.prototype.GetOpaqueBackground = function() {
	return this.mOpaqueBackground;
}
jeash.display.DisplayObject.prototype.SetOpaqueBackground = function(inBG) {
	this.mOpaqueBackground = inBG;
	return this.mOpaqueBackground;
}
jeash.display.DisplayObject.prototype.GetBackgroundRect = function() {
	if(this.mGraphicsBounds == null) {
		var gfx = this.jeashGetGraphics();
		if(gfx != null) this.mGraphicsBounds = gfx.jeashExtent.clone();
	}
	return this.mGraphicsBounds;
}
jeash.display.DisplayObject.prototype.jeashInvalidateBounds = function() {
	this.mBoundsDirty = true;
	if(this.parent != null) this.parent.jeashInvalidateBounds();
}
jeash.display.DisplayObject.prototype.jeashInvalidateMatrix = function(local) {
	if(local == null) local = false;
	this.mMtxChainDirty = this.mMtxChainDirty || !local;
	this.mMtxDirty = this.mMtxDirty || local;
}
jeash.display.DisplayObject.prototype.jeashValidateMatrix = function() {
	if(this.mMtxDirty || this.mMtxChainDirty && this.parent != null) {
		if(this.mMtxChainDirty && this.parent != null) this.parent.jeashValidateMatrix();
		if(this.mMtxDirty) {
			this.mMatrix.b = this.mMatrix.c = this.mMatrix.tx = this.mMatrix.ty = 0;
			this.mMatrix.a = this.jeashScaleX;
			this.mMatrix.d = this.jeashScaleY;
			var rad = this.jeashRotation * Math.PI / 180.0;
			if(rad != 0.0) this.mMatrix.rotate(rad);
			this.mMatrix.tx = this.jeashX;
			this.mMatrix.ty = this.jeashY;
		}
		if(this.parent != null) this.mFullMatrix = this.parent.getFullMatrix(this.mMatrix); else this.mFullMatrix = this.mMatrix;
		this.mMtxDirty = this.mMtxChainDirty = false;
	}
}
jeash.display.DisplayObject.prototype.jeashRender = function(parentMatrix,inMask) {
	var gfx = this.jeashGetGraphics();
	if(gfx != null) {
		if(gfx.jeashIsTile || !this.jeashVisible) return;
		if(this.mMtxDirty || this.mMtxChainDirty) this.jeashValidateMatrix();
		var m = this.mFullMatrix.clone();
		if(this.jeashFilters != null && (gfx.jeashChanged || inMask != null)) {
			gfx.jeashRender(inMask,m);
			var _g = 0, _g1 = this.jeashFilters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				filter.jeashApplyFilter(gfx.jeashSurface);
			}
		} else gfx.jeashRender(inMask,m);
		m.tx = m.tx + gfx.jeashExtent.x * m.a + gfx.jeashExtent.y * m.c;
		m.ty = m.ty + gfx.jeashExtent.x * m.b + gfx.jeashExtent.y * m.d;
		if(inMask != null) jeash.Lib.jeashDrawToSurface(gfx.jeashSurface,inMask,m,(this.parent != null?this.parent.alpha:1) * this.alpha); else {
			jeash.Lib.jeashSetSurfaceTransform(gfx.jeashSurface,m);
			jeash.Lib.jeashSetSurfaceOpacity(gfx.jeashSurface,(this.parent != null?this.parent.alpha:1) * this.alpha);
		}
	} else if(this.mMtxDirty || this.mMtxChainDirty) this.jeashValidateMatrix();
}
jeash.display.DisplayObject.prototype.drawToSurface = function(inSurface,matrix,colorTransform,blendMode,clipRect,smoothing) {
	if(matrix == null) matrix = new jeash.geom.Matrix();
	this.jeashRender(matrix,inSurface);
}
jeash.display.DisplayObject.prototype.jeashGetObjectUnderPoint = function(point) {
	if(!this.jeashGetVisible()) return null;
	var gfx = this.jeashGetGraphics();
	if(gfx != null) {
		var local = this.globalToLocal(point);
		switch( (this.GetStage().jeashPointInPathMode)[1] ) {
		case 0:
			if(local.x < 0 || local.y < 0 || local.x * this.jeashGetScaleX() > this.jeashGetWidth() || local.y * this.jeashGetScaleY() > this.jeashGetHeight()) return null;
			if(gfx.jeashHitTest(local.x,local.y)) return this;
			break;
		case 1:
			if(local.x < 0 || local.y < 0 || local.x * this.jeashGetScaleX() > this.jeashGetWidth() || local.y * this.jeashGetScaleY() > this.jeashGetHeight()) return null;
			if(gfx.jeashHitTest(local.x * this.jeashGetScaleX(),local.y * this.jeashGetScaleY())) return this;
			break;
		}
	}
	return null;
}
jeash.display.DisplayObject.prototype.GetMask = function() {
	return this.mMask;
}
jeash.display.DisplayObject.prototype.SetMask = function(inMask) {
	if(this.mMask != null) this.mMask.mMaskingObj = null;
	this.mMask = inMask;
	if(this.mMask != null) this.mMask.mMaskingObj = this;
	return this.mMask;
}
jeash.display.DisplayObject.prototype.jeashSetFilters = function(filters) {
	if(filters == null) this.jeashFilters = null; else {
		this.jeashFilters = new Array();
		var _g = 0;
		while(_g < filters.length) {
			var filter = filters[_g];
			++_g;
			this.jeashFilters.push(filter.clone());
		}
	}
	return filters;
}
jeash.display.DisplayObject.prototype.jeashGetFilters = function() {
	if(this.jeashFilters == null) return [];
	var result = new Array();
	var _g = 0, _g1 = this.jeashFilters;
	while(_g < _g1.length) {
		var filter = _g1[_g];
		++_g;
		result.push(filter.clone());
	}
	return result;
}
jeash.display.DisplayObject.prototype.BuildBounds = function() {
	var gfx = this.jeashGetGraphics();
	if(gfx == null) this.mBoundsRect = new jeash.geom.Rectangle(this.jeashGetX(),this.jeashGetY(),0,0); else {
		this.mBoundsRect = gfx.jeashExtent.clone();
		gfx.mBoundsDirty = false;
		if(this.mScale9Grid != null) {
			this.mBoundsRect.width *= this.jeashGetScaleX();
			this.mBoundsRect.height *= this.jeashGetScaleY();
		}
	}
	this.mBoundsDirty = false;
}
jeash.display.DisplayObject.prototype.GetScreenBounds = function() {
	if(this.mBoundsDirty) this.BuildBounds();
	return this.mBoundsRect.clone();
}
jeash.display.DisplayObject.prototype.GetFocusObjects = function(outObjs) {
}
jeash.display.DisplayObject.prototype.__BlendIndex = function() {
	return this.blendMode == null?jeash.display.Graphics.BLEND_NORMAL:this.blendMode[1];
}
jeash.display.DisplayObject.prototype.jeashGetInteractiveObjectStack = function(outStack) {
	var io = this.jeashAsInteractiveObject();
	if(io != null) outStack.push(io);
	if(this.parent != null) this.parent.jeashGetInteractiveObjectStack(outStack);
}
jeash.display.DisplayObject.prototype.jeashFireEvent = function(event) {
	var stack = [];
	if(this.parent != null) this.parent.jeashGetInteractiveObjectStack(stack);
	var l = stack.length;
	if(l > 0) {
		event.jeashSetPhase(jeash.events.EventPhase.CAPTURING_PHASE);
		stack.reverse();
		var _g = 0;
		while(_g < stack.length) {
			var obj = stack[_g];
			++_g;
			event.currentTarget = obj;
			obj.dispatchEvent(event);
			if(event.jeashGetIsCancelled()) return;
		}
	}
	event.jeashSetPhase(jeash.events.EventPhase.AT_TARGET);
	event.currentTarget = this;
	this.dispatchEvent(event);
	if(event.jeashGetIsCancelled()) return;
	if(event.bubbles) {
		event.jeashSetPhase(jeash.events.EventPhase.BUBBLING_PHASE);
		stack.reverse();
		var _g = 0;
		while(_g < stack.length) {
			var obj = stack[_g];
			++_g;
			event.currentTarget = obj;
			obj.dispatchEvent(event);
			if(event.jeashGetIsCancelled()) return;
		}
	}
}
jeash.display.DisplayObject.prototype.jeashBroadcast = function(event) {
	this.dispatchEvent(event);
}
jeash.display.DisplayObject.prototype.jeashAddToStage = function() {
	var gfx = this.jeashGetGraphics();
	if(gfx != null) jeash.Lib.jeashAppendSurface(gfx.jeashSurface);
}
jeash.display.DisplayObject.prototype.jeashInsertBefore = function(obj) {
	var gfx1 = this.jeashGetGraphics();
	var gfx2 = obj.jeashIsOnStage()?obj.jeashGetGraphics():null;
	if(gfx1 != null) {
		if(gfx2 != null) jeash.Lib.jeashAppendSurface(gfx1.jeashSurface,gfx2.jeashSurface); else jeash.Lib.jeashAppendSurface(gfx1.jeashSurface);
	}
}
jeash.display.DisplayObject.prototype.jeashIsOnStage = function() {
	var gfx = this.jeashGetGraphics();
	if(gfx != null) return jeash.Lib.jeashIsOnStage(gfx.jeashSurface);
	return false;
}
jeash.display.DisplayObject.prototype.jeashGetVisible = function() {
	return this.jeashVisible;
}
jeash.display.DisplayObject.prototype.jeashSetVisible = function(visible) {
	var gfx = this.jeashGetGraphics();
	if(gfx != null) {
		if(gfx.jeashSurface != null) jeash.Lib.jeashSetSurfaceVisible(gfx.jeashSurface,visible);
	}
	this.jeashVisible = visible;
	return visible;
}
jeash.display.DisplayObject.prototype.jeashGetHeight = function() {
	this.BuildBounds();
	return this.jeashScaleY * this.mBoundsRect.height;
}
jeash.display.DisplayObject.prototype.jeashSetHeight = function(inHeight) {
	if(this.parent != null) this.parent.jeashInvalidateBounds();
	if(this.mBoundsDirty) this.BuildBounds();
	var h = this.mBoundsRect.height;
	if(this.jeashScaleY * h != inHeight) {
		if(h <= 0) return 0;
		this.jeashScaleY = inHeight / h;
		this.jeashInvalidateMatrix(true);
	}
	return inHeight;
}
jeash.display.DisplayObject.prototype.jeashGetWidth = function() {
	if(this.mBoundsDirty) this.BuildBounds();
	return this.jeashScaleX * this.mBoundsRect.width;
}
jeash.display.DisplayObject.prototype.jeashSetWidth = function(inWidth) {
	if(this.parent != null) this.parent.jeashInvalidateBounds();
	if(this.mBoundsDirty) this.BuildBounds();
	var w = this.mBoundsRect.width;
	if(this.jeashScaleX * w != inWidth) {
		if(w <= 0) return 0;
		this.jeashScaleX = inWidth / w;
		this.jeashInvalidateMatrix(true);
	}
	return inWidth;
}
jeash.display.DisplayObject.prototype.jeashGetX = function() {
	return this.jeashX;
}
jeash.display.DisplayObject.prototype.jeashGetY = function() {
	return this.jeashY;
}
jeash.display.DisplayObject.prototype.jeashSetX = function(n) {
	this.jeashInvalidateMatrix(true);
	this.jeashX = n;
	if(this.parent != null) this.parent.jeashInvalidateBounds();
	return n;
}
jeash.display.DisplayObject.prototype.jeashSetY = function(n) {
	this.jeashInvalidateMatrix(true);
	this.jeashY = n;
	if(this.parent != null) this.parent.jeashInvalidateBounds();
	return n;
}
jeash.display.DisplayObject.prototype.jeashGetScaleX = function() {
	return this.jeashScaleX;
}
jeash.display.DisplayObject.prototype.jeashGetScaleY = function() {
	return this.jeashScaleY;
}
jeash.display.DisplayObject.prototype.jeashSetScaleX = function(inS) {
	if(this.jeashScaleX == inS) return inS;
	if(this.parent != null) this.parent.jeashInvalidateBounds();
	if(this.mBoundsDirty) this.BuildBounds();
	if(!this.mMtxDirty) this.jeashInvalidateMatrix(true);
	this.jeashScaleX = inS;
	return inS;
}
jeash.display.DisplayObject.prototype.jeashSetScaleY = function(inS) {
	if(this.jeashScaleY == inS) return inS;
	if(this.parent != null) this.parent.jeashInvalidateBounds();
	if(this.mBoundsDirty) this.BuildBounds();
	if(!this.mMtxDirty) this.jeashInvalidateMatrix(true);
	this.jeashScaleY = inS;
	return inS;
}
jeash.display.DisplayObject.prototype.jeashSetRotation = function(n) {
	if(!this.mMtxDirty) this.jeashInvalidateMatrix(true);
	if(this.parent != null) this.parent.jeashInvalidateBounds();
	this.jeashRotation = n;
	return n;
}
jeash.display.DisplayObject.prototype.jeashGetRotation = function() {
	return this.jeashRotation;
}
jeash.display.DisplayObject.prototype.__class__ = jeash.display.DisplayObject;
jeash.display.DisplayObject.__interfaces__ = [jeash.display.IBitmapDrawable];
jeash.display.InteractiveObject = function(p) {
	if( p === $_ ) return;
	jeash.display.DisplayObject.call(this);
	this.tabEnabled = false;
	this.mouseEnabled = true;
	this.doubleClickEnabled = true;
	this.jeashSetTabIndex(0);
	this.name = "InteractiveObject";
}
jeash.display.InteractiveObject.__name__ = ["jeash","display","InteractiveObject"];
jeash.display.InteractiveObject.__super__ = jeash.display.DisplayObject;
for(var k in jeash.display.DisplayObject.prototype ) jeash.display.InteractiveObject.prototype[k] = jeash.display.DisplayObject.prototype[k];
jeash.display.InteractiveObject.prototype.doubleClickEnabled = null;
jeash.display.InteractiveObject.prototype.focusRect = null;
jeash.display.InteractiveObject.prototype.mouseEnabled = null;
jeash.display.InteractiveObject.prototype.tabEnabled = null;
jeash.display.InteractiveObject.prototype.tabIndex = null;
jeash.display.InteractiveObject.prototype.jeashDoubleClickEnabled = null;
jeash.display.InteractiveObject.prototype.jeashTabIndex = null;
jeash.display.InteractiveObject.prototype.toString = function() {
	return this.name;
}
jeash.display.InteractiveObject.prototype.OnKey = function(inKey) {
}
jeash.display.InteractiveObject.prototype.jeashAsInteractiveObject = function() {
	return this;
}
jeash.display.InteractiveObject.prototype.jeashGetTabIndex = function() {
	return this.jeashTabIndex;
}
jeash.display.InteractiveObject.prototype.jeashSetTabIndex = function(inIndex) {
	this.jeashTabIndex = inIndex;
	return inIndex;
}
jeash.display.InteractiveObject.prototype.jeashGetObjectUnderPoint = function(point) {
	if(!this.mouseEnabled) return null; else return jeash.display.DisplayObject.prototype.jeashGetObjectUnderPoint.call(this,point);
}
jeash.display.InteractiveObject.prototype.__class__ = jeash.display.InteractiveObject;
jeash.display.DisplayObjectContainer = function(p) {
	if( p === $_ ) return;
	this.jeashChildren = new Array();
	this.mLastSetupObjs = new Array();
	this.mouseChildren = true;
	this.tabChildren = true;
	jeash.display.InteractiveObject.call(this);
	this.name = "DisplayObjectContainer " + jeash.display.DisplayObject.mNameID++;
}
jeash.display.DisplayObjectContainer.__name__ = ["jeash","display","DisplayObjectContainer"];
jeash.display.DisplayObjectContainer.__super__ = jeash.display.InteractiveObject;
for(var k in jeash.display.InteractiveObject.prototype ) jeash.display.DisplayObjectContainer.prototype[k] = jeash.display.InteractiveObject.prototype[k];
jeash.display.DisplayObjectContainer.prototype.jeashChildren = null;
jeash.display.DisplayObjectContainer.prototype.mLastSetupObjs = null;
jeash.display.DisplayObjectContainer.prototype.numChildren = null;
jeash.display.DisplayObjectContainer.prototype.mouseChildren = null;
jeash.display.DisplayObjectContainer.prototype.tabChildren = null;
jeash.display.DisplayObjectContainer.prototype.AsContainer = function() {
	return this;
}
jeash.display.DisplayObjectContainer.prototype.jeashBroadcast = function(event) {
	var i = 0;
	if(this.jeashChildren.length > 0) while(true) {
		var child = this.jeashChildren[i];
		child.jeashBroadcast(event);
		if(i >= this.jeashChildren.length) break;
		if(this.jeashChildren[i] == child) {
			i++;
			if(i >= this.jeashChildren.length) break;
		}
	}
	this.dispatchEvent(event);
}
jeash.display.DisplayObjectContainer.prototype.BuildBounds = function() {
	jeash.display.InteractiveObject.prototype.BuildBounds.call(this);
	var _g = 0, _g1 = this.jeashChildren;
	while(_g < _g1.length) {
		var obj = _g1[_g];
		++_g;
		if(obj.jeashGetVisible()) {
			var r = obj.getBounds(this);
			if(r.width != 0 || r.height != 0) {
				if(this.mBoundsRect.width == 0 && this.mBoundsRect.height == 0) this.mBoundsRect = r.clone(); else this.mBoundsRect.extendBounds(r);
			}
		}
	}
}
jeash.display.DisplayObjectContainer.prototype.jeashInvalidateMatrix = function(local) {
	if(local == null) local = false;
	if(this.mMtxChainDirty == false && this.mMtxDirty == false) {
		var _g = 0, _g1 = this.jeashChildren;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.jeashInvalidateMatrix();
		}
	}
	this.mMtxChainDirty = this.mMtxChainDirty || !local;
	this.mMtxDirty = this.mMtxDirty || local;
}
jeash.display.DisplayObjectContainer.prototype.jeashDoAdded = function(inObj) {
	jeash.display.InteractiveObject.prototype.jeashDoAdded.call(this,inObj);
	var _g = 0, _g1 = this.jeashChildren;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		child.jeashDoAdded(inObj);
	}
}
jeash.display.DisplayObjectContainer.prototype.jeashDoRemoved = function(inObj) {
	jeash.display.InteractiveObject.prototype.jeashDoRemoved.call(this,inObj);
	var _g = 0, _g1 = this.jeashChildren;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		child.jeashDoRemoved(inObj);
	}
}
jeash.display.DisplayObjectContainer.prototype.GetBackgroundRect = function() {
	var r = jeash.display.InteractiveObject.prototype.GetBackgroundRect.call(this);
	if(r != null) r = r.clone();
	var _g = 0, _g1 = this.jeashChildren;
	while(_g < _g1.length) {
		var obj = _g1[_g];
		++_g;
		if(obj.jeashGetVisible()) {
			var o = obj.GetBackgroundRect();
			if(o != null) {
				var trans = o.transform(obj.mMatrix);
				if(r == null || r.width == 0 || r.height == 0) r = trans; else if(trans.width != 0 && trans.height != 0) r.extendBounds(trans);
			}
		}
	}
	return r;
}
jeash.display.DisplayObjectContainer.prototype.GetFocusObjects = function(outObjs) {
	var _g = 0, _g1 = this.jeashChildren;
	while(_g < _g1.length) {
		var obj = _g1[_g];
		++_g;
		obj.GetFocusObjects(outObjs);
	}
}
jeash.display.DisplayObjectContainer.prototype.jeashGetNumChildren = function() {
	return this.jeashChildren.length;
}
jeash.display.DisplayObjectContainer.prototype.jeashRender = function(inParentMatrix,inMask) {
	if(!this.jeashGetVisible()) return;
	jeash.display.InteractiveObject.prototype.jeashRender.call(this,inParentMatrix,inMask);
	var _g = 0, _g1 = this.jeashChildren;
	while(_g < _g1.length) {
		var obj = _g1[_g];
		++_g;
		if(obj.jeashGetVisible()) obj.jeashRender(this.mFullMatrix,inMask);
	}
}
jeash.display.DisplayObjectContainer.prototype.addChild = function(object) {
	if(object == this) throw "Adding to self";
	if(object.parent == this) {
		this.setChildIndex(object,this.jeashChildren.length - 1);
		return object;
	}
	if(this.jeashIsOnStage()) object.jeashAddToStage();
	this.jeashChildren.push(object);
	object.jeashSetParent(this);
	return object;
}
jeash.display.DisplayObjectContainer.prototype.jeashAddToStage = function() {
	jeash.display.InteractiveObject.prototype.jeashAddToStage.call(this);
	var _g1 = 0, _g = this.jeashChildren.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.jeashChildren[i].jeashAddToStage();
	}
}
jeash.display.DisplayObjectContainer.prototype.jeashInsertBefore = function(obj) {
	jeash.display.InteractiveObject.prototype.jeashInsertBefore.call(this,obj);
	var _g1 = 0, _g = this.jeashChildren.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.jeashChildren[i].jeashAddToStage();
	}
}
jeash.display.DisplayObjectContainer.prototype.addChildAt = function(obj,index) {
	if(index > this.jeashChildren.length || index < 0) throw "Invalid index position " + index;
	if(obj.parent == this) {
		this.setChildIndex(obj,index);
		return;
	}
	if(index == this.jeashChildren.length) {
		this.jeashChildren.push(obj);
		if(this.jeashIsOnStage()) obj.jeashAddToStage();
	} else {
		if(this.jeashIsOnStage()) obj.jeashInsertBefore(this.jeashChildren[index]);
		this.jeashChildren.insert(index,obj);
	}
	obj.jeashSetParent(this);
}
jeash.display.DisplayObjectContainer.prototype.contains = function(child) {
	if(child == null) return false;
	if(this == child) return true;
	var _g = 0, _g1 = this.jeashChildren;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		if(c == child) return true;
	}
	return false;
}
jeash.display.DisplayObjectContainer.prototype.getChildAt = function(index) {
	if(index >= 0 && index < this.jeashChildren.length) return this.jeashChildren[index];
	throw "getChildAt : index out of bounds " + index + "/" + this.jeashChildren.length;
	return null;
}
jeash.display.DisplayObjectContainer.prototype.getChildByName = function(inName) {
	var _g1 = 0, _g = this.jeashChildren.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this.jeashChildren[i].name == inName) return this.jeashChildren[i];
	}
	return null;
}
jeash.display.DisplayObjectContainer.prototype.getChildIndex = function(child) {
	var _g1 = 0, _g = this.jeashChildren.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this.jeashChildren[i] == child) return i;
	}
	return -1;
}
jeash.display.DisplayObjectContainer.prototype.removeChild = function(child) {
	var _g1 = 0, _g = this.jeashChildren.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this.jeashChildren[i] == child) {
			child.jeashSetParent(null);
			return;
		}
	}
	throw "removeChild : none found?";
}
jeash.display.DisplayObjectContainer.prototype.removeChildAt = function(inI) {
	this.jeashChildren[inI].jeashSetParent(null);
	return this.jeashChildren[inI];
}
jeash.display.DisplayObjectContainer.prototype.__removeChild = function(child) {
	var i = this.getChildIndex(child);
	if(i >= 0) this.jeashChildren.splice(i,1);
}
jeash.display.DisplayObjectContainer.prototype.setChildIndex = function(child,index) {
	if(index > this.jeashChildren.length) throw "Invalid index position " + index;
	var s = null;
	var orig = this.getChildIndex(child);
	if(orig < 0) {
		var msg = "setChildIndex : object " + child.name + " not found.";
		if(child.parent == this) {
			var realindex = -1;
			var _g1 = 0, _g = this.jeashChildren.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.jeashChildren[i] == child) {
					realindex = i;
					break;
				}
			}
			if(realindex != -1) msg += "Internal error: Real child index was " + Std.string(realindex); else msg += "Internal error: Child was not in jeashChildren array!";
		}
		throw msg;
	}
	if(index < orig) {
		var i = orig;
		while(i > index) {
			this.swapChildren(this.jeashChildren[i],this.jeashChildren[i - 1]);
			i--;
		}
	} else if(orig < index) {
		var i = orig;
		while(i < index) {
			this.swapChildren(this.jeashChildren[i],this.jeashChildren[i + 1]);
			i++;
		}
	}
}
jeash.display.DisplayObjectContainer.prototype.jeashSwapSurface = function(c1,c2) {
	if(this.jeashChildren[c1] == null) throw "Null element at index " + c1 + " length " + this.jeashChildren.length;
	if(this.jeashChildren[c2] == null) throw "Null element at index " + c2 + " length " + this.jeashChildren.length;
	var gfx1 = this.jeashChildren[c1].jeashGetGraphics();
	var gfx2 = this.jeashChildren[c2].jeashGetGraphics();
	if(gfx1 != null && gfx2 != null) jeash.Lib.jeashSwapSurface(gfx1.jeashSurface,gfx2.jeashSurface);
}
jeash.display.DisplayObjectContainer.prototype.swapChildren = function(child1,child2) {
	var c1 = -1;
	var c2 = -1;
	var swap;
	var _g1 = 0, _g = this.jeashChildren.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this.jeashChildren[i] == child1) c1 = i; else if(this.jeashChildren[i] == child2) c2 = i;
	}
	if(c1 != -1 && c2 != -1) {
		swap = this.jeashChildren[c1];
		this.jeashChildren[c1] = this.jeashChildren[c2];
		this.jeashChildren[c2] = swap;
		swap = null;
		this.jeashSwapSurface(c1,c2);
	}
}
jeash.display.DisplayObjectContainer.prototype.swapChildrenAt = function(child1,child2) {
	var swap = this.jeashChildren[child1];
	this.jeashChildren[child1] = this.jeashChildren[child2];
	this.jeashChildren[child2] = swap;
	swap = null;
}
jeash.display.DisplayObjectContainer.prototype.jeashGetObjectUnderPoint = function(point) {
	if(!this.jeashGetVisible()) return null;
	var l = this.jeashChildren.length - 1;
	var _g1 = 0, _g = this.jeashChildren.length;
	while(_g1 < _g) {
		var i = _g1++;
		var result = this.jeashChildren[l - i].jeashGetObjectUnderPoint(point);
		if(result != null) return result;
	}
	return jeash.display.InteractiveObject.prototype.jeashGetObjectUnderPoint.call(this,point);
}
jeash.display.DisplayObjectContainer.prototype.getObjectsUnderPoint = function(point) {
	var result = new Array();
	this.jeashGetObjectsUnderPoint(point,result);
	return result;
}
jeash.display.DisplayObjectContainer.prototype.jeashGetObjectsUnderPoint = function(point,stack) {
	var l = this.jeashChildren.length - 1;
	var _g1 = 0, _g = this.jeashChildren.length;
	while(_g1 < _g) {
		var i = _g1++;
		var result = this.jeashChildren[l - i].jeashGetObjectUnderPoint(point);
		if(result != null) stack.push(result);
	}
}
jeash.display.DisplayObjectContainer.prototype.jeashSetFilters = function(filters) {
	jeash.display.InteractiveObject.prototype.jeashSetFilters.call(this,filters);
	var _g = 0, _g1 = this.jeashChildren;
	while(_g < _g1.length) {
		var obj = _g1[_g];
		++_g;
		obj.jeashSetFilters(filters);
	}
	return filters;
}
jeash.display.DisplayObjectContainer.prototype.jeashSetVisible = function(visible) {
	jeash.display.InteractiveObject.prototype.jeashSetVisible.call(this,visible);
	var _g1 = 0, _g = this.jeashChildren.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this.jeashChildren[i].jeashIsOnStage()) this.jeashChildren[i].jeashSetVisible(visible);
	}
	return visible;
}
jeash.display.DisplayObjectContainer.prototype.__class__ = jeash.display.DisplayObjectContainer;
jeash.display.Sprite = function(p) {
	if( p === $_ ) return;
	jeash.Lib.jeashGetCanvas();
	this.jeashGraphics = new jeash.display.Graphics();
	if(this.jeashGraphics != null) this.jeashGraphics.owner = this;
	jeash.display.DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.name = "Sprite " + jeash.display.DisplayObject.mNameID++;
	this.jeashGraphics.jeashSurface.id = this.name;
}
jeash.display.Sprite.__name__ = ["jeash","display","Sprite"];
jeash.display.Sprite.__super__ = jeash.display.DisplayObjectContainer;
for(var k in jeash.display.DisplayObjectContainer.prototype ) jeash.display.Sprite.prototype[k] = jeash.display.DisplayObjectContainer.prototype[k];
jeash.display.Sprite.prototype.jeashGraphics = null;
jeash.display.Sprite.prototype.graphics = null;
jeash.display.Sprite.prototype.useHandCursor = null;
jeash.display.Sprite.prototype.buttonMode = null;
jeash.display.Sprite.prototype.dropTarget = null;
jeash.display.Sprite.prototype.jeashCursorCallbackOver = null;
jeash.display.Sprite.prototype.jeashCursorCallbackOut = null;
jeash.display.Sprite.prototype.jeashDropTarget = null;
jeash.display.Sprite.prototype.startDrag = function(lockCenter,bounds) {
	if(this.GetStage() != null) this.GetStage().jeashStartDrag(this,lockCenter,bounds);
}
jeash.display.Sprite.prototype.stopDrag = function() {
	if(this.GetStage() != null) {
		this.GetStage().jeashStopDrag(this);
		var l = this.parent.jeashChildren.length - 1;
		var obj = this.GetStage();
		var _g1 = 0, _g = this.parent.jeashChildren.length;
		while(_g1 < _g) {
			var i = _g1++;
			var result = this.parent.jeashChildren[l - i].jeashGetObjectUnderPoint(new jeash.geom.Point(this.GetStage().jeashGetMouseX(),this.GetStage().jeashGetMouseY()));
			if(result != null) obj = result;
		}
		if(obj != this) this.jeashDropTarget = obj; else this.jeashDropTarget = this.GetStage();
	}
}
jeash.display.Sprite.prototype.jeashGetGraphics = function() {
	return this.jeashGraphics;
}
jeash.display.Sprite.prototype.jeashSetUseHandCursor = function(cursor) {
	if(cursor == this.useHandCursor) return cursor;
	if(this.jeashCursorCallbackOver != null) this.removeEventListener(jeash.events.MouseEvent.ROLL_OVER,this.jeashCursorCallbackOver);
	if(this.jeashCursorCallbackOut != null) this.removeEventListener(jeash.events.MouseEvent.ROLL_OUT,this.jeashCursorCallbackOut);
	if(!cursor) jeash.Lib.jeashSetCursor(false); else {
		this.jeashCursorCallbackOver = function(_) {
			jeash.Lib.jeashSetCursor(true);
		};
		this.jeashCursorCallbackOut = function(_) {
			jeash.Lib.jeashSetCursor(false);
		};
		this.addEventListener(jeash.events.MouseEvent.ROLL_OVER,this.jeashCursorCallbackOver);
		this.addEventListener(jeash.events.MouseEvent.ROLL_OUT,this.jeashCursorCallbackOut);
	}
	this.useHandCursor = cursor;
	return cursor;
}
jeash.display.Sprite.prototype.jeashGetDropTarget = function() {
	return this.jeashDropTarget;
}
jeash.display.Sprite.prototype.__class__ = jeash.display.Sprite;
Test = function(p) {
	if( p === $_ ) return;
	jeash.display.Sprite.call(this);
	this.space = new nape.space.Space(new nape.geom.Vec2(0,600));
	var border = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
		return $r;
	}(this)));
	border.zpp_inner.wrap_shapes.add(new nape.shape.Polygon(nape.shape.Polygon.rect(0,Main.STAGE_HEIGHT - 20,Main.STAGE_WIDTH,20,null)));
	border.zpp_inner.wrap_shapes.add(new nape.shape.Polygon(nape.shape.Polygon.rect(0,0,20,Main.STAGE_HEIGHT,null)));
	border.zpp_inner.wrap_shapes.add(new nape.shape.Polygon(nape.shape.Polygon.rect(Main.STAGE_WIDTH - 20,0,20,Main.STAGE_HEIGHT,null)));
	border.flibset_space(this.space);
	this.debug = new nape.util.ShapeDebug(800,600,13421772);
	this.debug.drawShapeAngleIndicators = false;
	this.addChild(this.debug.zpp_inner.d_shape.shape);
	jeash.Lib.jeashGetCurrent().addEventListener(jeash.events.Event.ENTER_FRAME,$closure(this,"enterFrame"));
	jeash.Lib.jeashGetCurrent().GetStage().addEventListener(jeash.events.MouseEvent.MOUSE_DOWN,$closure(this,"mdown"));
}
Test.__name__ = ["Test"];
Test.__super__ = jeash.display.Sprite;
for(var k in jeash.display.Sprite.prototype ) Test.prototype[k] = jeash.display.Sprite.prototype[k];
Test.prototype.space = null;
Test.prototype.debug = null;
Test.prototype.mdown = function(e) {
	var _g = 0;
	while(_g < 30) {
		var i = _g++;
		var _x = Std.random(jeash.Lib.jeashGetCurrent().GetStage().jeashGetStageWidth());
		var _y = Std["int"](e.localY);
		var _w = 10 + Std.random(50);
		var _h = 10 + Std.random(50);
		var b = new nape.phys.Body((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
			return $r;
		}(this)));
		b.zpp_inner.wrap_shapes.add(new nape.shape.Polygon((function($this) {
			var $r;
			if(_w != _w || _h != _h) throw "Error: Polygon.box cannot accept NaN arguments";
			$r = nape.shape.Polygon.rect(-_w / 2,-_h / 2,_w,_h,false);
			return $r;
		}(this))));
		((function($this) {
			var $r;
			if(b.zpp_inner.wrap_pos == null) b.zpp_inner.setupPosition();
			$r = b.zpp_inner.wrap_pos;
			return $r;
		}(this))).setxy(_x,_y);
		b.flibset_space(this.space);
		var sp = new jeash.display.Sprite();
		sp.jeashGetGraphics().lineStyle(1,65535);
		sp.jeashGetGraphics().beginFill(0);
		sp.jeashGetGraphics().drawRect(-_w * 0.5,-_h * 0.5,_w,_h);
		sp.jeashGetGraphics().endFill();
		this.addChild(sp);
		if(b.zpp_inner.world) throw "Error: Space::world is immutable";
		if(sp != b.zpp_inner.graphic) {
			if(sp == null) {
				b.zpp_inner.hasgraphic = false;
				b.zpp_inner.graphic = null;
			} else {
				b.zpp_inner.hasgraphic = true;
				b.zpp_inner.graphic = sp;
				b.zpp_inner.validate_graphic();
			}
		}
		b.zpp_inner.graphic;
	}
}
Test.prototype.enterFrame = function(e) {
	this.debug.clear();
	this.space.step(1 / 60,5,5);
	this.debug.draw(this.space);
	this.debug.flush();
}
Test.prototype.__class__ = Test;
if(typeof haxe=='undefined') haxe = {}
if(!haxe.xml) haxe.xml = {}
haxe.xml.Filter = { __ename__ : ["haxe","xml","Filter"], __constructs__ : ["FInt","FBool","FEnum","FReg"] }
haxe.xml.Filter.FInt = ["FInt",0];
haxe.xml.Filter.FInt.toString = $estr;
haxe.xml.Filter.FInt.__enum__ = haxe.xml.Filter;
haxe.xml.Filter.FBool = ["FBool",1];
haxe.xml.Filter.FBool.toString = $estr;
haxe.xml.Filter.FBool.__enum__ = haxe.xml.Filter;
haxe.xml.Filter.FEnum = function(values) { var $x = ["FEnum",2,values]; $x.__enum__ = haxe.xml.Filter; $x.toString = $estr; return $x; }
haxe.xml.Filter.FReg = function(matcher) { var $x = ["FReg",3,matcher]; $x.__enum__ = haxe.xml.Filter; $x.toString = $estr; return $x; }
haxe.xml.Attrib = { __ename__ : ["haxe","xml","Attrib"], __constructs__ : ["Att"] }
haxe.xml.Attrib.Att = function(name,filter,defvalue) { var $x = ["Att",0,name,filter,defvalue]; $x.__enum__ = haxe.xml.Attrib; $x.toString = $estr; return $x; }
haxe.xml.Rule = { __ename__ : ["haxe","xml","Rule"], __constructs__ : ["RNode","RData","RMulti","RList","RChoice","ROptional"] }
haxe.xml.Rule.RNode = function(name,attribs,childs) { var $x = ["RNode",0,name,attribs,childs]; $x.__enum__ = haxe.xml.Rule; $x.toString = $estr; return $x; }
haxe.xml.Rule.RData = function(filter) { var $x = ["RData",1,filter]; $x.__enum__ = haxe.xml.Rule; $x.toString = $estr; return $x; }
haxe.xml.Rule.RMulti = function(rule,atLeastOne) { var $x = ["RMulti",2,rule,atLeastOne]; $x.__enum__ = haxe.xml.Rule; $x.toString = $estr; return $x; }
haxe.xml.Rule.RList = function(rules,ordered) { var $x = ["RList",3,rules,ordered]; $x.__enum__ = haxe.xml.Rule; $x.toString = $estr; return $x; }
haxe.xml.Rule.RChoice = function(choices) { var $x = ["RChoice",4,choices]; $x.__enum__ = haxe.xml.Rule; $x.toString = $estr; return $x; }
haxe.xml.Rule.ROptional = function(rule) { var $x = ["ROptional",5,rule]; $x.__enum__ = haxe.xml.Rule; $x.toString = $estr; return $x; }
if(!haxe.xml._Check) haxe.xml._Check = {}
haxe.xml._Check.CheckResult = { __ename__ : ["haxe","xml","_Check","CheckResult"], __constructs__ : ["CMatch","CMissing","CExtra","CElementExpected","CDataExpected","CExtraAttrib","CMissingAttrib","CInvalidAttrib","CInvalidData","CInElement"] }
haxe.xml._Check.CheckResult.CMatch = ["CMatch",0];
haxe.xml._Check.CheckResult.CMatch.toString = $estr;
haxe.xml._Check.CheckResult.CMatch.__enum__ = haxe.xml._Check.CheckResult;
haxe.xml._Check.CheckResult.CMissing = function(r) { var $x = ["CMissing",1,r]; $x.__enum__ = haxe.xml._Check.CheckResult; $x.toString = $estr; return $x; }
haxe.xml._Check.CheckResult.CExtra = function(x) { var $x = ["CExtra",2,x]; $x.__enum__ = haxe.xml._Check.CheckResult; $x.toString = $estr; return $x; }
haxe.xml._Check.CheckResult.CElementExpected = function(name,x) { var $x = ["CElementExpected",3,name,x]; $x.__enum__ = haxe.xml._Check.CheckResult; $x.toString = $estr; return $x; }
haxe.xml._Check.CheckResult.CDataExpected = function(x) { var $x = ["CDataExpected",4,x]; $x.__enum__ = haxe.xml._Check.CheckResult; $x.toString = $estr; return $x; }
haxe.xml._Check.CheckResult.CExtraAttrib = function(att,x) { var $x = ["CExtraAttrib",5,att,x]; $x.__enum__ = haxe.xml._Check.CheckResult; $x.toString = $estr; return $x; }
haxe.xml._Check.CheckResult.CMissingAttrib = function(att,x) { var $x = ["CMissingAttrib",6,att,x]; $x.__enum__ = haxe.xml._Check.CheckResult; $x.toString = $estr; return $x; }
haxe.xml._Check.CheckResult.CInvalidAttrib = function(att,x,f) { var $x = ["CInvalidAttrib",7,att,x,f]; $x.__enum__ = haxe.xml._Check.CheckResult; $x.toString = $estr; return $x; }
haxe.xml._Check.CheckResult.CInvalidData = function(x,f) { var $x = ["CInvalidData",8,x,f]; $x.__enum__ = haxe.xml._Check.CheckResult; $x.toString = $estr; return $x; }
haxe.xml._Check.CheckResult.CInElement = function(x,r) { var $x = ["CInElement",9,x,r]; $x.__enum__ = haxe.xml._Check.CheckResult; $x.toString = $estr; return $x; }
EReg = function(r,opt) {
	if( r === $_ ) return;
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
}
EReg.__name__ = ["EReg"];
EReg.prototype.r = null;
EReg.prototype.match = function(s) {
	this.r.m = this.r.exec(s);
	this.r.s = s;
	this.r.l = RegExp.leftContext;
	this.r.r = RegExp.rightContext;
	return this.r.m != null;
}
EReg.prototype.matched = function(n) {
	return this.r.m != null && n >= 0 && n < this.r.m.length?this.r.m[n]:(function($this) {
		var $r;
		throw "EReg::matched";
		return $r;
	}(this));
}
EReg.prototype.matchedLeft = function() {
	if(this.r.m == null) throw "No string matched";
	if(this.r.l == null) return this.r.s.substr(0,this.r.m.index);
	return this.r.l;
}
EReg.prototype.matchedRight = function() {
	if(this.r.m == null) throw "No string matched";
	if(this.r.r == null) {
		var sz = this.r.m.index + this.r.m[0].length;
		return this.r.s.substr(sz,this.r.s.length - sz);
	}
	return this.r.r;
}
EReg.prototype.matchedPos = function() {
	if(this.r.m == null) throw "No string matched";
	return { pos : this.r.m.index, len : this.r.m[0].length};
}
EReg.prototype.split = function(s) {
	var d = "#__delim__#";
	return s.replace(this.r,d).split(d);
}
EReg.prototype.replace = function(s,by) {
	return s.replace(this.r,by);
}
EReg.prototype.customReplace = function(s,f) {
	var buf = new StringBuf();
	while(true) {
		if(!this.match(s)) break;
		buf.add(this.matchedLeft());
		buf.add(f(this));
		s = this.matchedRight();
	}
	buf.b[buf.b.length] = s == null?"null":s;
	return buf.b.join("");
}
EReg.prototype.__class__ = EReg;
haxe.xml.Check = function() { }
haxe.xml.Check.__name__ = ["haxe","xml","Check"];
haxe.xml.Check.isBlank = function(x) {
	return x.nodeType == Xml.PCData && haxe.xml.Check.blanks.match(x.getNodeValue()) || x.nodeType == Xml.Comment;
}
haxe.xml.Check.filterMatch = function(s,f) {
	var $e = (f);
	switch( $e[1] ) {
	case 0:
		return haxe.xml.Check.filterMatch(s,haxe.xml.Filter.FReg(new EReg("[0-9]+","")));
	case 1:
		return haxe.xml.Check.filterMatch(s,haxe.xml.Filter.FEnum(["true","false","0","1"]));
	case 2:
		var values = $e[2];
		var _g = 0;
		while(_g < values.length) {
			var v = values[_g];
			++_g;
			if(s == v) return true;
		}
		return false;
	case 3:
		var r = $e[2];
		return r.match(s);
	}
}
haxe.xml.Check.isNullable = function(r) {
	var $e = (r);
	switch( $e[1] ) {
	case 2:
		var one = $e[3], r1 = $e[2];
		return one != true || haxe.xml.Check.isNullable(r1);
	case 3:
		var rl = $e[2];
		var _g = 0;
		while(_g < rl.length) {
			var r1 = rl[_g];
			++_g;
			if(!haxe.xml.Check.isNullable(r1)) return false;
		}
		return true;
	case 4:
		var rl = $e[2];
		var _g = 0;
		while(_g < rl.length) {
			var r1 = rl[_g];
			++_g;
			if(haxe.xml.Check.isNullable(r1)) return true;
		}
		return false;
	case 1:
		return false;
	case 0:
		return false;
	case 5:
		return true;
	}
}
haxe.xml.Check.check = function(x,r) {
	var $e = (r);
	switch( $e[1] ) {
	case 0:
		var childs = $e[4], attribs = $e[3], name = $e[2];
		if(x.nodeType != Xml.Element || x.getNodeName() != name) return haxe.xml._Check.CheckResult.CElementExpected(name,x);
		var attribs1 = attribs == null?new Array():attribs.copy();
		var $it0 = x.attributes();
		while( $it0.hasNext() ) {
			var xatt = $it0.next();
			var found = false;
			var _g = 0;
			while(_g < attribs1.length) {
				var att = attribs1[_g];
				++_g;
				var $e = (att);
				switch( $e[1] ) {
				case 0:
					var defvalue = $e[4], filter = $e[3], name1 = $e[2];
					if(xatt != name1) continue;
					if(filter != null && !haxe.xml.Check.filterMatch(x.get(xatt),filter)) return haxe.xml._Check.CheckResult.CInvalidAttrib(name1,x,filter);
					attribs1.remove(att);
					found = true;
					break;
				}
			}
			if(!found) return haxe.xml._Check.CheckResult.CExtraAttrib(xatt,x);
		}
		var _g = 0;
		while(_g < attribs1.length) {
			var att = attribs1[_g];
			++_g;
			var $e = (att);
			switch( $e[1] ) {
			case 0:
				var defvalue = $e[4], name1 = $e[2];
				if(defvalue == null) return haxe.xml._Check.CheckResult.CMissingAttrib(name1,x);
				break;
			}
		}
		if(childs == null) childs = haxe.xml.Rule.RList([]);
		var m = haxe.xml.Check.checkList(x.iterator(),childs);
		if(m != haxe.xml._Check.CheckResult.CMatch) return haxe.xml._Check.CheckResult.CInElement(x,m);
		var _g = 0;
		while(_g < attribs1.length) {
			var att = attribs1[_g];
			++_g;
			var $e = (att);
			switch( $e[1] ) {
			case 0:
				var defvalue = $e[4], name1 = $e[2];
				x.set(name1,defvalue);
				break;
			}
		}
		return haxe.xml._Check.CheckResult.CMatch;
	case 1:
		var filter = $e[2];
		if(x.nodeType != Xml.PCData && x.nodeType != Xml.CData) return haxe.xml._Check.CheckResult.CDataExpected(x);
		if(filter != null && !haxe.xml.Check.filterMatch(x.getNodeValue(),filter)) return haxe.xml._Check.CheckResult.CInvalidData(x,filter);
		return haxe.xml._Check.CheckResult.CMatch;
	case 4:
		var choices = $e[2];
		if(choices.length == 0) throw "No choice possible";
		var _g = 0;
		while(_g < choices.length) {
			var c = choices[_g];
			++_g;
			if(haxe.xml.Check.check(x,c) == haxe.xml._Check.CheckResult.CMatch) return haxe.xml._Check.CheckResult.CMatch;
		}
		return haxe.xml.Check.check(x,choices[0]);
	case 5:
		var r1 = $e[2];
		return haxe.xml.Check.check(x,r1);
	default:
		throw "Unexpected " + Std.string(r);
	}
}
haxe.xml.Check.checkList = function(it,r) {
	var $e = (r);
	switch( $e[1] ) {
	case 3:
		var ordered = $e[3], rules = $e[2];
		var rules1 = rules.copy();
		while( it.hasNext() ) {
			var x = it.next();
			if(haxe.xml.Check.isBlank(x)) continue;
			var found = false;
			var _g = 0;
			while(_g < rules1.length) {
				var r1 = rules1[_g];
				++_g;
				var m = haxe.xml.Check.checkList([x].iterator(),r1);
				if(m == haxe.xml._Check.CheckResult.CMatch) {
					found = true;
					var $e = (r1);
					switch( $e[1] ) {
					case 2:
						var one = $e[3], rsub = $e[2];
						if(one) {
							var i;
							var _g2 = 0, _g1 = rules1.length;
							while(_g2 < _g1) {
								var i1 = _g2++;
								if(rules1[i1] == r1) rules1[i1] = haxe.xml.Rule.RMulti(rsub);
							}
						}
						break;
					default:
						rules1.remove(r1);
					}
					break;
				} else if(ordered && !haxe.xml.Check.isNullable(r1)) return m;
			}
			if(!found) return haxe.xml._Check.CheckResult.CExtra(x);
		}
		var _g = 0;
		while(_g < rules1.length) {
			var r1 = rules1[_g];
			++_g;
			if(!haxe.xml.Check.isNullable(r1)) return haxe.xml._Check.CheckResult.CMissing(r1);
		}
		return haxe.xml._Check.CheckResult.CMatch;
	case 2:
		var one = $e[3], r1 = $e[2];
		var found = false;
		while( it.hasNext() ) {
			var x = it.next();
			if(haxe.xml.Check.isBlank(x)) continue;
			var m = haxe.xml.Check.checkList([x].iterator(),r1);
			if(m != haxe.xml._Check.CheckResult.CMatch) return m;
			found = true;
		}
		if(one && !found) return haxe.xml._Check.CheckResult.CMissing(r1);
		return haxe.xml._Check.CheckResult.CMatch;
	default:
		var found = false;
		while( it.hasNext() ) {
			var x = it.next();
			if(haxe.xml.Check.isBlank(x)) continue;
			var m = haxe.xml.Check.check(x,r);
			if(m != haxe.xml._Check.CheckResult.CMatch) return m;
			found = true;
			break;
		}
		if(!found) {
			switch( (r)[1] ) {
			case 5:
				break;
			default:
				return haxe.xml._Check.CheckResult.CMissing(r);
			}
		}
		while( it.hasNext() ) {
			var x = it.next();
			if(haxe.xml.Check.isBlank(x)) continue;
			return haxe.xml._Check.CheckResult.CExtra(x);
		}
		return haxe.xml._Check.CheckResult.CMatch;
	}
}
haxe.xml.Check.makeWhere = function(path) {
	if(path.length == 0) return "";
	var s = "In ";
	var first = true;
	var _g = 0;
	while(_g < path.length) {
		var x = path[_g];
		++_g;
		if(first) first = false; else s += ".";
		s += x.getNodeName();
	}
	return s + ": ";
}
haxe.xml.Check.makeString = function(x) {
	if(x.nodeType == Xml.Element) return "element " + x.getNodeName();
	var s = x.getNodeValue().split("\r").join("\\r").split("\n").join("\\n").split("\t").join("\\t");
	if(s.length > 20) return s.substr(0,17) + "...";
	return s;
}
haxe.xml.Check.makeRule = function(r) {
	var $e = (r);
	switch( $e[1] ) {
	case 0:
		var name = $e[2];
		return "element " + name;
	case 1:
		return "data";
	case 2:
		var r1 = $e[2];
		return haxe.xml.Check.makeRule(r1);
	case 3:
		var rules = $e[2];
		return haxe.xml.Check.makeRule(rules[0]);
	case 4:
		var choices = $e[2];
		return haxe.xml.Check.makeRule(choices[0]);
	case 5:
		var r1 = $e[2];
		return haxe.xml.Check.makeRule(r1);
	}
}
haxe.xml.Check.makeError = function(m,path) {
	if(path == null) path = new Array();
	var $e = (m);
	switch( $e[1] ) {
	case 0:
		throw "assert";
		break;
	case 1:
		var r = $e[2];
		return haxe.xml.Check.makeWhere(path) + "Missing " + haxe.xml.Check.makeRule(r);
	case 2:
		var x = $e[2];
		return haxe.xml.Check.makeWhere(path) + "Unexpected " + haxe.xml.Check.makeString(x);
	case 3:
		var x = $e[3], name = $e[2];
		return haxe.xml.Check.makeWhere(path) + haxe.xml.Check.makeString(x) + " while expected element " + name;
	case 4:
		var x = $e[2];
		return haxe.xml.Check.makeWhere(path) + haxe.xml.Check.makeString(x) + " while data expected";
	case 5:
		var x = $e[3], att = $e[2];
		path.push(x);
		return haxe.xml.Check.makeWhere(path) + "unexpected attribute " + att;
	case 6:
		var x = $e[3], att = $e[2];
		path.push(x);
		return haxe.xml.Check.makeWhere(path) + "missing required attribute " + att;
	case 7:
		var f = $e[4], x = $e[3], att = $e[2];
		path.push(x);
		return haxe.xml.Check.makeWhere(path) + "invalid attribute value for " + att;
	case 8:
		var f = $e[3], x = $e[2];
		return haxe.xml.Check.makeWhere(path) + "invalid data format for " + haxe.xml.Check.makeString(x);
	case 9:
		var m1 = $e[3], x = $e[2];
		path.push(x);
		return haxe.xml.Check.makeError(m1,path);
	}
}
haxe.xml.Check.checkNode = function(x,r) {
	var m = haxe.xml.Check.checkList([x].iterator(),r);
	if(m == haxe.xml._Check.CheckResult.CMatch) return;
	throw haxe.xml.Check.makeError(m);
}
haxe.xml.Check.checkDocument = function(x,r) {
	if(x.nodeType != Xml.Document) throw "Document expected";
	var m = haxe.xml.Check.checkList(x.iterator(),r);
	if(m == haxe.xml._Check.CheckResult.CMatch) return;
	throw haxe.xml.Check.makeError(m);
}
haxe.xml.Check.prototype.__class__ = haxe.xml.Check;
if(typeof nape=='undefined') nape = {}
if(!nape.callbacks) nape.callbacks = {}
nape.callbacks.CbType = function(p) {
	if( p === $_ ) return;
	if(zpp_nape.callbacks.ZPP_CbType.internal) return;
	if(zpp_nape.callbacks.ZPP_CbType.nextId == 65536) throw "Error: You have exceeded maximum allowed CbType's... wow";
	this.zpp_inner = new zpp_nape.callbacks.ZPP_CbType();
	this.zpp_inner.outer = this;
}
nape.callbacks.CbType.__name__ = ["nape","callbacks","CbType"];
nape.callbacks.CbType.DEFAULT = null;
nape.callbacks.CbType.flibget_DEFAULT = function() {
	return zpp_nape.callbacks.ZPP_CbType.DEFAULT.wrapper();
}
nape.callbacks.CbType.get = function(id) {
	if(id < 0 || id >= zpp_nape.callbacks.ZPP_CbType.nextId) throw "Error: CbType::get : Index out of bounds!";
	return zpp_nape.callbacks.ZPP_CbType.map[id].wrapper();
}
nape.callbacks.CbType.prototype.zpp_inner = null;
nape.callbacks.CbType.prototype.id = null;
nape.callbacks.CbType.prototype.flibget_id = function() {
	return this.zpp_inner.id;
}
nape.callbacks.CbType.prototype.userData = null;
nape.callbacks.CbType.prototype.shapes = null;
nape.callbacks.CbType.prototype.flibget_shapes = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_shapes == null) $this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get($this.zpp_inner.shapes,true);
		$r = $this.zpp_inner.wrap_shapes;
		return $r;
	}(this));
}
nape.callbacks.CbType.prototype.constraints = null;
nape.callbacks.CbType.prototype.flibget_constraints = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_constraints == null) $this.zpp_inner.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get($this.zpp_inner.constraints,true);
		$r = $this.zpp_inner.wrap_constraints;
		return $r;
	}(this));
}
nape.callbacks.CbType.prototype.bodies = null;
nape.callbacks.CbType.prototype.flibget_bodies = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_bodies == null) $this.zpp_inner.wrap_bodies = zpp_nape.util.ZPP_BodyList.get($this.zpp_inner.bodies,true);
		$r = $this.zpp_inner.wrap_bodies;
		return $r;
	}(this));
}
nape.callbacks.CbType.prototype.listeners = null;
nape.callbacks.CbType.prototype.flibget_listeners = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_listeners == null) $this.zpp_inner.wrap_listeners = zpp_nape.util.ZPP_ListenerList.get($this.zpp_inner.listeners,true);
		$r = $this.zpp_inner.wrap_listeners;
		return $r;
	}(this));
}
nape.callbacks.CbType.prototype.toString = function() {
	if(this.zpp_inner.id == 0) return "CbType(DEFAULT#0)"; else return "CbType(#" + this.zpp_inner.id + ")";
}
nape.callbacks.CbType.prototype.__class__ = nape.callbacks.CbType;
if(!nape.constraint) nape.constraint = {}
nape.constraint.Constraint = function(p) {
	if( p === $_ ) return;
	throw "Error: Constraint cannot be instantiated derp!";
}
nape.constraint.Constraint.__name__ = ["nape","constraint","Constraint"];
nape.constraint.Constraint.prototype.zpp_inner = null;
nape.constraint.Constraint.prototype.userData = null;
nape.constraint.Constraint.prototype.space = null;
nape.constraint.Constraint.prototype.flibget_space = function() {
	return this.zpp_inner.space == null?null:this.zpp_inner.space.outer;
}
nape.constraint.Constraint.prototype.flibset_space = function(space) {
	if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
		if(this.zpp_inner.component != null) this.zpp_inner.component.woken = false;
		this.zpp_inner.clearcache();
		if(this.zpp_inner.space != null) this.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(this);
		if(space != null) space.zpp_inner.wrap_constraints.add(this); else this.zpp_inner.space = null;
	}
	return this.zpp_inner.space == null?null:this.zpp_inner.space.outer;
}
nape.constraint.Constraint.prototype.isSleeping = null;
nape.constraint.Constraint.prototype.flibget_isSleeping = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.space == null || !$this.zpp_inner.active) throw "Error: isSleeping only makes sense if constraint is active and inside a space";
		$r = $this.zpp_inner.component.sleeping;
		return $r;
	}(this));
}
nape.constraint.Constraint.prototype.active = null;
nape.constraint.Constraint.prototype.flibget_active = function() {
	return this.zpp_inner.active;
}
nape.constraint.Constraint.prototype.flibset_active = function(active) {
	if(this.zpp_inner.active != active) {
		if(this.zpp_inner.component != null) this.zpp_inner.component.woken = false;
		this.zpp_inner.clearcache();
		if(active) {
			this.zpp_inner.active = active;
			this.zpp_inner.activate();
			if(this.zpp_inner.space != null) {
				if(this.zpp_inner.component != null) this.zpp_inner.component.sleeping = true;
				this.zpp_inner.space.wake_constraint(this.zpp_inner,true);
			}
		} else {
			if(this.zpp_inner.space != null) {
				this.zpp_inner.wake();
				this.zpp_inner.space.live_constraints.remove(this.zpp_inner);
			}
			this.zpp_inner.active = active;
			this.zpp_inner.deactivate();
		}
	}
	return this.zpp_inner.active;
}
nape.constraint.Constraint.prototype.ignore = null;
nape.constraint.Constraint.prototype.flibget_ignore = function() {
	return this.zpp_inner.ignore;
}
nape.constraint.Constraint.prototype.flibset_ignore = function(ignore) {
	if(this.zpp_inner.ignore != ignore) {
		this.zpp_inner.ignore = ignore;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.ignore;
}
nape.constraint.Constraint.prototype.stiff = null;
nape.constraint.Constraint.prototype.flibget_stiff = function() {
	return this.zpp_inner.stiff;
}
nape.constraint.Constraint.prototype.flibset_stiff = function(stiff) {
	if(this.zpp_inner.stiff != stiff) {
		this.zpp_inner.stiff = stiff;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.stiff;
}
nape.constraint.Constraint.prototype.frequency = null;
nape.constraint.Constraint.prototype.flibget_frequency = function() {
	return this.zpp_inner.frequency;
}
nape.constraint.Constraint.prototype.flibset_frequency = function(frequency) {
	if(frequency != frequency) throw "Error: Constraint::Frequency cannot be NaN";
	if(frequency <= 0) throw "Error: Constraint::Frequency must be >0";
	if(this.zpp_inner.frequency != frequency) {
		this.zpp_inner.frequency = frequency;
		if(!this.zpp_inner.stiff) this.zpp_inner.wake();
	}
	return this.zpp_inner.frequency;
}
nape.constraint.Constraint.prototype.damping = null;
nape.constraint.Constraint.prototype.flibget_damping = function() {
	return this.zpp_inner.damping;
}
nape.constraint.Constraint.prototype.flibset_damping = function(damping) {
	if(damping != damping) throw "Error: Constraint::Damping cannot be Nan";
	if(damping < 0) throw "Error: Constraint::Damping must be >=0";
	if(this.zpp_inner.damping != damping) {
		this.zpp_inner.damping = damping;
		if(!this.zpp_inner.stiff) this.zpp_inner.wake();
	}
	return this.zpp_inner.damping;
}
nape.constraint.Constraint.prototype.maxForce = null;
nape.constraint.Constraint.prototype.flibget_maxForce = function() {
	return this.zpp_inner.maxForce;
}
nape.constraint.Constraint.prototype.flibset_maxForce = function(maxForce) {
	if(maxForce != maxForce) throw "Error: Constraint::maxForce cannot be NaN";
	if(maxForce < 0) throw "Error: Constraint::maxForce must be >=0";
	if(this.zpp_inner.maxForce != maxForce) {
		this.zpp_inner.maxForce = maxForce;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.maxForce;
}
nape.constraint.Constraint.prototype.maxError = null;
nape.constraint.Constraint.prototype.flibget_maxError = function() {
	return this.zpp_inner.maxError;
}
nape.constraint.Constraint.prototype.flibset_maxError = function(maxError) {
	if(maxError != maxError) throw "Error: Constraint::maxError cannot be NaN";
	if(maxError < 0) throw "Error: Constraint::maxError must be >=0";
	if(this.zpp_inner.maxError != maxError) {
		this.zpp_inner.maxError = maxError;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.maxError;
}
nape.constraint.Constraint.prototype.breakUnderForce = null;
nape.constraint.Constraint.prototype.flibget_breakUnderForce = function() {
	return this.zpp_inner.breakUnderForce;
}
nape.constraint.Constraint.prototype.flibset_breakUnderForce = function(breakUnderForce) {
	if(this.zpp_inner.breakUnderForce != breakUnderForce) {
		this.zpp_inner.breakUnderForce = breakUnderForce;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.breakUnderForce;
}
nape.constraint.Constraint.prototype.breakUnderError = null;
nape.constraint.Constraint.prototype.flibget_breakUnderError = function() {
	return this.zpp_inner.breakUnderError;
}
nape.constraint.Constraint.prototype.flibset_breakUnderError = function(breakUnderError) {
	if(this.zpp_inner.breakUnderError != breakUnderError) {
		this.zpp_inner.breakUnderError = breakUnderError;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.breakUnderError;
}
nape.constraint.Constraint.prototype.removeOnBreak = null;
nape.constraint.Constraint.prototype.flibget_removeOnBreak = function() {
	return this.zpp_inner.removeOnBreak;
}
nape.constraint.Constraint.prototype.flibset_removeOnBreak = function(removeOnBreak) {
	this.zpp_inner.removeOnBreak = removeOnBreak;
	return this.zpp_inner.removeOnBreak;
}
nape.constraint.Constraint.prototype.impulse = function() {
	return null;
}
nape.constraint.Constraint.prototype.bodyImpulse = function(body) {
	return null;
}
nape.constraint.Constraint.prototype.cbType = null;
nape.constraint.Constraint.prototype.flibget_cbType = function() {
	return this.zpp_inner.cbType.wrapper();
}
nape.constraint.Constraint.prototype.flibset_cbType = function(cbType) {
	if(cbType == null) throw "Error: Cannot assign null CbType to Constraint";
	this.zpp_inner.setCbType(cbType.zpp_inner);
	return this.zpp_inner.cbType.wrapper();
}
nape.constraint.Constraint.prototype.toString = function() {
	return "{Constraint}";
}
nape.constraint.Constraint.prototype.__class__ = nape.constraint.Constraint;
nape.constraint.PivotJoint = function(body1,body2,anchor1,anchor2) {
	if( body1 === $_ ) return;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_PivotJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	if(body1 == null) throw "Error: Constraint::" + "body1" + " cannot be null";
	if(body1.zpp_inner != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = body1.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != body1.zpp_inner) body1.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body1.zpp_inner.wake();
	}
	if(this.zpp_inner_zn.b1 == null) null; else this.zpp_inner_zn.b1.outer;
	if(body2 == null) throw "Error: Constraint::" + "body2" + " cannot be null";
	if(body2.zpp_inner != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = body2.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != body2.zpp_inner) body2.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body2.zpp_inner.wake();
	}
	if(this.zpp_inner_zn.b2 == null) null; else this.zpp_inner_zn.b2.outer;
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	{
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		this.zpp_inner_zn.wrap_a1;
	}
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	{
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		this.zpp_inner_zn.wrap_a2;
	}
}
nape.constraint.PivotJoint.__name__ = ["nape","constraint","PivotJoint"];
nape.constraint.PivotJoint.__super__ = nape.constraint.Constraint;
for(var k in nape.constraint.Constraint.prototype ) nape.constraint.PivotJoint.prototype[k] = nape.constraint.Constraint.prototype[k];
nape.constraint.PivotJoint.prototype.zpp_inner_zn = null;
nape.constraint.PivotJoint.prototype.body1 = null;
nape.constraint.PivotJoint.prototype.flibget_body1 = function() {
	return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
}
nape.constraint.PivotJoint.prototype.flibset_body1 = function(body1) {
	if(body1 == null) throw "Error: Constraint::" + "body1" + " cannot be null";
	if(body1.zpp_inner != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = body1.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != body1.zpp_inner) body1.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body1.zpp_inner.wake();
	}
	return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
}
nape.constraint.PivotJoint.prototype.body2 = null;
nape.constraint.PivotJoint.prototype.flibget_body2 = function() {
	return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
}
nape.constraint.PivotJoint.prototype.flibset_body2 = function(body2) {
	if(body2 == null) throw "Error: Constraint::" + "body2" + " cannot be null";
	if(body2.zpp_inner != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = body2.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != body2.zpp_inner) body2.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body2.zpp_inner.wake();
	}
	return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
}
nape.constraint.PivotJoint.prototype.anchor1 = null;
nape.constraint.PivotJoint.prototype.flibget_anchor1 = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this));
}
nape.constraint.PivotJoint.prototype.flibset_anchor1 = function(anchor1) {
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this));
}
nape.constraint.PivotJoint.prototype.anchor2 = null;
nape.constraint.PivotJoint.prototype.flibget_anchor2 = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this));
}
nape.constraint.PivotJoint.prototype.flibset_anchor2 = function(anchor2) {
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this));
}
nape.constraint.PivotJoint.prototype.impulse = function() {
	var ret = new nape.geom.MatMN(2,1);
	{
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx + this.zpp_inner_zn.pjAccx;
	}
	{
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy + this.zpp_inner_zn.pjAccy;
	}
	return ret;
}
nape.constraint.PivotJoint.prototype.bodyImpulse = function(body) {
	if(body == null) throw "Error: Cannot evaluate impulse on null body";
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
	if(!this.zpp_inner.active) return new nape.geom.Vec3(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
}
nape.constraint.PivotJoint.prototype.__class__ = nape.constraint.PivotJoint;
if(!zpp_nape.geom) zpp_nape.geom = {}
zpp_nape.geom.ZPP_Geom = function() { }
zpp_nape.geom.ZPP_Geom.__name__ = ["zpp_nape","geom","ZPP_Geom"];
zpp_nape.geom.ZPP_Geom.validateShape = function(s) {
	if(s.type == 1) s.polygon.validate_gaxi();
	if(s.zip_aabb) {
		if(s.body != null) {
			s.zip_aabb = false;
			if(s.type == 0) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
		}
	}
	if(s.zip_worldCOM) {
		if(s.body != null) {
			s.zip_worldCOM = false;
			if(s.zip_localCOM) {
				s.zip_localCOM = false;
				if(s.type == 1) s.polygon.__validate_localCOM();
				if(s.wrap_localCOM != null) {
					s.wrap_localCOM.zpp_inner.x = s.localCOMx;
					s.wrap_localCOM.zpp_inner.y = s.localCOMy;
				}
			}
			s.body.validate_axis();
			s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
			s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
			if(s.wrap_worldCOM != null) {
				s.wrap_worldCOM.zpp_inner.x = s.worldCOMx;
				s.wrap_worldCOM.zpp_inner.y = s.worldCOMy;
			}
		}
	}
}
zpp_nape.geom.ZPP_Geom.prototype.__class__ = zpp_nape.geom.ZPP_Geom;
nape.callbacks.ImmFlag = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ImmFlag" + " derp!";
}
nape.callbacks.ImmFlag.__name__ = ["nape","callbacks","ImmFlag"];
nape.callbacks.ImmFlag.ACCEPT = null;
nape.callbacks.ImmFlag.flibget_ACCEPT = function() {
	if(zpp_nape.util.ZPP_Flags.ImmFlag_ACCEPT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ImmFlag_ACCEPT = new nape.callbacks.ImmFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ImmFlag_ACCEPT;
}
nape.callbacks.ImmFlag.IGNORE = null;
nape.callbacks.ImmFlag.flibget_IGNORE = function() {
	if(zpp_nape.util.ZPP_Flags.ImmFlag_IGNORE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ImmFlag_IGNORE = new nape.callbacks.ImmFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ImmFlag_IGNORE;
}
nape.callbacks.ImmFlag.ACCEPT_ONCE = null;
nape.callbacks.ImmFlag.flibget_ACCEPT_ONCE = function() {
	if(zpp_nape.util.ZPP_Flags.ImmFlag_ACCEPT_ONCE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ImmFlag_ACCEPT_ONCE = new nape.callbacks.ImmFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ImmFlag_ACCEPT_ONCE;
}
nape.callbacks.ImmFlag.IGNORE_ONCE = null;
nape.callbacks.ImmFlag.flibget_IGNORE_ONCE = function() {
	if(zpp_nape.util.ZPP_Flags.ImmFlag_IGNORE_ONCE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ImmFlag_IGNORE_ONCE = new nape.callbacks.ImmFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ImmFlag_IGNORE_ONCE;
}
nape.callbacks.ImmFlag.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ImmFlag_ACCEPT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ImmFlag_ACCEPT = new nape.callbacks.ImmFlag();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ImmFlag_ACCEPT;
		return $r;
	}(this))) return "ACCEPT"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ImmFlag_IGNORE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ImmFlag_IGNORE = new nape.callbacks.ImmFlag();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ImmFlag_IGNORE;
		return $r;
	}(this))) return "IGNORE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ImmFlag_ACCEPT_ONCE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ImmFlag_ACCEPT_ONCE = new nape.callbacks.ImmFlag();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ImmFlag_ACCEPT_ONCE;
		return $r;
	}(this))) return "ACCEPT_ONCE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ImmFlag_IGNORE_ONCE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ImmFlag_IGNORE_ONCE = new nape.callbacks.ImmFlag();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ImmFlag_IGNORE_ONCE;
		return $r;
	}(this))) return "IGNORE_ONCE"; else return "";
}
nape.callbacks.ImmFlag.prototype.__class__ = nape.callbacks.ImmFlag;
nape.callbacks.ListenerType = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ListenerType" + " derp!";
}
nape.callbacks.ListenerType.__name__ = ["nape","callbacks","ListenerType"];
nape.callbacks.ListenerType.BODY = null;
nape.callbacks.ListenerType.flibget_BODY = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_BODY == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_BODY = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_BODY;
}
nape.callbacks.ListenerType.CONSTRAINT = null;
nape.callbacks.ListenerType.flibget_CONSTRAINT = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT;
}
nape.callbacks.ListenerType.INTERACTION = null;
nape.callbacks.ListenerType.flibget_INTERACTION = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION;
}
nape.callbacks.ListenerType.IMM = null;
nape.callbacks.ListenerType.flibget_IMM = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_IMM == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_IMM = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_IMM;
}
nape.callbacks.ListenerType.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ListenerType_BODY == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ListenerType_BODY = new nape.callbacks.ListenerType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ListenerType_BODY;
		return $r;
	}(this))) return "BODY"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = new nape.callbacks.ListenerType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT;
		return $r;
	}(this))) return "CONSTRAINT"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = new nape.callbacks.ListenerType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION;
		return $r;
	}(this))) return "INTERACTION"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ListenerType_IMM == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ListenerType_IMM = new nape.callbacks.ListenerType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ListenerType_IMM;
		return $r;
	}(this))) return "IMM"; else return "";
}
nape.callbacks.ListenerType.prototype.__class__ = nape.callbacks.ListenerType;
nape.callbacks.ListenerList = function(p) {
	if( p === $_ ) return;
	this.zpp_inner = new zpp_nape.util.ZPP_ListenerList();
	this.zpp_inner.outer = this;
}
nape.callbacks.ListenerList.__name__ = ["nape","callbacks","ListenerList"];
nape.callbacks.ListenerList.fromArray = function(array) {
	var ret = new nape.callbacks.ListenerList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.callbacks.ListenerList.prototype.zpp_inner = null;
nape.callbacks.ListenerList.prototype.length = null;
nape.callbacks.ListenerList.prototype.flibget_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.length;
	}
	return this.zpp_inner.user_length;
}
nape.callbacks.ListenerList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
}
nape.callbacks.ListenerList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.flibget_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.flibget_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.outer;
}
nape.callbacks.ListenerList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.callbacks.ListenerList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.callbacks.ListenerList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx = ret.outer;
	return retx;
}
nape.callbacks.ListenerList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx = ret.outer;
	return retx;
}
nape.callbacks.ListenerList.prototype.add = function(obj) {
	return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
}
nape.callbacks.ListenerList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret = (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var x = cx_ite.elt;
				if(x == obj.zpp_inner) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
}
nape.callbacks.ListenerList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
}
nape.callbacks.ListenerList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
}
nape.callbacks.ListenerList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.iterators == null) this.zpp_inner.iterators = new zpp_nape.util.ZNPList_ListenerIterator();
	return nape.callbacks.ListenerIterator.get(this);
}
nape.callbacks.ListenerList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.callbacks.ListenerList();
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_ListenerIterator();
		$r = nape.callbacks.ListenerIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Listener" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
}
nape.callbacks.ListenerList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var $it0 = (function($this) {
		var $r;
		xs.zpp_inner.valmod();
		if(xs.zpp_inner.iterators == null) xs.zpp_inner.iterators = new zpp_nape.util.ZNPList_ListenerIterator();
		$r = nape.callbacks.ListenerIterator.get(xs);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(!this.has(x)) if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
	}
}
nape.callbacks.ListenerList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_ListenerIterator();
		$r = nape.callbacks.ListenerIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		if(!fst) ret += ",";
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
}
nape.callbacks.ListenerList.prototype.__class__ = nape.callbacks.ListenerList;
nape.callbacks.ListenerIterator = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_ListenerList.internal) throw "Error: Cannot instantiate " + "Listener" + "Iterator derp!";
}
nape.callbacks.ListenerIterator.__name__ = ["nape","callbacks","ListenerIterator"];
nape.callbacks.ListenerIterator.zpp_pool = null;
nape.callbacks.ListenerIterator.get = function(list) {
	var ret = nape.callbacks.ListenerIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_ListenerList.internal = true;
		var ret = new nape.callbacks.ListenerIterator();
		zpp_nape.util.ZPP_ListenerList.internal = false;
		$r = ret;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.callbacks.ListenerIterator.zpp_pool;
		nape.callbacks.ListenerIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	list.zpp_inner.iterators.add(ret);
	return ret;
}
nape.callbacks.ListenerIterator.prototype.zpp_inner = null;
nape.callbacks.ListenerIterator.prototype.zpp_i = null;
nape.callbacks.ListenerIterator.prototype.zpp_critical = null;
nape.callbacks.ListenerIterator.prototype.zpp_next = null;
nape.callbacks.ListenerIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.flibget_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.callbacks.ListenerIterator.zpp_pool;
		nape.callbacks.ListenerIterator.zpp_pool = this;
		this.zpp_inner.zpp_inner.iterators.remove(this);
		return false;
	}
}
nape.callbacks.ListenerIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
}
nape.callbacks.ListenerIterator.prototype.__class__ = nape.callbacks.ListenerIterator;
nape.callbacks.Listener = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.callbacks.ZPP_Listener.internal) throw "Error: Cannot instantiate Listener derp!";
}
nape.callbacks.Listener.__name__ = ["nape","callbacks","Listener"];
nape.callbacks.Listener.prototype.zpp_inner = null;
nape.callbacks.Listener.prototype.type = null;
nape.callbacks.Listener.prototype.flibget_type = function() {
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ListenerType_BODY == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ListenerType_BODY = new nape.callbacks.ListenerType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ListenerType_BODY;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = new nape.callbacks.ListenerType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = new nape.callbacks.ListenerType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ListenerType_IMM == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ListenerType_IMM = new nape.callbacks.ListenerType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ListenerType_IMM;
		return $r;
	}(this))][this.zpp_inner.type];
}
nape.callbacks.Listener.prototype.event = null;
nape.callbacks.Listener.prototype.flibget_event = function() {
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
		return $r;
	}(this))][this.zpp_inner.event];
}
nape.callbacks.Listener.prototype.flibset_event = function(event) {
	if(event == null) throw "Error: Cannot set listener event type to null";
	if([(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
		return $r;
	}(this))][this.zpp_inner.event] != event) {
		var xevent = event == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
			return $r;
		}(this))?0:event == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
			return $r;
		}(this))?1:event == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
			return $r;
		}(this))?2:event == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
			return $r;
		}(this))?4:event == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
			return $r;
		}(this))?3:5;
		if(this.zpp_inner.type == 0) this.zpp_inner.body.swapEvent(xevent); else if(this.zpp_inner.type == 1) this.zpp_inner.constraint.swapEvent(xevent);
	}
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
		return $r;
	}(this))][this.zpp_inner.event];
}
nape.callbacks.Listener.prototype.space = null;
nape.callbacks.Listener.prototype.flibget_space = function() {
	return this.zpp_inner.space == null?null:this.zpp_inner.space.outer;
}
nape.callbacks.Listener.prototype.flibset_space = function(space) {
	if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
		if(this.zpp_inner.space != null) this.zpp_inner.space.remListener(this.zpp_inner);
		if(space != null) space.zpp_inner.addListener(this.zpp_inner); else this.zpp_inner.space = null;
	}
	return this.zpp_inner.space == null?null:this.zpp_inner.space.outer;
}
nape.callbacks.Listener.prototype.toString = function() {
	var event = ["BEGIN","ONGOING","END","WAKE","SLEEP","BREAK"][this.zpp_inner.type];
	if(this.zpp_inner.type == 0) {
		var body = this.zpp_inner.body;
		return "BodyListener{" + event + "::" + body.outer_zn.zpp_inner_zn.cbType.wrapper() + "}";
	} else if(this.zpp_inner.type == 1) {
		var con = this.zpp_inner.constraint;
		return "ConstraintListener{" + event + "::" + con.outer_zn.zpp_inner_zn.cbType.wrapper() + "}";
	} else return "???";
}
nape.callbacks.Listener.prototype.__class__ = nape.callbacks.Listener;
nape.callbacks.BodyListener = function(event,cbType,handler) {
	if( event === $_ ) return;
	zpp_nape.callbacks.ZPP_Listener.internal = true;
	nape.callbacks.Listener.call(this);
	zpp_nape.callbacks.ZPP_Listener.internal = false;
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this))) xevent = 3; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this))) xevent = 4; else throw "Error: cbEvent '" + (event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
		return $r;
	}(this))?"BEGIN":event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
		return $r;
	}(this))?"ONGOING":event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
		return $r;
	}(this))?"END":event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this))?"WAKE":event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this))?"SLEEP":event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
		return $r;
	}(this))?"BREAK":"") + "' is not a valid event type for a BodyListener";
	if(cbType == null) throw "Error: BodyListener cbType cannot be null";
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_BodyListener(xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.flibset_cbType(cbType);
}
nape.callbacks.BodyListener.__name__ = ["nape","callbacks","BodyListener"];
nape.callbacks.BodyListener.__super__ = nape.callbacks.Listener;
for(var k in nape.callbacks.Listener.prototype ) nape.callbacks.BodyListener.prototype[k] = nape.callbacks.Listener.prototype[k];
nape.callbacks.BodyListener.prototype.zpp_inner_zn = null;
nape.callbacks.BodyListener.prototype.cbType = null;
nape.callbacks.BodyListener.prototype.flibget_cbType = function() {
	return this.zpp_inner_zn.cbType.wrapper();
}
nape.callbacks.BodyListener.prototype.flibset_cbType = function(cbType) {
	if(cbType == null) throw "Error: Cannot assign null CbType to Listener";
	var body = this.zpp_inner_zn;
	if(body.cbType == null || body.cbType != cbType.zpp_inner) body.swapCbType(cbType.zpp_inner);
	return this.zpp_inner_zn.cbType.wrapper();
}
nape.callbacks.BodyListener.prototype.handler = null;
nape.callbacks.BodyListener.prototype.flibget_handler = function() {
	return this.zpp_inner_zn.handler;
}
nape.callbacks.BodyListener.prototype.flibset_handler = function(handler) {
	this.zpp_inner_zn.handler = handler;
	return this.zpp_inner_zn.handler;
}
nape.callbacks.BodyListener.prototype.__class__ = nape.callbacks.BodyListener;
nape.callbacks.ConstraintListener = function(event,cbType,handler) {
	if( event === $_ ) return;
	zpp_nape.callbacks.ZPP_Listener.internal = true;
	nape.callbacks.Listener.call(this);
	zpp_nape.callbacks.ZPP_Listener.internal = false;
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this))) xevent = 3; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this))) xevent = 4; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
		return $r;
	}(this))) xevent = 5; else throw "Error: cbEvent '" + (event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
		return $r;
	}(this))?"BEGIN":event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
		return $r;
	}(this))?"ONGOING":event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
		return $r;
	}(this))?"END":event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this))?"WAKE":event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this))?"SLEEP":event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
		return $r;
	}(this))?"BREAK":"") + "' is not a valid event type for a ConstraintListener";
	if(cbType == null) throw "Error: ConstraintListener cbType cannot be null";
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_ConstraintListener(xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.flibset_cbType(cbType);
}
nape.callbacks.ConstraintListener.__name__ = ["nape","callbacks","ConstraintListener"];
nape.callbacks.ConstraintListener.__super__ = nape.callbacks.Listener;
for(var k in nape.callbacks.Listener.prototype ) nape.callbacks.ConstraintListener.prototype[k] = nape.callbacks.Listener.prototype[k];
nape.callbacks.ConstraintListener.prototype.zpp_inner_zn = null;
nape.callbacks.ConstraintListener.prototype.cbType = null;
nape.callbacks.ConstraintListener.prototype.flibget_cbType = function() {
	return this.zpp_inner_zn.cbType.wrapper();
}
nape.callbacks.ConstraintListener.prototype.flibset_cbType = function(cbType) {
	if(cbType == null) throw "Error: Cannot assign null CbType to Listener";
	var con = this.zpp_inner_zn;
	if(con.cbType == null || con.cbType != cbType.zpp_inner) con.swapCbType(cbType.zpp_inner);
	return this.zpp_inner_zn.cbType.wrapper();
}
nape.callbacks.ConstraintListener.prototype.handler = null;
nape.callbacks.ConstraintListener.prototype.flibget_handler = function() {
	return this.zpp_inner_zn.handler;
}
nape.callbacks.ConstraintListener.prototype.flibset_handler = function(handler) {
	this.zpp_inner_zn.handler = handler;
	return this.zpp_inner_zn.handler;
}
nape.callbacks.ConstraintListener.prototype.__class__ = nape.callbacks.ConstraintListener;
jeash.events.Listener = function(inListener,inUseCapture,inPriority) {
	if( inListener === $_ ) return;
	this.mListner = inListener;
	this.mUseCapture = inUseCapture;
	this.mPriority = inPriority;
	this.mID = jeash.events.Listener.sIDs++;
}
jeash.events.Listener.__name__ = ["jeash","events","Listener"];
jeash.events.Listener.prototype.mListner = null;
jeash.events.Listener.prototype.mUseCapture = null;
jeash.events.Listener.prototype.mPriority = null;
jeash.events.Listener.prototype.mID = null;
jeash.events.Listener.prototype.Is = function(inListener,inCapture) {
	return Reflect.compareMethods(this.mListner,inListener) && this.mUseCapture == inCapture;
}
jeash.events.Listener.prototype.dispatchEvent = function(event) {
	this.mListner(event);
}
jeash.events.Listener.prototype.__class__ = jeash.events.Listener;
if(!jeash.text) jeash.text = {}
jeash.text.Font = function(p) {
	if( p === $_ ) return;
	this.jeashMetrics = [];
	this.jeashFontScale = 9.0;
	var className = Type.getClassName(Type.getClass(this));
	if(jeash.text.Font.jeashFontData == null) {
		jeash.text.Font.jeashFontData = [];
		jeash.text.Font.jeashFontData["Bitstream_Vera_Sans"] = jeash.text.Font.DEFAULT_FONT_DATA;
	}
	this.jeashSetFontName(className == "jeash.text.Font"?"Bitstream_Vera_Sans":className.split(".").pop());
}
jeash.text.Font.__name__ = ["jeash","text","Font"];
jeash.text.Font.jeashFontData = null;
jeash.text.Font.enumerateFonts = function(enumerateDeviceFonts) {
	var sans = new jeash.text.Font();
	sans.jeashSetFontName("Bitstream_Vera_Sans");
	sans.fontStyle = jeash.text.FontStyle.REGULAR;
	sans.fontType = jeash.text.FontType.DEVICE;
	return [sans];
}
jeash.text.Font.registerFont = function(font) {
}
jeash.text.Font.jeashOfResource = function(name) {
	var data = haxe.Resource.getString(name);
	if(data == null) throw "Resource data for string '" + name + "' not found.";
	jeash.text.Font.jeashFontData[name] = haxe.Resource.getString(name);
}
jeash.text.Font.prototype.fontName = null;
jeash.text.Font.prototype.fontStyle = null;
jeash.text.Font.prototype.fontType = null;
jeash.text.Font.prototype.jeashMetrics = null;
jeash.text.Font.prototype.jeashGlyphData = null;
jeash.text.Font.prototype.jeashFontScale = null;
jeash.text.Font.prototype.hasGlyph = function() {
	return false;
}
jeash.text.Font.prototype.jeashSetScale = function(scale) {
	this.jeashFontScale = scale / 1024;
}
jeash.text.Font.prototype.jeashGetAdvance = function(inGlyph,height) {
	var m = this.jeashMetrics[inGlyph];
	if(m == null) this.jeashMetrics[inGlyph] = m = Std["int"](this.jeashGlyphData.get(inGlyph)._width * this.jeashFontScale);
	if(m == null) return 0;
	return m;
}
jeash.text.Font.prototype.jeashRender = function(graphics,inChar,inX,inY,inOutline) {
	var index = 0;
	var glyph = this.jeashGlyphData.get(inChar);
	var commands = glyph.commands;
	var data = glyph.data;
	var _g = 0;
	while(_g < commands.length) {
		var c = commands[_g];
		++_g;
		switch(c) {
		case 1:
			graphics.moveTo(inX + data[index++] * this.jeashFontScale,inY + data[index++] * this.jeashFontScale);
			break;
		case 2:
			graphics.lineTo(inX + data[index++] * this.jeashFontScale,inY + data[index++] * this.jeashFontScale);
			break;
		case 3:
			graphics.curveTo(inX + data[index++] * this.jeashFontScale,inY + data[index++] * this.jeashFontScale,inX + data[index++] * this.jeashFontScale,inY + data[index++] * this.jeashFontScale);
			break;
		}
	}
}
jeash.text.Font.prototype.jeashSetFontName = function(name) {
	this.fontName = name;
	if(jeash.text.Font.jeashFontData[this.fontName] == null) try {
		jeash.text.Font.jeashOfResource(name);
	} catch( e ) {
		jeash.Lib.trace("Glyph data for font '" + name + "' does not exist, defaulting to '" + "Bitstream_Vera_Sans" + "'.");
		this.fontName = "Bitstream_Vera_Sans";
	}
	this.jeashGlyphData = haxe.Unserializer.run(jeash.text.Font.jeashFontData[this.fontName]);
	return name;
}
jeash.text.Font.prototype.__class__ = jeash.text.Font;
jeash.text.TextFormatAlign = { __ename__ : ["jeash","text","TextFormatAlign"], __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] }
jeash.text.TextFormatAlign.LEFT = ["LEFT",0];
jeash.text.TextFormatAlign.LEFT.toString = $estr;
jeash.text.TextFormatAlign.LEFT.__enum__ = jeash.text.TextFormatAlign;
jeash.text.TextFormatAlign.RIGHT = ["RIGHT",1];
jeash.text.TextFormatAlign.RIGHT.toString = $estr;
jeash.text.TextFormatAlign.RIGHT.__enum__ = jeash.text.TextFormatAlign;
jeash.text.TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
jeash.text.TextFormatAlign.JUSTIFY.toString = $estr;
jeash.text.TextFormatAlign.JUSTIFY.__enum__ = jeash.text.TextFormatAlign;
jeash.text.TextFormatAlign.CENTER = ["CENTER",3];
jeash.text.TextFormatAlign.CENTER.toString = $estr;
jeash.text.TextFormatAlign.CENTER.__enum__ = jeash.text.TextFormatAlign;
if(!nape.geom) nape.geom = {}
nape.geom.MatMN = function(rows,cols) {
	if( rows === $_ ) return;
	if(rows <= 0 || cols <= 0) throw "Error: MatMN::dimensions cannot be < 1";
	this.zpp_inner = new zpp_nape.geom.ZPP_MatMN(rows,cols);
	this.zpp_inner.outer = this;
}
nape.geom.MatMN.__name__ = ["nape","geom","MatMN"];
nape.geom.MatMN.prototype.zpp_inner = null;
nape.geom.MatMN.prototype.rows = null;
nape.geom.MatMN.prototype.flibget_rows = function() {
	return this.zpp_inner.m;
}
nape.geom.MatMN.prototype.cols = null;
nape.geom.MatMN.prototype.flibget_cols = function() {
	return this.zpp_inner.n;
}
nape.geom.MatMN.prototype.x = function(row,col) {
	if(row < 0 || col < 0 || row >= this.zpp_inner.m || col >= this.zpp_inner.n) throw "Error: MatMN indices out of range";
	return this.zpp_inner.x[row * this.zpp_inner.n + col];
}
nape.geom.MatMN.prototype.setx = function(row,col,x) {
	if(row < 0 || col < 0 || row >= this.zpp_inner.m || col >= this.zpp_inner.n) throw "Error: MatMN indices out of range";
	return this.zpp_inner.x[row * this.zpp_inner.n + col] = x;
}
nape.geom.MatMN.prototype.toString = function() {
	var ret = "{ ";
	var fst = true;
	var _g1 = 0, _g = this.zpp_inner.m;
	while(_g1 < _g) {
		var i = _g1++;
		if(!fst) ret += "; ";
		fst = false;
		var _g3 = 0, _g2 = this.zpp_inner.n;
		while(_g3 < _g2) {
			var j = _g3++;
			ret += (function($this) {
				var $r;
				if(i < 0 || j < 0 || i >= $this.zpp_inner.m || j >= $this.zpp_inner.n) throw "Error: MatMN indices out of range";
				$r = $this.zpp_inner.x[i * $this.zpp_inner.n + j];
				return $r;
			}(this)) + " ";
		}
	}
	ret += "}";
	return ret;
}
nape.geom.MatMN.prototype.transpose = function() {
	var ret = new nape.geom.MatMN(this.zpp_inner.n,this.zpp_inner.m);
	var _g1 = 0, _g = this.zpp_inner.m;
	while(_g1 < _g) {
		var i = _g1++;
		var _g3 = 0, _g2 = this.zpp_inner.n;
		while(_g3 < _g2) {
			var j = _g3++;
			{
				if(j < 0 || i < 0 || j >= ret.zpp_inner.m || i >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
				ret.zpp_inner.x[j * ret.zpp_inner.n + i] = (function($this) {
					var $r;
					if(i < 0 || j < 0 || i >= $this.zpp_inner.m || j >= $this.zpp_inner.n) throw "Error: MatMN indices out of range";
					$r = $this.zpp_inner.x[i * $this.zpp_inner.n + j];
					return $r;
				}(this));
			}
		}
	}
	return ret;
}
nape.geom.MatMN.prototype.mul = function(y) {
	if(this.zpp_inner.n != y.zpp_inner.m) throw "Error: Matrix dimensions aren't compatible";
	var ret = new nape.geom.MatMN(this.zpp_inner.m,y.zpp_inner.n);
	var _g1 = 0, _g = this.zpp_inner.m;
	while(_g1 < _g) {
		var i = _g1++;
		var _g3 = 0, _g2 = y.zpp_inner.n;
		while(_g3 < _g2) {
			var j = _g3++;
			var v = 0.0;
			var _g5 = 0, _g4 = this.zpp_inner.n;
			while(_g5 < _g4) {
				var k = _g5++;
				v += (function($this) {
					var $r;
					if(i < 0 || k < 0 || i >= $this.zpp_inner.m || k >= $this.zpp_inner.n) throw "Error: MatMN indices out of range";
					$r = $this.zpp_inner.x[i * $this.zpp_inner.n + k];
					return $r;
				}(this)) * (function($this) {
					var $r;
					if(k < 0 || j < 0 || k >= y.zpp_inner.m || j >= y.zpp_inner.n) throw "Error: MatMN indices out of range";
					$r = y.zpp_inner.x[k * y.zpp_inner.n + j];
					return $r;
				}(this));
			}
			{
				if(i < 0 || j < 0 || i >= ret.zpp_inner.m || j >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
				ret.zpp_inner.x[i * ret.zpp_inner.n + j] = v;
			}
		}
	}
	return ret;
}
nape.geom.MatMN.prototype.__class__ = nape.geom.MatMN;
if(!jeash.geom) jeash.geom = {}
jeash.geom.Matrix = function(in_a,in_b,in_c,in_d,in_tx,in_ty) {
	if( in_a === $_ ) return;
	this.a = in_a == null?1.0:in_a;
	this.b = in_b == null?0.0:in_b;
	this.c = in_c == null?0.0:in_c;
	this.d = in_d == null?1.0:in_d;
	this.tx = in_tx == null?0.0:in_tx;
	this.ty = in_ty == null?0.0:in_ty;
}
jeash.geom.Matrix.__name__ = ["jeash","geom","Matrix"];
jeash.geom.Matrix.prototype.a = null;
jeash.geom.Matrix.prototype.b = null;
jeash.geom.Matrix.prototype.c = null;
jeash.geom.Matrix.prototype.d = null;
jeash.geom.Matrix.prototype.tx = null;
jeash.geom.Matrix.prototype.ty = null;
jeash.geom.Matrix.prototype.clone = function() {
	return new jeash.geom.Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
}
jeash.geom.Matrix.prototype.createGradientBox = function(in_width,in_height,rotation,in_tx,in_ty) {
	this.a = in_width / 1638.4;
	this.d = in_height / 1638.4;
	if(rotation != null && rotation != 0.0) {
		var cos = Math.cos(rotation);
		var sin = Math.sin(rotation);
		this.b = sin * this.d;
		this.c = -sin * this.a;
		this.a *= cos;
		this.d *= cos;
	} else this.b = this.c = 0;
	this.tx = in_tx != null?in_tx + in_width / 2:in_width / 2;
	this.ty = in_ty != null?in_ty + in_height / 2:in_height / 2;
}
jeash.geom.Matrix.prototype.setRotation = function(inTheta,inScale) {
	var scale = inScale == null?1.0:inScale;
	this.a = Math.cos(inTheta) * scale;
	this.c = Math.sin(inTheta) * scale;
	this.b = -this.c;
	this.d = this.a;
}
jeash.geom.Matrix.prototype.invert = function() {
	var norm = this.a * this.d - this.b * this.c;
	if(norm == 0) {
		this.a = this.b = this.c = this.d = 0;
		this.tx = -this.tx;
		this.ty = -this.ty;
	} else {
		norm = 1.0 / norm;
		var a1 = this.d * norm;
		this.d = this.a * norm;
		this.a = a1;
		this.b *= -norm;
		this.c *= -norm;
		var tx1 = -this.a * this.tx - this.c * this.ty;
		this.ty = -this.b * this.tx - this.d * this.ty;
		this.tx = tx1;
	}
	return this;
}
jeash.geom.Matrix.prototype.transformPoint = function(inPos) {
	return new jeash.geom.Point(inPos.x * this.a + inPos.y * this.c + this.tx,inPos.x * this.b + inPos.y * this.d + this.ty);
}
jeash.geom.Matrix.prototype.translate = function(inDX,inDY) {
	this.tx += inDX;
	this.ty += inDY;
}
jeash.geom.Matrix.prototype.rotate = function(inTheta) {
	var cos = Math.cos(inTheta);
	var sin = Math.sin(inTheta);
	var a1 = this.a * cos - this.b * sin;
	this.b = this.a * sin + this.b * cos;
	this.a = a1;
	var c1 = this.c * cos - this.d * sin;
	this.d = this.c * sin + this.d * cos;
	this.c = c1;
	var tx1 = this.tx * cos - this.ty * sin;
	this.ty = this.tx * sin + this.ty * cos;
	this.tx = tx1;
}
jeash.geom.Matrix.prototype.scale = function(inSX,inSY) {
	this.a *= inSX;
	this.b *= inSY;
	this.c *= inSX;
	this.d *= inSY;
	this.tx *= inSX;
	this.ty *= inSY;
}
jeash.geom.Matrix.prototype.concat = function(m) {
	var a1 = this.a * m.a + this.b * m.c;
	this.b = this.a * m.b + this.b * m.d;
	this.a = a1;
	var c1 = this.c * m.a + this.d * m.c;
	this.d = this.c * m.b + this.d * m.d;
	this.c = c1;
	var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
	this.ty = this.tx * m.b + this.ty * m.d + m.ty;
	this.tx = tx1;
}
jeash.geom.Matrix.prototype.mult = function(m) {
	var result = new jeash.geom.Matrix();
	result.a = this.a * m.a + this.b * m.c;
	result.b = this.a * m.b + this.b * m.d;
	result.c = this.c * m.a + this.d * m.c;
	result.d = this.c * m.b + this.d * m.d;
	result.tx = this.tx * m.a + this.ty * m.c + m.tx;
	result.ty = this.tx * m.b + this.ty * m.d + m.ty;
	return result;
}
jeash.geom.Matrix.prototype.identity = function() {
	this.a = 1;
	this.b = 0;
	this.c = 0;
	this.d = 1;
	this.tx = 0;
	this.ty = 0;
}
jeash.geom.Matrix.prototype.toMozString = function() {
	return "matrix(" + this.a.toFixed(4) + ", " + this.b.toFixed(4) + ", " + this.c.toFixed(4) + ", " + this.d.toFixed(4) + ", " + this.tx.toFixed(4) + "px, " + this.ty.toFixed(4) + "px)";
}
jeash.geom.Matrix.prototype.toString = function() {
	return "matrix(" + this.a.toFixed(4) + ", " + this.b.toFixed(4) + ", " + this.c.toFixed(4) + ", " + this.d.toFixed(4) + ", " + this.tx.toFixed(4) + ", " + this.ty.toFixed(4) + ")";
}
jeash.geom.Matrix.prototype.__class__ = jeash.geom.Matrix;
Std = function() { }
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js.Boot.__instanceof(v,t);
}
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
}
Std["int"] = function(x) {
	if(x < 0) return Math.ceil(x);
	return Math.floor(x);
}
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && x.charCodeAt(1) == 120) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
}
Std.parseFloat = function(x) {
	return parseFloat(x);
}
Std.random = function(x) {
	return Math.floor(Math.random() * x);
}
Std.prototype.__class__ = Std;
if(typeof nme=='undefined') nme = {}
if(!nme.installer) nme.installer = {}
nme.installer.Assets = function() { }
nme.installer.Assets.__name__ = ["nme","installer","Assets"];
nme.installer.Assets.getBitmapData = function(id) {
	switch(id) {
	}
	return null;
}
nme.installer.Assets.getBytes = function(id) {
	switch(id) {
	}
	return null;
}
nme.installer.Assets.getFont = function(id) {
	switch(id) {
	}
	return null;
}
nme.installer.Assets.getSound = function(id) {
	switch(id) {
	}
	return null;
}
nme.installer.Assets.getText = function(id) {
	switch(id) {
	}
	return null;
}
nme.installer.Assets.prototype.__class__ = nme.installer.Assets;
jeash.display.IGraphicsFill = function() { }
jeash.display.IGraphicsFill.__name__ = ["jeash","display","IGraphicsFill"];
jeash.display.IGraphicsFill.prototype.jeashGraphicsFillType = null;
jeash.display.IGraphicsFill.prototype.__class__ = jeash.display.IGraphicsFill;
jeash.display.IGraphicsData = function() { }
jeash.display.IGraphicsData.__name__ = ["jeash","display","IGraphicsData"];
jeash.display.IGraphicsData.prototype.jeashGraphicsDataType = null;
jeash.display.IGraphicsData.prototype.__class__ = jeash.display.IGraphicsData;
jeash.display.GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if( type === $_ ) return;
	if(focalPointRatio == null) focalPointRatio = 0;
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.jeashGraphicsDataType = jeash.display.GraphicsDataType.GRADIENT;
	this.jeashGraphicsFillType = jeash.display.GraphicsFillType.GRADIENT_FILL;
}
jeash.display.GraphicsGradientFill.__name__ = ["jeash","display","GraphicsGradientFill"];
jeash.display.GraphicsGradientFill.prototype.alphas = null;
jeash.display.GraphicsGradientFill.prototype.colors = null;
jeash.display.GraphicsGradientFill.prototype.focalPointRatio = null;
jeash.display.GraphicsGradientFill.prototype.interpolationMethod = null;
jeash.display.GraphicsGradientFill.prototype.matrix = null;
jeash.display.GraphicsGradientFill.prototype.ratios = null;
jeash.display.GraphicsGradientFill.prototype.spreadMethod = null;
jeash.display.GraphicsGradientFill.prototype.type = null;
jeash.display.GraphicsGradientFill.prototype.jeashGraphicsDataType = null;
jeash.display.GraphicsGradientFill.prototype.jeashGraphicsFillType = null;
jeash.display.GraphicsGradientFill.prototype.__class__ = jeash.display.GraphicsGradientFill;
jeash.display.GraphicsGradientFill.__interfaces__ = [jeash.display.IGraphicsFill,jeash.display.IGraphicsData];
jeash.display.StageAlign = { __ename__ : ["jeash","display","StageAlign"], __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] }
jeash.display.StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
jeash.display.StageAlign.TOP_RIGHT.toString = $estr;
jeash.display.StageAlign.TOP_RIGHT.__enum__ = jeash.display.StageAlign;
jeash.display.StageAlign.TOP_LEFT = ["TOP_LEFT",1];
jeash.display.StageAlign.TOP_LEFT.toString = $estr;
jeash.display.StageAlign.TOP_LEFT.__enum__ = jeash.display.StageAlign;
jeash.display.StageAlign.TOP = ["TOP",2];
jeash.display.StageAlign.TOP.toString = $estr;
jeash.display.StageAlign.TOP.__enum__ = jeash.display.StageAlign;
jeash.display.StageAlign.RIGHT = ["RIGHT",3];
jeash.display.StageAlign.RIGHT.toString = $estr;
jeash.display.StageAlign.RIGHT.__enum__ = jeash.display.StageAlign;
jeash.display.StageAlign.LEFT = ["LEFT",4];
jeash.display.StageAlign.LEFT.toString = $estr;
jeash.display.StageAlign.LEFT.__enum__ = jeash.display.StageAlign;
jeash.display.StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
jeash.display.StageAlign.BOTTOM_RIGHT.toString = $estr;
jeash.display.StageAlign.BOTTOM_RIGHT.__enum__ = jeash.display.StageAlign;
jeash.display.StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
jeash.display.StageAlign.BOTTOM_LEFT.toString = $estr;
jeash.display.StageAlign.BOTTOM_LEFT.__enum__ = jeash.display.StageAlign;
jeash.display.StageAlign.BOTTOM = ["BOTTOM",7];
jeash.display.StageAlign.BOTTOM.toString = $estr;
jeash.display.StageAlign.BOTTOM.__enum__ = jeash.display.StageAlign;
if(!zpp_nape.phys) zpp_nape.phys = {}
zpp_nape.phys.ZPP_Body = function(p) {
	if( p === $_ ) return;
	this.world = false;
	this.norotate = this.nomove = false;
	this.gdeltax = 0;
	this.gdeltay = 0;
	this.grotdelta = 0;
	this.hasgraphic = false;
	this.posx = 0;
	this.posy = 0;
	this.rot = 0;
	this.axisx = 0;
	this.axisy = 1;
	this.svelx = 0;
	this.svely = 0;
	this.velx = 0;
	this.vely = 0;
	this.kinvelx = 0;
	this.kinvely = 0;
	this.forcex = 0;
	this.forcey = 0;
	this.torque = this.angvel = this.kinangvel = 0;
	this.pre_posx = Math.POSITIVE_INFINITY;
	this.pre_posy = Math.POSITIVE_INFINITY;
	this.pre_rot = Math.POSITIVE_INFINITY;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.id = zpp_nape.phys.ZPP_Body.nextId++;
	this.zip_aabb = true;
	this.aabb = zpp_nape.geom.ZPP_AABB.get(0,0,0,0);
	this.aabb.immutable = true;
	var me = this;
	this.aabb._validate = function() {
		if(me.shapes.head == null) throw "Error: bounds only makes sense when Body has Shapes";
		me.validate_aabb();
	};
	this.massMode = 0;
	this.gravMassMode = 0;
	this.gravMassScale = 1.0;
	this.inertiaMode = 0;
	this.arbiters = new zpp_nape.util.ZNPList_ZPP_Arbiter();
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.shapes,null);
	var me1 = this;
	this.wrap_shapes.zpp_inner.adder = function(s) {
		if(s.zpp_inner.body != me1) {
			if(s.zpp_inner.body != null) s.zpp_inner.body.wrap_shapes.remove(s);
			s.zpp_inner.body = me1;
			s.zpp_inner.addedToBody();
			if(me1.space != null) me1.space.added_shape(s.zpp_inner);
			return true;
		} else return false;
	};
	this.wrap_shapes.zpp_inner.subber = function(s) {
		if(me1.space != null) me1.space.removed_shape(s.zpp_inner);
		s.zpp_inner.body = null;
		null;
	};
	this.wrap_shapes.zpp_inner._invalidate = function(_) {
		{
			me1.zip_aabb = true;
			{
				me1.zip_localCOM = true;
				me1.zip_worldCOM = true;
			}
			{
				if(me1.massMode == 0) me1.zip_mass = true;
				{
					if(me1.gravMassMode != 1) me1.zip_gravMass = true;
					if(me1.gravMassMode != 2) me1.zip_gravMassScale = true;
					me1.wake();
				}
			}
			{
				if(me1.inertiaMode != 1) me1.zip_inertia = true;
				me1.wake();
			}
		}
	};
	this.wrap_shapes.zpp_inner._modifiable = function() {
		if(me1.type == 1 && me1.space != null) throw "Error: Cannot modifiy shapes of static object once added to Space";
	};
	this.cbType = zpp_nape.callbacks.ZPP_CbType.DEFAULT;
}
zpp_nape.phys.ZPP_Body.__name__ = ["zpp_nape","phys","ZPP_Body"];
zpp_nape.phys.ZPP_Body.__static = function() {
	var ret = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
		return $r;
	}(this)));
	var si = ret.zpp_inner;
	si.world = true;
	si.wrap_shapes.zpp_inner.immutable = true;
	si.smass = si.imass = si.cmass = si.mass = si.gravMass = 0.0;
	si.sinertia = si.iinertia = si.cinertia = si.inertia = 0.0;
	return ret;
}
zpp_nape.phys.ZPP_Body.prototype.outer = null;
zpp_nape.phys.ZPP_Body.prototype.world = null;
zpp_nape.phys.ZPP_Body.prototype.id = null;
zpp_nape.phys.ZPP_Body.prototype.type = null;
zpp_nape.phys.ZPP_Body.prototype.isStatic = function() {
	return this.type == 1;
}
zpp_nape.phys.ZPP_Body.prototype.isDynamic = function() {
	return this.type == 2;
}
zpp_nape.phys.ZPP_Body.prototype.isKinematic = function() {
	return this.type == 3;
}
zpp_nape.phys.ZPP_Body.prototype.invalidate_type = function() {
	{
		if(this.massMode == 0) this.zip_mass = true;
		{
			if(this.gravMassMode != 1) this.zip_gravMass = true;
			if(this.gravMassMode != 2) this.zip_gravMassScale = true;
			this.wake();
		}
	}
	{
		if(this.inertiaMode != 1) this.zip_inertia = true;
		this.wake();
	}
}
zpp_nape.phys.ZPP_Body.prototype.shapes = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_shapes = null;
zpp_nape.phys.ZPP_Body.prototype.invalidate_shapes = function() {
	this.zip_aabb = true;
	{
		this.zip_localCOM = true;
		this.zip_worldCOM = true;
	}
	{
		if(this.massMode == 0) this.zip_mass = true;
		{
			if(this.gravMassMode != 1) this.zip_gravMass = true;
			if(this.gravMassMode != 2) this.zip_gravMassScale = true;
			this.wake();
		}
	}
	{
		if(this.inertiaMode != 1) this.zip_inertia = true;
		this.wake();
	}
}
zpp_nape.phys.ZPP_Body.prototype.space = null;
zpp_nape.phys.ZPP_Body.prototype.arbiters = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_arbiters = null;
zpp_nape.phys.ZPP_Body.prototype.constraints = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_constraints = null;
zpp_nape.phys.ZPP_Body.prototype.component = null;
zpp_nape.phys.ZPP_Body.prototype.atRest = function(dt) {
	if(!(this.type == 2)) return this.component.sleeping; else {
		var cansleep = this.velx * this.velx + this.vely * this.vely > 0.2?false:(function($this) {
			var $r;
			var dx;
			var dy;
			{
				dx = $this.posx - $this.pre_posx;
				dy = $this.posy - $this.pre_posy;
			}
			$r = dx * dx + dy * dy;
			return $r;
		}(this)) > 0.05 * dt * dt?false:(function($this) {
			var $r;
			var dx;
			var dy;
			{
				dx = $this.aabb.maxx - $this.aabb.minx;
				dy = $this.aabb.maxy - $this.aabb.miny;
			}
			var idl = dx * dx + dy * dy;
			$r = 4 * $this.angvel * $this.angvel * idl > 0.4?false:(function($this) {
				var $r;
				var dr = $this.rot - $this.pre_rot;
				$r = dr * dr * idl > 0.4 * dt * dt?false:true;
				return $r;
			}($this));
			return $r;
		}(this));
		if(!cansleep) this.component.waket = this.space.stamp;
		return this.component.waket + 60 < this.space.stamp;
	}
}
zpp_nape.phys.ZPP_Body.prototype.wake = function() {
	return this.space != null?this.space.wake(this):false;
}
zpp_nape.phys.ZPP_Body.prototype.refreshArbiters = function() {
	var cx_ite = this.arbiters.head;
	while(cx_ite != null) {
		var arb = cx_ite.elt;
		arb.invalidated = true;
		cx_ite = cx_ite.next;
	}
}
zpp_nape.phys.ZPP_Body.prototype.pre_posx = null;
zpp_nape.phys.ZPP_Body.prototype.pre_posy = null;
zpp_nape.phys.ZPP_Body.prototype.posx = null;
zpp_nape.phys.ZPP_Body.prototype.posy = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_pos = null;
zpp_nape.phys.ZPP_Body.prototype.velx = null;
zpp_nape.phys.ZPP_Body.prototype.vely = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_vel = null;
zpp_nape.phys.ZPP_Body.prototype.forcex = null;
zpp_nape.phys.ZPP_Body.prototype.forcey = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_force = null;
zpp_nape.phys.ZPP_Body.prototype.kinvelx = null;
zpp_nape.phys.ZPP_Body.prototype.kinvely = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_kinvel = null;
zpp_nape.phys.ZPP_Body.prototype.svelx = null;
zpp_nape.phys.ZPP_Body.prototype.svely = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_svel = null;
zpp_nape.phys.ZPP_Body.prototype.invalidate_pos = function() {
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(s.type == 1) {
			s.polygon.invalidate_gverts();
			s.polygon.zip_gaxi = true;
		}
		{
			s.zip_worldCOM = true;
			{
				s.zip_aabb = true;
				if(s.body != null) s.body.zip_aabb = true;
			}
		}
		cx_ite = cx_ite.next;
	}
	this.zip_worldCOM = true;
	this.validate_graphic();
}
zpp_nape.phys.ZPP_Body.prototype.setupPosition = function() {
	var me = this;
	me.wrap_pos = nape.geom.Vec2.get(this.posx,this.posy,null);
	me.wrap_pos.zpp_inner.inuse = true;
	if(this.world) me.wrap_pos.zpp_inner.immutable = true; else {
		me.wrap_pos.zpp_inner._invalidate = function(pos) {
			if(me.type == 1 && me.space != null) throw "Error: Cannot move a static object once inside a Space";
			if(!(me.posx == pos.x && me.posy == pos.y)) {
				me.posx = pos.x;
				me.posy = pos.y;
				me.invalidate_pos();
				me.wake();
			}
		};
		me.wrap_pos.zpp_inner._validate = function() {
			me.wrap_pos.zpp_inner.x = me.posx;
			me.wrap_pos.zpp_inner.y = me.posy;
		};
	}
}
zpp_nape.phys.ZPP_Body.prototype.setupVelocity = function() {
	var me = this;
	me.wrap_vel = nape.geom.Vec2.get(this.velx,this.vely,null);
	me.wrap_vel.zpp_inner.inuse = true;
	if(this.world) me.wrap_vel.zpp_inner.immutable = true; else {
		me.wrap_vel.zpp_inner._invalidate = function(vel) {
			if(me.type == 1 && me.space != null) throw "Error: A static object within a space cannot be given a velocity";
			me.velx = vel.x;
			me.vely = vel.y;
			me.wake();
		};
		me.wrap_vel.zpp_inner._validate = function() {
			me.wrap_vel.zpp_inner.x = me.velx;
			me.wrap_vel.zpp_inner.y = me.vely;
		};
	}
}
zpp_nape.phys.ZPP_Body.prototype.setupkinvel = function() {
	var me = this;
	me.wrap_kinvel = nape.geom.Vec2.get(this.kinvelx,this.kinvely,null);
	me.wrap_kinvel.zpp_inner.inuse = true;
	if(this.world) me.wrap_kinvel.zpp_inner.immutable = true; else {
		me.wrap_kinvel.zpp_inner._invalidate = function(vel) {
			me.kinvelx = vel.x;
			me.kinvely = vel.y;
			me.wake();
		};
		me.wrap_kinvel.zpp_inner._validate = function() {
			me.wrap_kinvel.zpp_inner.x = me.kinvelx;
			me.wrap_kinvel.zpp_inner.y = me.kinvely;
		};
	}
}
zpp_nape.phys.ZPP_Body.prototype.setupsvel = function() {
	var me = this;
	me.wrap_svel = nape.geom.Vec2.get(this.svelx,this.svely,null);
	me.wrap_svel.zpp_inner.inuse = true;
	if(this.world) me.wrap_svel.zpp_inner.immutable = true; else {
		me.wrap_svel.zpp_inner._invalidate = function(vel) {
			me.svelx = vel.x;
			me.svely = vel.y;
			me.wake();
		};
		me.wrap_svel.zpp_inner._validate = function() {
			me.wrap_svel.zpp_inner.x = me.svelx;
			me.wrap_svel.zpp_inner.y = me.svely;
		};
	}
}
zpp_nape.phys.ZPP_Body.prototype.setupForce = function() {
	var me = this;
	me.wrap_force = nape.geom.Vec2.get(this.forcex,this.forcey,null);
	me.wrap_force.zpp_inner.inuse = true;
	if(this.world) me.wrap_force.zpp_inner.immutable = true; else {
		me.wrap_force.zpp_inner._invalidate = function(force) {
			me.forcex = force.x;
			me.forcey = force.y;
			if(me.type == 2) me.wake();
		};
		me.wrap_force.zpp_inner._validate = function() {
			me.wrap_force.zpp_inner.x = me.forcex;
			me.wrap_force.zpp_inner.y = me.forcey;
		};
	}
}
zpp_nape.phys.ZPP_Body.prototype.angvel = null;
zpp_nape.phys.ZPP_Body.prototype.torque = null;
zpp_nape.phys.ZPP_Body.prototype.kinangvel = null;
zpp_nape.phys.ZPP_Body.prototype.pre_rot = null;
zpp_nape.phys.ZPP_Body.prototype.rot = null;
zpp_nape.phys.ZPP_Body.prototype.invalidate_rot = function() {
	this.zip_axis = true;
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(s.type == 1) {
			s.polygon.invalidate_gverts();
			s.polygon.zip_gaxi = true;
		}
		{
			s.zip_worldCOM = true;
			{
				s.zip_aabb = true;
				if(s.body != null) s.body.zip_aabb = true;
			}
		}
		cx_ite = cx_ite.next;
	}
	this.zip_worldCOM = true;
	this.validate_graphic();
}
zpp_nape.phys.ZPP_Body.prototype.axisx = null;
zpp_nape.phys.ZPP_Body.prototype.axisy = null;
zpp_nape.phys.ZPP_Body.prototype.zip_axis = null;
zpp_nape.phys.ZPP_Body.prototype.validate_axis = function() {
	if(this.zip_axis) {
		this.zip_axis = false;
		{
			this.axisx = Math.sin(this.rot);
			this.axisy = Math.cos(this.rot);
			null;
		}
	}
}
zpp_nape.phys.ZPP_Body.prototype.quick_validate_axis = function() {
	this.axisx = Math.sin(this.rot);
	this.axisy = Math.cos(this.rot);
}
zpp_nape.phys.ZPP_Body.prototype.delta_rot = function(dr) {
	this.rot += dr;
	if(dr * dr > 0.0001) {
		this.axisx = Math.sin(this.rot);
		this.axisy = Math.cos(this.rot);
		null;
	} else {
		var d2 = dr * dr;
		var p = 1 - 0.5 * d2;
		var m = 1 - d2 * d2 / 8;
		var nx = (p * this.axisx + dr * this.axisy) * m;
		this.axisy = (p * this.axisy - dr * this.axisx) * m;
		this.axisx = nx;
	}
}
zpp_nape.phys.ZPP_Body.prototype.mass = null;
zpp_nape.phys.ZPP_Body.prototype.zip_mass = null;
zpp_nape.phys.ZPP_Body.prototype.massMode = null;
zpp_nape.phys.ZPP_Body.prototype.imass = null;
zpp_nape.phys.ZPP_Body.prototype.smass = null;
zpp_nape.phys.ZPP_Body.prototype.cmass = null;
zpp_nape.phys.ZPP_Body.prototype.nomove = null;
zpp_nape.phys.ZPP_Body.prototype.invalidate_mass = function() {
	if(this.massMode == 0) this.zip_mass = true;
	{
		if(this.gravMassMode != 1) this.zip_gravMass = true;
		if(this.gravMassMode != 2) this.zip_gravMassScale = true;
		this.wake();
	}
}
zpp_nape.phys.ZPP_Body.prototype.validate_mass = function() {
	var exist = false;
	if(this.zip_mass || this.massMode == 0 && exist) {
		this.zip_mass = false;
		if(this.massMode == 0) {
			this.cmass = 0;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				s.refmaterial.density = s.material.density;
				if(s.zip_area_inertia) {
					s.zip_area_inertia = false;
					if(s.type == 0) s.circle.__validate_area_inertia(); else s.polygon.__validate_area_inertia();
				}
				this.cmass += s.area * s.material.density;
				cx_ite = cx_ite.next;
			}
		}
		if(this.type == 2 && !this.nomove) {
			this.mass = this.cmass;
			this.imass = this.smass = 1.0 / this.mass;
		} else {
			this.mass = Math.POSITIVE_INFINITY;
			this.imass = this.smass = 0.0;
		}
		if(exist) {
			if(this.inertiaMode != 1) this.zip_inertia = true;
			this.wake();
		}
	}
}
zpp_nape.phys.ZPP_Body.prototype.gravMass = null;
zpp_nape.phys.ZPP_Body.prototype.zip_gravMass = null;
zpp_nape.phys.ZPP_Body.prototype.gravMassMode = null;
zpp_nape.phys.ZPP_Body.prototype.gravMassScale = null;
zpp_nape.phys.ZPP_Body.prototype.zip_gravMassScale = null;
zpp_nape.phys.ZPP_Body.prototype.invalidate_gravMass = function() {
	if(this.gravMassMode != 1) this.zip_gravMass = true;
	if(this.gravMassMode != 2) this.zip_gravMassScale = true;
	this.wake();
}
zpp_nape.phys.ZPP_Body.prototype.validate_gravMass = function() {
	if(this.zip_gravMass) {
		this.zip_gravMass = false;
		this.validate_mass();
		if(this.gravMassMode == 0) {
			this.validate_mass();
			this.gravMass = this.cmass;
		} else if(this.gravMassMode == 2) {
			this.validate_mass();
			this.gravMass = this.cmass * this.gravMassScale;
		}
	}
}
zpp_nape.phys.ZPP_Body.prototype.invalidate_gravMassScale = function() {
	if(this.gravMassMode != 2) this.zip_gravMassScale = true; else {
		if(this.gravMassMode != 1) this.zip_gravMass = true;
		if(this.gravMassMode != 2) this.zip_gravMassScale = true;
		this.wake();
	}
}
zpp_nape.phys.ZPP_Body.prototype.validate_gravMassScale = function() {
	if(this.zip_gravMassScale) {
		this.zip_gravMassScale = false;
		if(this.gravMassMode == 0) this.gravMassScale = 1.0; else if(this.gravMassMode == 1) {
			this.validate_mass();
			this.gravMassScale = this.gravMass / this.cmass;
		}
	}
}
zpp_nape.phys.ZPP_Body.prototype.inertiaMode = null;
zpp_nape.phys.ZPP_Body.prototype.inertia = null;
zpp_nape.phys.ZPP_Body.prototype.zip_inertia = null;
zpp_nape.phys.ZPP_Body.prototype.cinertia = null;
zpp_nape.phys.ZPP_Body.prototype.iinertia = null;
zpp_nape.phys.ZPP_Body.prototype.sinertia = null;
zpp_nape.phys.ZPP_Body.prototype.norotate = null;
zpp_nape.phys.ZPP_Body.prototype.invalidate_inertia = function() {
	if(this.inertiaMode != 1) this.zip_inertia = true;
	this.wake();
}
zpp_nape.phys.ZPP_Body.prototype.validate_inertia = function() {
	var exist = false;
	if(this.zip_inertia || this.inertiaMode == 0 && exist) {
		this.zip_inertia = false;
		if(this.inertiaMode == 0) {
			this.cinertia = 0;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				s.refmaterial.density = s.material.density;
				if(s.zip_area_inertia) {
					s.zip_area_inertia = false;
					if(s.type == 0) s.circle.__validate_area_inertia(); else s.polygon.__validate_area_inertia();
				}
				this.cinertia += s.inertia * s.area * s.material.density;
				cx_ite = cx_ite.next;
			}
		}
		if(this.type == 2 && !this.norotate) {
			this.inertia = this.cinertia;
			this.sinertia = this.iinertia = 1.0 / this.inertia;
		} else {
			this.inertia = Math.POSITIVE_INFINITY;
			this.sinertia = this.iinertia = 0;
		}
		if(exist) {
			if(this.inertiaMode != 1) this.zip_inertia = true;
			this.wake();
		}
	}
}
zpp_nape.phys.ZPP_Body.prototype.invalidate_wake = function() {
	this.wake();
}
zpp_nape.phys.ZPP_Body.prototype.aabb = null;
zpp_nape.phys.ZPP_Body.prototype.zip_aabb = null;
zpp_nape.phys.ZPP_Body.prototype.validate_aabb = function() {
	if(this.zip_aabb) {
		this.zip_aabb = false;
		this.aabb.minx = Math.POSITIVE_INFINITY;
		this.aabb.miny = Math.POSITIVE_INFINITY;
		this.aabb.maxx = Math.NEGATIVE_INFINITY;
		this.aabb.maxy = Math.NEGATIVE_INFINITY;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.zip_aabb) {
				if(s.body != null) {
					s.zip_aabb = false;
					if(s.type == 0) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
				}
			}
			this.aabb.combine(s.aabb);
			cx_ite = cx_ite.next;
		}
	}
}
zpp_nape.phys.ZPP_Body.prototype.invalidate_aabb = function() {
	this.zip_aabb = true;
}
zpp_nape.phys.ZPP_Body.prototype.hasgraphic = null;
zpp_nape.phys.ZPP_Body.prototype.graphic = null;
zpp_nape.phys.ZPP_Body.prototype.gdeltax = null;
zpp_nape.phys.ZPP_Body.prototype.gdeltay = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_gdelta = null;
zpp_nape.phys.ZPP_Body.prototype.grotdelta = null;
zpp_nape.phys.ZPP_Body.prototype.validate_graphic = function() {
	if(this.hasgraphic) {
		this.graphic.jeashSetRotation((this.rot + this.grotdelta) * 180 / Math.PI % 360.0);
		if(this.zip_axis) {
			this.zip_axis = false;
			{
				this.axisx = Math.sin(this.rot);
				this.axisy = Math.cos(this.rot);
				null;
			}
		}
		var dx;
		var dy;
		dx = this.axisy * this.gdeltax - this.axisx * this.gdeltay;
		dy = this.gdeltax * this.axisx + this.gdeltay * this.axisy;
		this.graphic.jeashSetX(this.posx + dx);
		this.graphic.jeashSetY(this.posy + dy);
	}
}
zpp_nape.phys.ZPP_Body.prototype.localCOMx = null;
zpp_nape.phys.ZPP_Body.prototype.localCOMy = null;
zpp_nape.phys.ZPP_Body.prototype.zip_localCOM = null;
zpp_nape.phys.ZPP_Body.prototype.worldCOMx = null;
zpp_nape.phys.ZPP_Body.prototype.worldCOMy = null;
zpp_nape.phys.ZPP_Body.prototype.zip_worldCOM = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_localCOM = null;
zpp_nape.phys.ZPP_Body.prototype.wrap_worldCOM = null;
zpp_nape.phys.ZPP_Body.prototype.invalidate_localCOM = function() {
	this.zip_localCOM = true;
	this.zip_worldCOM = true;
}
zpp_nape.phys.ZPP_Body.prototype.invalidate_worldCOM = function() {
	this.zip_worldCOM = true;
}
zpp_nape.phys.ZPP_Body.prototype.validate_localCOM = function() {
	if(this.zip_localCOM) {
		this.zip_localCOM = false;
		var tempx = 0;
		var tempy = 0;
		var msum = 0.0;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.zip_localCOM) {
				s.zip_localCOM = false;
				if(s.type == 1) s.polygon.__validate_localCOM();
				if(s.wrap_localCOM != null) {
					s.wrap_localCOM.zpp_inner.x = s.localCOMx;
					s.wrap_localCOM.zpp_inner.y = s.localCOMy;
				}
			}
			if(s.zip_area_inertia) {
				s.zip_area_inertia = false;
				if(s.type == 0) s.circle.__validate_area_inertia(); else s.polygon.__validate_area_inertia();
			}
			var t = s.area * s.material.density;
			tempx += s.localCOMx * t;
			tempy += s.localCOMy * t;
			msum += s.area * s.material.density;
			cx_ite = cx_ite.next;
		}
		var t = 1.0 / msum;
		this.localCOMx = tempx * t;
		this.localCOMy = tempy * t;
		if(this.wrap_localCOM != null) {
			this.wrap_localCOM.zpp_inner.x = this.localCOMx;
			this.wrap_localCOM.zpp_inner.y = this.localCOMy;
		}
		if(this.zip_mass && this.massMode == 0) {
			this.zip_mass = false;
			this.cmass = msum;
			if(this.type == 2) {
				this.mass = this.cmass;
				this.imass = this.smass = 1.0 / this.mass;
			} else {
				this.mass = Math.POSITIVE_INFINITY;
				this.imass = this.smass = 0.0;
			}
		}
	}
}
zpp_nape.phys.ZPP_Body.prototype.validate_worldCOM = function() {
	if(this.zip_worldCOM) {
		this.zip_worldCOM = false;
		this.validate_localCOM();
		if(this.zip_axis) {
			this.zip_axis = false;
			{
				this.axisx = Math.sin(this.rot);
				this.axisy = Math.cos(this.rot);
				null;
			}
		}
		this.worldCOMx = this.posx + (this.axisy * this.localCOMx - this.axisx * this.localCOMy);
		this.worldCOMy = this.posy + (this.localCOMx * this.axisx + this.localCOMy * this.axisy);
		if(this.wrap_worldCOM != null) {
			this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
			this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
		}
	}
}
zpp_nape.phys.ZPP_Body.prototype.getlocalCOM = function() {
	if(this.shapes.head == null) throw "Error: localCOM only makes sense when Body has Shapes";
	this.validate_localCOM();
}
zpp_nape.phys.ZPP_Body.prototype.getworldCOM = function() {
	if(this.shapes.head == null) throw "Error: worldCOM only makes sense when Body has Shapes";
	if(this.zip_worldCOM) {
		this.zip_worldCOM = false;
		this.validate_localCOM();
		if(this.zip_axis) {
			this.zip_axis = false;
			{
				this.axisx = Math.sin(this.rot);
				this.axisy = Math.cos(this.rot);
				null;
			}
		}
		this.worldCOMx = this.posx + (this.axisy * this.localCOMx - this.axisx * this.localCOMy);
		this.worldCOMy = this.posy + (this.localCOMx * this.axisx + this.localCOMy * this.axisy);
		if(this.wrap_worldCOM != null) {
			this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
			this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
		}
	}
}
zpp_nape.phys.ZPP_Body.prototype.cbType = null;
zpp_nape.phys.ZPP_Body.prototype.setCbType = function(cbType) {
	if(this.cbType != cbType) {
		if(this.space != null) {
			if(this.cbType != null) this.cbType.bodies.remove(this);
		}
		this.cbType = cbType;
		if(this.space != null) cbType.bodies.add(this);
		this.wake();
	}
}
zpp_nape.phys.ZPP_Body.prototype.clear = function() {
	if(this.space != null) throw "Error: Cannot clear a Body if it is currently being used by a Space!";
	if(!(this.constraints.head == null)) throw "Error: Cannot clear a Body if it is currently being used by a constraint!";
	while(!(this.shapes.head == null)) {
		var s = this.shapes.pop_unsafe();
		null;
		s.body = null;
	}
	{
		this.zip_aabb = true;
		{
			this.zip_localCOM = true;
			this.zip_worldCOM = true;
		}
		{
			if(this.massMode == 0) this.zip_mass = true;
			{
				if(this.gravMassMode != 1) this.zip_gravMass = true;
				if(this.gravMassMode != 2) this.zip_gravMassScale = true;
				this.wake();
			}
		}
		{
			if(this.inertiaMode != 1) this.zip_inertia = true;
			this.wake();
		}
	}
	this.pre_posx = 0;
	this.pre_posy = 0;
	this.posx = 0;
	this.posy = 0;
	this.velx = 0;
	this.vely = 0;
	this.forcex = 0;
	this.forcey = 0;
	this.kinvelx = 0;
	this.kinvely = 0;
	this.svelx = 0;
	this.svely = 0;
	this.angvel = this.torque = this.kinangvel = this.pre_rot = this.rot = 0;
	this.invalidate_pos();
	this.invalidate_rot();
	this.axisx = 0;
	this.axisy = 1;
	this.zip_axis = false;
	this.massMode = 0;
	this.gravMassMode = 0;
	this.gravMassScale = 1.0;
	this.inertiaMode = 0;
	this.norotate = false;
	this.nomove = false;
	this.hasgraphic = false;
	this.graphic = null;
	this.gdeltax = 0;
	this.gdeltay = 0;
	this.grotdelta = 0;
	this.cbType = zpp_nape.callbacks.ZPP_CbType.DEFAULT;
}
zpp_nape.phys.ZPP_Body.prototype.addedToSpace = function() {
	this.component = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.space.ZPP_Component.zpp_pool == null) ret = new zpp_nape.space.ZPP_Component(); else {
			ret = zpp_nape.space.ZPP_Component.zpp_pool;
			zpp_nape.space.ZPP_Component.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	this.component.isBody = true;
	this.component.body = this;
	this.cbType.bodies.add(this);
}
zpp_nape.phys.ZPP_Body.prototype.removedFromSpace = function() {
	while(!(this.arbiters.head == null)) {
		var arb = this.arbiters.pop_unsafe();
		arb.lazyRetire(this.space,this);
	}
	var o = this.component;
	{
		o.body = null;
		o.constraint = null;
		null;
	}
	o.next = zpp_nape.space.ZPP_Component.zpp_pool;
	zpp_nape.space.ZPP_Component.zpp_pool = o;
	this.component = null;
	this.cbType.bodies.remove(this);
}
zpp_nape.phys.ZPP_Body.prototype.copy = function() {
	var ret = new nape.phys.Body().zpp_inner;
	ret.type = this.type;
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		var s2 = nape.shape.Shape.copy(s.outer);
		ret.outer.zpp_inner.wrap_shapes.add(s2);
		cx_ite = cx_ite.next;
	}
	ret.posx = this.posx;
	ret.posy = this.posy;
	ret.velx = this.velx;
	ret.vely = this.vely;
	ret.forcex = this.forcex;
	ret.forcey = this.forcey;
	if(!this.zip_axis) {
		ret.axisx = this.axisx;
		ret.axisy = this.axisy;
	} else ret.invalidate_rot();
	ret.rot = this.rot;
	ret.massMode = this.massMode;
	ret.gravMassMode = this.gravMassMode;
	ret.inertiaMode = this.inertiaMode;
	if(!this.zip_mass) ret.mass = this.mass; else {
		if(ret.massMode == 0) ret.zip_mass = true;
		{
			if(ret.gravMassMode != 1) ret.zip_gravMass = true;
			if(ret.gravMassMode != 2) ret.zip_gravMassScale = true;
			ret.wake();
		}
	}
	if(!this.zip_gravMass) ret.gravMass = this.gravMass; else {
		if(ret.gravMassMode != 1) ret.zip_gravMass = true;
		if(ret.gravMassMode != 2) ret.zip_gravMassScale = true;
		ret.wake();
	}
	if(!this.zip_gravMassScale) ret.gravMassScale = this.gravMassScale; else if(ret.gravMassMode != 2) ret.zip_gravMassScale = true; else {
		if(ret.gravMassMode != 1) ret.zip_gravMass = true;
		if(ret.gravMassMode != 2) ret.zip_gravMassScale = true;
		ret.wake();
	}
	if(!this.zip_inertia) ret.inertia = this.inertia; else {
		if(ret.inertiaMode != 1) ret.zip_inertia = true;
		ret.wake();
	}
	if(!this.zip_aabb) {
		ret.aabb.minx = this.aabb.minx;
		ret.aabb.miny = this.aabb.miny;
		ret.aabb.maxx = this.aabb.maxx;
		ret.aabb.maxy = this.aabb.maxy;
	} else ret.zip_aabb = true;
	if(!this.zip_localCOM) {
		ret.localCOMx = this.localCOMx;
		ret.localCOMy = this.localCOMy;
	} else {
		ret.zip_localCOM = true;
		ret.zip_worldCOM = true;
	}
	if(!this.zip_worldCOM) {
		ret.worldCOMx = this.worldCOMx;
		ret.worldCOMy = this.worldCOMy;
	} else ret.zip_worldCOM = true;
	ret.cbType = this.cbType;
	return ret.outer;
}
zpp_nape.phys.ZPP_Body.prototype.__class__ = zpp_nape.phys.ZPP_Body;
jeash.events.Event = function(inType,inBubbles,inCancelable) {
	if( inType === $_ ) return;
	if(inCancelable == null) inCancelable = false;
	if(inBubbles == null) inBubbles = false;
	this.type = inType;
	this.bubbles = inBubbles;
	this.cancelable = inCancelable;
	this.jeashIsCancelled = false;
	this.jeashIsCancelledNow = false;
	this.target = null;
	this.currentTarget = null;
	this.eventPhase = jeash.events.EventPhase.AT_TARGET;
}
jeash.events.Event.__name__ = ["jeash","events","Event"];
jeash.events.Event.prototype.bubbles = null;
jeash.events.Event.prototype.cancelable = null;
jeash.events.Event.prototype.eventPhase = null;
jeash.events.Event.prototype.target = null;
jeash.events.Event.prototype.currentTarget = null;
jeash.events.Event.prototype.type = null;
jeash.events.Event.prototype.jeashIsCancelled = null;
jeash.events.Event.prototype.jeashIsCancelledNow = null;
jeash.events.Event.prototype.jeashSetPhase = function(phase) {
	this.eventPhase = phase;
}
jeash.events.Event.prototype.jeashGetIsCancelled = function() {
	return this.jeashIsCancelled;
}
jeash.events.Event.prototype.jeashGetIsCancelledNow = function() {
	return this.jeashIsCancelledNow;
}
jeash.events.Event.prototype.clone = function() {
	return new jeash.events.Event(this.type,this.bubbles,this.cancelable);
}
jeash.events.Event.prototype.stopImmediatePropagation = function() {
	this.jeashIsCancelledNow = this.jeashIsCancelled = true;
}
jeash.events.Event.prototype.stopPropagation = function() {
	this.jeashIsCancelled = true;
}
jeash.events.Event.prototype.toString = function() {
	return "Event";
}
jeash.events.Event.prototype.__class__ = jeash.events.Event;
jeash.events.KeyboardEvent = function(type,bubbles,cancelable,inCharCode,inKeyCode,inKeyLocation,inCtrlKey,inAltKey,inShiftKey) {
	if( type === $_ ) return;
	jeash.events.Event.call(this,type,bubbles,cancelable);
	this.keyCode = inKeyCode;
	this.keyLocation = inKeyLocation == null?0:inKeyLocation;
	this.charCode = inCharCode == null?0:inCharCode;
	this.shiftKey = inShiftKey == null?false:inShiftKey;
	this.altKey = inAltKey == null?false:inAltKey;
	this.ctrlKey = inCtrlKey == null?false:inCtrlKey;
}
jeash.events.KeyboardEvent.__name__ = ["jeash","events","KeyboardEvent"];
jeash.events.KeyboardEvent.__super__ = jeash.events.Event;
for(var k in jeash.events.Event.prototype ) jeash.events.KeyboardEvent.prototype[k] = jeash.events.Event.prototype[k];
jeash.events.KeyboardEvent.prototype.keyCode = null;
jeash.events.KeyboardEvent.prototype.charCode = null;
jeash.events.KeyboardEvent.prototype.keyLocation = null;
jeash.events.KeyboardEvent.prototype.ctrlKey = null;
jeash.events.KeyboardEvent.prototype.altKey = null;
jeash.events.KeyboardEvent.prototype.shiftKey = null;
jeash.events.KeyboardEvent.prototype.__class__ = jeash.events.KeyboardEvent;
if(!zpp_nape.util) zpp_nape.util = {}
zpp_nape.util.ZPP_Debug = function(width,height) {
	if( width === $_ ) return;
	this.xnull = true;
	this.xdet = 1.0;
	this.width = width;
	this.height = height;
	this.viewport = zpp_nape.geom.ZPP_AABB.get(0,0,width,height);
	this.iport = zpp_nape.geom.ZPP_AABB.get(0,0,width,height);
	this.tmpab = new zpp_nape.geom.ZPP_AABB();
}
zpp_nape.util.ZPP_Debug.__name__ = ["zpp_nape","util","ZPP_Debug"];
zpp_nape.util.ZPP_Debug.prototype.outer = null;
zpp_nape.util.ZPP_Debug.prototype.isbmp = null;
zpp_nape.util.ZPP_Debug.prototype.d_shape = null;
zpp_nape.util.ZPP_Debug.prototype.bg_r = null;
zpp_nape.util.ZPP_Debug.prototype.bg_g = null;
zpp_nape.util.ZPP_Debug.prototype.bg_b = null;
zpp_nape.util.ZPP_Debug.prototype.bg_col = null;
zpp_nape.util.ZPP_Debug.prototype.xform = null;
zpp_nape.util.ZPP_Debug.prototype.xnull = null;
zpp_nape.util.ZPP_Debug.prototype.xdet = null;
zpp_nape.util.ZPP_Debug.prototype.width = null;
zpp_nape.util.ZPP_Debug.prototype.height = null;
zpp_nape.util.ZPP_Debug.prototype.viewport = null;
zpp_nape.util.ZPP_Debug.prototype.iport = null;
zpp_nape.util.ZPP_Debug.prototype.setform = function() {
	this.xform = new nape.geom.Mat23().zpp_inner;
	var me = this;
	this.xform.__invalidate = function() {
		me.xdet = (function($this) {
			var $r;
			{
			}
			$r = Math.sqrt((function($this) {
				var $r;
				var x = me.xform.outer.flibget_determinant();
				$r = x < 0?-x:x;
				return $r;
			}($this)));
			return $r;
		}(this));
		me.xnull = me.xform.a == 1.0 && me.xform.b == 0.0 && me.xform.c == 0.0 && me.xform.d == 1.0 && me.xform.tx == 0.0 && me.xform.ty == 0.0;
		var qmat = me.xform.outer.inverse();
		var q = nape.geom.Vec2.get(null,null,null);
		var v = qmat.transform(q,null,null);
		me.iport.minx = (function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this));
		me.iport.miny = (function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this));
		me.iport.maxx = me.iport.minx;
		me.iport.maxy = me.iport.miny;
		v.dispose();
		q.flibset_x(me.width);
		v = qmat.transform(q,null,null);
		me.iport.set_expand_point((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
		q.flibset_y(me.height);
		v = qmat.transform(q,null,null);
		me.iport.set_expand_point((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
		if(q != null && q.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(q.zpp_inner.immutable) throw "Error: Vec2 is immutable";
		if(q.zpp_inner._immutable != null) q.zpp_inner._immutable();
		if((function($this) {
			var $r;
			if(q != null && q.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			q.zpp_inner.validate();
			$r = q.zpp_inner.x;
			return $r;
		}(this)) != 0) {
			q.zpp_inner.x = 0;
			q.zpp_inner.invalidate();
		}
		{
			if(q != null && q.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			q.zpp_inner.validate();
			q.zpp_inner.x;
		}
		v = qmat.transform(q,null,null);
		me.iport.set_expand_point((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
		q.dispose();
	};
}
zpp_nape.util.ZPP_Debug.prototype.tmpab = null;
zpp_nape.util.ZPP_Debug.prototype.cull = function(aabb) {
	if(this.xnull) return aabb.intersect(this.viewport); else {
		var qx;
		var qy;
		var vx;
		var vy;
		vx = aabb.minx;
		vy = aabb.miny;
		this.tmpab.minx = this.xform.a * vx + this.xform.b * vy + this.xform.tx;
		this.tmpab.miny = this.xform.c * vx + this.xform.d * vy + this.xform.ty;
		this.tmpab.maxx = this.tmpab.minx;
		this.tmpab.maxy = this.tmpab.miny;
		vx = aabb.maxx;
		qx = this.xform.a * vx + this.xform.b * vy + this.xform.tx;
		qy = this.xform.c * vx + this.xform.d * vy + this.xform.ty;
		this.tmpab.set_expand_point(qx,qy);
		vy = aabb.maxy;
		qx = this.xform.a * vx + this.xform.b * vy + this.xform.tx;
		qy = this.xform.c * vx + this.xform.d * vy + this.xform.ty;
		this.tmpab.set_expand_point(qx,qy);
		vx = aabb.minx;
		qx = this.xform.a * vx + this.xform.b * vy + this.xform.tx;
		qy = this.xform.c * vx + this.xform.d * vy + this.xform.ty;
		this.tmpab.set_expand_point(qx,qy);
		return this.tmpab.intersect(this.viewport);
	}
}
zpp_nape.util.ZPP_Debug.prototype.sup_setbg = function(bgcol) {
	this.bg_r = bgcol >> 16 & 255;
	this.bg_g = bgcol >> 8 & 255;
	this.bg_b = bgcol & 255;
	this.bg_col = bgcol;
}
zpp_nape.util.ZPP_Debug.prototype.__class__ = zpp_nape.util.ZPP_Debug;
zpp_nape.util.ZPP_ShapeDebug = function(width,height) {
	if( width === $_ ) return;
	zpp_nape.util.ZPP_Debug.call(this,width,height);
	this.shape = new jeash.display.Shape();
	this.graphics = this.shape.jeashGetGraphics();
	this.isbmp = false;
	this.d_shape = this;
}
zpp_nape.util.ZPP_ShapeDebug.__name__ = ["zpp_nape","util","ZPP_ShapeDebug"];
zpp_nape.util.ZPP_ShapeDebug.__super__ = zpp_nape.util.ZPP_Debug;
for(var k in zpp_nape.util.ZPP_Debug.prototype ) zpp_nape.util.ZPP_ShapeDebug.prototype[k] = zpp_nape.util.ZPP_Debug.prototype[k];
zpp_nape.util.ZPP_ShapeDebug.prototype.outer_zn = null;
zpp_nape.util.ZPP_ShapeDebug.prototype.shape = null;
zpp_nape.util.ZPP_ShapeDebug.prototype.graphics = null;
zpp_nape.util.ZPP_ShapeDebug.prototype.setbg = function(bgColor) {
	{
		this.bg_r = bgColor >> 16 & 255;
		this.bg_g = bgColor >> 8 & 255;
		this.bg_b = bgColor & 255;
		this.bg_col = bgColor;
	}
}
zpp_nape.util.ZPP_ShapeDebug.prototype.draw_space = function(space,xform,xdet,xnull) {
	if(this.outer.cullingEnabled) {
		if(this.outer.drawBodies) {
			if(this.outer.drawBodyDetail) {
				var bods = space.bphase.bodiesInAABB(this.iport,false,false,null);
				while(!(bods.zpp_inner.inner.head == null)) {
					var b = bods.shift();
					this.draw_body(b.zpp_inner,xform,xdet,xnull);
				}
			} else {
				var shapes = space.bphase.shapesInAABB(this.iport,false,false,null);
				while(!(shapes.zpp_inner.inner.head == null)) {
					var s = shapes.shift();
					this.draw_shape(s.zpp_inner,xform,xdet,xnull);
				}
			}
		}
	} else if(this.outer.drawBodies) {
		var cx_ite = space.bodies.head;
		while(cx_ite != null) {
			var b = cx_ite.elt;
			this.draw_body(b,xform,xdet,xnull);
			cx_ite = cx_ite.next;
		}
	}
	if(this.outer.drawCollisionArbiters || this.outer.drawFluidArbiters || this.outer.drawSensorArbiters) {
		var $it0 = space.outer.flibget_arbiters().iterator();
		while( $it0.hasNext() ) {
			var arb = $it0.next();
			this.draw_arbiter(arb.zpp_inner,xform,xdet,xnull);
		}
	}
	if(this.outer.drawConstraints) {
		var cx_ite = space.constraints.head;
		while(cx_ite != null) {
			var c = cx_ite.elt;
			this.draw_con(c,xform,xdet,xnull);
			cx_ite = cx_ite.next;
		}
	}
}
zpp_nape.util.ZPP_ShapeDebug.prototype.draw_body = function(body,xform,xdet,xnull) {
	var cx_ite = body.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		this.draw_shape(s,xform,xdet,xnull);
		cx_ite = cx_ite.next;
	}
	if(this.outer.drawBodyDetail) {
		var col = (function($this) {
			var $r;
			var idc = Std["int"](16777215 * Math.exp(-(body.id % 500) / 1500));
			var _r = ((idc & 16711680) >> 16) * 0.7;
			var _g = ((idc & 65280) >> 8) * 0.7;
			var _b = (idc & 255) * 0.7;
			if(body.space != null && body.outer.flibget_isSleeping()) {
				_r = 0.4 * _r + 0.6 * $this.bg_r;
				_g = 0.4 * _g + 0.6 * $this.bg_g;
				_b = 0.4 * _b + 0.6 * $this.bg_b;
			}
			$r = -16777216 | Std["int"](_r) << 16 | Std["int"](_g) << 8 | Std["int"](_b);
			return $r;
		}(this));
		if(body.zip_worldCOM) {
			body.zip_worldCOM = false;
			body.validate_localCOM();
			if(body.zip_axis) {
				body.zip_axis = false;
				{
					body.axisx = Math.sin(body.rot);
					body.axisy = Math.cos(body.rot);
					null;
				}
			}
			body.worldCOMx = body.posx + (body.axisy * body.localCOMx - body.axisx * body.localCOMy);
			body.worldCOMy = body.posy + (body.localCOMx * body.axisx + body.localCOMy * body.axisy);
			if(body.wrap_worldCOM != null) {
				body.wrap_worldCOM.zpp_inner.x = body.worldCOMx;
				body.wrap_worldCOM.zpp_inner.y = body.worldCOMy;
			}
		}
		this.graphics.lineStyle(0.1,(function($this) {
			var $r;
			var col1 = col;
			var ncol = 16711680;
			var f = 0.8;
			var _r = Std["int"]((col1 >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f));
			var _g = Std["int"]((col1 >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f));
			var _b = Std["int"]((col1 & 255) * f + (ncol & 255) * (1 - f));
			$r = -16777216 | _r << 16 | _g << 8 | _b;
			return $r;
		}(this)),1);
		var px;
		var py;
		if(xnull) {
			px = body.worldCOMx;
			py = body.worldCOMy;
		} else {
			px = xform.a * body.worldCOMx + xform.b * body.worldCOMy + xform.tx;
			py = xform.c * body.worldCOMx + xform.d * body.worldCOMy + xform.ty;
		}
		this.graphics.drawCircle(px,py,1);
		body.validate_aabb();
		if(xnull) this.graphics.drawRect(body.aabb.minx,body.aabb.miny,body.aabb.width(),body.aabb.height()); else {
			var ox;
			var oy;
			ox = xform.a * body.aabb.minx + xform.b * body.aabb.miny + xform.tx;
			oy = xform.c * body.aabb.minx + xform.d * body.aabb.miny + xform.ty;
			var wx = body.aabb.width();
			var wy = 0;
			var t = xform.a * wx + xform.b * wy;
			wy = xform.c * wx + xform.d * wy;
			wx = t;
			var hx = 0;
			var hy = body.aabb.height();
			var t = xform.a * hx + xform.b * hy;
			hy = xform.c * hx + xform.d * hy;
			hx = t;
			this.graphics.moveTo(ox,oy);
			this.graphics.lineTo(ox + wx,oy + wy);
			this.graphics.lineTo(ox + wx + hx,oy + wy + hy);
			this.graphics.lineTo(ox + hx,oy + hy);
			this.graphics.lineTo(ox,oy);
		}
	}
}
zpp_nape.util.ZPP_ShapeDebug.prototype.draw_shape = function(shape,xform,xdet,xnull) {
	var col = (function($this) {
		var $r;
		var idc = Std["int"](16777215 * Math.exp(-(shape.id % 500) / 1500));
		var _r = ((idc & 16711680) >> 16) * 0.7;
		var _g = ((idc & 65280) >> 8) * 0.7;
		var _b = (idc & 255) * 0.7;
		{
		}
		$r = -16777216 | Std["int"](_r) << 16 | Std["int"](_g) << 8 | Std["int"](_b);
		return $r;
	}(this));
	var body = shape.body;
	if(body != null) {
		var bcol = (function($this) {
			var $r;
			var idc = Std["int"](16777215 * Math.exp(-(body.id % 500) / 1500));
			var _r = ((idc & 16711680) >> 16) * 0.7;
			var _g = ((idc & 65280) >> 8) * 0.7;
			var _b = (idc & 255) * 0.7;
			if(body.space != null && body.outer.flibget_isSleeping()) {
				_r = 0.4 * _r + 0.6 * $this.bg_r;
				_g = 0.4 * _g + 0.6 * $this.bg_g;
				_b = 0.4 * _b + 0.6 * $this.bg_b;
			}
			$r = -16777216 | Std["int"](_r) << 16 | Std["int"](_g) << 8 | Std["int"](_b);
			return $r;
		}(this));
		col = (function($this) {
			var $r;
			var col1 = col;
			var ncol = bcol;
			var f = 0.2;
			var _r = Std["int"]((col1 >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f));
			var _g = Std["int"]((col1 >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f));
			var _b = Std["int"]((col1 & 255) * f + (ncol & 255) * (1 - f));
			$r = -16777216 | _r << 16 | _g << 8 | _b;
			return $r;
		}(this));
		this.graphics.lineStyle(0.1,col,1.0);
		if(shape.type == 0) {
			var circ = shape.circle;
			if(circ.zip_worldCOM) {
				if(circ.body != null) {
					circ.zip_worldCOM = false;
					if(circ.zip_localCOM) {
						circ.zip_localCOM = false;
						if(circ.type == 1) circ.polygon.__validate_localCOM();
						if(circ.wrap_localCOM != null) {
							circ.wrap_localCOM.zpp_inner.x = circ.localCOMx;
							circ.wrap_localCOM.zpp_inner.y = circ.localCOMy;
						}
					}
					circ.body.validate_axis();
					circ.worldCOMx = circ.body.posx + (circ.body.axisy * circ.localCOMx - circ.body.axisx * circ.localCOMy);
					circ.worldCOMy = circ.body.posy + (circ.localCOMx * circ.body.axisx + circ.localCOMy * circ.body.axisy);
					if(circ.wrap_worldCOM != null) {
						circ.wrap_worldCOM.zpp_inner.x = circ.worldCOMx;
						circ.wrap_worldCOM.zpp_inner.y = circ.worldCOMy;
					}
				}
			}
			var vx = circ.worldCOMx;
			var vy = circ.worldCOMy;
			if(!xnull) {
				var t = xform.a * vx + xform.b * vy + xform.tx;
				vy = xform.c * vx + xform.d * vy + xform.ty;
				vx = t;
			}
			this.graphics.drawCircle(vx,vy,circ.radius * xdet);
			if(this.outer.drawShapeAngleIndicators) {
				var v0x = circ.worldCOMx + 0.3 * circ.radius * body.axisy;
				var v0y = circ.worldCOMy + 0.3 * circ.radius * body.axisx;
				var v1x = circ.worldCOMx + circ.radius * body.axisy;
				var v1y = circ.worldCOMy + circ.radius * body.axisx;
				if(!xnull) {
					var t = xform.a * v0x + xform.b * v0y + xform.tx;
					v0y = xform.c * v0x + xform.d * v0y + xform.ty;
					v0x = t;
				}
				if(!xnull) {
					var t = xform.a * v1x + xform.b * v1y + xform.tx;
					v1y = xform.c * v1x + xform.d * v1y + xform.ty;
					v1x = t;
				}
				this.graphics.moveTo(v0x,v0y);
				this.graphics.lineTo(v1x,v1y);
			}
		} else {
			var poly = shape.polygon;
			poly.validate_gverts();
			var u = poly.gverts.next;
			var vx = u.x;
			var vy = u.y;
			if(!xnull) {
				var t = xform.a * vx + xform.b * vy + xform.tx;
				vy = xform.c * vx + xform.d * vy + xform.ty;
				vx = t;
			}
			this.graphics.moveTo(vx,vy);
			var vox = vx;
			var voy = vy;
			var cx_ite = poly.gverts.next.next;
			while(cx_ite != null) {
				var u1 = cx_ite;
				vx = u1.x;
				vy = u1.y;
				if(!xnull) {
					var t = xform.a * vx + xform.b * vy + xform.tx;
					vy = xform.c * vx + xform.d * vy + xform.ty;
					vx = t;
				}
				this.graphics.lineTo(vx,vy);
				cx_ite = cx_ite.next;
			}
			this.graphics.lineTo(vox,voy);
			if(this.outer.drawShapeAngleIndicators) {
				if(poly.zip_worldCOM) {
					if(poly.body != null) {
						poly.zip_worldCOM = false;
						if(poly.zip_localCOM) {
							poly.zip_localCOM = false;
							if(poly.type == 1) poly.polygon.__validate_localCOM();
							if(poly.wrap_localCOM != null) {
								poly.wrap_localCOM.zpp_inner.x = poly.localCOMx;
								poly.wrap_localCOM.zpp_inner.y = poly.localCOMy;
							}
						}
						poly.body.validate_axis();
						poly.worldCOMx = poly.body.posx + (poly.body.axisy * poly.localCOMx - poly.body.axisx * poly.localCOMy);
						poly.worldCOMy = poly.body.posy + (poly.localCOMx * poly.body.axisx + poly.localCOMy * poly.body.axisy);
						if(poly.wrap_worldCOM != null) {
							poly.wrap_worldCOM.zpp_inner.x = poly.worldCOMx;
							poly.wrap_worldCOM.zpp_inner.y = poly.worldCOMy;
						}
					}
				}
				if(xnull) {
					vx = poly.worldCOMx;
					vy = poly.worldCOMy;
				} else {
					vx = xform.a * poly.worldCOMx + xform.b * poly.worldCOMy + xform.tx;
					vy = xform.c * poly.worldCOMx + xform.d * poly.worldCOMy + xform.ty;
				}
				this.graphics.moveTo(vx,vy);
				this.graphics.lineTo(vox,voy);
			}
		}
		if(this.outer.drawShapeDetail) {
			if(shape.zip_worldCOM) {
				if(shape.body != null) {
					shape.zip_worldCOM = false;
					if(shape.zip_localCOM) {
						shape.zip_localCOM = false;
						if(shape.type == 1) shape.polygon.__validate_localCOM();
						if(shape.wrap_localCOM != null) {
							shape.wrap_localCOM.zpp_inner.x = shape.localCOMx;
							shape.wrap_localCOM.zpp_inner.y = shape.localCOMy;
						}
					}
					shape.body.validate_axis();
					shape.worldCOMx = shape.body.posx + (shape.body.axisy * shape.localCOMx - shape.body.axisx * shape.localCOMy);
					shape.worldCOMy = shape.body.posy + (shape.localCOMx * shape.body.axisx + shape.localCOMy * shape.body.axisy);
					if(shape.wrap_worldCOM != null) {
						shape.wrap_worldCOM.zpp_inner.x = shape.worldCOMx;
						shape.wrap_worldCOM.zpp_inner.y = shape.worldCOMy;
					}
				}
			}
			this.graphics.lineStyle(0.1,(function($this) {
				var $r;
				var col1 = col;
				var ncol = 16711680;
				var f = 0.8;
				var _r = Std["int"]((col1 >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f));
				var _g = Std["int"]((col1 >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f));
				var _b = Std["int"]((col1 & 255) * f + (ncol & 255) * (1 - f));
				$r = -16777216 | _r << 16 | _g << 8 | _b;
				return $r;
			}(this)),1);
			var vx;
			var vy;
			if(xnull) {
				vx = shape.worldCOMx;
				vy = shape.worldCOMy;
			} else {
				vx = xform.a * shape.worldCOMx + xform.b * shape.worldCOMy + xform.tx;
				vy = xform.c * shape.worldCOMx + xform.d * shape.worldCOMy + xform.ty;
			}
			this.graphics.drawCircle(vx,vy,1);
			if(shape.zip_aabb) {
				if(shape.body != null) {
					shape.zip_aabb = false;
					if(shape.type == 0) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
				}
			}
			if(xnull) this.graphics.drawRect(shape.aabb.minx,shape.aabb.miny,shape.aabb.width(),shape.aabb.height()); else {
				var ox;
				var oy;
				ox = xform.a * shape.aabb.minx + xform.b * shape.aabb.miny + xform.tx;
				oy = xform.c * shape.aabb.minx + xform.d * shape.aabb.miny + xform.ty;
				var wx = shape.aabb.width();
				var wy = 0;
				var t = xform.a * wx + xform.b * wy;
				wy = xform.c * wx + xform.d * wy;
				wx = t;
				var hx = 0;
				var hy = shape.aabb.height();
				var t = xform.a * hx + xform.b * hy;
				hy = xform.c * hx + xform.d * hy;
				hx = t;
				this.graphics.moveTo(ox,oy);
				this.graphics.lineTo(ox + wx,oy + wy);
				this.graphics.lineTo(ox + wx + hx,oy + wy + hy);
				this.graphics.lineTo(ox + hx,oy + hy);
				this.graphics.lineTo(ox,oy);
			}
		}
	}
}
zpp_nape.util.ZPP_ShapeDebug.prototype.draw_arbiter = function(arb,xform,xdet,xnull) {
	var vx;
	var vy;
	if(arb.outer.zpp_inner.type == 2) {
		if(this.outer.drawSensorArbiters) {
			var sarb = arb.outer;
			this.graphics.lineStyle(0.1,(function($this) {
				var $r;
				var col = 65280;
				var ncol = ~$this.bg_col;
				var f = 0.7;
				var _r = Std["int"]((col >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f));
				var _g = Std["int"]((col >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f));
				var _b = Std["int"]((col & 255) * f + (ncol & 255) * (1 - f));
				$r = -16777216 | _r << 16 | _g << 8 | _b;
				return $r;
			}(this)),1);
			if(xnull) {
				vx = ((function($this) {
					var $r;
					if(!!sarb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					$r = sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer;
					return $r;
				}(this))).flibget_worldCOM().flibget_x();
				vy = ((function($this) {
					var $r;
					if(!!sarb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					$r = sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer;
					return $r;
				}(this))).flibget_worldCOM().flibget_y();
			} else {
				vx = xform.a * ((function($this) {
					var $r;
					if(!!sarb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					$r = sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer;
					return $r;
				}(this))).flibget_worldCOM().flibget_x() + xform.b * ((function($this) {
					var $r;
					if(!!sarb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					$r = sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer;
					return $r;
				}(this))).flibget_worldCOM().flibget_y() + xform.tx;
				vy = xform.c * ((function($this) {
					var $r;
					if(!!sarb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					$r = sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer;
					return $r;
				}(this))).flibget_worldCOM().flibget_x() + xform.d * ((function($this) {
					var $r;
					if(!!sarb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					$r = sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws2.outer:sarb.zpp_inner.ws1.outer;
					return $r;
				}(this))).flibget_worldCOM().flibget_y() + xform.ty;
			}
			this.graphics.moveTo(vx,vy);
			if(xnull) {
				vx = ((function($this) {
					var $r;
					if(!!sarb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					$r = sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer;
					return $r;
				}(this))).flibget_worldCOM().flibget_x();
				vy = ((function($this) {
					var $r;
					if(!!sarb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					$r = sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer;
					return $r;
				}(this))).flibget_worldCOM().flibget_y();
			} else {
				vx = xform.a * ((function($this) {
					var $r;
					if(!!sarb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					$r = sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer;
					return $r;
				}(this))).flibget_worldCOM().flibget_x() + xform.b * ((function($this) {
					var $r;
					if(!!sarb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					$r = sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer;
					return $r;
				}(this))).flibget_worldCOM().flibget_y() + xform.tx;
				vy = xform.c * ((function($this) {
					var $r;
					if(!!sarb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					$r = sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer;
					return $r;
				}(this))).flibget_worldCOM().flibget_x() + xform.d * ((function($this) {
					var $r;
					if(!!sarb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					$r = sarb.zpp_inner.ws1.id > sarb.zpp_inner.ws2.id?sarb.zpp_inner.ws1.outer:sarb.zpp_inner.ws2.outer;
					return $r;
				}(this))).flibget_worldCOM().flibget_y() + xform.ty;
			}
			this.graphics.lineTo(vx,vy);
		}
	} else if(arb.outer.zpp_inner.type == 1) {
		if(this.outer.drawFluidArbiters) {
			var farb = arb.outer.flibget_fluidArbiter();
			this.graphics.lineStyle(0.1,(function($this) {
				var $r;
				var col = 255;
				var ncol = ~$this.bg_col;
				var f = 0.7;
				var _r = Std["int"]((col >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f));
				var _g = Std["int"]((col >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f));
				var _b = Std["int"]((col & 255) * f + (ncol & 255) * (1 - f));
				$r = -16777216 | _r << 16 | _g << 8 | _b;
				return $r;
			}(this)),1);
			if(xnull) {
				vx = ((function($this) {
					var $r;
					if(!!farb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
					$r = farb.zpp_inner.fluidarb.wrap_position;
					return $r;
				}(this))).flibget_x();
				vy = ((function($this) {
					var $r;
					if(!!farb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
					$r = farb.zpp_inner.fluidarb.wrap_position;
					return $r;
				}(this))).flibget_y();
			} else {
				vx = xform.a * ((function($this) {
					var $r;
					if(!!farb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
					$r = farb.zpp_inner.fluidarb.wrap_position;
					return $r;
				}(this))).flibget_x() + xform.b * ((function($this) {
					var $r;
					if(!!farb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
					$r = farb.zpp_inner.fluidarb.wrap_position;
					return $r;
				}(this))).flibget_y() + xform.tx;
				vy = xform.c * ((function($this) {
					var $r;
					if(!!farb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
					$r = farb.zpp_inner.fluidarb.wrap_position;
					return $r;
				}(this))).flibget_x() + xform.d * ((function($this) {
					var $r;
					if(!!farb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
					if(farb.zpp_inner.fluidarb.wrap_position == null) farb.zpp_inner.fluidarb.getposition();
					$r = farb.zpp_inner.fluidarb.wrap_position;
					return $r;
				}(this))).flibget_y() + xform.ty;
			}
			this.graphics.drawCircle(vx,vy,0.75);
		}
	} else if(this.outer.drawCollisionArbiters) {
		var carb = arb.outer.flibget_collisionArbiter();
		var px;
		var py;
		if(((function($this) {
			var $r;
			if(!!carb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
			if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.wrap_contacts = zpp_nape.util.ZPP_ContactList.get(carb.zpp_inner.colarb.contacts,true);
			$r = carb.zpp_inner.colarb.wrap_contacts;
			return $r;
		}(this))).flibget_length() == 2) {
			var c1 = ((function($this) {
				var $r;
				if(!!carb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
				if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.wrap_contacts = zpp_nape.util.ZPP_ContactList.get(carb.zpp_inner.colarb.contacts,true);
				$r = carb.zpp_inner.colarb.wrap_contacts;
				return $r;
			}(this))).at(0).flibget_position();
			var c2 = ((function($this) {
				var $r;
				if(!!carb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
				if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.wrap_contacts = zpp_nape.util.ZPP_ContactList.get(carb.zpp_inner.colarb.contacts,true);
				$r = carb.zpp_inner.colarb.wrap_contacts;
				return $r;
			}(this))).at(1).flibget_position();
			var n = (function($this) {
				var $r;
				if(!!carb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
				if(carb.zpp_inner.colarb.wrap_normal == null) carb.zpp_inner.colarb.getnormal();
				$r = carb.zpp_inner.colarb.wrap_normal;
				return $r;
			}(this));
			var x = 0.661437828;
			var y = 0.75;
			if((function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)) * (function($this) {
				var $r;
				if(c1 != null && c1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c1.zpp_inner.validate();
				$r = c1.zpp_inner.x;
				return $r;
			}(this)) - (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) * (function($this) {
				var $r;
				if(c1 != null && c1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c1.zpp_inner.validate();
				$r = c1.zpp_inner.y;
				return $r;
			}(this)) < (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)) * (function($this) {
				var $r;
				if(c2 != null && c2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c2.zpp_inner.validate();
				$r = c2.zpp_inner.x;
				return $r;
			}(this)) - (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) * (function($this) {
				var $r;
				if(c2 != null && c2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c2.zpp_inner.validate();
				$r = c2.zpp_inner.y;
				return $r;
			}(this))) {
				x = -x;
				y = -y;
			}
			this.graphics.lineStyle(0.1,(function($this) {
				var $r;
				var col = 255;
				var ncol = ~$this.bg_col;
				var f = 0.7;
				var _r = Std["int"]((col >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f));
				var _g = Std["int"]((col >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f));
				var _b = Std["int"]((col & 255) * f + (ncol & 255) * (1 - f));
				$r = -16777216 | _r << 16 | _g << 8 | _b;
				return $r;
			}(this)),1);
			vx = (function($this) {
				var $r;
				if(c1 != null && c1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c1.zpp_inner.validate();
				$r = c1.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) * y - (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)) * x;
			vy = (function($this) {
				var $r;
				if(c1 != null && c1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c1.zpp_inner.validate();
				$r = c1.zpp_inner.y;
				return $r;
			}(this)) + (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)) * y + (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) * x;
			if(!xnull) {
				var t = xform.a * vx + xform.b * vy + xform.tx;
				vy = xform.c * vx + xform.d * vy + xform.ty;
				vx = t;
			}
			this.graphics.moveTo(vx,vy);
			vx = (function($this) {
				var $r;
				if(c2 != null && c2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c2.zpp_inner.validate();
				$r = c2.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) * y + (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)) * x;
			vy = (function($this) {
				var $r;
				if(c2 != null && c2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c2.zpp_inner.validate();
				$r = c2.zpp_inner.y;
				return $r;
			}(this)) + (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)) * y - (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) * x;
			if(!xnull) {
				var t = xform.a * vx + xform.b * vy + xform.tx;
				vy = xform.c * vx + xform.d * vy + xform.ty;
				vx = t;
			}
			this.graphics.lineTo(vx,vy);
			this.graphics.lineStyle(0.1,(function($this) {
				var $r;
				var col = 16711680;
				var ncol = ~$this.bg_col;
				var f = 0.7;
				var _r = Std["int"]((col >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f));
				var _g = Std["int"]((col >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f));
				var _b = Std["int"]((col & 255) * f + (ncol & 255) * (1 - f));
				$r = -16777216 | _r << 16 | _g << 8 | _b;
				return $r;
			}(this)),1);
			vx = (function($this) {
				var $r;
				if(c1 != null && c1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c1.zpp_inner.validate();
				$r = c1.zpp_inner.x;
				return $r;
			}(this)) - (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) * y - (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)) * x;
			vy = (function($this) {
				var $r;
				if(c1 != null && c1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c1.zpp_inner.validate();
				$r = c1.zpp_inner.y;
				return $r;
			}(this)) - (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)) * y + (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) * x;
			if(!xnull) {
				var t = xform.a * vx + xform.b * vy + xform.tx;
				vy = xform.c * vx + xform.d * vy + xform.ty;
				vx = t;
			}
			this.graphics.moveTo(vx,vy);
			vx = (function($this) {
				var $r;
				if(c2 != null && c2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c2.zpp_inner.validate();
				$r = c2.zpp_inner.x;
				return $r;
			}(this)) - (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) * y + (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)) * x;
			vy = (function($this) {
				var $r;
				if(c2 != null && c2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c2.zpp_inner.validate();
				$r = c2.zpp_inner.y;
				return $r;
			}(this)) - (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.y;
				return $r;
			}(this)) * y - (function($this) {
				var $r;
				if(n != null && n.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				n.zpp_inner.validate();
				$r = n.zpp_inner.x;
				return $r;
			}(this)) * x;
			if(!xnull) {
				var t = xform.a * vx + xform.b * vy + xform.tx;
				vy = xform.c * vx + xform.d * vy + xform.ty;
				vx = t;
			}
			this.graphics.lineTo(vx,vy);
			px = 0.5 * ((function($this) {
				var $r;
				if(c1 != null && c1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c1.zpp_inner.validate();
				$r = c1.zpp_inner.x;
				return $r;
			}(this)) + (function($this) {
				var $r;
				if(c2 != null && c2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c2.zpp_inner.validate();
				$r = c2.zpp_inner.x;
				return $r;
			}(this)));
			py = 0.5 * ((function($this) {
				var $r;
				if(c1 != null && c1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c1.zpp_inner.validate();
				$r = c1.zpp_inner.y;
				return $r;
			}(this)) + (function($this) {
				var $r;
				if(c2 != null && c2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				c2.zpp_inner.validate();
				$r = c2.zpp_inner.y;
				return $r;
			}(this)));
			if(!xnull) {
				var t = xform.a * px + xform.b * py + xform.tx;
				py = xform.c * px + xform.d * py + xform.ty;
				px = t;
			}
		} else {
			px = ((function($this) {
				var $r;
				if(!!carb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
				if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.wrap_contacts = zpp_nape.util.ZPP_ContactList.get(carb.zpp_inner.colarb.contacts,true);
				$r = carb.zpp_inner.colarb.wrap_contacts;
				return $r;
			}(this))).at(0).flibget_position().flibget_x();
			py = ((function($this) {
				var $r;
				if(!!carb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
				if(carb.zpp_inner.colarb.wrap_contacts == null) carb.zpp_inner.colarb.wrap_contacts = zpp_nape.util.ZPP_ContactList.get(carb.zpp_inner.colarb.contacts,true);
				$r = carb.zpp_inner.colarb.wrap_contacts;
				return $r;
			}(this))).at(0).flibget_position().flibget_y();
			if(!xnull) {
				var t = xform.a * px + xform.b * py + xform.tx;
				py = xform.c * px + xform.d * py + xform.ty;
				px = t;
			}
			this.graphics.lineStyle(0.1,(function($this) {
				var $r;
				var col = 16711935;
				var ncol = ~$this.bg_col;
				var f = 0.7;
				var _r = Std["int"]((col >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f));
				var _g = Std["int"]((col >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f));
				var _b = Std["int"]((col & 255) * f + (ncol & 255) * (1 - f));
				$r = -16777216 | _r << 16 | _g << 8 | _b;
				return $r;
			}(this)),1);
			this.graphics.drawCircle(px,py,1);
		}
		this.graphics.lineStyle(0.1,(function($this) {
			var $r;
			var col = ~$this.bg_col;
			var ncol = $this.bg_col;
			var f = 0.7;
			var _r = Std["int"]((col >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f));
			var _g = Std["int"]((col >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f));
			var _b = Std["int"]((col & 255) * f + (ncol & 255) * (1 - f));
			$r = -16777216 | _r << 16 | _g << 8 | _b;
			return $r;
		}(this)),1);
		this.graphics.moveTo(px,py);
		vx = ((function($this) {
			var $r;
			if(!!carb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
			if(carb.zpp_inner.colarb.wrap_normal == null) carb.zpp_inner.colarb.getnormal();
			$r = carb.zpp_inner.colarb.wrap_normal;
			return $r;
		}(this))).flibget_x() * 5;
		vy = ((function($this) {
			var $r;
			if(!!carb.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
			if(carb.zpp_inner.colarb.wrap_normal == null) carb.zpp_inner.colarb.getnormal();
			$r = carb.zpp_inner.colarb.wrap_normal;
			return $r;
		}(this))).flibget_y() * 5;
		if(!xnull) {
			var t = xform.a * vx + xform.b * vy;
			vy = xform.c * vx + xform.d * vy;
			vx = t;
		}
		this.graphics.lineTo(px + vx,py + vy);
	}
}
zpp_nape.util.ZPP_ShapeDebug.prototype.draw_con = function(con,xform,xdet,xnull) {
	if(con.active) {
		var red = (function($this) {
			var $r;
			var col = 16711680;
			var ncol = ~$this.bg_col;
			var f = 0.7;
			var _r = Std["int"]((col >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f));
			var _g = Std["int"]((col >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f));
			var _b = Std["int"]((col & 255) * f + (ncol & 255) * (1 - f));
			$r = -16777216 | _r << 16 | _g << 8 | _b;
			return $r;
		}(this));
		if(con.outer.flibget_isSleeping()) red = (function($this) {
			var $r;
			var col = red;
			var ncol = $this.bg_col;
			var f = 0.4;
			var _r = Std["int"]((col >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f));
			var _g = Std["int"]((col >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f));
			var _b = Std["int"]((col & 255) * f + (ncol & 255) * (1 - f));
			$r = -16777216 | _r << 16 | _g << 8 | _b;
			return $r;
		}(this));
		var blue = (function($this) {
			var $r;
			var col = 255;
			var ncol = ~$this.bg_col;
			var f = 0.7;
			var _r = Std["int"]((col >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f));
			var _g = Std["int"]((col >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f));
			var _b = Std["int"]((col & 255) * f + (ncol & 255) * (1 - f));
			$r = -16777216 | _r << 16 | _g << 8 | _b;
			return $r;
		}(this));
		if(con.outer.flibget_isSleeping()) blue = (function($this) {
			var $r;
			var col = blue;
			var ncol = $this.bg_col;
			var f = 0.4;
			var _r = Std["int"]((col >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f));
			var _g = Std["int"]((col >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f));
			var _b = Std["int"]((col & 255) * f + (ncol & 255) * (1 - f));
			$r = -16777216 | _r << 16 | _g << 8 | _b;
			return $r;
		}(this));
		var green = (function($this) {
			var $r;
			var col = 65280;
			var ncol = ~$this.bg_col;
			var f = 0.7;
			var _r = Std["int"]((col >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f));
			var _g = Std["int"]((col >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f));
			var _b = Std["int"]((col & 255) * f + (ncol & 255) * (1 - f));
			$r = -16777216 | _r << 16 | _g << 8 | _b;
			return $r;
		}(this));
		if(con.outer.flibget_isSleeping()) green = (function($this) {
			var $r;
			var col = green;
			var ncol = $this.bg_col;
			var f = 0.4;
			var _r = Std["int"]((col >> 16 & 255) * f + (ncol >> 16 & 255) * (1 - f));
			var _g = Std["int"]((col >> 8 & 255) * f + (ncol >> 8 & 255) * (1 - f));
			var _b = Std["int"]((col & 255) * f + (ncol & 255) * (1 - f));
			$r = -16777216 | _r << 16 | _g << 8 | _b;
			return $r;
		}(this));
		if(Std["is"](con,zpp_nape.constraint.ZPP_PivotJoint)) {
			var joint = (function($this) {
				var $r;
				var $t = con;
				if(Std["is"]($t,zpp_nape.constraint.ZPP_PivotJoint)) $t; else throw "Class cast error";
				$r = $t;
				return $r;
			}(this));
			var p1x;
			var p1y;
			joint.b1.validate_axis();
			p1x = joint.b1.axisy * joint.a1localx - joint.b1.axisx * joint.a1localy;
			p1y = joint.a1localx * joint.b1.axisx + joint.a1localy * joint.b1.axisy;
			var t = 1.0;
			p1x += joint.b1.posx * t;
			p1y += joint.b1.posy * t;
			if(!xnull) {
				var t = xform.a * p1x + xform.b * p1y + xform.tx;
				p1y = xform.c * p1x + xform.d * p1y + xform.ty;
				p1x = t;
			}
			this.graphics.lineStyle(0.1,blue,1);
			this.graphics.drawCircle(p1x,p1y,1);
			var p2x;
			var p2y;
			joint.b2.validate_axis();
			p2x = joint.b2.axisy * joint.a2localx - joint.b2.axisx * joint.a2localy;
			p2y = joint.a2localx * joint.b2.axisx + joint.a2localy * joint.b2.axisy;
			var t = 1.0;
			p2x += joint.b2.posx * t;
			p2y += joint.b2.posy * t;
			if(!xnull) {
				var t = xform.a * p2x + xform.b * p2y + xform.tx;
				p2y = xform.c * p2x + xform.d * p2y + xform.ty;
				p2x = t;
			}
			this.graphics.lineStyle(0.1,red,1);
			this.graphics.drawCircle(p2x,p2y,2);
		} else if(Std["is"](con,zpp_nape.constraint.ZPP_DistanceJoint)) {
			var joint = (function($this) {
				var $r;
				var $t = con;
				if(Std["is"]($t,zpp_nape.constraint.ZPP_DistanceJoint)) $t; else throw "Class cast error";
				$r = $t;
				return $r;
			}(this));
			var p1x;
			var p1y;
			joint.b1.validate_axis();
			p1x = joint.b1.axisy * joint.a1localx - joint.b1.axisx * joint.a1localy;
			p1y = joint.a1localx * joint.b1.axisx + joint.a1localy * joint.b1.axisy;
			var t = 1.0;
			p1x += joint.b1.posx * t;
			p1y += joint.b1.posy * t;
			if(!xnull) {
				var t = xform.a * p1x + xform.b * p1y + xform.tx;
				p1y = xform.c * p1x + xform.d * p1y + xform.ty;
				p1x = t;
			}
			this.graphics.lineStyle(0.1,blue,1);
			this.graphics.drawCircle(p1x,p1y,1);
			var p2x;
			var p2y;
			joint.b2.validate_axis();
			p2x = joint.b2.axisy * joint.a2localx - joint.b2.axisx * joint.a2localy;
			p2y = joint.a2localx * joint.b2.axisx + joint.a2localy * joint.b2.axisy;
			var t = 1.0;
			p2x += joint.b2.posx * t;
			p2y += joint.b2.posy * t;
			if(!xnull) {
				var t = xform.a * p2x + xform.b * p2y + xform.tx;
				p2y = xform.c * p2x + xform.d * p2y + xform.ty;
				p2x = t;
			}
			this.graphics.lineStyle(0.1,red,1);
			this.graphics.drawCircle(p2x,p2y,2);
		} else if(Std["is"](con,zpp_nape.constraint.ZPP_WeldJoint)) {
			var joint = (function($this) {
				var $r;
				var $t = con;
				if(Std["is"]($t,zpp_nape.constraint.ZPP_WeldJoint)) $t; else throw "Class cast error";
				$r = $t;
				return $r;
			}(this));
			var p1x;
			var p1y;
			joint.b1.validate_axis();
			p1x = joint.b1.axisy * joint.a1localx - joint.b1.axisx * joint.a1localy;
			p1y = joint.a1localx * joint.b1.axisx + joint.a1localy * joint.b1.axisy;
			var t = 1.0;
			p1x += joint.b1.posx * t;
			p1y += joint.b1.posy * t;
			if(!xnull) {
				var t = xform.a * p1x + xform.b * p1y + xform.tx;
				p1y = xform.c * p1x + xform.d * p1y + xform.ty;
				p1x = t;
			}
			this.graphics.lineStyle(0.1,blue,1);
			this.graphics.drawCircle(p1x,p1y,1);
			var p2x;
			var p2y;
			joint.b2.validate_axis();
			p2x = joint.b2.axisy * joint.a2localx - joint.b2.axisx * joint.a2localy;
			p2y = joint.a2localx * joint.b2.axisx + joint.a2localy * joint.b2.axisy;
			var t = 1.0;
			p2x += joint.b2.posx * t;
			p2y += joint.b2.posy * t;
			if(!xnull) {
				var t = xform.a * p2x + xform.b * p2y + xform.tx;
				p2y = xform.c * p2x + xform.d * p2y + xform.ty;
				p2x = t;
			}
			this.graphics.lineStyle(0.1,red,1);
			this.graphics.drawCircle(p2x,p2y,2);
		} else if(Std["is"](con,zpp_nape.constraint.ZPP_LineJoint)) {
			var joint = (function($this) {
				var $r;
				var $t = con;
				if(Std["is"]($t,zpp_nape.constraint.ZPP_LineJoint)) $t; else throw "Class cast error";
				$r = $t;
				return $r;
			}(this));
			var p1x;
			var p1y;
			joint.b1.validate_axis();
			p1x = joint.b1.axisy * joint.a1localx - joint.b1.axisx * joint.a1localy;
			p1y = joint.a1localx * joint.b1.axisx + joint.a1localy * joint.b1.axisy;
			var t = 1.0;
			p1x += joint.b1.posx * t;
			p1y += joint.b1.posy * t;
			if(!xnull) {
				var t = xform.a * p1x + xform.b * p1y + xform.tx;
				p1y = xform.c * p1x + xform.d * p1y + xform.ty;
				p1x = t;
			}
			this.graphics.lineStyle(0.1,green,1);
			var dirx;
			var diry;
			joint.b1.validate_axis();
			dirx = joint.b1.axisy * joint.nlocalx - joint.b1.axisx * joint.nlocaly;
			diry = joint.nlocalx * joint.b1.axisx + joint.nlocaly * joint.b1.axisy;
			if(!xnull) {
				var t = xform.a * dirx + xform.b * diry;
				diry = xform.c * dirx + xform.d * diry;
				dirx = t;
			}
			var min = joint.jointMin;
			if(joint.jointMin != -Math.POSITIVE_INFINITY) {
			} else min = -1000;
			var max = joint.jointMax;
			if(joint.jointMax != Math.POSITIVE_INFINITY) {
			} else max = 1000;
			var e1x;
			var e1y;
			e1x = p1x;
			e1y = p1y;
			var t = min;
			e1x += dirx * t;
			e1y += diry * t;
			var e2x;
			var e2y;
			e2x = p1x;
			e2y = p1y;
			var t = max;
			e2x += dirx * t;
			e2y += diry * t;
			this.graphics.moveTo(e1x,e1y);
			this.graphics.lineTo(e2x,e2y);
			if(joint.jointMin != -Math.POSITIVE_INFINITY) this.graphics.drawCircle(e1x,e1y,2);
			if(joint.jointMax != Math.POSITIVE_INFINITY) this.graphics.drawCircle(e2x,e2y,2);
			var p2x;
			var p2y;
			joint.b2.validate_axis();
			p2x = joint.b2.axisy * joint.a2localx - joint.b2.axisx * joint.a2localy;
			p2y = joint.a2localx * joint.b2.axisx + joint.a2localy * joint.b2.axisy;
			var t = 1.0;
			p2x += joint.b2.posx * t;
			p2y += joint.b2.posy * t;
			if(!xnull) {
				var t = xform.a * p2x + xform.b * p2y + xform.tx;
				p2y = xform.c * p2x + xform.d * p2y + xform.ty;
				p2x = t;
			}
			this.graphics.lineStyle(0.1,red,1);
			this.graphics.drawCircle(p2x,p2y,2);
			this.graphics.lineStyle(0.1,blue,1);
			this.graphics.drawCircle(p1x,p1y,2);
		}
	}
}
zpp_nape.util.ZPP_ShapeDebug.prototype.__class__ = zpp_nape.util.ZPP_ShapeDebug;
zpp_nape.util.ZNPList_ZPP_Constraint = function(p) {
}
zpp_nape.util.ZNPList_ZPP_Constraint.__name__ = ["zpp_nape","util","ZNPList_ZPP_Constraint"];
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Constraint(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Constraint(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_Constraint.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Constraint;
zpp_nape.util.ZNPList_ConstraintIterator = function(p) {
}
zpp_nape.util.ZNPList_ConstraintIterator.__name__ = ["zpp_nape","util","ZNPList_ConstraintIterator"];
zpp_nape.util.ZNPList_ConstraintIterator.prototype.head = null;
zpp_nape.util.ZNPList_ConstraintIterator.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.modified = null;
zpp_nape.util.ZNPList_ConstraintIterator.prototype.pushmod = null;
zpp_nape.util.ZNPList_ConstraintIterator.prototype.mcnt = null;
zpp_nape.util.ZNPList_ConstraintIterator.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ConstraintIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ConstraintIterator(); else {
				ret = zpp_nape.util.ZNPNode_ConstraintIterator.zpp_pool;
				zpp_nape.util.ZNPNode_ConstraintIterator.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ConstraintIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ConstraintIterator(); else {
					ret = zpp_nape.util.ZNPNode_ConstraintIterator.zpp_pool;
					zpp_nape.util.ZNPNode_ConstraintIterator.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ConstraintIterator.zpp_pool;
	zpp_nape.util.ZNPNode_ConstraintIterator.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ConstraintIterator.zpp_pool;
		zpp_nape.util.ZNPNode_ConstraintIterator.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ConstraintIterator.prototype.__class__ = zpp_nape.util.ZNPList_ConstraintIterator;
zpp_nape.util.ZNPList_ZPP_Listener = function(p) {
}
zpp_nape.util.ZNPList_ZPP_Listener.__name__ = ["zpp_nape","util","ZNPList_ZPP_Listener"];
zpp_nape.util.ZNPList_ZPP_Listener.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Listener.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Listener.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Listener.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_Listener.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Listener(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Listener(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_Listener.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Listener;
zpp_nape.util.ZNPList_ListenerIterator = function(p) {
}
zpp_nape.util.ZNPList_ListenerIterator.__name__ = ["zpp_nape","util","ZNPList_ListenerIterator"];
zpp_nape.util.ZNPList_ListenerIterator.prototype.head = null;
zpp_nape.util.ZNPList_ListenerIterator.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.modified = null;
zpp_nape.util.ZNPList_ListenerIterator.prototype.pushmod = null;
zpp_nape.util.ZNPList_ListenerIterator.prototype.mcnt = null;
zpp_nape.util.ZNPList_ListenerIterator.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ListenerIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ListenerIterator(); else {
				ret = zpp_nape.util.ZNPNode_ListenerIterator.zpp_pool;
				zpp_nape.util.ZNPNode_ListenerIterator.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ListenerIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ListenerIterator(); else {
					ret = zpp_nape.util.ZNPNode_ListenerIterator.zpp_pool;
					zpp_nape.util.ZNPNode_ListenerIterator.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ListenerIterator.zpp_pool;
	zpp_nape.util.ZNPNode_ListenerIterator.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ListenerIterator.zpp_pool;
		zpp_nape.util.ZNPNode_ListenerIterator.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ListenerIterator.prototype.__class__ = zpp_nape.util.ZNPList_ListenerIterator;
zpp_nape.util.ZNPList_RayResult = function(p) {
}
zpp_nape.util.ZNPList_RayResult.__name__ = ["zpp_nape","util","ZNPList_RayResult"];
zpp_nape.util.ZNPList_RayResult.prototype.head = null;
zpp_nape.util.ZNPList_RayResult.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_RayResult.prototype.modified = null;
zpp_nape.util.ZNPList_RayResult.prototype.pushmod = null;
zpp_nape.util.ZNPList_RayResult.prototype.mcnt = null;
zpp_nape.util.ZNPList_RayResult.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_RayResult.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_RayResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_RayResult(); else {
				ret = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
				zpp_nape.util.ZNPNode_RayResult.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_RayResult.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_RayResult.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_RayResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_RayResult(); else {
					ret = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
					zpp_nape.util.ZNPNode_RayResult.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_RayResult.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
	zpp_nape.util.ZNPNode_RayResult.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_RayResult.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_RayResult.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_RayResult.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_RayResult.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_RayResult.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_RayResult.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_RayResult.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_RayResult.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_RayResult.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_RayResult.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_RayResult.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_RayResult.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_RayResult.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_RayResult.prototype.__class__ = zpp_nape.util.ZNPList_RayResult;
zpp_nape.util.ZNPList_ZPP_Vec2 = function(p) {
}
zpp_nape.util.ZNPList_ZPP_Vec2.__name__ = ["zpp_nape","util","ZNPList_ZPP_Vec2"];
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Vec2(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Vec2(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_Vec2.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Vec2;
zpp_nape.util.ZNPList_RayResultIterator = function(p) {
}
zpp_nape.util.ZNPList_RayResultIterator.__name__ = ["zpp_nape","util","ZNPList_RayResultIterator"];
zpp_nape.util.ZNPList_RayResultIterator.prototype.head = null;
zpp_nape.util.ZNPList_RayResultIterator.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.modified = null;
zpp_nape.util.ZNPList_RayResultIterator.prototype.pushmod = null;
zpp_nape.util.ZNPList_RayResultIterator.prototype.mcnt = null;
zpp_nape.util.ZNPList_RayResultIterator.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_RayResultIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_RayResultIterator(); else {
				ret = zpp_nape.util.ZNPNode_RayResultIterator.zpp_pool;
				zpp_nape.util.ZNPNode_RayResultIterator.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_RayResultIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_RayResultIterator(); else {
					ret = zpp_nape.util.ZNPNode_RayResultIterator.zpp_pool;
					zpp_nape.util.ZNPNode_RayResultIterator.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_RayResultIterator.zpp_pool;
	zpp_nape.util.ZNPNode_RayResultIterator.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_RayResultIterator.zpp_pool;
		zpp_nape.util.ZNPNode_RayResultIterator.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_RayResultIterator.prototype.__class__ = zpp_nape.util.ZNPList_RayResultIterator;
zpp_nape.util.ZNPList_Vec2Iterator = function(p) {
}
zpp_nape.util.ZNPList_Vec2Iterator.__name__ = ["zpp_nape","util","ZNPList_Vec2Iterator"];
zpp_nape.util.ZNPList_Vec2Iterator.prototype.head = null;
zpp_nape.util.ZNPList_Vec2Iterator.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.modified = null;
zpp_nape.util.ZNPList_Vec2Iterator.prototype.pushmod = null;
zpp_nape.util.ZNPList_Vec2Iterator.prototype.mcnt = null;
zpp_nape.util.ZNPList_Vec2Iterator.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_Vec2Iterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_Vec2Iterator(); else {
				ret = zpp_nape.util.ZNPNode_Vec2Iterator.zpp_pool;
				zpp_nape.util.ZNPNode_Vec2Iterator.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_Vec2Iterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_Vec2Iterator(); else {
					ret = zpp_nape.util.ZNPNode_Vec2Iterator.zpp_pool;
					zpp_nape.util.ZNPNode_Vec2Iterator.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_Vec2Iterator.zpp_pool;
	zpp_nape.util.ZNPNode_Vec2Iterator.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_Vec2Iterator.zpp_pool;
		zpp_nape.util.ZNPNode_Vec2Iterator.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_Vec2Iterator.prototype.__class__ = zpp_nape.util.ZNPList_Vec2Iterator;
zpp_nape.util.ZNPList_ZPP_GeomPoly = function(p) {
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomPoly"];
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomPoly(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomPoly(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_GeomPoly;
zpp_nape.util.ZNPList_GeomPolyIterator = function(p) {
}
zpp_nape.util.ZNPList_GeomPolyIterator.__name__ = ["zpp_nape","util","ZNPList_GeomPolyIterator"];
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.head = null;
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.modified = null;
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.pushmod = null;
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.mcnt = null;
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_GeomPolyIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_GeomPolyIterator(); else {
				ret = zpp_nape.util.ZNPNode_GeomPolyIterator.zpp_pool;
				zpp_nape.util.ZNPNode_GeomPolyIterator.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_GeomPolyIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_GeomPolyIterator(); else {
					ret = zpp_nape.util.ZNPNode_GeomPolyIterator.zpp_pool;
					zpp_nape.util.ZNPNode_GeomPolyIterator.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_GeomPolyIterator.zpp_pool;
	zpp_nape.util.ZNPNode_GeomPolyIterator.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_GeomPolyIterator.zpp_pool;
		zpp_nape.util.ZNPNode_GeomPolyIterator.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_GeomPolyIterator.prototype.__class__ = zpp_nape.util.ZNPList_GeomPolyIterator;
zpp_nape.util.ZNPList_ZPP_Body = function(p) {
}
zpp_nape.util.ZNPList_ZPP_Body.__name__ = ["zpp_nape","util","ZNPList_ZPP_Body"];
zpp_nape.util.ZNPList_ZPP_Body.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Body.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Body.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Body.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_Body.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Body(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Body(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_Body.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Body;
zpp_nape.util.ZNPList_BodyIterator = function(p) {
}
zpp_nape.util.ZNPList_BodyIterator.__name__ = ["zpp_nape","util","ZNPList_BodyIterator"];
zpp_nape.util.ZNPList_BodyIterator.prototype.head = null;
zpp_nape.util.ZNPList_BodyIterator.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_BodyIterator.prototype.modified = null;
zpp_nape.util.ZNPList_BodyIterator.prototype.pushmod = null;
zpp_nape.util.ZNPList_BodyIterator.prototype.mcnt = null;
zpp_nape.util.ZNPList_BodyIterator.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_BodyIterator.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_BodyIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_BodyIterator(); else {
				ret = zpp_nape.util.ZNPNode_BodyIterator.zpp_pool;
				zpp_nape.util.ZNPNode_BodyIterator.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_BodyIterator.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_BodyIterator.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_BodyIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_BodyIterator(); else {
					ret = zpp_nape.util.ZNPNode_BodyIterator.zpp_pool;
					zpp_nape.util.ZNPNode_BodyIterator.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_BodyIterator.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_BodyIterator.zpp_pool;
	zpp_nape.util.ZNPNode_BodyIterator.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_BodyIterator.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_BodyIterator.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_BodyIterator.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_BodyIterator.zpp_pool;
		zpp_nape.util.ZNPNode_BodyIterator.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_BodyIterator.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_BodyIterator.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_BodyIterator.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_BodyIterator.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_BodyIterator.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_BodyIterator.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_BodyIterator.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_BodyIterator.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_BodyIterator.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_BodyIterator.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_BodyIterator.prototype.__class__ = zpp_nape.util.ZNPList_BodyIterator;
zpp_nape.util.ZNPList_ZPP_Edge = function(p) {
}
zpp_nape.util.ZNPList_ZPP_Edge.__name__ = ["zpp_nape","util","ZNPList_ZPP_Edge"];
zpp_nape.util.ZNPList_ZPP_Edge.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Edge.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Edge.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Edge.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_Edge.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Edge(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Edge(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_Edge.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Edge;
zpp_nape.util.ZNPList_EdgeIterator = function(p) {
}
zpp_nape.util.ZNPList_EdgeIterator.__name__ = ["zpp_nape","util","ZNPList_EdgeIterator"];
zpp_nape.util.ZNPList_EdgeIterator.prototype.head = null;
zpp_nape.util.ZNPList_EdgeIterator.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.modified = null;
zpp_nape.util.ZNPList_EdgeIterator.prototype.pushmod = null;
zpp_nape.util.ZNPList_EdgeIterator.prototype.mcnt = null;
zpp_nape.util.ZNPList_EdgeIterator.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_EdgeIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_EdgeIterator(); else {
				ret = zpp_nape.util.ZNPNode_EdgeIterator.zpp_pool;
				zpp_nape.util.ZNPNode_EdgeIterator.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_EdgeIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_EdgeIterator(); else {
					ret = zpp_nape.util.ZNPNode_EdgeIterator.zpp_pool;
					zpp_nape.util.ZNPNode_EdgeIterator.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_EdgeIterator.zpp_pool;
	zpp_nape.util.ZNPNode_EdgeIterator.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_EdgeIterator.zpp_pool;
		zpp_nape.util.ZNPNode_EdgeIterator.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_EdgeIterator.prototype.__class__ = zpp_nape.util.ZNPList_EdgeIterator;
zpp_nape.util.ZNPList_ZPP_Shape = function(p) {
}
zpp_nape.util.ZNPList_ZPP_Shape.__name__ = ["zpp_nape","util","ZNPList_ZPP_Shape"];
zpp_nape.util.ZNPList_ZPP_Shape.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Shape.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Shape.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Shape.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_Shape.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Shape(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Shape(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_Shape.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Shape;
zpp_nape.util.ZNPList_ShapeIterator = function(p) {
}
zpp_nape.util.ZNPList_ShapeIterator.__name__ = ["zpp_nape","util","ZNPList_ShapeIterator"];
zpp_nape.util.ZNPList_ShapeIterator.prototype.head = null;
zpp_nape.util.ZNPList_ShapeIterator.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.modified = null;
zpp_nape.util.ZNPList_ShapeIterator.prototype.pushmod = null;
zpp_nape.util.ZNPList_ShapeIterator.prototype.mcnt = null;
zpp_nape.util.ZNPList_ShapeIterator.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ShapeIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ShapeIterator(); else {
				ret = zpp_nape.util.ZNPNode_ShapeIterator.zpp_pool;
				zpp_nape.util.ZNPNode_ShapeIterator.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ShapeIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ShapeIterator(); else {
					ret = zpp_nape.util.ZNPNode_ShapeIterator.zpp_pool;
					zpp_nape.util.ZNPNode_ShapeIterator.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ShapeIterator.zpp_pool;
	zpp_nape.util.ZNPNode_ShapeIterator.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ShapeIterator.zpp_pool;
		zpp_nape.util.ZNPNode_ShapeIterator.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ShapeIterator.prototype.__class__ = zpp_nape.util.ZNPList_ShapeIterator;
zpp_nape.util.ZNPList_ContactIterator = function(p) {
}
zpp_nape.util.ZNPList_ContactIterator.__name__ = ["zpp_nape","util","ZNPList_ContactIterator"];
zpp_nape.util.ZNPList_ContactIterator.prototype.head = null;
zpp_nape.util.ZNPList_ContactIterator.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ContactIterator.prototype.modified = null;
zpp_nape.util.ZNPList_ContactIterator.prototype.pushmod = null;
zpp_nape.util.ZNPList_ContactIterator.prototype.mcnt = null;
zpp_nape.util.ZNPList_ContactIterator.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ContactIterator.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ContactIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ContactIterator(); else {
				ret = zpp_nape.util.ZNPNode_ContactIterator.zpp_pool;
				zpp_nape.util.ZNPNode_ContactIterator.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ContactIterator.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ContactIterator.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ContactIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ContactIterator(); else {
					ret = zpp_nape.util.ZNPNode_ContactIterator.zpp_pool;
					zpp_nape.util.ZNPNode_ContactIterator.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ContactIterator.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ContactIterator.zpp_pool;
	zpp_nape.util.ZNPNode_ContactIterator.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ContactIterator.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ContactIterator.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ContactIterator.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ContactIterator.zpp_pool;
		zpp_nape.util.ZNPNode_ContactIterator.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ContactIterator.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ContactIterator.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ContactIterator.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ContactIterator.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ContactIterator.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ContactIterator.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ContactIterator.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ContactIterator.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ContactIterator.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ContactIterator.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ContactIterator.prototype.__class__ = zpp_nape.util.ZNPList_ContactIterator;
zpp_nape.util.ZNPList_ZPP_Arbiter = function(p) {
}
zpp_nape.util.ZNPList_ZPP_Arbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_Arbiter"];
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Arbiter(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Arbiter(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Arbiter;
zpp_nape.util.ZNPList_ArbiterIterator = function(p) {
}
zpp_nape.util.ZNPList_ArbiterIterator.__name__ = ["zpp_nape","util","ZNPList_ArbiterIterator"];
zpp_nape.util.ZNPList_ArbiterIterator.prototype.head = null;
zpp_nape.util.ZNPList_ArbiterIterator.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.modified = null;
zpp_nape.util.ZNPList_ArbiterIterator.prototype.pushmod = null;
zpp_nape.util.ZNPList_ArbiterIterator.prototype.mcnt = null;
zpp_nape.util.ZNPList_ArbiterIterator.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ArbiterIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ArbiterIterator(); else {
				ret = zpp_nape.util.ZNPNode_ArbiterIterator.zpp_pool;
				zpp_nape.util.ZNPNode_ArbiterIterator.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ArbiterIterator.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ArbiterIterator(); else {
					ret = zpp_nape.util.ZNPNode_ArbiterIterator.zpp_pool;
					zpp_nape.util.ZNPNode_ArbiterIterator.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ArbiterIterator.zpp_pool;
	zpp_nape.util.ZNPNode_ArbiterIterator.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ArbiterIterator.zpp_pool;
		zpp_nape.util.ZNPNode_ArbiterIterator.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ArbiterIterator.prototype.__class__ = zpp_nape.util.ZNPList_ArbiterIterator;
zpp_nape.util.ZNPList_ZPP_GeomVert = function(p) {
}
zpp_nape.util.ZNPList_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomVert"];
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomVert(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomVert(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_GeomVert;
zpp_nape.util.ZNPList_ZPP_PartitionVertex = function(p) {
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZNPList_ZPP_PartitionVertex"];
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionVertex(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionVertex(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_PartitionVertex;
zpp_nape.util.ZNPList_ZPP_SimpleVert = function(p) {
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimpleVert"];
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleVert(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleVert(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_SimpleVert;
zpp_nape.util.ZNPList_ZPP_SimpleEvent = function(p) {
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimpleEvent"];
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleEvent(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleEvent(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_SimpleEvent;
zpp_nape.util.ZNPList_ZPP_SimplifyP = function(p) {
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimplifyP"];
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimplifyP(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimplifyP(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_SimplifyP;
zpp_nape.util.ZNPList_ZPP_AABBNode = function(p) {
}
zpp_nape.util.ZNPList_ZPP_AABBNode.__name__ = ["zpp_nape","util","ZNPList_ZPP_AABBNode"];
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBNode(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBNode(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_AABBNode;
zpp_nape.util.ZNPList_ZPP_Component = function(p) {
}
zpp_nape.util.ZNPList_ZPP_Component.__name__ = ["zpp_nape","util","ZNPList_ZPP_Component"];
zpp_nape.util.ZNPList_ZPP_Component.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_Component.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_Component.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_Component.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_Component.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Component(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Component(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_Component.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_Component;
zpp_nape.util.ZNPList_ZPP_FluidArbiter = function(p) {
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_FluidArbiter"];
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_FluidArbiter(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_FluidArbiter(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_FluidArbiter;
zpp_nape.util.ZNPList_ZPP_SensorArbiter = function(p) {
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_SensorArbiter"];
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SensorArbiter(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SensorArbiter(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_SensorArbiter;
zpp_nape.util.ZNPList_ZPP_ColArbiter = function(p) {
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_ColArbiter"];
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.head = null;
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.begin = function() {
	return this.head;
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.modified = null;
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.pushmod = null;
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.mcnt = null;
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.set_begin = function(i) {
	this.head = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ColArbiter(); else {
				ret = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
				zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}($this));
		ret.elt = o;
		$r = ret;
		return $r;
	}(this));
	temp.next = this.head;
	this.head = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.addAll = function(x) {
	var cx_ite = x.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.head;
	} else {
		var temp = (function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ColArbiter(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}($this));
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.pop = function() {
	var ret = this.head;
	this.head = ret.next;
	var o = ret;
	o.elt = null;
	o.next = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
	zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = o;
	if(this.head == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.pop_unsafe = function() {
	var ret = this.head.elt;
	this.pop();
	return ret;
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.head;
	var ret = false;
	while(cur != null) {
		if(cur.elt == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.head;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = o;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.clear = function() {
	while(!(this.head == null)) this.pop();
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.reverse = function() {
	var cur = this.head;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.head = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.empty = function() {
	return this.head == null;
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.size = function() {
	var cnt = 0;
	var cur = this.head;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.head;
			while(cx_ite != null) {
				var npite = cx_ite.elt;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.front = function() {
	return this.head.elt;
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.back = function() {
	var ret = this.head;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret.elt;
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.iterator_at = function(ind) {
	var ret = this.head;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it.elt:null;
}
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype.__class__ = zpp_nape.util.ZNPList_ZPP_ColArbiter;
zpp_nape.util.ZNPNode_ZPP_Constraint = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_Constraint.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Constraint"];
zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Constraint.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Constraint.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_Constraint.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_Constraint.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Constraint.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_Constraint.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Constraint;
zpp_nape.util.ZNPNode_ConstraintIterator = function(p) {
}
zpp_nape.util.ZNPNode_ConstraintIterator.__name__ = ["zpp_nape","util","ZNPNode_ConstraintIterator"];
zpp_nape.util.ZNPNode_ConstraintIterator.zpp_pool = null;
zpp_nape.util.ZNPNode_ConstraintIterator.prototype.next = null;
zpp_nape.util.ZNPNode_ConstraintIterator.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ConstraintIterator.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ConstraintIterator.prototype.elt = null;
zpp_nape.util.ZNPNode_ConstraintIterator.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ConstraintIterator.prototype.__class__ = zpp_nape.util.ZNPNode_ConstraintIterator;
zpp_nape.util.ZNPNode_ZPP_Listener = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_Listener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Listener"];
zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Listener.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Listener.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_Listener.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_Listener.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Listener.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_Listener.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Listener;
zpp_nape.util.ZNPNode_ListenerIterator = function(p) {
}
zpp_nape.util.ZNPNode_ListenerIterator.__name__ = ["zpp_nape","util","ZNPNode_ListenerIterator"];
zpp_nape.util.ZNPNode_ListenerIterator.zpp_pool = null;
zpp_nape.util.ZNPNode_ListenerIterator.prototype.next = null;
zpp_nape.util.ZNPNode_ListenerIterator.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ListenerIterator.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ListenerIterator.prototype.elt = null;
zpp_nape.util.ZNPNode_ListenerIterator.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ListenerIterator.prototype.__class__ = zpp_nape.util.ZNPNode_ListenerIterator;
zpp_nape.util.ZNPNode_RayResult = function(p) {
}
zpp_nape.util.ZNPNode_RayResult.__name__ = ["zpp_nape","util","ZNPNode_RayResult"];
zpp_nape.util.ZNPNode_RayResult.zpp_pool = null;
zpp_nape.util.ZNPNode_RayResult.prototype.next = null;
zpp_nape.util.ZNPNode_RayResult.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_RayResult.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_RayResult.prototype.elt = null;
zpp_nape.util.ZNPNode_RayResult.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_RayResult.prototype.__class__ = zpp_nape.util.ZNPNode_RayResult;
zpp_nape.util.ZNPNode_ZPP_Vec2 = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_Vec2.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Vec2"];
zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Vec2.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Vec2.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_Vec2.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_Vec2.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Vec2.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_Vec2.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Vec2;
zpp_nape.util.ZNPNode_RayResultIterator = function(p) {
}
zpp_nape.util.ZNPNode_RayResultIterator.__name__ = ["zpp_nape","util","ZNPNode_RayResultIterator"];
zpp_nape.util.ZNPNode_RayResultIterator.zpp_pool = null;
zpp_nape.util.ZNPNode_RayResultIterator.prototype.next = null;
zpp_nape.util.ZNPNode_RayResultIterator.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_RayResultIterator.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_RayResultIterator.prototype.elt = null;
zpp_nape.util.ZNPNode_RayResultIterator.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_RayResultIterator.prototype.__class__ = zpp_nape.util.ZNPNode_RayResultIterator;
zpp_nape.util.ZNPNode_Vec2Iterator = function(p) {
}
zpp_nape.util.ZNPNode_Vec2Iterator.__name__ = ["zpp_nape","util","ZNPNode_Vec2Iterator"];
zpp_nape.util.ZNPNode_Vec2Iterator.zpp_pool = null;
zpp_nape.util.ZNPNode_Vec2Iterator.prototype.next = null;
zpp_nape.util.ZNPNode_Vec2Iterator.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_Vec2Iterator.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_Vec2Iterator.prototype.elt = null;
zpp_nape.util.ZNPNode_Vec2Iterator.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_Vec2Iterator.prototype.__class__ = zpp_nape.util.ZNPNode_Vec2Iterator;
zpp_nape.util.ZNPNode_ZPP_GeomPoly = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_GeomPoly.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomPoly"];
zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_GeomPoly.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_GeomPoly.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_GeomPoly.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_GeomPoly.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_GeomPoly.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_GeomPoly.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_GeomPoly;
zpp_nape.util.ZNPNode_GeomPolyIterator = function(p) {
}
zpp_nape.util.ZNPNode_GeomPolyIterator.__name__ = ["zpp_nape","util","ZNPNode_GeomPolyIterator"];
zpp_nape.util.ZNPNode_GeomPolyIterator.zpp_pool = null;
zpp_nape.util.ZNPNode_GeomPolyIterator.prototype.next = null;
zpp_nape.util.ZNPNode_GeomPolyIterator.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_GeomPolyIterator.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_GeomPolyIterator.prototype.elt = null;
zpp_nape.util.ZNPNode_GeomPolyIterator.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_GeomPolyIterator.prototype.__class__ = zpp_nape.util.ZNPNode_GeomPolyIterator;
zpp_nape.util.ZNPNode_ZPP_Body = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_Body.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Body"];
zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Body.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Body.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_Body.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_Body.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Body.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_Body.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Body;
zpp_nape.util.ZNPNode_BodyIterator = function(p) {
}
zpp_nape.util.ZNPNode_BodyIterator.__name__ = ["zpp_nape","util","ZNPNode_BodyIterator"];
zpp_nape.util.ZNPNode_BodyIterator.zpp_pool = null;
zpp_nape.util.ZNPNode_BodyIterator.prototype.next = null;
zpp_nape.util.ZNPNode_BodyIterator.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_BodyIterator.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_BodyIterator.prototype.elt = null;
zpp_nape.util.ZNPNode_BodyIterator.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_BodyIterator.prototype.__class__ = zpp_nape.util.ZNPNode_BodyIterator;
zpp_nape.util.ZNPNode_ZPP_Edge = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_Edge.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Edge"];
zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Edge.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Edge.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_Edge.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_Edge.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Edge.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_Edge.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Edge;
zpp_nape.util.ZNPNode_EdgeIterator = function(p) {
}
zpp_nape.util.ZNPNode_EdgeIterator.__name__ = ["zpp_nape","util","ZNPNode_EdgeIterator"];
zpp_nape.util.ZNPNode_EdgeIterator.zpp_pool = null;
zpp_nape.util.ZNPNode_EdgeIterator.prototype.next = null;
zpp_nape.util.ZNPNode_EdgeIterator.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_EdgeIterator.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_EdgeIterator.prototype.elt = null;
zpp_nape.util.ZNPNode_EdgeIterator.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_EdgeIterator.prototype.__class__ = zpp_nape.util.ZNPNode_EdgeIterator;
zpp_nape.util.ZNPNode_ZPP_Shape = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_Shape.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Shape"];
zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Shape.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Shape.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_Shape.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_Shape.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Shape.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_Shape.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Shape;
zpp_nape.util.ZNPNode_ShapeIterator = function(p) {
}
zpp_nape.util.ZNPNode_ShapeIterator.__name__ = ["zpp_nape","util","ZNPNode_ShapeIterator"];
zpp_nape.util.ZNPNode_ShapeIterator.zpp_pool = null;
zpp_nape.util.ZNPNode_ShapeIterator.prototype.next = null;
zpp_nape.util.ZNPNode_ShapeIterator.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ShapeIterator.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ShapeIterator.prototype.elt = null;
zpp_nape.util.ZNPNode_ShapeIterator.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ShapeIterator.prototype.__class__ = zpp_nape.util.ZNPNode_ShapeIterator;
zpp_nape.util.ZNPNode_ContactIterator = function(p) {
}
zpp_nape.util.ZNPNode_ContactIterator.__name__ = ["zpp_nape","util","ZNPNode_ContactIterator"];
zpp_nape.util.ZNPNode_ContactIterator.zpp_pool = null;
zpp_nape.util.ZNPNode_ContactIterator.prototype.next = null;
zpp_nape.util.ZNPNode_ContactIterator.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ContactIterator.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ContactIterator.prototype.elt = null;
zpp_nape.util.ZNPNode_ContactIterator.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ContactIterator.prototype.__class__ = zpp_nape.util.ZNPNode_ContactIterator;
zpp_nape.util.ZNPNode_ZPP_Arbiter = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_Arbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Arbiter"];
zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Arbiter.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Arbiter.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_Arbiter.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_Arbiter.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Arbiter.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_Arbiter.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Arbiter;
zpp_nape.util.ZNPNode_ArbiterIterator = function(p) {
}
zpp_nape.util.ZNPNode_ArbiterIterator.__name__ = ["zpp_nape","util","ZNPNode_ArbiterIterator"];
zpp_nape.util.ZNPNode_ArbiterIterator.zpp_pool = null;
zpp_nape.util.ZNPNode_ArbiterIterator.prototype.next = null;
zpp_nape.util.ZNPNode_ArbiterIterator.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ArbiterIterator.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ArbiterIterator.prototype.elt = null;
zpp_nape.util.ZNPNode_ArbiterIterator.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ArbiterIterator.prototype.__class__ = zpp_nape.util.ZNPNode_ArbiterIterator;
zpp_nape.util.ZNPNode_ZPP_GeomVert = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomVert"];
zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_GeomVert.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_GeomVert.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_GeomVert.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_GeomVert.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_GeomVert.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_GeomVert.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_GeomVert;
zpp_nape.util.ZNPNode_ZPP_PartitionVertex = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZNPNode_ZPP_PartitionVertex"];
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_PartitionVertex;
zpp_nape.util.ZNPNode_ZPP_SimpleVert = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimpleVert"];
zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_SimpleVert.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_SimpleVert.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_SimpleVert.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_SimpleVert.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_SimpleVert.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_SimpleVert.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_SimpleVert;
zpp_nape.util.ZNPNode_ZPP_SimpleEvent = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimpleEvent"];
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_SimpleEvent;
zpp_nape.util.ZNPNode_ZPP_SimplifyP = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_SimplifyP.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimplifyP"];
zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_SimplifyP.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_SimplifyP.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_SimplifyP.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_SimplifyP.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_SimplifyP.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_SimplifyP.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_SimplifyP;
zpp_nape.util.ZNPNode_ZPP_AABBNode = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_AABBNode.__name__ = ["zpp_nape","util","ZNPNode_ZPP_AABBNode"];
zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_AABBNode.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_AABBNode.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_AABBNode.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_AABBNode.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_AABBNode.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_AABBNode.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_AABBNode;
zpp_nape.util.ZNPNode_ZPP_Component = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_Component.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Component"];
zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_Component.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_Component.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_Component.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_Component.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_Component.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_Component.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_Component;
zpp_nape.util.ZNPNode_ZPP_FluidArbiter = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_FluidArbiter"];
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_FluidArbiter;
zpp_nape.util.ZNPNode_ZPP_SensorArbiter = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SensorArbiter"];
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_SensorArbiter;
zpp_nape.util.ZNPNode_ZPP_ColArbiter = function(p) {
}
zpp_nape.util.ZNPNode_ZPP_ColArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ColArbiter"];
zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = null;
zpp_nape.util.ZNPNode_ZPP_ColArbiter.prototype.next = null;
zpp_nape.util.ZNPNode_ZPP_ColArbiter.prototype.alloc = function() {
}
zpp_nape.util.ZNPNode_ZPP_ColArbiter.prototype.free = function() {
	this.elt = null;
}
zpp_nape.util.ZNPNode_ZPP_ColArbiter.prototype.elt = null;
zpp_nape.util.ZNPNode_ZPP_ColArbiter.prototype.elem = function() {
	return this.elt;
}
zpp_nape.util.ZNPNode_ZPP_ColArbiter.prototype.__class__ = zpp_nape.util.ZNPNode_ZPP_ColArbiter;
nape.geom.Vec2List = function(p) {
	if( p === $_ ) return;
	this.zpp_inner = new zpp_nape.util.ZPP_Vec2List();
	this.zpp_inner.outer = this;
}
nape.geom.Vec2List.__name__ = ["nape","geom","Vec2List"];
nape.geom.Vec2List.fromArray = function(array) {
	var ret = new nape.geom.Vec2List();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.geom.Vec2List.prototype.zpp_inner = null;
nape.geom.Vec2List.prototype.length = null;
nape.geom.Vec2List.prototype.flibget_length = function() {
	return this.zpp_gl();
}
nape.geom.Vec2List.prototype.zpp_gl = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.length;
	}
	return this.zpp_inner.user_length;
}
nape.geom.Vec2List.prototype.zpp_vm = function() {
	this.zpp_inner.valmod();
}
nape.geom.Vec2List.prototype.has = function(obj) {
	this.zpp_vm();
	return this.zpp_inner.inner.has(obj.zpp_inner);
}
nape.geom.Vec2List.prototype.at = function(index) {
	this.zpp_vm();
	if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.wrapper();
}
nape.geom.Vec2List.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.empty()?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.geom.Vec2List.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.empty()?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.geom.Vec2List.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.empty()) throw "Error: Cannot remove from empty list";
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.zpp_gl() == 1?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx = ret.wrapper();
	return retx;
}
nape.geom.Vec2List.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.empty()) throw "Error: Cannot remove from empty list";
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.zpp_gl() == 1?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx = ret.wrapper();
	return retx;
}
nape.geom.Vec2List.prototype.add = function(obj) {
	return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
}
nape.geom.Vec2List.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var ret = (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var x = cx_ite.elt;
				if(x == obj.zpp_inner) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
}
nape.geom.Vec2List.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
}
nape.geom.Vec2List.prototype.empty = function() {
	return this.zpp_gl() == 0;
}
nape.geom.Vec2List.prototype.iterator = function() {
	this.zpp_vm();
	if(this.zpp_inner.iterators == null) this.zpp_inner.iterators = new zpp_nape.util.ZNPList_Vec2Iterator();
	return nape.geom.Vec2Iterator.get(this);
}
nape.geom.Vec2List.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.geom.Vec2List();
	var $it0 = this.iterator();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		ret.push(deep?(function($this) {
			var $r;
			if(i != null && i.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = nape.geom.Vec2.get((function($this) {
				var $r;
				if(i != null && i.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				i.zpp_inner.validate();
				$r = i.zpp_inner.x;
				return $r;
			}($this)),(function($this) {
				var $r;
				if(i != null && i.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				i.zpp_inner.validate();
				$r = i.zpp_inner.y;
				return $r;
			}($this)),false);
			return $r;
		}(this)):i);
	}
	return ret;
}
nape.geom.Vec2List.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var $it0 = xs.iterator();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(!this.has(x)) this.add(x);
	}
}
nape.geom.Vec2List.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var $it0 = this.iterator();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		if(!fst) ret += ",";
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
}
nape.geom.Vec2List.prototype.__class__ = nape.geom.Vec2List;
zpp_nape.util.ZPP_MixVec2List = function(p) {
	if( p === $_ ) return;
	nape.geom.Vec2List.call(this);
	this.at_ite = null;
	this.at_index = 0;
	this.zip_length = true;
	this._length = 0;
}
zpp_nape.util.ZPP_MixVec2List.__name__ = ["zpp_nape","util","ZPP_MixVec2List"];
zpp_nape.util.ZPP_MixVec2List.__super__ = nape.geom.Vec2List;
for(var k in nape.geom.Vec2List.prototype ) zpp_nape.util.ZPP_MixVec2List.prototype[k] = nape.geom.Vec2List.prototype[k];
zpp_nape.util.ZPP_MixVec2List.get = function(list,immutable) {
	if(immutable == null) immutable = false;
	var ret = new zpp_nape.util.ZPP_MixVec2List();
	ret.inner = list;
	ret.zpp_inner.immutable = immutable;
	return ret;
}
zpp_nape.util.ZPP_MixVec2List.prototype.inner = null;
zpp_nape.util.ZPP_MixVec2List.prototype._length = null;
zpp_nape.util.ZPP_MixVec2List.prototype.zip_length = null;
zpp_nape.util.ZPP_MixVec2List.prototype.at_ite = null;
zpp_nape.util.ZPP_MixVec2List.prototype.at_index = null;
zpp_nape.util.ZPP_MixVec2List.prototype.zpp_gl = function() {
	this.zpp_vm();
	if(this.zip_length) {
		this._length = 0;
		var cx_ite = this.inner.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this._length++;
			cx_ite = cx_ite.next;
		}
		this.zip_length = false;
	}
	return this._length;
}
zpp_nape.util.ZPP_MixVec2List.prototype.zpp_vm = function() {
	this.zpp_inner.validate();
	if(this.inner.modified) {
		if(this.zpp_inner.iterators != null) {
			var cx_ite = this.zpp_inner.iterators.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour. In this case it appears that you are using api functions that modify this list between hasNext() and next() calls which bypass the usual checks.";
				cx_ite = cx_ite.next;
			}
		}
		this.zip_length = true;
		this._length = 0;
		this.at_ite = null;
	}
}
zpp_nape.util.ZPP_MixVec2List.prototype.at = function(index) {
	this.zpp_vm();
	if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
	if(index < this.at_index || this.at_ite == null) {
		this.at_index = 0;
		this.at_ite = this.inner.next;
		while(true) {
			var x = this.at_ite;
			break;
			this.at_ite = this.at_ite.next;
		}
	}
	while(this.at_index != index) {
		this.at_index++;
		this.at_ite = this.at_ite.next;
		while(true) {
			var x = this.at_ite;
			break;
			this.at_ite = this.at_ite.next;
		}
	}
	return this.at_ite.wrapper();
}
zpp_nape.util.ZPP_MixVec2List.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	if(obj.zpp_inner.inuse) throw "Error: " + "Vec2" + " is already in use";
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.inner.add(obj.zpp_inner); else {
			var ite = this.inner.iterator_at(this.zpp_gl() - 1);
			this.inner.insert(ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
zpp_nape.util.ZPP_MixVec2List.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	if(obj.zpp_inner.inuse) throw "Error: " + "Vec2" + " is already in use";
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			var ite = this.inner.iterator_at(this.zpp_gl() - 1);
			this.inner.insert(ite,obj.zpp_inner);
		} else this.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
zpp_nape.util.ZPP_MixVec2List.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.empty()) throw "Error: Cannot remove from empty list";
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.inner.next;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.inner.pop();
	} else {
		if(this.at_ite != null && this.at_ite.next == null) this.at_ite = null;
		var ite = this.zpp_gl() == 1?null:this.inner.iterator_at(this.zpp_gl() - 2);
		ret = ite == null?this.inner.next:ite.next;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx = ret.wrapper();
	return retx;
}
zpp_nape.util.ZPP_MixVec2List.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.empty()) throw "Error: Cannot remove from empty list";
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.at_ite != null && this.at_ite.next == null) this.at_ite = null;
		var ite = this.zpp_gl() == 1?null:this.inner.iterator_at(this.zpp_gl() - 2);
		ret = ite == null?this.inner.next:ite.next;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.inner.erase(ite);
	} else {
		ret = this.inner.next;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx = ret.wrapper();
	return retx;
}
zpp_nape.util.ZPP_MixVec2List.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var ret = (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.inner.next;
			while(cx_ite != null) {
				var x = cx_ite;
				if(obj.zpp_inner == x) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		this.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
}
zpp_nape.util.ZPP_MixVec2List.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
}
zpp_nape.util.ZPP_MixVec2List.prototype.__class__ = zpp_nape.util.ZPP_MixVec2List;
zpp_nape.util.ZPP_ConstraintList = function(p) {
	if( p === $_ ) return;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Constraint();
}
zpp_nape.util.ZPP_ConstraintList.__name__ = ["zpp_nape","util","ZPP_ConstraintList"];
zpp_nape.util.ZPP_ConstraintList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.constraint.ConstraintList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_ConstraintList.prototype.outer = null;
zpp_nape.util.ZPP_ConstraintList.prototype.inner = null;
zpp_nape.util.ZPP_ConstraintList.prototype.immutable = null;
zpp_nape.util.ZPP_ConstraintList.prototype._invalidated = null;
zpp_nape.util.ZPP_ConstraintList.prototype._invalidate = null;
zpp_nape.util.ZPP_ConstraintList.prototype._validate = null;
zpp_nape.util.ZPP_ConstraintList.prototype._modifiable = null;
zpp_nape.util.ZPP_ConstraintList.prototype.iterators = null;
zpp_nape.util.ZPP_ConstraintList.prototype.adder = null;
zpp_nape.util.ZPP_ConstraintList.prototype.post_adder = null;
zpp_nape.util.ZPP_ConstraintList.prototype.subber = null;
zpp_nape.util.ZPP_ConstraintList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_ConstraintList.prototype.valmod = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
	if(this.inner.modified) {
		if(this.iterators != null) {
			var cx_ite = this.iterators.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour. In this case it appears that you are using api functions that modify this list between hasNext() and next() calls which bypass the usual checks.";
				cx_ite = cx_ite.next;
			}
		}
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.length += this.inner.mcnt;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.inner.mcnt = 0;
		this.zip_length = true;
	}
}
zpp_nape.util.ZPP_ConstraintList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
}
zpp_nape.util.ZPP_ConstraintList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
	if(this.iterators != null) {
		var cx_ite = this.iterators.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour";
			cx_ite = cx_ite.next;
		}
	}
}
zpp_nape.util.ZPP_ConstraintList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
}
zpp_nape.util.ZPP_ConstraintList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
}
zpp_nape.util.ZPP_ConstraintList.prototype.at_index = null;
zpp_nape.util.ZPP_ConstraintList.prototype.at_ite = null;
zpp_nape.util.ZPP_ConstraintList.prototype.push_ite = null;
zpp_nape.util.ZPP_ConstraintList.prototype.length = null;
zpp_nape.util.ZPP_ConstraintList.prototype.zip_length = null;
zpp_nape.util.ZPP_ConstraintList.prototype.user_length = null;
zpp_nape.util.ZPP_ConstraintList.prototype.__class__ = zpp_nape.util.ZPP_ConstraintList;
zpp_nape.util.ZPP_ListenerList = function(p) {
	if( p === $_ ) return;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Listener();
}
zpp_nape.util.ZPP_ListenerList.__name__ = ["zpp_nape","util","ZPP_ListenerList"];
zpp_nape.util.ZPP_ListenerList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.callbacks.ListenerList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_ListenerList.prototype.outer = null;
zpp_nape.util.ZPP_ListenerList.prototype.inner = null;
zpp_nape.util.ZPP_ListenerList.prototype.immutable = null;
zpp_nape.util.ZPP_ListenerList.prototype._invalidated = null;
zpp_nape.util.ZPP_ListenerList.prototype._invalidate = null;
zpp_nape.util.ZPP_ListenerList.prototype._validate = null;
zpp_nape.util.ZPP_ListenerList.prototype._modifiable = null;
zpp_nape.util.ZPP_ListenerList.prototype.iterators = null;
zpp_nape.util.ZPP_ListenerList.prototype.adder = null;
zpp_nape.util.ZPP_ListenerList.prototype.post_adder = null;
zpp_nape.util.ZPP_ListenerList.prototype.subber = null;
zpp_nape.util.ZPP_ListenerList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_ListenerList.prototype.valmod = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
	if(this.inner.modified) {
		if(this.iterators != null) {
			var cx_ite = this.iterators.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour. In this case it appears that you are using api functions that modify this list between hasNext() and next() calls which bypass the usual checks.";
				cx_ite = cx_ite.next;
			}
		}
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.length += this.inner.mcnt;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.inner.mcnt = 0;
		this.zip_length = true;
	}
}
zpp_nape.util.ZPP_ListenerList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
}
zpp_nape.util.ZPP_ListenerList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
	if(this.iterators != null) {
		var cx_ite = this.iterators.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour";
			cx_ite = cx_ite.next;
		}
	}
}
zpp_nape.util.ZPP_ListenerList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
}
zpp_nape.util.ZPP_ListenerList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
}
zpp_nape.util.ZPP_ListenerList.prototype.at_index = null;
zpp_nape.util.ZPP_ListenerList.prototype.at_ite = null;
zpp_nape.util.ZPP_ListenerList.prototype.push_ite = null;
zpp_nape.util.ZPP_ListenerList.prototype.length = null;
zpp_nape.util.ZPP_ListenerList.prototype.zip_length = null;
zpp_nape.util.ZPP_ListenerList.prototype.user_length = null;
zpp_nape.util.ZPP_ListenerList.prototype.__class__ = zpp_nape.util.ZPP_ListenerList;
zpp_nape.util.ZPP_RayResultList = function(p) {
	if( p === $_ ) return;
	this.inner = new zpp_nape.util.ZNPList_RayResult();
}
zpp_nape.util.ZPP_RayResultList.__name__ = ["zpp_nape","util","ZPP_RayResultList"];
zpp_nape.util.ZPP_RayResultList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.RayResultList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_RayResultList.prototype.outer = null;
zpp_nape.util.ZPP_RayResultList.prototype.inner = null;
zpp_nape.util.ZPP_RayResultList.prototype.immutable = null;
zpp_nape.util.ZPP_RayResultList.prototype._invalidated = null;
zpp_nape.util.ZPP_RayResultList.prototype._invalidate = null;
zpp_nape.util.ZPP_RayResultList.prototype._validate = null;
zpp_nape.util.ZPP_RayResultList.prototype._modifiable = null;
zpp_nape.util.ZPP_RayResultList.prototype.iterators = null;
zpp_nape.util.ZPP_RayResultList.prototype.adder = null;
zpp_nape.util.ZPP_RayResultList.prototype.post_adder = null;
zpp_nape.util.ZPP_RayResultList.prototype.subber = null;
zpp_nape.util.ZPP_RayResultList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_RayResultList.prototype.valmod = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
	if(this.inner.modified) {
		if(this.iterators != null) {
			var cx_ite = this.iterators.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour. In this case it appears that you are using api functions that modify this list between hasNext() and next() calls which bypass the usual checks.";
				cx_ite = cx_ite.next;
			}
		}
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.length += this.inner.mcnt;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.inner.mcnt = 0;
		this.zip_length = true;
	}
}
zpp_nape.util.ZPP_RayResultList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
}
zpp_nape.util.ZPP_RayResultList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
	if(this.iterators != null) {
		var cx_ite = this.iterators.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour";
			cx_ite = cx_ite.next;
		}
	}
}
zpp_nape.util.ZPP_RayResultList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
}
zpp_nape.util.ZPP_RayResultList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
}
zpp_nape.util.ZPP_RayResultList.prototype.at_index = null;
zpp_nape.util.ZPP_RayResultList.prototype.at_ite = null;
zpp_nape.util.ZPP_RayResultList.prototype.push_ite = null;
zpp_nape.util.ZPP_RayResultList.prototype.length = null;
zpp_nape.util.ZPP_RayResultList.prototype.zip_length = null;
zpp_nape.util.ZPP_RayResultList.prototype.user_length = null;
zpp_nape.util.ZPP_RayResultList.prototype.__class__ = zpp_nape.util.ZPP_RayResultList;
zpp_nape.util.ZPP_Vec2List = function(p) {
	if( p === $_ ) return;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Vec2();
}
zpp_nape.util.ZPP_Vec2List.__name__ = ["zpp_nape","util","ZPP_Vec2List"];
zpp_nape.util.ZPP_Vec2List.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.Vec2List();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_Vec2List.prototype.outer = null;
zpp_nape.util.ZPP_Vec2List.prototype.inner = null;
zpp_nape.util.ZPP_Vec2List.prototype.immutable = null;
zpp_nape.util.ZPP_Vec2List.prototype._invalidated = null;
zpp_nape.util.ZPP_Vec2List.prototype._invalidate = null;
zpp_nape.util.ZPP_Vec2List.prototype._validate = null;
zpp_nape.util.ZPP_Vec2List.prototype._modifiable = null;
zpp_nape.util.ZPP_Vec2List.prototype.iterators = null;
zpp_nape.util.ZPP_Vec2List.prototype.adder = null;
zpp_nape.util.ZPP_Vec2List.prototype.post_adder = null;
zpp_nape.util.ZPP_Vec2List.prototype.subber = null;
zpp_nape.util.ZPP_Vec2List.prototype.reverse_flag = null;
zpp_nape.util.ZPP_Vec2List.prototype.valmod = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
	if(this.inner.modified) {
		if(this.iterators != null) {
			var cx_ite = this.iterators.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour. In this case it appears that you are using api functions that modify this list between hasNext() and next() calls which bypass the usual checks.";
				cx_ite = cx_ite.next;
			}
		}
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.length += this.inner.mcnt;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.inner.mcnt = 0;
		this.zip_length = true;
	}
}
zpp_nape.util.ZPP_Vec2List.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
}
zpp_nape.util.ZPP_Vec2List.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
	if(this.iterators != null) {
		var cx_ite = this.iterators.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour";
			cx_ite = cx_ite.next;
		}
	}
}
zpp_nape.util.ZPP_Vec2List.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
}
zpp_nape.util.ZPP_Vec2List.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
}
zpp_nape.util.ZPP_Vec2List.prototype.at_index = null;
zpp_nape.util.ZPP_Vec2List.prototype.at_ite = null;
zpp_nape.util.ZPP_Vec2List.prototype.push_ite = null;
zpp_nape.util.ZPP_Vec2List.prototype.length = null;
zpp_nape.util.ZPP_Vec2List.prototype.zip_length = null;
zpp_nape.util.ZPP_Vec2List.prototype.user_length = null;
zpp_nape.util.ZPP_Vec2List.prototype.__class__ = zpp_nape.util.ZPP_Vec2List;
zpp_nape.util.ZPP_GeomPolyList = function(p) {
	if( p === $_ ) return;
	this.inner = new zpp_nape.util.ZNPList_ZPP_GeomPoly();
}
zpp_nape.util.ZPP_GeomPolyList.__name__ = ["zpp_nape","util","ZPP_GeomPolyList"];
zpp_nape.util.ZPP_GeomPolyList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.GeomPolyList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_GeomPolyList.prototype.outer = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.inner = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.immutable = null;
zpp_nape.util.ZPP_GeomPolyList.prototype._invalidated = null;
zpp_nape.util.ZPP_GeomPolyList.prototype._invalidate = null;
zpp_nape.util.ZPP_GeomPolyList.prototype._validate = null;
zpp_nape.util.ZPP_GeomPolyList.prototype._modifiable = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.iterators = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.adder = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.post_adder = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.subber = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.valmod = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
	if(this.inner.modified) {
		if(this.iterators != null) {
			var cx_ite = this.iterators.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour. In this case it appears that you are using api functions that modify this list between hasNext() and next() calls which bypass the usual checks.";
				cx_ite = cx_ite.next;
			}
		}
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.length += this.inner.mcnt;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.inner.mcnt = 0;
		this.zip_length = true;
	}
}
zpp_nape.util.ZPP_GeomPolyList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
}
zpp_nape.util.ZPP_GeomPolyList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
	if(this.iterators != null) {
		var cx_ite = this.iterators.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour";
			cx_ite = cx_ite.next;
		}
	}
}
zpp_nape.util.ZPP_GeomPolyList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
}
zpp_nape.util.ZPP_GeomPolyList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
}
zpp_nape.util.ZPP_GeomPolyList.prototype.at_index = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.at_ite = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.push_ite = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.length = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.zip_length = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.user_length = null;
zpp_nape.util.ZPP_GeomPolyList.prototype.__class__ = zpp_nape.util.ZPP_GeomPolyList;
zpp_nape.util.ZPP_BodyList = function(p) {
	if( p === $_ ) return;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Body();
}
zpp_nape.util.ZPP_BodyList.__name__ = ["zpp_nape","util","ZPP_BodyList"];
zpp_nape.util.ZPP_BodyList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.phys.BodyList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_BodyList.prototype.outer = null;
zpp_nape.util.ZPP_BodyList.prototype.inner = null;
zpp_nape.util.ZPP_BodyList.prototype.immutable = null;
zpp_nape.util.ZPP_BodyList.prototype._invalidated = null;
zpp_nape.util.ZPP_BodyList.prototype._invalidate = null;
zpp_nape.util.ZPP_BodyList.prototype._validate = null;
zpp_nape.util.ZPP_BodyList.prototype._modifiable = null;
zpp_nape.util.ZPP_BodyList.prototype.iterators = null;
zpp_nape.util.ZPP_BodyList.prototype.adder = null;
zpp_nape.util.ZPP_BodyList.prototype.post_adder = null;
zpp_nape.util.ZPP_BodyList.prototype.subber = null;
zpp_nape.util.ZPP_BodyList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_BodyList.prototype.valmod = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
	if(this.inner.modified) {
		if(this.iterators != null) {
			var cx_ite = this.iterators.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour. In this case it appears that you are using api functions that modify this list between hasNext() and next() calls which bypass the usual checks.";
				cx_ite = cx_ite.next;
			}
		}
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.length += this.inner.mcnt;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.inner.mcnt = 0;
		this.zip_length = true;
	}
}
zpp_nape.util.ZPP_BodyList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
}
zpp_nape.util.ZPP_BodyList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
	if(this.iterators != null) {
		var cx_ite = this.iterators.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour";
			cx_ite = cx_ite.next;
		}
	}
}
zpp_nape.util.ZPP_BodyList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
}
zpp_nape.util.ZPP_BodyList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
}
zpp_nape.util.ZPP_BodyList.prototype.at_index = null;
zpp_nape.util.ZPP_BodyList.prototype.at_ite = null;
zpp_nape.util.ZPP_BodyList.prototype.push_ite = null;
zpp_nape.util.ZPP_BodyList.prototype.length = null;
zpp_nape.util.ZPP_BodyList.prototype.zip_length = null;
zpp_nape.util.ZPP_BodyList.prototype.user_length = null;
zpp_nape.util.ZPP_BodyList.prototype.__class__ = zpp_nape.util.ZPP_BodyList;
zpp_nape.util.ZPP_EdgeList = function(p) {
	if( p === $_ ) return;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Edge();
}
zpp_nape.util.ZPP_EdgeList.__name__ = ["zpp_nape","util","ZPP_EdgeList"];
zpp_nape.util.ZPP_EdgeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.shape.EdgeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_EdgeList.prototype.outer = null;
zpp_nape.util.ZPP_EdgeList.prototype.inner = null;
zpp_nape.util.ZPP_EdgeList.prototype.immutable = null;
zpp_nape.util.ZPP_EdgeList.prototype._invalidated = null;
zpp_nape.util.ZPP_EdgeList.prototype._invalidate = null;
zpp_nape.util.ZPP_EdgeList.prototype._validate = null;
zpp_nape.util.ZPP_EdgeList.prototype._modifiable = null;
zpp_nape.util.ZPP_EdgeList.prototype.iterators = null;
zpp_nape.util.ZPP_EdgeList.prototype.adder = null;
zpp_nape.util.ZPP_EdgeList.prototype.post_adder = null;
zpp_nape.util.ZPP_EdgeList.prototype.subber = null;
zpp_nape.util.ZPP_EdgeList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_EdgeList.prototype.valmod = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
	if(this.inner.modified) {
		if(this.iterators != null) {
			var cx_ite = this.iterators.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour. In this case it appears that you are using api functions that modify this list between hasNext() and next() calls which bypass the usual checks.";
				cx_ite = cx_ite.next;
			}
		}
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.length += this.inner.mcnt;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.inner.mcnt = 0;
		this.zip_length = true;
	}
}
zpp_nape.util.ZPP_EdgeList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
}
zpp_nape.util.ZPP_EdgeList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
	if(this.iterators != null) {
		var cx_ite = this.iterators.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour";
			cx_ite = cx_ite.next;
		}
	}
}
zpp_nape.util.ZPP_EdgeList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
}
zpp_nape.util.ZPP_EdgeList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
}
zpp_nape.util.ZPP_EdgeList.prototype.at_index = null;
zpp_nape.util.ZPP_EdgeList.prototype.at_ite = null;
zpp_nape.util.ZPP_EdgeList.prototype.push_ite = null;
zpp_nape.util.ZPP_EdgeList.prototype.length = null;
zpp_nape.util.ZPP_EdgeList.prototype.zip_length = null;
zpp_nape.util.ZPP_EdgeList.prototype.user_length = null;
zpp_nape.util.ZPP_EdgeList.prototype.__class__ = zpp_nape.util.ZPP_EdgeList;
zpp_nape.util.ZPP_ShapeList = function(p) {
	if( p === $_ ) return;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Shape();
}
zpp_nape.util.ZPP_ShapeList.__name__ = ["zpp_nape","util","ZPP_ShapeList"];
zpp_nape.util.ZPP_ShapeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.shape.ShapeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_ShapeList.prototype.outer = null;
zpp_nape.util.ZPP_ShapeList.prototype.inner = null;
zpp_nape.util.ZPP_ShapeList.prototype.immutable = null;
zpp_nape.util.ZPP_ShapeList.prototype._invalidated = null;
zpp_nape.util.ZPP_ShapeList.prototype._invalidate = null;
zpp_nape.util.ZPP_ShapeList.prototype._validate = null;
zpp_nape.util.ZPP_ShapeList.prototype._modifiable = null;
zpp_nape.util.ZPP_ShapeList.prototype.iterators = null;
zpp_nape.util.ZPP_ShapeList.prototype.adder = null;
zpp_nape.util.ZPP_ShapeList.prototype.post_adder = null;
zpp_nape.util.ZPP_ShapeList.prototype.subber = null;
zpp_nape.util.ZPP_ShapeList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_ShapeList.prototype.valmod = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
	if(this.inner.modified) {
		if(this.iterators != null) {
			var cx_ite = this.iterators.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour. In this case it appears that you are using api functions that modify this list between hasNext() and next() calls which bypass the usual checks.";
				cx_ite = cx_ite.next;
			}
		}
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.length += this.inner.mcnt;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.inner.mcnt = 0;
		this.zip_length = true;
	}
}
zpp_nape.util.ZPP_ShapeList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
}
zpp_nape.util.ZPP_ShapeList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
	if(this.iterators != null) {
		var cx_ite = this.iterators.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour";
			cx_ite = cx_ite.next;
		}
	}
}
zpp_nape.util.ZPP_ShapeList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
}
zpp_nape.util.ZPP_ShapeList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
}
zpp_nape.util.ZPP_ShapeList.prototype.at_index = null;
zpp_nape.util.ZPP_ShapeList.prototype.at_ite = null;
zpp_nape.util.ZPP_ShapeList.prototype.push_ite = null;
zpp_nape.util.ZPP_ShapeList.prototype.length = null;
zpp_nape.util.ZPP_ShapeList.prototype.zip_length = null;
zpp_nape.util.ZPP_ShapeList.prototype.user_length = null;
zpp_nape.util.ZPP_ShapeList.prototype.__class__ = zpp_nape.util.ZPP_ShapeList;
zpp_nape.util.ZPP_ContactList = function(p) {
	if( p === $_ ) return;
	this.inner = new zpp_nape.dynamics.ZPP_Contact();
}
zpp_nape.util.ZPP_ContactList.__name__ = ["zpp_nape","util","ZPP_ContactList"];
zpp_nape.util.ZPP_ContactList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.dynamics.ContactList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_ContactList.prototype.outer = null;
zpp_nape.util.ZPP_ContactList.prototype.inner = null;
zpp_nape.util.ZPP_ContactList.prototype.immutable = null;
zpp_nape.util.ZPP_ContactList.prototype._invalidated = null;
zpp_nape.util.ZPP_ContactList.prototype._invalidate = null;
zpp_nape.util.ZPP_ContactList.prototype._validate = null;
zpp_nape.util.ZPP_ContactList.prototype._modifiable = null;
zpp_nape.util.ZPP_ContactList.prototype.iterators = null;
zpp_nape.util.ZPP_ContactList.prototype.adder = null;
zpp_nape.util.ZPP_ContactList.prototype.post_adder = null;
zpp_nape.util.ZPP_ContactList.prototype.subber = null;
zpp_nape.util.ZPP_ContactList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_ContactList.prototype.valmod = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
	if(this.inner.modified) {
		if(this.iterators != null) {
			var cx_ite = this.iterators.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour. In this case it appears that you are using api functions that modify this list between hasNext() and next() calls which bypass the usual checks.";
				cx_ite = cx_ite.next;
			}
		}
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.length += this.inner.mcnt;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.inner.mcnt = 0;
		this.zip_length = true;
	}
}
zpp_nape.util.ZPP_ContactList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
}
zpp_nape.util.ZPP_ContactList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
	if(this.iterators != null) {
		var cx_ite = this.iterators.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour";
			cx_ite = cx_ite.next;
		}
	}
}
zpp_nape.util.ZPP_ContactList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
}
zpp_nape.util.ZPP_ContactList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
}
zpp_nape.util.ZPP_ContactList.prototype.at_index = null;
zpp_nape.util.ZPP_ContactList.prototype.at_ite = null;
zpp_nape.util.ZPP_ContactList.prototype.push_ite = null;
zpp_nape.util.ZPP_ContactList.prototype.length = null;
zpp_nape.util.ZPP_ContactList.prototype.zip_length = null;
zpp_nape.util.ZPP_ContactList.prototype.user_length = null;
zpp_nape.util.ZPP_ContactList.prototype.__class__ = zpp_nape.util.ZPP_ContactList;
zpp_nape.util.ZPP_ArbiterList = function(p) {
	if( p === $_ ) return;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Arbiter();
}
zpp_nape.util.ZPP_ArbiterList.__name__ = ["zpp_nape","util","ZPP_ArbiterList"];
zpp_nape.util.ZPP_ArbiterList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.dynamics.ArbiterList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_ArbiterList.prototype.outer = null;
zpp_nape.util.ZPP_ArbiterList.prototype.inner = null;
zpp_nape.util.ZPP_ArbiterList.prototype.immutable = null;
zpp_nape.util.ZPP_ArbiterList.prototype._invalidated = null;
zpp_nape.util.ZPP_ArbiterList.prototype._invalidate = null;
zpp_nape.util.ZPP_ArbiterList.prototype._validate = null;
zpp_nape.util.ZPP_ArbiterList.prototype._modifiable = null;
zpp_nape.util.ZPP_ArbiterList.prototype.iterators = null;
zpp_nape.util.ZPP_ArbiterList.prototype.adder = null;
zpp_nape.util.ZPP_ArbiterList.prototype.post_adder = null;
zpp_nape.util.ZPP_ArbiterList.prototype.subber = null;
zpp_nape.util.ZPP_ArbiterList.prototype.reverse_flag = null;
zpp_nape.util.ZPP_ArbiterList.prototype.valmod = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
	if(this.inner.modified) {
		if(this.iterators != null) {
			var cx_ite = this.iterators.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour. In this case it appears that you are using api functions that modify this list between hasNext() and next() calls which bypass the usual checks.";
				cx_ite = cx_ite.next;
			}
		}
		if(this.inner.pushmod) this.push_ite = null;
		this.at_ite = null;
		this.length += this.inner.mcnt;
		this.inner.modified = false;
		this.inner.pushmod = false;
		this.inner.mcnt = 0;
		this.zip_length = true;
	}
}
zpp_nape.util.ZPP_ArbiterList.prototype.modified = function() {
	this.zip_length = true;
	this.at_ite = null;
	this.push_ite = null;
}
zpp_nape.util.ZPP_ArbiterList.prototype.modify_test = function() {
	if(this._modifiable != null) this._modifiable();
	if(this.iterators != null) {
		var cx_ite = this.iterators.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour";
			cx_ite = cx_ite.next;
		}
	}
}
zpp_nape.util.ZPP_ArbiterList.prototype.validate = function() {
	if(this._invalidated) {
		this._invalidated = false;
		if(this._validate != null) this._validate();
	}
}
zpp_nape.util.ZPP_ArbiterList.prototype.invalidate = function() {
	this._invalidated = true;
	if(this._invalidate != null) this._invalidate(this);
}
zpp_nape.util.ZPP_ArbiterList.prototype.at_index = null;
zpp_nape.util.ZPP_ArbiterList.prototype.at_ite = null;
zpp_nape.util.ZPP_ArbiterList.prototype.push_ite = null;
zpp_nape.util.ZPP_ArbiterList.prototype.length = null;
zpp_nape.util.ZPP_ArbiterList.prototype.zip_length = null;
zpp_nape.util.ZPP_ArbiterList.prototype.user_length = null;
zpp_nape.util.ZPP_ArbiterList.prototype.__class__ = zpp_nape.util.ZPP_ArbiterList;
zpp_nape.ZPP_Const = function() { }
zpp_nape.ZPP_Const.__name__ = ["zpp_nape","ZPP_Const"];
zpp_nape.ZPP_Const.prototype.__class__ = zpp_nape.ZPP_Const;
jeash.text.TextFormat = function(in_font,in_size,in_color,in_bold,in_italic,in_underline,in_url,in_target,in_align,in_leftMargin,in_rightMargin,in_indent,in_leading) {
	if( in_font === $_ ) return;
	this.font = in_font;
	this.size = in_size;
	this.color = in_color;
	this.bold = in_bold;
	this.italic = in_italic;
	this.underline = in_underline;
	this.url = in_url;
	this.target = in_target;
	this.align = in_align;
	this.leftMargin = in_leftMargin;
	this.rightMargin = in_rightMargin;
	this.indent = in_indent;
	this.leading = in_leading;
}
jeash.text.TextFormat.__name__ = ["jeash","text","TextFormat"];
jeash.text.TextFormat.prototype.align = null;
jeash.text.TextFormat.prototype.blockIndent = null;
jeash.text.TextFormat.prototype.bold = null;
jeash.text.TextFormat.prototype.bullet = null;
jeash.text.TextFormat.prototype.color = null;
jeash.text.TextFormat.prototype.display = null;
jeash.text.TextFormat.prototype.font = null;
jeash.text.TextFormat.prototype.indent = null;
jeash.text.TextFormat.prototype.italic = null;
jeash.text.TextFormat.prototype.kerning = null;
jeash.text.TextFormat.prototype.leading = null;
jeash.text.TextFormat.prototype.leftMargin = null;
jeash.text.TextFormat.prototype.letterSpacing = null;
jeash.text.TextFormat.prototype.rightMargin = null;
jeash.text.TextFormat.prototype.size = null;
jeash.text.TextFormat.prototype.tabStops = null;
jeash.text.TextFormat.prototype.target = null;
jeash.text.TextFormat.prototype.underline = null;
jeash.text.TextFormat.prototype.url = null;
jeash.text.TextFormat.prototype.__class__ = jeash.text.TextFormat;
jeash.events.IOErrorEvent = function(type,bubbles,cancelable,inText) {
	if( type === $_ ) return;
	if(inText == null) inText = "";
	jeash.events.Event.call(this,type,bubbles,cancelable);
	this.text = inText;
}
jeash.events.IOErrorEvent.__name__ = ["jeash","events","IOErrorEvent"];
jeash.events.IOErrorEvent.__super__ = jeash.events.Event;
for(var k in jeash.events.Event.prototype ) jeash.events.IOErrorEvent.prototype[k] = jeash.events.Event.prototype[k];
jeash.events.IOErrorEvent.prototype.text = null;
jeash.events.IOErrorEvent.prototype.__class__ = jeash.events.IOErrorEvent;
jeash.text.TextField = function(p) {
	if( p === $_ ) return;
	jeash.display.InteractiveObject.call(this);
	this.mWidth = 40;
	this.mHeight = 20;
	this.mHTMLMode = false;
	this.multiline = false;
	this.jeashGraphics = new jeash.display.Graphics();
	this.jeashGraphics.jeashExtentBuffer = 0;
	this.mCaretGfx = new jeash.display.Graphics();
	this.mFace = jeash.text.TextField.mDefaultFont;
	this.mAlign = jeash.text.TextFormatAlign.LEFT;
	this.mParagraphs = new Array();
	this.mSelStart = -1;
	this.mSelEnd = -1;
	this.mScrollH = 0;
	this.mScrollV = 1;
	this.mType = jeash.text.TextFieldType.DYNAMIC;
	this.SetAutoSize(jeash.text.TextFieldAutoSize.NONE);
	this.mTextHeight = 12;
	this.mMaxHeight = this.mTextHeight;
	this.mHTMLText = " ";
	this.mText = " ";
	this.mTextColour = 0;
	this.tabEnabled = false;
	this.mTryFreeType = true;
	this.selectable = true;
	this.mInsertPos = 0;
	this.mInput = false;
	this.mDownChar = 0;
	this.mSelectDrag = -1;
	this.mLineInfo = [];
	this.name = "TextField " + jeash.display.DisplayObject.mNameID++;
	this.jeashGraphics.jeashSurface.id = this.name;
	this.SetBorderColor(0);
	this.SetBorder(false);
	this.SetBackgroundColor(16777215);
	this.SetBackground(false);
}
jeash.text.TextField.__name__ = ["jeash","text","TextField"];
jeash.text.TextField.__super__ = jeash.display.InteractiveObject;
for(var k in jeash.display.InteractiveObject.prototype ) jeash.text.TextField.prototype[k] = jeash.display.InteractiveObject.prototype[k];
jeash.text.TextField.prototype.htmlText = null;
jeash.text.TextField.prototype.text = null;
jeash.text.TextField.prototype.textColor = null;
jeash.text.TextField.prototype.textWidth = null;
jeash.text.TextField.prototype.textHeight = null;
jeash.text.TextField.prototype.defaultTextFormat = null;
jeash.text.TextField.prototype.mHTMLText = null;
jeash.text.TextField.prototype.mText = null;
jeash.text.TextField.prototype.mTextColour = null;
jeash.text.TextField.prototype.mType = null;
jeash.text.TextField.prototype.autoSize = null;
jeash.text.TextField.prototype.selectable = null;
jeash.text.TextField.prototype.multiline = null;
jeash.text.TextField.prototype.embedFonts = null;
jeash.text.TextField.prototype.borderColor = null;
jeash.text.TextField.prototype.background = null;
jeash.text.TextField.prototype.backgroundColor = null;
jeash.text.TextField.prototype.caretPos = null;
jeash.text.TextField.prototype.displayAsPassword = null;
jeash.text.TextField.prototype.border = null;
jeash.text.TextField.prototype.wordWrap = null;
jeash.text.TextField.prototype.maxChars = null;
jeash.text.TextField.prototype.restrict = null;
jeash.text.TextField.prototype.type = null;
jeash.text.TextField.prototype.antiAliasType = null;
jeash.text.TextField.prototype.sharpness = null;
jeash.text.TextField.prototype.gridFitType = null;
jeash.text.TextField.prototype.length = null;
jeash.text.TextField.prototype.mTextHeight = null;
jeash.text.TextField.prototype.mFace = null;
jeash.text.TextField.prototype.mDownChar = null;
jeash.text.TextField.prototype.selectionBeginIndex = null;
jeash.text.TextField.prototype.selectionEndIndex = null;
jeash.text.TextField.prototype.caretIndex = null;
jeash.text.TextField.prototype.mParagraphs = null;
jeash.text.TextField.prototype.mTryFreeType = null;
jeash.text.TextField.prototype.mLineInfo = null;
jeash.text.TextField.prototype.mAlign = null;
jeash.text.TextField.prototype.mHTMLMode = null;
jeash.text.TextField.prototype.mSelStart = null;
jeash.text.TextField.prototype.mSelEnd = null;
jeash.text.TextField.prototype.mInsertPos = null;
jeash.text.TextField.prototype.mSelectDrag = null;
jeash.text.TextField.prototype.mInput = null;
jeash.text.TextField.prototype.mWidth = null;
jeash.text.TextField.prototype.mHeight = null;
jeash.text.TextField.prototype.mSelectionAnchored = null;
jeash.text.TextField.prototype.mSelectionAnchor = null;
jeash.text.TextField.prototype.mScrollH = null;
jeash.text.TextField.prototype.mScrollV = null;
jeash.text.TextField.prototype.jeashGraphics = null;
jeash.text.TextField.prototype.mCaretGfx = null;
jeash.text.TextField.prototype.ClearSelection = function() {
	this.mSelStart = this.mSelEnd = -1;
	this.mSelectionAnchored = false;
	this.Rebuild();
}
jeash.text.TextField.prototype.DeleteSelection = function() {
	if(this.mSelEnd > this.mSelStart && this.mSelStart >= 0) {
		this.mText = this.mText.substr(0,this.mSelStart) + this.mText.substr(this.mSelEnd);
		this.mInsertPos = this.mSelStart;
		this.mSelStart = this.mSelEnd = -1;
		this.mSelectionAnchored = false;
	}
}
jeash.text.TextField.prototype.OnMoveKeyStart = function(inShift) {
	if(inShift && this.selectable) {
		if(!this.mSelectionAnchored) {
			this.mSelectionAnchored = true;
			this.mSelectionAnchor = this.mInsertPos;
			if(jeash.text.TextField.sSelectionOwner != this) {
				if(jeash.text.TextField.sSelectionOwner != null) jeash.text.TextField.sSelectionOwner.ClearSelection();
				jeash.text.TextField.sSelectionOwner = this;
			}
		}
	} else this.ClearSelection();
}
jeash.text.TextField.prototype.OnMoveKeyEnd = function() {
	if(this.mSelectionAnchored) {
		if(this.mInsertPos < this.mSelectionAnchor) {
			this.mSelStart = this.mInsertPos;
			this.mSelEnd = this.mSelectionAnchor;
		} else {
			this.mSelStart = this.mSelectionAnchor;
			this.mSelEnd = this.mInsertPos;
		}
	}
}
jeash.text.TextField.prototype.OnKey = function(inKey) {
	if(inKey.type != jeash.events.KeyboardEvent.KEY_DOWN) return;
	var key = inKey.keyCode;
	var ascii = inKey.charCode;
	var shift = inKey.shiftKey;
	if(ascii == 3) {
		if(this.mSelEnd > this.mSelStart && this.mSelStart >= 0) throw "To implement setClipboardString. TextField.OnKey";
		return;
	}
	if(this.mInput) {
		if(key == jeash.ui.Keyboard.LEFT) {
			this.OnMoveKeyStart(shift);
			this.mInsertPos--;
			this.OnMoveKeyEnd();
		} else if(key == jeash.ui.Keyboard.RIGHT) {
			this.OnMoveKeyStart(shift);
			this.mInsertPos++;
			this.OnMoveKeyEnd();
		} else if(key == jeash.ui.Keyboard.HOME) {
			this.OnMoveKeyStart(shift);
			this.mInsertPos = 0;
			this.OnMoveKeyEnd();
		} else if(key == jeash.ui.Keyboard.END) {
			this.OnMoveKeyStart(shift);
			this.mInsertPos = this.mText.length;
			this.OnMoveKeyEnd();
		} else if(key == jeash.ui.Keyboard.DELETE || key == jeash.ui.Keyboard.BACKSPACE) {
			if(this.mSelEnd > this.mSelStart && this.mSelStart >= 0) this.DeleteSelection(); else {
				if(key == jeash.ui.Keyboard.BACKSPACE && this.mInsertPos > 0) this.mInsertPos--;
				var l = this.mText.length;
				if(this.mInsertPos > l) {
					if(l > 0) this.mText = this.mText.substr(0,l - 1);
				} else this.mText = this.mText.substr(0,this.mInsertPos) + this.mText.substr(this.mInsertPos + 1);
			}
		} else if(ascii >= 32 && ascii < 128) {
			if(this.mSelEnd > this.mSelStart && this.mSelStart >= 0) this.DeleteSelection();
			this.mText = this.mText.substr(0,this.mInsertPos) + String.fromCharCode(ascii) + this.mText.substr(this.mInsertPos);
			this.mInsertPos++;
		}
		if(this.mInsertPos < 0) this.mInsertPos = 0;
		var l = this.mText.length;
		if(this.mInsertPos > l) this.mInsertPos = l;
		this.RebuildText();
	}
}
jeash.text.TextField.prototype.OnFocusIn = function(inMouse) {
	if(this.mInput && this.selectable && !inMouse) {
		this.mSelStart = 0;
		this.mSelEnd = this.mText.length;
		this.RebuildText();
	}
}
jeash.text.TextField.prototype.jeashGetWidth = function() {
	return this.mWidth;
}
jeash.text.TextField.prototype.jeashGetHeight = function() {
	return this.mHeight;
}
jeash.text.TextField.prototype.jeashSetWidth = function(inWidth) {
	if(inWidth != this.mWidth) {
		this.mWidth = inWidth;
		this.jeashGraphics.jeashSurface.width = Math.round(inWidth);
		this.Rebuild();
	}
	return this.mWidth;
}
jeash.text.TextField.prototype.jeashSetHeight = function(inHeight) {
	if(inHeight != this.mHeight) {
		this.mHeight = inHeight;
		this.jeashGraphics.jeashSurface.height = Math.round(inHeight);
		this.Rebuild();
	}
	return this.mHeight;
}
jeash.text.TextField.prototype.GetType = function() {
	return this.mType;
}
jeash.text.TextField.prototype.SetType = function(inType) {
	this.mType = inType;
	this.mInput = this.mType == jeash.text.TextFieldType.INPUT;
	if(this.mInput && this.mHTMLMode) this.ConvertHTMLToText(true);
	this.tabEnabled = this.GetType() == jeash.text.TextFieldType.INPUT;
	this.Rebuild();
	return inType;
}
jeash.text.TextField.prototype.GetCaret = function() {
	return this.mInsertPos;
}
jeash.text.TextField.prototype.jeashGetGraphics = function() {
	return this.jeashGraphics;
}
jeash.text.TextField.prototype.getLineIndexAtPoint = function(inX,inY) {
	if(this.mLineInfo.length < 1) return -1;
	if(inY <= 0) return 0;
	var _g1 = 0, _g = this.mLineInfo.length;
	while(_g1 < _g) {
		var l = _g1++;
		if(this.mLineInfo[l].mY0 > inY) return l == 0?0:l - 1;
	}
	return this.mLineInfo.length - 1;
}
jeash.text.TextField.prototype.getCharIndexAtPoint = function(inX,inY) {
	var li = this.getLineIndexAtPoint(inX,inY);
	if(li < 0) return -1;
	var line = this.mLineInfo[li];
	var idx = line.mIndex;
	var _g = 0, _g1 = line.mX;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x > inX) return idx;
		idx++;
	}
	return idx;
}
jeash.text.TextField.prototype.getCharBoundaries = function(a) {
	return null;
}
jeash.text.TextField.prototype.OnMouseDown = function(inX,inY) {
	if(this.tabEnabled || this.selectable) {
		if(jeash.text.TextField.sSelectionOwner != null) jeash.text.TextField.sSelectionOwner.ClearSelection();
		jeash.text.TextField.sSelectionOwner = this;
		this.GetStage().SetFocus(this);
		var gx = inX / this.GetStage().jeashGetScaleX();
		var gy = inY / this.GetStage().jeashGetScaleY();
		var pos = this.globalToLocal(new jeash.geom.Point(gx,gy));
		this.mSelectDrag = this.getCharIndexAtPoint(pos.x,pos.y);
		if(this.tabEnabled) this.mInsertPos = this.mSelectDrag;
		this.mSelStart = this.mSelEnd = -1;
		this.RebuildText();
	}
}
jeash.text.TextField.prototype.OnMouseDrag = function(inX,inY) {
	if((this.tabEnabled || this.selectable) && this.mSelectDrag >= 0) {
		var gx = inX / this.GetStage().jeashGetScaleX();
		var gy = inY / this.GetStage().jeashGetScaleY();
		var pos = this.globalToLocal(new jeash.geom.Point(gx,gy));
		var idx = this.getCharIndexAtPoint(pos.x,pos.y);
		if(jeash.text.TextField.sSelectionOwner != this) {
			if(jeash.text.TextField.sSelectionOwner != null) jeash.text.TextField.sSelectionOwner.ClearSelection();
			jeash.text.TextField.sSelectionOwner = this;
		}
		if(idx < this.mSelectDrag) {
			this.mSelStart = idx;
			this.mSelEnd = this.mSelectDrag;
		} else if(idx > this.mSelectDrag) {
			this.mSelStart = this.mSelectDrag;
			this.mSelEnd = idx;
		} else this.mSelStart = this.mSelEnd = -1;
		if(this.tabEnabled) this.mInsertPos = idx;
		this.RebuildText();
	}
}
jeash.text.TextField.prototype.OnMouseUp = function(inX,inY) {
	this.mSelectDrag = -1;
}
jeash.text.TextField.prototype.mMaxWidth = null;
jeash.text.TextField.prototype.mMaxHeight = null;
jeash.text.TextField.prototype.mLimitRenderX = null;
jeash.text.TextField.prototype.RenderRow = function(inRow,inY,inCharIdx,inAlign,inInsert) {
	var h = 0;
	var w = 0;
	var _g = 0;
	while(_g < inRow.length) {
		var chr = inRow[_g];
		++_g;
		if(chr.fh > h) h = chr.fh;
		w += chr.adv;
	}
	if(w > this.mMaxWidth) this.mMaxWidth = w;
	var full_height = Std["int"](h * 1.2);
	var align_x = 0;
	var insert_x = 0;
	if(inInsert != null) {
		if(this.autoSize != jeash.text.TextFieldAutoSize.NONE) {
			this.mScrollH = 0;
			insert_x = inInsert;
		} else {
			insert_x = inInsert - this.mScrollH;
			if(insert_x < 0) this.mScrollH -= (this.mLimitRenderX * 3 >> 2) - insert_x; else if(insert_x > this.mLimitRenderX) this.mScrollH += insert_x - (this.mLimitRenderX * 3 >> 2);
			if(this.mScrollH < 0) this.mScrollH = 0;
		}
	}
	if(this.autoSize == jeash.text.TextFieldAutoSize.NONE && w <= this.mLimitRenderX) {
		if(inAlign == jeash.text.TextFormatAlign.CENTER) align_x = this.mLimitRenderX - w >> 1; else if(inAlign == jeash.text.TextFormatAlign.RIGHT) align_x = this.mLimitRenderX - w;
	}
	var x_list = new Array();
	this.mLineInfo.push({ mY0 : inY, mIndex : inCharIdx, mX : x_list});
	var cache_sel_font = null;
	var cache_normal_font = null;
	var x = align_x - this.mScrollH;
	var x0 = x;
	var _g = 0;
	while(_g < inRow.length) {
		var chr = inRow[_g];
		++_g;
		var adv = chr.adv;
		if(x + adv > this.mLimitRenderX) break;
		x_list.push(x);
		if(x >= 0) {
			var font = chr.font;
			if(chr.sel) {
				this.jeashGraphics.lineStyle();
				this.jeashGraphics.beginFill(2105440);
				this.jeashGraphics.drawRect(x,inY,adv,full_height);
				this.jeashGraphics.endFill();
				if(cache_normal_font == chr.font) font = cache_sel_font; else {
					font = jeash.text.FontInstance.CreateSolid(chr.font.GetFace(),chr.fh,16777215,1.0);
					cache_sel_font = font;
					cache_normal_font = chr.font;
				}
			}
			font.RenderChar(this.jeashGraphics,chr.chr,x,Std["int"](inY + (h - chr.fh)));
		}
		x += adv;
	}
	x += this.mScrollH;
	if(inInsert != null) {
		this.mCaretGfx.lineStyle(1,this.mTextColour);
		this.mCaretGfx.moveTo(inInsert + align_x - this.mScrollH,inY);
		this.mCaretGfx.lineTo(inInsert + align_x - this.mScrollH,inY + full_height);
	}
	return full_height;
}
jeash.text.TextField.prototype.Rebuild = function() {
	this.mLineInfo = [];
	this.jeashGraphics.clear();
	this.mCaretGfx.clear();
	if(this.background) {
		this.jeashGraphics.beginFill(this.backgroundColor);
		this.jeashGraphics.drawRect(-2,-2,this.jeashGetWidth() + 4,this.jeashGetHeight() + 4);
		this.jeashGraphics.endFill();
	}
	this.jeashGraphics.lineStyle(this.mTextColour);
	var insert_x = null;
	this.mMaxWidth = 0;
	var wrap = this.mLimitRenderX = this.wordWrap && !this.mInput?Std["int"](this.jeashGetWidth()):999999;
	var char_idx = 0;
	var h = 0;
	var s0 = this.mSelStart;
	var s1 = this.mSelEnd;
	var _g = 0, _g1 = this.mParagraphs;
	while(_g < _g1.length) {
		var paragraph = _g1[_g];
		++_g;
		var row = [];
		var row_width = 0;
		var last_word_break = 0;
		var last_word_break_width = 0;
		var last_word_char_idx = 0;
		var start_idx = char_idx;
		var tx = 0;
		var _g2 = 0, _g3 = paragraph.spans;
		while(_g2 < _g3.length) {
			var span = _g3[_g2];
			++_g2;
			var text = span.text;
			var font = span.font;
			var fh = font.jeashGetHeight();
			last_word_break = row.length;
			last_word_break_width = row_width;
			last_word_char_idx = char_idx;
			var _g5 = 0, _g4 = text.length;
			while(_g5 < _g4) {
				var ch = _g5++;
				if(char_idx == this.mInsertPos && this.mInput) insert_x = tx;
				var g = text.charCodeAt(ch);
				var adv = font.jeashGetAdvance(g);
				if(g == 32) {
					last_word_break = row.length;
					last_word_break_width = tx;
					last_word_char_idx = char_idx;
				}
				if(tx + adv > wrap) {
					if(last_word_break > 0) {
						var row_end = row.splice(last_word_break,row.length - last_word_break);
						h += this.RenderRow(row,h,start_idx,paragraph.align);
						row = row_end;
						tx -= last_word_break_width;
						start_idx = last_word_char_idx;
						last_word_break = 0;
						last_word_break_width = 0;
						last_word_char_idx = 0;
						if(row_end.length > 0 && row_end[0].chr == 32) {
							row_end.shift();
							start_idx++;
						}
					} else {
						h += this.RenderRow(row,h,char_idx,paragraph.align);
						row = [];
						tx = 0;
						start_idx = char_idx;
					}
				}
				row.push({ font : font, chr : g, x : tx, fh : fh, sel : char_idx >= s0 && char_idx < s1, adv : adv});
				tx += adv;
				char_idx++;
			}
		}
		if(row.length > 0) {
			var pos = this.mInput && insert_x == null?tx:insert_x == null?0:insert_x;
			h += this.RenderRow(row,h,start_idx,paragraph.align,pos);
		}
	}
	var w = this.mMaxWidth;
	if(h < this.mTextHeight) h = this.mTextHeight;
	this.mMaxHeight = h;
	switch(this.autoSize) {
	case jeash.text.TextFieldAutoSize.LEFT:
		this.jeashSetWidth(w);
		this.jeashSetHeight(h);
		break;
	case jeash.text.TextFieldAutoSize.RIGHT:
		var x0 = this.jeashGetX() + this.jeashGetWidth();
		this.jeashSetWidth(w);
		this.jeashSetHeight(h);
		this.jeashSetX(x0 - w);
		break;
	case jeash.text.TextFieldAutoSize.CENTER:
		var x0 = this.jeashGetX() + this.jeashGetWidth() / 2;
		this.jeashSetWidth(w);
		this.jeashSetHeight(h);
		this.jeashSetX(x0 - w / 2);
		break;
	default:
		if(this.wordWrap) this.jeashSetHeight(h);
	}
	if(char_idx == 0 && this.mInput) {
		var x = 0;
		if(this.mAlign == jeash.text.TextFormatAlign.CENTER) x = Std["int"](this.jeashGetWidth() / 2); else if(this.mAlign == jeash.text.TextFormatAlign.RIGHT) x = Std["int"](this.jeashGetWidth()) - 1;
		this.mCaretGfx.lineStyle(1,this.mTextColour);
		this.mCaretGfx.moveTo(x,0);
		this.mCaretGfx.lineTo(x,this.mTextHeight);
	}
	if(this.border) {
		this.jeashGraphics.endFill();
		this.jeashGraphics.lineStyle(1,this.borderColor);
		this.jeashGraphics.drawRect(-2,-2,this.jeashGetWidth() + 4,this.jeashGetHeight() + 4);
	}
}
jeash.text.TextField.prototype.GetObj = function(inX,inY,inObj) {
	var inv = this.mFullMatrix.clone();
	inv.invert();
	var px = inv.a * inX + inv.c * inY + inv.tx;
	var py = inv.b * inX + inv.d * inY + inv.ty;
	if(px > 0 && px < this.jeashGetWidth() && py > 0 && py < this.jeashGetHeight()) return this;
	return null;
}
jeash.text.TextField.prototype.GetBackgroundRect = function() {
	if(this.border) return new jeash.geom.Rectangle(-2,-2,this.jeashGetWidth() + 4,this.jeashGetHeight() + 4); else return new jeash.geom.Rectangle(0,0,this.jeashGetWidth(),this.jeashGetHeight());
}
jeash.text.TextField.prototype.GetTextWidth = function() {
	return this.mMaxWidth;
}
jeash.text.TextField.prototype.GetTextHeight = function() {
	return this.mMaxHeight;
}
jeash.text.TextField.prototype.GetTextColour = function() {
	return this.mTextColour;
}
jeash.text.TextField.prototype.SetTextColour = function(inCol) {
	this.mTextColour = inCol;
	this.RebuildText();
	return inCol;
}
jeash.text.TextField.prototype.GetText = function() {
	if(this.mHTMLMode) this.ConvertHTMLToText(false);
	return this.mText;
}
jeash.text.TextField.prototype.SetText = function(inText) {
	this.mText = inText;
	this.mHTMLText = inText;
	this.mHTMLMode = false;
	this.RebuildText();
	return this.mText;
}
jeash.text.TextField.prototype.ConvertHTMLToText = function(inUnSetHTML) {
	this.mText = "";
	var _g = 0, _g1 = this.mParagraphs;
	while(_g < _g1.length) {
		var paragraph = _g1[_g];
		++_g;
		var _g2 = 0, _g3 = paragraph.spans;
		while(_g2 < _g3.length) {
			var span = _g3[_g2];
			++_g2;
			this.mText += span.text;
		}
	}
	if(inUnSetHTML) {
		this.mHTMLMode = false;
		this.RebuildText();
	}
}
jeash.text.TextField.prototype.GetFocusObjects = function(outObjs) {
	if(this.mInput) outObjs.push(this);
}
jeash.text.TextField.prototype.SetAutoSize = function(inAutoSize) {
	this.autoSize = inAutoSize;
	this.Rebuild();
	return inAutoSize;
}
jeash.text.TextField.prototype.SetWordWrap = function(inWordWrap) {
	this.wordWrap = inWordWrap;
	this.Rebuild();
	return this.wordWrap;
}
jeash.text.TextField.prototype.SetBorder = function(inBorder) {
	this.border = inBorder;
	this.Rebuild();
	return inBorder;
}
jeash.text.TextField.prototype.SetBorderColor = function(inBorderCol) {
	this.borderColor = inBorderCol;
	this.Rebuild();
	return inBorderCol;
}
jeash.text.TextField.prototype.SetBackgroundColor = function(inCol) {
	this.backgroundColor = inCol;
	this.Rebuild();
	return inCol;
}
jeash.text.TextField.prototype.SetBackground = function(inBack) {
	this.background = inBack;
	this.Rebuild();
	return inBack;
}
jeash.text.TextField.prototype.GetHTMLText = function() {
	return this.mHTMLText;
}
jeash.text.TextField.prototype.DecodeColour = function(col) {
	return Std.parseInt("0x" + col.substr(1));
}
jeash.text.TextField.prototype.AddXML = function(x,a) {
	var type = x.nodeType;
	if(type == Xml.Document || type == Xml.Element) {
		if(type == Xml.Element) {
			a = { face : a.face, height : a.height, colour : a.colour, align : a.align};
			switch(x.getNodeName()) {
			case "p":
				var l = this.mParagraphs.length;
				var align = x.get("align");
				if(align != null) a.align = Type.createEnum(jeash.text.TextFormatAlign,align);
				if(l > 0 && this.mParagraphs[l - 1].spans.length > 0 && this.multiline) this.mParagraphs.push({ align : a.align, spans : []});
				break;
			case "font":
				var face = x.get("face");
				if(face != null) a.face = face;
				var height = x.get("size");
				if(height != null) a.height = Std["int"](Std.parseFloat(height));
				var col = x.get("color");
				if(col != null) a.colour = this.DecodeColour(col);
				break;
			}
		}
		var $it0 = x.iterator();
		while( $it0.hasNext() ) {
			var child = $it0.next();
			this.AddXML(child,a);
		}
	} else {
		var text = x.getNodeValue();
		var font = jeash.text.FontInstance.CreateSolid(a.face,a.height,a.colour,1.0);
		if(font != null && text != "") {
			var span = { text : text, font : font};
			var l = this.mParagraphs.length;
			if(this.mParagraphs.length < 1) this.mParagraphs.push({ align : a.align, spans : [span]}); else this.mParagraphs[l - 1].spans.push(span);
		}
	}
}
jeash.text.TextField.prototype.RebuildText = function() {
	this.mParagraphs = [];
	if(this.mHTMLMode) {
		var xml = Xml.parse(this.mHTMLText);
		var a = { face : this.mFace, height : this.mTextHeight, colour : this.mTextColour, align : this.mAlign};
		this.AddXML(xml,a);
	} else {
		var font = jeash.text.FontInstance.CreateSolid(this.mFace,this.mTextHeight,this.mTextColour,1.0);
		var paras = this.mText.split("\n");
		var _g = 0;
		while(_g < paras.length) {
			var paragraph = paras[_g];
			++_g;
			this.mParagraphs.push({ align : this.mAlign, spans : [{ font : font, text : paragraph}]});
		}
	}
	this.Rebuild();
}
jeash.text.TextField.prototype.SetHTMLText = function(inHTMLText) {
	this.mParagraphs = new Array();
	this.mHTMLText = inHTMLText;
	this.mHTMLMode = true;
	this.RebuildText();
	if(this.mInput) this.ConvertHTMLToText(true);
	return this.mHTMLText;
}
jeash.text.TextField.prototype.setSelection = function(beginIndex,endIndex) {
}
jeash.text.TextField.prototype.getTextFormat = function(beginIndex,endIndex) {
	return new jeash.text.TextFormat();
}
jeash.text.TextField.prototype.getDefaultTextFormat = function() {
	return new jeash.text.TextFormat();
}
jeash.text.TextField.prototype.setTextFormat = function(inFmt) {
	if(inFmt.font != null) this.mFace = inFmt.font;
	if(inFmt.size != null) this.mTextHeight = Std["int"](inFmt.size);
	if(inFmt.align != null) this.mAlign = inFmt.align;
	if(inFmt.color != null) this.mTextColour = inFmt.color;
	this.RebuildText();
	return this.getTextFormat();
}
jeash.text.TextField.prototype.__class__ = jeash.text.TextField;
if(!nme.display) nme.display = {}
nme.display.FPS = function(inX,inY,inCol) {
	if( inX === $_ ) return;
	if(inCol == null) inCol = 0;
	if(inY == null) inY = 10.0;
	if(inX == null) inX = 10.0;
	jeash.text.TextField.call(this);
	this.jeashSetX(inX);
	this.jeashSetY(inY);
	this.selectable = false;
	this.SetText("FPS:");
	this.SetTextColour(inCol);
	this.times = [];
	this.addEventListener(jeash.events.Event.ENTER_FRAME,$closure(this,"onEnter"));
}
nme.display.FPS.__name__ = ["nme","display","FPS"];
nme.display.FPS.__super__ = jeash.text.TextField;
for(var k in jeash.text.TextField.prototype ) nme.display.FPS.prototype[k] = jeash.text.TextField.prototype[k];
nme.display.FPS.prototype.times = null;
nme.display.FPS.prototype.onEnter = function(_) {
	var now = haxe.Timer.stamp();
	this.times.push(now);
	while(this.times[0] < now - 1) this.times.shift();
	if(this.jeashGetVisible()) this.SetText("FPS:" + this.times.length);
}
nme.display.FPS.prototype.__class__ = nme.display.FPS;
jeash.display.CapsStyle = { __ename__ : ["jeash","display","CapsStyle"], __constructs__ : ["NONE","ROUND","SQUARE"] }
jeash.display.CapsStyle.NONE = ["NONE",0];
jeash.display.CapsStyle.NONE.toString = $estr;
jeash.display.CapsStyle.NONE.__enum__ = jeash.display.CapsStyle;
jeash.display.CapsStyle.ROUND = ["ROUND",1];
jeash.display.CapsStyle.ROUND.toString = $estr;
jeash.display.CapsStyle.ROUND.__enum__ = jeash.display.CapsStyle;
jeash.display.CapsStyle.SQUARE = ["SQUARE",2];
jeash.display.CapsStyle.SQUARE.toString = $estr;
jeash.display.CapsStyle.SQUARE.__enum__ = jeash.display.CapsStyle;
Hash = function(p) {
	if( p === $_ ) return;
	this.h = {}
	if(this.h.__proto__ != null) {
		this.h.__proto__ = null;
		delete(this.h.__proto__);
	}
}
Hash.__name__ = ["Hash"];
Hash.prototype.h = null;
Hash.prototype.set = function(key,value) {
	this.h["$" + key] = value;
}
Hash.prototype.get = function(key) {
	return this.h["$" + key];
}
Hash.prototype.exists = function(key) {
	try {
		key = "$" + key;
		return this.hasOwnProperty.call(this.h,key);
	} catch( e ) {
		for(var i in this.h) if( i == key ) return true;
		return false;
	}
}
Hash.prototype.remove = function(key) {
	if(!this.exists(key)) return false;
	delete(this.h["$" + key]);
	return true;
}
Hash.prototype.keys = function() {
	var a = new Array();
	for(var i in this.h) a.push(i.substr(1));
	return a.iterator();
}
Hash.prototype.iterator = function() {
	return { ref : this.h, it : this.keys(), hasNext : function() {
		return this.it.hasNext();
	}, next : function() {
		var i = this.it.next();
		return this.ref["$" + i];
	}};
}
Hash.prototype.toString = function() {
	var s = new StringBuf();
	s.b[s.b.length] = "{" == null?"null":"{";
	var it = this.keys();
	while( it.hasNext() ) {
		var i = it.next();
		s.b[s.b.length] = i == null?"null":i;
		s.b[s.b.length] = " => " == null?"null":" => ";
		s.add(Std.string(this.get(i)));
		if(it.hasNext()) s.b[s.b.length] = ", " == null?"null":", ";
	}
	s.b[s.b.length] = "}" == null?"null":"}";
	return s.b.join("");
}
Hash.prototype.__class__ = Hash;
jeash.display.JointStyle = { __ename__ : ["jeash","display","JointStyle"], __constructs__ : ["MITER","ROUND","BEVEL"] }
jeash.display.JointStyle.MITER = ["MITER",0];
jeash.display.JointStyle.MITER.toString = $estr;
jeash.display.JointStyle.MITER.__enum__ = jeash.display.JointStyle;
jeash.display.JointStyle.ROUND = ["ROUND",1];
jeash.display.JointStyle.ROUND.toString = $estr;
jeash.display.JointStyle.ROUND.__enum__ = jeash.display.JointStyle;
jeash.display.JointStyle.BEVEL = ["BEVEL",2];
jeash.display.JointStyle.BEVEL.toString = $estr;
jeash.display.JointStyle.BEVEL.__enum__ = jeash.display.JointStyle;
nape.geom.Winding = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "Winding" + " derp!";
}
nape.geom.Winding.__name__ = ["nape","geom","Winding"];
nape.geom.Winding.UNDEFINED = null;
nape.geom.Winding.flibget_UNDEFINED = function() {
	if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
}
nape.geom.Winding.CLOCKWISE = null;
nape.geom.Winding.flibget_CLOCKWISE = function() {
	if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
}
nape.geom.Winding.ANTICLOCKWISE = null;
nape.geom.Winding.flibget_ANTICLOCKWISE = function() {
	if(zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = new nape.geom.Winding();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE;
}
nape.geom.Winding.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
		return $r;
	}(this))) return "UNDEFINED"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
		return $r;
	}(this))) return "CLOCKWISE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = new nape.geom.Winding();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE;
		return $r;
	}(this))) return "ANTICLOCKWISE"; else return "";
}
nape.geom.Winding.prototype.__class__ = nape.geom.Winding;
nape.geom.GeomPolyList = function(p) {
	if( p === $_ ) return;
	this.zpp_inner = new zpp_nape.util.ZPP_GeomPolyList();
	this.zpp_inner.outer = this;
}
nape.geom.GeomPolyList.__name__ = ["nape","geom","GeomPolyList"];
nape.geom.GeomPolyList.fromArray = function(array) {
	var ret = new nape.geom.GeomPolyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.geom.GeomPolyList.prototype.zpp_inner = null;
nape.geom.GeomPolyList.prototype.length = null;
nape.geom.GeomPolyList.prototype.flibget_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.length;
	}
	return this.zpp_inner.user_length;
}
nape.geom.GeomPolyList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
}
nape.geom.GeomPolyList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.flibget_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.flibget_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.outer;
}
nape.geom.GeomPolyList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.geom.GeomPolyList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.geom.GeomPolyList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx = ret.outer;
	return retx;
}
nape.geom.GeomPolyList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx = ret.outer;
	return retx;
}
nape.geom.GeomPolyList.prototype.add = function(obj) {
	return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
}
nape.geom.GeomPolyList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret = (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var x = cx_ite.elt;
				if(x == obj.zpp_inner) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
}
nape.geom.GeomPolyList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
}
nape.geom.GeomPolyList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
}
nape.geom.GeomPolyList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.iterators == null) this.zpp_inner.iterators = new zpp_nape.util.ZNPList_GeomPolyIterator();
	return nape.geom.GeomPolyIterator.get(this);
}
nape.geom.GeomPolyList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.geom.GeomPolyList();
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_GeomPolyIterator();
		$r = nape.geom.GeomPolyIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "GeomPoly" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
}
nape.geom.GeomPolyList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var $it0 = (function($this) {
		var $r;
		xs.zpp_inner.valmod();
		if(xs.zpp_inner.iterators == null) xs.zpp_inner.iterators = new zpp_nape.util.ZNPList_GeomPolyIterator();
		$r = nape.geom.GeomPolyIterator.get(xs);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(!this.has(x)) if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
	}
}
nape.geom.GeomPolyList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_GeomPolyIterator();
		$r = nape.geom.GeomPolyIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		if(!fst) ret += ",";
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
}
nape.geom.GeomPolyList.prototype.__class__ = nape.geom.GeomPolyList;
nape.geom.GeomPolyIterator = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_GeomPolyList.internal) throw "Error: Cannot instantiate " + "GeomPoly" + "Iterator derp!";
}
nape.geom.GeomPolyIterator.__name__ = ["nape","geom","GeomPolyIterator"];
nape.geom.GeomPolyIterator.zpp_pool = null;
nape.geom.GeomPolyIterator.get = function(list) {
	var ret = nape.geom.GeomPolyIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_GeomPolyList.internal = true;
		var ret = new nape.geom.GeomPolyIterator();
		zpp_nape.util.ZPP_GeomPolyList.internal = false;
		$r = ret;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.geom.GeomPolyIterator.zpp_pool;
		nape.geom.GeomPolyIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	list.zpp_inner.iterators.add(ret);
	return ret;
}
nape.geom.GeomPolyIterator.prototype.zpp_inner = null;
nape.geom.GeomPolyIterator.prototype.zpp_i = null;
nape.geom.GeomPolyIterator.prototype.zpp_critical = null;
nape.geom.GeomPolyIterator.prototype.zpp_next = null;
nape.geom.GeomPolyIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.flibget_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.geom.GeomPolyIterator.zpp_pool;
		nape.geom.GeomPolyIterator.zpp_pool = this;
		this.zpp_inner.zpp_inner.iterators.remove(this);
		return false;
	}
}
nape.geom.GeomPolyIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
}
nape.geom.GeomPolyIterator.prototype.__class__ = nape.geom.GeomPolyIterator;
nape.geom.GeomVertexIterator = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.geom.ZPP_GeomVertexIterator.internal) throw "Error: Cannot instantiate GeomVertexIterator";
}
nape.geom.GeomVertexIterator.__name__ = ["nape","geom","GeomVertexIterator"];
nape.geom.GeomVertexIterator.prototype.zpp_inner = null;
nape.geom.GeomVertexIterator.prototype.hasNext = function() {
	if(this.zpp_inner == null) throw "Error: Iterator has been disposed";
	var ret = this.zpp_inner.ptr != this.zpp_inner.start || this.zpp_inner.first;
	this.zpp_inner.first = false;
	if(!ret) {
		var o = this.zpp_inner;
		{
			o.outer.zpp_inner = null;
			o.ptr = o.start = null;
		}
		o.next = zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = o;
	}
	return ret;
}
nape.geom.GeomVertexIterator.prototype.next = function() {
	if(this.zpp_inner == null) throw "Error: Iterator has been disposed";
	var ret = this.zpp_inner.ptr.wrapper();
	if(this.zpp_inner.forward) this.zpp_inner.ptr = this.zpp_inner.ptr.next; else this.zpp_inner.ptr = this.zpp_inner.ptr.prev;
	return ret;
}
nape.geom.GeomVertexIterator.prototype.__class__ = nape.geom.GeomVertexIterator;
nape.geom.GeomPoly = function(vertices) {
	if( vertices === $_ ) return;
	this.zpp_inner = new zpp_nape.geom.ZPP_GeomPoly(this);
	if(vertices != null) {
		if(Std["is"](vertices,Array)) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) throw "Error: Array<Vec2> contains null objects";
				if(!Std["is"](vite,nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
				var v = vite;
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				this.zpp_inner.vertices = (function($this) {
					var $r;
					var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.x;
						return $r;
					}($this)),(function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.y;
						return $r;
					}($this)));
					if($this.zpp_inner.vertices == null) $this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
						obj.prev = $this.zpp_inner.vertices;
						obj.next = $this.zpp_inner.vertices.next;
						$this.zpp_inner.vertices.next.prev = obj;
						$this.zpp_inner.vertices.next = obj;
					}
					$r = obj;
					return $r;
				}(this));
			}
		} else if(Std["is"](vertices,nape.geom.Vec2List)) {
			var lv = vertices;
			var $it0 = lv.iterator();
			while( $it0.hasNext() ) {
				var v = $it0.next();
				if(v == null) throw "Error: Vec2List contains null objects";
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				this.zpp_inner.vertices = (function($this) {
					var $r;
					var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.x;
						return $r;
					}($this)),(function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.y;
						return $r;
					}($this)));
					if($this.zpp_inner.vertices == null) $this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
						obj.prev = $this.zpp_inner.vertices;
						obj.next = $this.zpp_inner.vertices.next;
						$this.zpp_inner.vertices.next.prev = obj;
						$this.zpp_inner.vertices.next = obj;
					}
					$r = obj;
					return $r;
				}(this));
			}
		} else if(Std["is"](vertices,nape.geom.GeomPoly)) {
			var lv = vertices;
			var verts = lv.zpp_inner.vertices;
			if(verts != null) {
				var vite = verts;
				do {
					var v = nape.geom.Vec2.get(vite.x,vite.y,null);
					vite = vite.next;
					this.zpp_inner.vertices = (function($this) {
						var $r;
						var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
							var $r;
							if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
							v.zpp_inner.validate();
							$r = v.zpp_inner.x;
							return $r;
						}($this)),(function($this) {
							var $r;
							if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
							v.zpp_inner.validate();
							$r = v.zpp_inner.y;
							return $r;
						}($this)));
						if($this.zpp_inner.vertices == null) $this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
							obj.prev = $this.zpp_inner.vertices;
							obj.next = $this.zpp_inner.vertices.next;
							$this.zpp_inner.vertices.next.prev = obj;
							$this.zpp_inner.vertices.next = obj;
						}
						$r = obj;
						return $r;
					}(this));
					v.dispose();
				} while(vite != verts);
			}
		} else throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash9+ flash.Vector<Vec2>";
		if(Std["is"](vertices,Array)) {
			var lv = vertices;
			var i = 0;
			while(i < lv.length) {
				var cur = lv[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(Std["is"](vertices,nape.geom.Vec2List)) {
			var lv = vertices;
			var ins = lv.zpp_inner.inner;
			var pre = null;
			var cur = ins.head;
			while(cur != null) {
				var x = cur.elt;
				if(x.outer.zpp_inner.weak) {
					cur = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur;
					cur = cur.next;
				}
			}
		}
	}
}
nape.geom.GeomPoly.__name__ = ["nape","geom","GeomPoly"];
nape.geom.GeomPoly.prototype.zpp_inner = null;
nape.geom.GeomPoly.prototype.empty = function() {
	return this.zpp_inner.vertices == null;
}
nape.geom.GeomPoly.prototype.size = function() {
	return (function($this) {
		var $r;
		var ret = 0;
		{
			var F = $this.zpp_inner.vertices;
			var L = $this.zpp_inner.vertices;
			if(F != null) {
				var nite = F;
				do {
					var i = nite;
					ret++;
					nite = nite.next;
				} while(nite != L);
			}
		}
		$r = ret;
		return $r;
	}(this));
}
nape.geom.GeomPoly.prototype.iterator = function() {
	return zpp_nape.geom.ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,true);
}
nape.geom.GeomPoly.prototype.forward_iterator = function() {
	return zpp_nape.geom.ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,true);
}
nape.geom.GeomPoly.prototype.backwards_iterator = function() {
	return zpp_nape.geom.ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,false);
}
nape.geom.GeomPoly.prototype.current = function() {
	if(this.zpp_inner.vertices == null) throw "Error: GeomPoly is empty";
	return this.zpp_inner.vertices.wrapper();
}
nape.geom.GeomPoly.prototype.push = function(x) {
	if(x == null) throw "Error: Cannot push null vertex";
	if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.vertices = (function($this) {
		var $r;
		var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
			var $r;
			if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			x.zpp_inner.validate();
			$r = x.zpp_inner.x;
			return $r;
		}($this)),(function($this) {
			var $r;
			if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			x.zpp_inner.validate();
			$r = x.zpp_inner.y;
			return $r;
		}($this)));
		if($this.zpp_inner.vertices == null) $this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
			obj.prev = $this.zpp_inner.vertices;
			obj.next = $this.zpp_inner.vertices.next;
			$this.zpp_inner.vertices.next.prev = obj;
			$this.zpp_inner.vertices.next = obj;
		}
		$r = obj;
		return $r;
	}(this));
	if(x.zpp_inner.weak) {
		x.dispose();
		true;
	} else false;
	return (function($this) {
		var $r;
		if($this.zpp_inner.vertices == null) throw "Error: GeomPoly is empty";
		$r = $this.zpp_inner.vertices.wrapper();
		return $r;
	}(this));
}
nape.geom.GeomPoly.prototype.pop = function() {
	if(this.zpp_inner.vertices == null) throw "Error: Cannot pop from empty polygon";
	var retv = this.zpp_inner.vertices;
	this.zpp_inner.vertices = (function($this) {
		var $r;
		{
		}
		$r = $this.zpp_inner.vertices != null && $this.zpp_inner.vertices.prev == $this.zpp_inner.vertices?(function($this) {
			var $r;
			$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
			{
			}
			$r = null;
			return $r;
		}($this)):(function($this) {
			var $r;
			var retnodes = $this.zpp_inner.vertices.prev;
			$this.zpp_inner.vertices.prev.next = $this.zpp_inner.vertices.next;
			$this.zpp_inner.vertices.next.prev = $this.zpp_inner.vertices.prev;
			$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
			{
			}
			$this.zpp_inner.vertices = null;
			$r = retnodes;
			return $r;
		}($this));
		return $r;
	}(this));
	var o = retv;
	{
		if(o.wrap != null) {
			o.wrap.zpp_inner.inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.forced = false;
	}
	o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
	zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
}
nape.geom.GeomPoly.prototype.unshift = function(x) {
	if(x == null) throw "Error: Cannot unshift null vertex";
	if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.vertices = (function($this) {
		var $r;
		var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
			var $r;
			if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			x.zpp_inner.validate();
			$r = x.zpp_inner.x;
			return $r;
		}($this)),(function($this) {
			var $r;
			if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			x.zpp_inner.validate();
			$r = x.zpp_inner.y;
			return $r;
		}($this)));
		if($this.zpp_inner.vertices == null) $this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
			obj.next = $this.zpp_inner.vertices;
			obj.prev = $this.zpp_inner.vertices.prev;
			$this.zpp_inner.vertices.prev.next = obj;
			$this.zpp_inner.vertices.prev = obj;
		}
		$r = obj;
		return $r;
	}(this));
	if(x.zpp_inner.weak) {
		x.dispose();
		true;
	} else false;
	return (function($this) {
		var $r;
		if($this.zpp_inner.vertices == null) throw "Error: GeomPoly is empty";
		$r = $this.zpp_inner.vertices.wrapper();
		return $r;
	}(this));
}
nape.geom.GeomPoly.prototype.shift = function() {
	if(this.zpp_inner.vertices == null) throw "Error: Cannot shift from empty polygon";
	var retv = this.zpp_inner.vertices;
	this.zpp_inner.vertices = (function($this) {
		var $r;
		{
		}
		$r = $this.zpp_inner.vertices != null && $this.zpp_inner.vertices.prev == $this.zpp_inner.vertices?(function($this) {
			var $r;
			$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
			{
			}
			$r = $this.zpp_inner.vertices = null;
			return $r;
		}($this)):(function($this) {
			var $r;
			var retnodes = $this.zpp_inner.vertices.next;
			$this.zpp_inner.vertices.prev.next = $this.zpp_inner.vertices.next;
			$this.zpp_inner.vertices.next.prev = $this.zpp_inner.vertices.prev;
			$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
			{
			}
			$this.zpp_inner.vertices = null;
			$r = retnodes;
			return $r;
		}($this));
		return $r;
	}(this));
	var o = retv;
	{
		if(o.wrap != null) {
			o.wrap.zpp_inner.inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.forced = false;
	}
	o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
	zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
}
nape.geom.GeomPoly.prototype.skip_forward = function(times) {
	if(!(this.zpp_inner.vertices == null)) {
		if(times > 0) while(times-- > 0) this.zpp_inner.vertices = this.zpp_inner.vertices.next; else if(times < 0) while(times++ < 0) this.zpp_inner.vertices = this.zpp_inner.vertices.prev;
	}
}
nape.geom.GeomPoly.prototype.skip_backwards = function(times) {
	this.skip_forward(-times);
}
nape.geom.GeomPoly.prototype.erase = function(count) {
	while(count != 0 && !(this.zpp_inner.vertices == null)) {
		var retv = this.zpp_inner.vertices;
		if(count > 0) {
			this.zpp_inner.vertices = (function($this) {
				var $r;
				{
				}
				$r = $this.zpp_inner.vertices != null && $this.zpp_inner.vertices.prev == $this.zpp_inner.vertices?(function($this) {
					var $r;
					$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
					{
					}
					$r = $this.zpp_inner.vertices = null;
					return $r;
				}($this)):(function($this) {
					var $r;
					var retnodes = $this.zpp_inner.vertices.next;
					$this.zpp_inner.vertices.prev.next = $this.zpp_inner.vertices.next;
					$this.zpp_inner.vertices.next.prev = $this.zpp_inner.vertices.prev;
					$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
					{
					}
					$this.zpp_inner.vertices = null;
					$r = retnodes;
					return $r;
				}($this));
				return $r;
			}(this));
			count--;
		} else if(count < 0) {
			this.zpp_inner.vertices = (function($this) {
				var $r;
				{
				}
				$r = $this.zpp_inner.vertices != null && $this.zpp_inner.vertices.prev == $this.zpp_inner.vertices?(function($this) {
					var $r;
					$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
					{
					}
					$r = null;
					return $r;
				}($this)):(function($this) {
					var $r;
					var retnodes = $this.zpp_inner.vertices.prev;
					$this.zpp_inner.vertices.prev.next = $this.zpp_inner.vertices.next;
					$this.zpp_inner.vertices.next.prev = $this.zpp_inner.vertices.prev;
					$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
					{
					}
					$this.zpp_inner.vertices = null;
					$r = retnodes;
					return $r;
				}($this));
				return $r;
			}(this));
			count++;
		}
		var o = retv;
		{
			if(o.wrap != null) {
				o.wrap.zpp_inner.inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.forced = false;
		}
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
	}
}
nape.geom.GeomPoly.prototype.clear = function() {
	while(!(this.zpp_inner.vertices == null)) {
		var tmp = this.zpp_inner.vertices;
		this.zpp_inner.vertices = (function($this) {
			var $r;
			{
			}
			$r = $this.zpp_inner.vertices != null && $this.zpp_inner.vertices.prev == $this.zpp_inner.vertices?(function($this) {
				var $r;
				$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
				{
				}
				$r = $this.zpp_inner.vertices = null;
				return $r;
			}($this)):(function($this) {
				var $r;
				var retnodes = $this.zpp_inner.vertices.next;
				$this.zpp_inner.vertices.prev.next = $this.zpp_inner.vertices.next;
				$this.zpp_inner.vertices.next.prev = $this.zpp_inner.vertices.prev;
				$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
				{
				}
				$this.zpp_inner.vertices = null;
				$r = retnodes;
				return $r;
			}($this));
			return $r;
		}(this));
		tmp;
	}
}
nape.geom.GeomPoly.prototype.copy = function() {
	var ret = new nape.geom.GeomPoly();
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			ret.zpp_inner.vertices = (function($this) {
				var $r;
				var obj = zpp_nape.geom.ZPP_GeomVert.get(v.x,v.y);
				if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj.prev = obj.next = obj; else {
					obj.prev = ret.zpp_inner.vertices;
					obj.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj;
					ret.zpp_inner.vertices.next = obj;
				}
				$r = obj;
				return $r;
			}(this));
			nite = nite.next;
		} while(nite != L);
	}
	return ret;
}
nape.geom.GeomPoly.prototype.toString = function() {
	var ret = "GeomPoly[";
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			if(v != this.zpp_inner.vertices) ret += ",";
			ret += "{" + v.x + "," + v.y + "}";
			nite = nite.next;
		} while(nite != L);
	}
	return ret + "]";
}
nape.geom.GeomPoly.prototype.area = function() {
	return this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next?0.0:(function($this) {
		var $r;
		var ret = (function($this) {
			var $r;
			{
			}
			var area = 0.0;
			{
				var F = $this.zpp_inner.vertices;
				var L = $this.zpp_inner.vertices;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = area;
			return $r;
		}($this));
		$r = ret < 0?-ret:ret;
		return $r;
	}(this));
}
nape.geom.GeomPoly.prototype.winding = function() {
	return this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next?(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
		return $r;
	}(this)):(function($this) {
		var $r;
		var area = (function($this) {
			var $r;
			{
			}
			var area = 0.0;
			{
				var F = $this.zpp_inner.vertices;
				var L = $this.zpp_inner.vertices;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = area;
			return $r;
		}($this));
		$r = area > 0?(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
			return $r;
		}($this)):area == 0?(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
			return $r;
		}($this)):(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE;
			return $r;
		}($this));
		return $r;
	}(this));
}
nape.geom.GeomPoly.prototype.contains = function(point) {
	if(point == null) throw "Error: GeomPoly::contains point cannot be null";
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	var ret = (function($this) {
		var $r;
		var x = (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}($this));
		var y = (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}($this));
		var ret = false;
		{
			var F = $this.zpp_inner.vertices;
			var L = $this.zpp_inner.vertices;
			if(F != null) {
				var nite = F;
				do {
					var p = nite;
					var q = p.prev;
					if((p.y < y && q.y >= y || q.y < y && p.y >= y) && (p.x <= x || q.x <= x)) {
						if(p.x + (y - p.y) / (q.y - p.y) * (q.x - p.x) < x) ret = !ret;
					}
					nite = nite.next;
				} while(nite != L);
			}
		}
		$r = ret;
		return $r;
	}(this));
	if(point.zpp_inner.weak) {
		point.dispose();
		true;
	} else false;
	return ret;
}
nape.geom.GeomPoly.prototype.isClockwise = function() {
	return this.winding() == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
		return $r;
	}(this));
}
nape.geom.GeomPoly.prototype.isConvex = function() {
	return this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next?true:(function($this) {
		var $r;
		{
		}
		var neg = false;
		var pos = false;
		var ret = true;
		{
			var F = $this.zpp_inner.vertices;
			var L = $this.zpp_inner.vertices;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					var u = v.prev;
					var w = v.next;
					var ax;
					var ay;
					ax = w.x - v.x;
					ay = w.y - v.y;
					var bx;
					var by;
					bx = v.x - u.x;
					by = v.y - u.y;
					var dot = by * ax - bx * ay;
					if(dot > 0.0) pos = true; else if(dot < 0.0) neg = true;
					if(pos && neg) {
						ret = false;
						break;
					}
					nite = nite.next;
				} while(nite != L);
			}
		}
		$r = ret;
		return $r;
	}(this));
}
nape.geom.GeomPoly.prototype.isMonotone = function() {
	return this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next?true:zpp_nape.geom.ZPP_Monotone.isMonotone(this.zpp_inner.vertices);
}
nape.geom.GeomPoly.prototype.isSimple = function() {
	return this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next?true:zpp_nape.geom.ZPP_Simple.isSimple(this.zpp_inner.vertices);
}
nape.geom.GeomPoly.prototype.isDegenerate = function() {
	return this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next?true:this.area() < 1e-8;
}
nape.geom.GeomPoly.prototype.simplify = function(epsilon) {
	if(epsilon <= 0.0) throw "Error: Epsilon should be > 0 for simplifying a GeomPoly";
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return this.copy(); else {
		var x = zpp_nape.geom.ZPP_Simplify.simplify(this.zpp_inner.vertices,epsilon);
		var ret = new nape.geom.GeomPoly();
		ret.zpp_inner.vertices = x;
		return ret;
	}
}
nape.geom.GeomPoly.prototype.simple_decomposition = function() {
	if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw "Error: Cannot decompose a degenerate polygon";
	var MPs = zpp_nape.geom.ZPP_Simple.decompose(this.zpp_inner.vertices);
	var ret = new nape.geom.GeomPolyList();
	var cx_ite = MPs.head;
	while(cx_ite != null) {
		var MP = cx_ite.elt;
		var x = new nape.geom.GeomPoly();
		x.zpp_inner.vertices = MP;
		if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
		cx_ite = cx_ite.next;
	}
	return ret;
}
nape.geom.GeomPoly.prototype.convex_decomposition = function() {
	if(this.isDegenerate()) throw "Error: Cannot decompose a degenerate polygon";
	try {
		var MPs = zpp_nape.geom.ZPP_Greene.decompose(this.zpp_inner.vertices);
		var ret = new nape.geom.GeomPolyList();
		var cx_ite = MPs.head;
		while(cx_ite != null) {
			var MP = cx_ite.elt;
			var x = new nape.geom.GeomPoly();
			x.zpp_inner.vertices = MP;
			if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
			cx_ite = cx_ite.next;
		}
		return ret;
	} catch( e ) {
		throw "Error: Cannot decompose a non-weakly simple polygon! Consider use of the simple_decomposition() routine";
		return new nape.geom.GeomPolyList();
	}
}
nape.geom.GeomPoly.prototype.monotone_decomposition = function() {
	if(this.isDegenerate()) throw "Error: Cannot decompose a degenerate polygon";
	try {
		var MPs = zpp_nape.geom.ZPP_Monotone.decompose(this.zpp_inner.vertices);
		var ret = new nape.geom.GeomPolyList();
		var cx_ite = MPs.head;
		while(cx_ite != null) {
			var MP = cx_ite.elt;
			var x = new nape.geom.GeomPoly();
			x.zpp_inner.vertices = MP;
			if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
			cx_ite = cx_ite.next;
		}
		return ret;
	} catch( e ) {
		throw this.toString();
		throw "Error: Cannot decompose a non-weakly simple polygon! Consider use of the simple_decomposition() routine";
		return new nape.geom.GeomPolyList();
	}
}
nape.geom.GeomPoly.prototype.transform = function(matrix) {
	if(matrix == null) throw "Error: Cannot transform by null matrix";
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			var t = matrix.zpp_inner.a * v.x + matrix.zpp_inner.b * v.y + matrix.zpp_inner.tx;
			v.y = matrix.zpp_inner.c * v.x + matrix.zpp_inner.d * v.y + matrix.zpp_inner.ty;
			v.x = t;
			nite = nite.next;
		} while(nite != L);
	}
}
nape.geom.GeomPoly.prototype.bounds = function() {
	if(this.zpp_inner.vertices == null) throw "Error: empty GeomPoly has no defineable bounds";
	var minx = 1e100;
	var miny = 1e100;
	var maxx = -1e+100;
	var maxy = -1e+100;
	var F = this.zpp_inner.vertices;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			if(v.x < minx) minx = v.x;
			if(v.y < miny) miny = v.y;
			if(v.x > maxx) maxx = v.x;
			if(v.y > maxy) maxy = v.y;
			nite = nite.next;
		} while(nite != L);
	}
	return new nape.geom.AABB(minx,miny,maxx - minx,maxy - miny);
}
nape.geom.GeomPoly.prototype.top = function() {
	if(this.zpp_inner.vertices == null) throw "Error: empty GeomPoly has no defineable topmost vertex";
	var min = this.zpp_inner.vertices;
	var F = this.zpp_inner.vertices.next;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			if(v.y < min.y) min = v;
			nite = nite.next;
		} while(nite != L);
	}
	return (function($this) {
		var $r;
		if(min.wrap == null) {
			min.wrap = nape.geom.Vec2.get(min.x,min.y,null);
			min.wrap.zpp_inner.inuse = true;
			min.wrap.zpp_inner._invalidate = $closure(min,"modwrap");
			min.wrap.zpp_inner._validate = $closure(min,"getwrap");
		}
		$r = min.wrap;
		return $r;
	}(this));
}
nape.geom.GeomPoly.prototype.bottom = function() {
	if(this.zpp_inner.vertices == null) throw "Error: empty GeomPoly has no defineable bottommost vertex";
	var max = this.zpp_inner.vertices;
	var F = this.zpp_inner.vertices.next;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			if(v.y > max.y) max = v;
			nite = nite.next;
		} while(nite != L);
	}
	return (function($this) {
		var $r;
		if(max.wrap == null) {
			max.wrap = nape.geom.Vec2.get(max.x,max.y,null);
			max.wrap.zpp_inner.inuse = true;
			max.wrap.zpp_inner._invalidate = $closure(max,"modwrap");
			max.wrap.zpp_inner._validate = $closure(max,"getwrap");
		}
		$r = max.wrap;
		return $r;
	}(this));
}
nape.geom.GeomPoly.prototype.left = function() {
	if(this.zpp_inner.vertices == null) throw "Error: empty GeomPoly has no defineable leftmost vertex";
	var min = this.zpp_inner.vertices;
	var F = this.zpp_inner.vertices.next;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			if(v.x < min.x) min = v;
			nite = nite.next;
		} while(nite != L);
	}
	return (function($this) {
		var $r;
		if(min.wrap == null) {
			min.wrap = nape.geom.Vec2.get(min.x,min.y,null);
			min.wrap.zpp_inner.inuse = true;
			min.wrap.zpp_inner._invalidate = $closure(min,"modwrap");
			min.wrap.zpp_inner._validate = $closure(min,"getwrap");
		}
		$r = min.wrap;
		return $r;
	}(this));
}
nape.geom.GeomPoly.prototype.right = function() {
	if(this.zpp_inner.vertices == null) throw "Error: empty GeomPoly has no defineable rightmmost vertex";
	var max = this.zpp_inner.vertices;
	var F = this.zpp_inner.vertices.next;
	var L = this.zpp_inner.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			if(v.x > max.x) max = v;
			nite = nite.next;
		} while(nite != L);
	}
	return (function($this) {
		var $r;
		if(max.wrap == null) {
			max.wrap = nape.geom.Vec2.get(max.x,max.y,null);
			max.wrap.zpp_inner.inuse = true;
			max.wrap.zpp_inner._invalidate = $closure(max,"modwrap");
			max.wrap.zpp_inner._validate = $closure(max,"getwrap");
		}
		$r = max.wrap;
		return $r;
	}(this));
}
nape.geom.GeomPoly.prototype.__class__ = nape.geom.GeomPoly;
haxe.Int32 = function() { }
haxe.Int32.__name__ = ["haxe","Int32"];
haxe.Int32.make = function(a,b) {
	return a << 16 | b;
}
haxe.Int32.ofInt = function(x) {
	return x | 0;
}
haxe.Int32.clamp = function(x) {
	return x | 0;
}
haxe.Int32.toInt = function(x) {
	if((x >> 30 & 1) != x >>> 31) throw "Overflow " + x;
	return x;
}
haxe.Int32.toNativeInt = function(x) {
	return x;
}
haxe.Int32.add = function(a,b) {
	return a + b | 0;
}
haxe.Int32.sub = function(a,b) {
	return a - b | 0;
}
haxe.Int32.mul = function(a,b) {
	return a * b | 0;
}
haxe.Int32.div = function(a,b) {
	return Std["int"](a / b);
}
haxe.Int32.mod = function(a,b) {
	return a % b;
}
haxe.Int32.shl = function(a,b) {
	return a << b;
}
haxe.Int32.shr = function(a,b) {
	return a >> b;
}
haxe.Int32.ushr = function(a,b) {
	return a >>> b;
}
haxe.Int32.and = function(a,b) {
	return a & b;
}
haxe.Int32.or = function(a,b) {
	return a | b;
}
haxe.Int32.xor = function(a,b) {
	return a ^ b;
}
haxe.Int32.neg = function(a) {
	return -a;
}
haxe.Int32.isNeg = function(a) {
	return a < 0;
}
haxe.Int32.isZero = function(a) {
	return a == 0;
}
haxe.Int32.complement = function(a) {
	return ~a;
}
haxe.Int32.compare = function(a,b) {
	return a - b;
}
haxe.Int32.ucompare = function(a,b) {
	if(a < 0) return b < 0?~b - ~a:1;
	return b < 0?-1:a - b;
}
haxe.Int32.prototype.__class__ = haxe.Int32;
jeash.display.GraphicsPathWinding = { __ename__ : ["jeash","display","GraphicsPathWinding"], __constructs__ : ["EVEN_ODD","NON_ZERO"] }
jeash.display.GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
jeash.display.GraphicsPathWinding.EVEN_ODD.toString = $estr;
jeash.display.GraphicsPathWinding.EVEN_ODD.__enum__ = jeash.display.GraphicsPathWinding;
jeash.display.GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
jeash.display.GraphicsPathWinding.NON_ZERO.toString = $estr;
jeash.display.GraphicsPathWinding.NON_ZERO.__enum__ = jeash.display.GraphicsPathWinding;
if(!zpp_nape.shape) zpp_nape.shape = {}
zpp_nape.shape.ZPP_Shape = function(type) {
	if( type === $_ ) return;
	this.type = type;
	this.id = zpp_nape.shape.ZPP_Shape.nextId++;
	this.aabb = zpp_nape.geom.ZPP_AABB.get(0,0,0,0);
	this.aabb.immutable = true;
	var me = this;
	this.aabb._validate = function() {
		if(me.body == null) throw "Error: bounds only makes sense when Shape belongs to a Body";
		if(me.zip_aabb) {
			if(me.body != null) {
				me.zip_aabb = false;
				if(me.type == 0) me.circle.__validate_aabb(); else me.polygon.__validate_aabb();
			}
		}
	};
	this.zip_area_inertia = this.zip_angDrag = this.zip_localCOM = true;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.fluidEnabled = false;
	this.fluidProperties = null;
	this.body = null;
	this.refmaterial = new zpp_nape.phys.ZPP_Material();
}
zpp_nape.shape.ZPP_Shape.__name__ = ["zpp_nape","shape","ZPP_Shape"];
zpp_nape.shape.ZPP_Shape.prototype.outer = null;
zpp_nape.shape.ZPP_Shape.prototype.body = null;
zpp_nape.shape.ZPP_Shape.prototype.type = null;
zpp_nape.shape.ZPP_Shape.prototype.id = null;
zpp_nape.shape.ZPP_Shape.prototype.isCircle = function() {
	return this.type == 0;
}
zpp_nape.shape.ZPP_Shape.prototype.isPolygon = function() {
	return this.type == 1;
}
zpp_nape.shape.ZPP_Shape.prototype.area = null;
zpp_nape.shape.ZPP_Shape.prototype.zip_area_inertia = null;
zpp_nape.shape.ZPP_Shape.prototype.inertia = null;
zpp_nape.shape.ZPP_Shape.prototype.angDrag = null;
zpp_nape.shape.ZPP_Shape.prototype.zip_angDrag = null;
zpp_nape.shape.ZPP_Shape.prototype.localCOMx = null;
zpp_nape.shape.ZPP_Shape.prototype.localCOMy = null;
zpp_nape.shape.ZPP_Shape.prototype.zip_localCOM = null;
zpp_nape.shape.ZPP_Shape.prototype.worldCOMx = null;
zpp_nape.shape.ZPP_Shape.prototype.worldCOMy = null;
zpp_nape.shape.ZPP_Shape.prototype.zip_worldCOM = null;
zpp_nape.shape.ZPP_Shape.prototype.wrap_localCOM = null;
zpp_nape.shape.ZPP_Shape.prototype.wrap_worldCOM = null;
zpp_nape.shape.ZPP_Shape.prototype.circle = null;
zpp_nape.shape.ZPP_Shape.prototype.polygon = null;
zpp_nape.shape.ZPP_Shape.prototype.refmaterial = null;
zpp_nape.shape.ZPP_Shape.prototype.material = null;
zpp_nape.shape.ZPP_Shape.prototype.filter = null;
zpp_nape.shape.ZPP_Shape.prototype.fluidProperties = null;
zpp_nape.shape.ZPP_Shape.prototype.fluidEnabled = null;
zpp_nape.shape.ZPP_Shape.prototype.cbType = null;
zpp_nape.shape.ZPP_Shape.prototype.sweep = null;
zpp_nape.shape.ZPP_Shape.prototype.node = null;
zpp_nape.shape.ZPP_Shape.prototype.clear = function() {
	if(this.type == 0) null; else null;
}
zpp_nape.shape.ZPP_Shape.prototype.aabb = null;
zpp_nape.shape.ZPP_Shape.prototype.zip_aabb = null;
zpp_nape.shape.ZPP_Shape.prototype.validate_aabb = function() {
	if(this.zip_aabb) {
		if(this.body != null) {
			this.zip_aabb = false;
			if(this.type == 0) this.circle.__validate_aabb(); else this.polygon.__validate_aabb();
		}
	}
}
zpp_nape.shape.ZPP_Shape.prototype.invalidate_aabb = function() {
	this.zip_aabb = true;
	if(this.body != null) this.body.zip_aabb = true;
}
zpp_nape.shape.ZPP_Shape.prototype.validate_area_inertia = function() {
	if(this.zip_area_inertia) {
		this.zip_area_inertia = false;
		if(this.type == 0) this.circle.__validate_area_inertia(); else this.polygon.__validate_area_inertia();
	}
}
zpp_nape.shape.ZPP_Shape.prototype.validate_angDrag = function() {
	if(this.zip_angDrag || this.refmaterial.dynamicFriction != this.material.dynamicFriction) {
		this.zip_angDrag = false;
		this.refmaterial.dynamicFriction = this.material.dynamicFriction;
		if(this.type == 0) this.circle.__validate_angDrag(); else this.polygon.__validate_angDrag();
	}
}
zpp_nape.shape.ZPP_Shape.prototype.validate_localCOM = function() {
	if(this.zip_localCOM) {
		this.zip_localCOM = false;
		if(this.type == 1) this.polygon.__validate_localCOM();
		if(this.wrap_localCOM != null) {
			this.wrap_localCOM.zpp_inner.x = this.localCOMx;
			this.wrap_localCOM.zpp_inner.y = this.localCOMy;
		}
	}
}
zpp_nape.shape.ZPP_Shape.prototype.validate_worldCOM = function() {
	if(this.zip_worldCOM) {
		if(this.body != null) {
			this.zip_worldCOM = false;
			if(this.zip_localCOM) {
				this.zip_localCOM = false;
				if(this.type == 1) this.polygon.__validate_localCOM();
				if(this.wrap_localCOM != null) {
					this.wrap_localCOM.zpp_inner.x = this.localCOMx;
					this.wrap_localCOM.zpp_inner.y = this.localCOMy;
				}
			}
			this.body.validate_axis();
			this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
			this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			if(this.wrap_worldCOM != null) {
				this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
				this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
			}
		}
	}
}
zpp_nape.shape.ZPP_Shape.prototype.getworldCOM = function() {
	if(this.body == null) throw "Error: worldCOM only makes sense when Shape belongs to a Body";
	if(this.zip_worldCOM) {
		if(this.body != null) {
			this.zip_worldCOM = false;
			if(this.zip_localCOM) {
				this.zip_localCOM = false;
				if(this.type == 1) this.polygon.__validate_localCOM();
				if(this.wrap_localCOM != null) {
					this.wrap_localCOM.zpp_inner.x = this.localCOMx;
					this.wrap_localCOM.zpp_inner.y = this.localCOMy;
				}
			}
			this.body.validate_axis();
			this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
			this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			if(this.wrap_worldCOM != null) {
				this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
				this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
			}
		}
	}
}
zpp_nape.shape.ZPP_Shape.prototype.invalidate_area_inertia = function() {
	this.zip_area_inertia = true;
	if(this.body != null) {
		this.body.invalidate_localCOM();
		this.body.invalidate_mass();
		this.body.invalidate_inertia();
	}
}
zpp_nape.shape.ZPP_Shape.prototype.invalidate_angDrag = function() {
	this.zip_angDrag = true;
}
zpp_nape.shape.ZPP_Shape.prototype.invalidate_localCOM = function() {
	this.zip_localCOM = true;
	{
		this.zip_area_inertia = true;
		if(this.body != null) {
			this.body.invalidate_localCOM();
			this.body.invalidate_mass();
			this.body.invalidate_inertia();
		}
	}
	this.zip_angDrag = true;
	{
		this.zip_worldCOM = true;
		{
			this.zip_aabb = true;
			if(this.body != null) this.body.zip_aabb = true;
		}
	}
	if(this.body != null) this.body.invalidate_localCOM();
}
zpp_nape.shape.ZPP_Shape.prototype.invalidate_worldCOM = function() {
	this.zip_worldCOM = true;
	{
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
}
zpp_nape.shape.ZPP_Shape.prototype.invalidate_material = function(flags) {
	if((flags & 1) != 0) this.wake();
	if((flags & 8) != 0) {
		if(this.body != null) this.body.refreshArbiters();
	}
	if((flags & 2) != 0) {
		if(this.body != null) {
			this.body.invalidate_localCOM();
			this.body.invalidate_mass();
			this.body.invalidate_inertia();
		}
	}
	if((flags & 4) != 0) this.zip_angDrag = true;
	this.refmaterial.set(this.material);
}
zpp_nape.shape.ZPP_Shape.prototype.invalidate_filter = function() {
	this.wake();
}
zpp_nape.shape.ZPP_Shape.prototype.invalidate_fluidprops = function() {
	if(this.fluidEnabled) this.wake();
}
zpp_nape.shape.ZPP_Shape.prototype.wake = function() {
	if(this.body != null) this.body.wake();
}
zpp_nape.shape.ZPP_Shape.prototype.setMaterial = function(material) {
	if(this.material != material) {
		if(this.body != null && this.body.space != null) {
			if(this.material != null) this.material.shapes.remove(this);
		}
		this.material = material;
		if(this.body != null && this.body.space != null) material.shapes.add(this);
		this.wake();
		if(this.body != null) this.body.refreshArbiters();
	}
}
zpp_nape.shape.ZPP_Shape.prototype.setFilter = function(filter) {
	if(this.filter != filter) {
		if(this.body != null && this.body.space != null) {
			if(this.filter != null) this.filter.shapes.remove(this);
		}
		this.filter = filter;
		if(this.body != null && this.body.space != null) filter.shapes.add(this);
		this.wake();
	}
}
zpp_nape.shape.ZPP_Shape.prototype.setFluid = function(fluid) {
	if(this.fluidProperties != fluid) {
		if(this.body != null && this.body.space != null) {
			if(this.fluidProperties != null) this.fluidProperties.shapes.remove(this);
		}
		this.fluidProperties = fluid;
		if(this.body != null && this.body.space != null) fluid.shapes.add(this);
		if(this.fluidEnabled) this.wake();
	}
}
zpp_nape.shape.ZPP_Shape.prototype.setCbType = function(cbType) {
	if(this.cbType != cbType) {
		if(this.body != null && this.body.space != null) {
			if(this.cbType != null) this.cbType.shapes.remove(this);
		}
		this.cbType = cbType;
		if(this.body != null && this.body.space != null) cbType.shapes.add(this);
		this.wake();
	}
}
zpp_nape.shape.ZPP_Shape.prototype.addedToBody = function() {
	{
		this.zip_worldCOM = true;
		{
			this.zip_aabb = true;
			if(this.body != null) this.body.zip_aabb = true;
		}
	}
	{
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
}
zpp_nape.shape.ZPP_Shape.prototype.removedFromBody = function() {
}
zpp_nape.shape.ZPP_Shape.prototype.addedToSpace = function() {
	this.cbType.shapes.add(this);
	this.material.shapes.add(this);
	this.filter.shapes.add(this);
	if(this.fluidProperties != null) this.fluidProperties.shapes.add(this);
}
zpp_nape.shape.ZPP_Shape.prototype.removedFromSpace = function() {
	this.cbType.shapes.remove(this);
	this.material.shapes.remove(this);
	this.filter.shapes.remove(this);
	if(this.fluidProperties != null) this.fluidProperties.shapes.remove(this);
}
zpp_nape.shape.ZPP_Shape.prototype.copy = function() {
	var ret = null;
	if(this.type == 0) ret = this.circle.__copy(); else ret = this.polygon.__copy();
	if(!this.zip_area_inertia) {
		ret.area = this.area;
		ret.inertia = this.inertia;
	} else {
		ret.zip_area_inertia = true;
		if(ret.body != null) {
			ret.body.invalidate_localCOM();
			ret.body.invalidate_mass();
			ret.body.invalidate_inertia();
		}
	}
	if(!this.zip_angDrag) ret.angDrag = this.angDrag; else ret.zip_angDrag = true;
	if(!this.zip_aabb) {
		ret.aabb.minx = this.aabb.minx;
		ret.aabb.miny = this.aabb.miny;
		ret.aabb.maxx = this.aabb.maxx;
		ret.aabb.maxy = this.aabb.maxy;
	} else {
		ret.zip_aabb = true;
		if(ret.body != null) ret.body.zip_aabb = true;
	}
	ret.material.shapes.remove(ret);
	var o = ret.material;
	o.outer = null;
	o.next = zpp_nape.phys.ZPP_Material.zpp_pool;
	zpp_nape.phys.ZPP_Material.zpp_pool = o;
	ret.filter.shapes.remove(ret);
	var o = ret.filter;
	o.outer = null;
	o.next = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
	zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = o;
	ret.material = this.material;
	ret.filter = this.filter;
	if(this.fluidProperties != null) ret.fluidProperties = this.fluidProperties;
	ret.fluidEnabled = this.fluidEnabled;
	ret.cbType = this.cbType;
	return ret.outer;
}
zpp_nape.shape.ZPP_Shape.prototype.__class__ = zpp_nape.shape.ZPP_Shape;
zpp_nape.shape.ZPP_Polygon = function(p) {
	if( p === $_ ) return;
	zpp_nape.shape.ZPP_Shape.call(this,1);
	this.polygon = this;
	this.lverts = new zpp_nape.geom.ZPP_Vec2();
	this.gverts = new zpp_nape.geom.ZPP_Vec2();
	this.edges = new zpp_nape.util.ZNPList_ZPP_Edge();
	this.edgeCnt = 0;
}
zpp_nape.shape.ZPP_Polygon.__name__ = ["zpp_nape","shape","ZPP_Polygon"];
zpp_nape.shape.ZPP_Polygon.__super__ = zpp_nape.shape.ZPP_Shape;
for(var k in zpp_nape.shape.ZPP_Shape.prototype ) zpp_nape.shape.ZPP_Polygon.prototype[k] = zpp_nape.shape.ZPP_Shape.prototype[k];
zpp_nape.shape.ZPP_Polygon.prototype.outer_zn = null;
zpp_nape.shape.ZPP_Polygon.prototype.lverts = null;
zpp_nape.shape.ZPP_Polygon.prototype.wrap_lverts = null;
zpp_nape.shape.ZPP_Polygon.prototype.gverts = null;
zpp_nape.shape.ZPP_Polygon.prototype.wrap_gverts = null;
zpp_nape.shape.ZPP_Polygon.prototype.edges = null;
zpp_nape.shape.ZPP_Polygon.prototype.wrap_edges = null;
zpp_nape.shape.ZPP_Polygon.prototype.edgeCnt = null;
zpp_nape.shape.ZPP_Polygon.prototype.reverse_flag = null;
zpp_nape.shape.ZPP_Polygon.prototype.__clear = function() {
}
zpp_nape.shape.ZPP_Polygon.prototype.get_lverts = function() {
	var me = this;
	this.wrap_lverts = zpp_nape.util.ZPP_MixVec2List.get(this.lverts,null);
	this.wrap_lverts.zpp_inner.post_adder = function(x) {
		x.zpp_inner._invalidate = function(x1) {
			me.invalidate_lverts();
		};
		x.zpp_inner._immutable = function() {
			if(me.body != null && me.body.type == 1 && me.body.space != null) throw "Error: Cannot modify local vertex of Polygon added to a static body whilst within a Space";
		};
		var ite = null;
		var ite2 = null;
		var cx_ite = me.lverts.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i == x.zpp_inner) break; else {
				ite = ite == null?me.gverts.next:ite.next;
				ite2 = ite2 == null?me.edges.head:ite2.next;
			}
			cx_ite = cx_ite.next;
		}
		var vec = zpp_nape.geom.ZPP_Vec2.get(0,0,true);
		me.gverts.insert(ite,vec);
		if(me.lverts.next.next != null) {
			if(me.lverts.next.next.next == null) {
				var ed = (function($this) {
					var $r;
					var ret;
					if(zpp_nape.shape.ZPP_Edge.zpp_pool == null) ret = new zpp_nape.shape.ZPP_Edge(); else {
						ret = zpp_nape.shape.ZPP_Edge.zpp_pool;
						zpp_nape.shape.ZPP_Edge.zpp_pool = ret.next;
						ret.next = null;
					}
					null;
					$r = ret;
					return $r;
				}(this));
				ed.polygon = me;
				me.edges.add(ed);
				var ed1 = (function($this) {
					var $r;
					var ret;
					if(zpp_nape.shape.ZPP_Edge.zpp_pool == null) ret = new zpp_nape.shape.ZPP_Edge(); else {
						ret = zpp_nape.shape.ZPP_Edge.zpp_pool;
						zpp_nape.shape.ZPP_Edge.zpp_pool = ret.next;
						ret.next = null;
					}
					null;
					$r = ret;
					return $r;
				}(this));
				ed1.polygon = me;
				me.edges.add(ed1);
				me.edgeCnt += 2;
			} else {
				var ed = (function($this) {
					var $r;
					var ret;
					if(zpp_nape.shape.ZPP_Edge.zpp_pool == null) ret = new zpp_nape.shape.ZPP_Edge(); else {
						ret = zpp_nape.shape.ZPP_Edge.zpp_pool;
						zpp_nape.shape.ZPP_Edge.zpp_pool = ret.next;
						ret.next = null;
					}
					null;
					$r = ret;
					return $r;
				}(this));
				ed.polygon = me;
				me.edges.insert(ite2,ed);
				me.edgeCnt++;
			}
		}
		vec._validate = function() {
			if(me.body == null) throw "Error: World vertex only makes sense when Polygon is contained in a rigid body";
			me.validate_gverts();
		};
	};
	this.wrap_lverts.zpp_inner.subber = function(x) {
		me.cleanup_lvert(x.zpp_inner);
	};
	this.wrap_lverts.zpp_inner._invalidate = function(_) {
		me.invalidate_lverts();
	};
	this.wrap_lverts.zpp_inner._validate = function() {
		if(me.zip_lverts) {
			me.zip_lverts = false;
			me.splice_collinear();
			if(me.lverts.size() > 2) {
				if(me.zip_area_inertia) {
					me.zip_area_inertia = false;
					if(me.type == 0) me.circle.__validate_area_inertia(); else me.polygon.__validate_area_inertia();
				}
				if(me.area < 0) {
					me.reverse_vertices();
					me.area = -me.area;
				}
			}
		}
	};
	this.wrap_lverts.zpp_inner._modifiable = function() {
		if(me.body != null && me.body.type == 1 && me.body.space != null) throw "Error: Cannot modifiy shapes of static object once added to Space";
	};
	this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
}
zpp_nape.shape.ZPP_Polygon.prototype.get_gverts = function() {
	var me = this;
	this.wrap_gverts = zpp_nape.util.ZPP_MixVec2List.get(this.gverts,true);
	this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
	this.wrap_gverts.zpp_inner._validate = function() {
		me.validate_gverts();
	};
}
zpp_nape.shape.ZPP_Polygon.prototype.get_edges = function() {
	var me = this;
	this.wrap_edges = zpp_nape.util.ZPP_EdgeList.get(this.edges,true);
	this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
	this.wrap_edges.zpp_inner._validate = function() {
		if(me.zip_lverts) {
			me.zip_lverts = false;
			me.splice_collinear();
			if(me.lverts.size() > 2) {
				if(me.zip_area_inertia) {
					me.zip_area_inertia = false;
					if(me.type == 0) me.circle.__validate_area_inertia(); else me.polygon.__validate_area_inertia();
				}
				if(me.area < 0) {
					me.reverse_vertices();
					me.area = -me.area;
				}
			}
		}
	};
}
zpp_nape.shape.ZPP_Polygon.prototype.zip_lverts = null;
zpp_nape.shape.ZPP_Polygon.prototype.invalidate_lverts = function() {
	{
		this.zip_gaxi = true;
		this.zip_laxi = true;
	}
	{
		this.zip_area_inertia = true;
		if(this.body != null) {
			this.body.invalidate_localCOM();
			this.body.invalidate_mass();
			this.body.invalidate_inertia();
		}
	}
	this.zip_angDrag = true;
	{
		this.zip_localCOM = true;
		{
			this.zip_area_inertia = true;
			if(this.body != null) {
				this.body.invalidate_localCOM();
				this.body.invalidate_mass();
				this.body.invalidate_inertia();
			}
		}
		this.zip_angDrag = true;
		{
			this.zip_worldCOM = true;
			{
				this.zip_aabb = true;
				if(this.body != null) this.body.zip_aabb = true;
			}
		}
		if(this.body != null) this.body.invalidate_localCOM();
	}
	{
		{
			this.zip_aabb = true;
			if(this.body != null) this.body.zip_aabb = true;
		}
		this.zip_gverts = true;
	}
	this.zip_lverts = true;
	this.zip_valid = true;
	if(this.body != null) this.body.wake();
}
zpp_nape.shape.ZPP_Polygon.prototype.zip_laxi = null;
zpp_nape.shape.ZPP_Polygon.prototype.invalidate_laxi = function() {
	this.zip_gaxi = true;
	this.zip_laxi = true;
}
zpp_nape.shape.ZPP_Polygon.prototype.zip_gverts = null;
zpp_nape.shape.ZPP_Polygon.prototype.invalidate_gverts = function() {
	{
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	this.zip_gverts = true;
}
zpp_nape.shape.ZPP_Polygon.prototype.zip_gaxi = null;
zpp_nape.shape.ZPP_Polygon.prototype.invalidate_gaxi = function() {
	this.zip_gaxi = true;
}
zpp_nape.shape.ZPP_Polygon.prototype.zip_valid = null;
zpp_nape.shape.ZPP_Polygon.prototype.validation = null;
zpp_nape.shape.ZPP_Polygon.prototype.valid = function() {
	if(this.zip_valid) {
		this.zip_valid = false;
		if(this.zip_lverts) {
			this.zip_lverts = false;
			this.splice_collinear();
			if(this.lverts.size() > 2) {
				if(this.zip_area_inertia) {
					this.zip_area_inertia = false;
					if(this.type == 0) this.circle.__validate_area_inertia(); else this.polygon.__validate_area_inertia();
				}
				if(this.area < 0) {
					this.reverse_vertices();
					this.area = -this.area;
				}
			}
		}
		if(this.lverts.size() < 3) return this.validation = (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
			return $r;
		}(this)); else {
			if(this.zip_area_inertia) {
				this.zip_area_inertia = false;
				if(this.type == 0) this.circle.__validate_area_inertia(); else this.polygon.__validate_area_inertia();
			}
			if(this.area < 1e-8) return this.validation = (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
				return $r;
			}(this)); else {
				var cont = true;
				var cx_cont = true;
				var cx_ite = this.lverts.next;
				var u = cx_ite;
				cx_ite = cx_ite.next;
				while(cx_ite != null) {
					var v = cx_ite;
					var dx;
					var dy;
					dx = v.x - u.x;
					dy = v.y - u.y;
					if(dx * dx + dy * dy < 1e-8) {
						cont = false;
						cx_cont = false;
						break;
					}
					u = v;
					cx_ite = cx_ite.next;
				}
				if(cx_cont) do {
					var v = this.lverts.next;
					var dx;
					var dy;
					dx = v.x - u.x;
					dy = v.y - u.y;
					if(dx * dx + dy * dy < 1e-8) {
						cont = false;
						break;
					}
				} while(false);
				if(!cont) return this.validation = (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES;
					return $r;
				}(this)); else {
					var neg = false;
					var pos = false;
					var cx_cont = true;
					var cx_ite = this.lverts.next;
					var u = cx_ite;
					cx_ite = cx_ite.next;
					var v = cx_ite;
					cx_ite = cx_ite.next;
					while(cx_ite != null) {
						var w = cx_ite;
						var ax;
						var ay;
						ax = w.x - v.x;
						ay = w.y - v.y;
						var bx;
						var by;
						bx = v.x - u.x;
						by = v.y - u.y;
						var dot = by * ax - bx * ay;
						if(dot > 1e-8) pos = true; else if(dot < -1e-008) neg = true;
						if(pos && neg) {
							cx_cont = false;
							break;
						}
						u = v;
						v = w;
						cx_ite = cx_ite.next;
					}
					if(cx_cont) {
						cx_ite = this.lverts.next;
						var w = cx_ite;
						do {
							var ax;
							var ay;
							ax = w.x - v.x;
							ay = w.y - v.y;
							var bx;
							var by;
							bx = v.x - u.x;
							by = v.y - u.y;
							var dot = by * ax - bx * ay;
							if(dot > 1e-8) pos = true; else if(dot < -1e-008) neg = true;
							if(pos && neg) {
								cx_cont = false;
								break;
							}
						} while(false);
						if(cx_cont) {
							u = v;
							v = w;
							cx_ite = cx_ite.next;
							var w1 = cx_ite;
							do {
								var ax;
								var ay;
								ax = w1.x - v.x;
								ay = w1.y - v.y;
								var bx;
								var by;
								bx = v.x - u.x;
								by = v.y - u.y;
								var dot = by * ax - bx * ay;
								if(dot > 1e-8) pos = true; else if(dot < -1e-008) neg = true;
								if(pos && neg) break;
							} while(false);
						}
					}
					if(pos && neg) return this.validation = (function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
						return $r;
					}(this)); else {
						cont = true;
						var cx_cont = true;
						var cx_ite = this.lverts.next;
						var u = cx_ite;
						cx_ite = cx_ite.next;
						while(cx_ite != null) {
							var v = cx_ite;
							if(!cont) {
								cx_cont = false;
								break;
							}
							var cx_cont1 = true;
							var cx_ite1 = this.lverts.next;
							var a = cx_ite1;
							cx_ite1 = cx_ite1.next;
							while(cx_ite1 != null) {
								var b = cx_ite1;
								if(u == a || u == b || v == a || v == b) {
									a = b;
									cx_ite1 = cx_ite1.next;
									continue;
								}
								var sx;
								var sy;
								sx = u.x - a.x;
								sy = u.y - a.y;
								var vx;
								var vy;
								vx = v.x - u.x;
								vy = v.y - u.y;
								var qx;
								var qy;
								qx = b.x - a.x;
								qy = b.y - a.y;
								var den = vy * qx - vx * qy;
								if(den * den > 1e-8) {
									den = 1 / den;
									var t = (qy * sx - qx * sy) * den;
									if(t > 1e-8 && t < 1 - 1e-8) {
										var s = (vy * sx - vx * sy) * den;
										if(s > 1e-8 && s < 1 - 1e-8) {
											cont = false;
											cx_cont1 = false;
											break;
										}
									}
								}
								a = b;
								cx_ite1 = cx_ite1.next;
							}
							if(cx_cont1) do {
								var b = this.lverts.next;
								if(u == a || u == b || v == a || v == b) break;
								var sx;
								var sy;
								sx = u.x - a.x;
								sy = u.y - a.y;
								var vx;
								var vy;
								vx = v.x - u.x;
								vy = v.y - u.y;
								var qx;
								var qy;
								qx = b.x - a.x;
								qy = b.y - a.y;
								var den = vy * qx - vx * qy;
								if(den * den > 1e-8) {
									den = 1 / den;
									var t = (qy * sx - qx * sy) * den;
									if(t > 1e-8 && t < 1 - 1e-8) {
										var s = (vy * sx - vx * sy) * den;
										if(s > 1e-8 && s < 1 - 1e-8) {
											cont = false;
											break;
										}
									}
								}
							} while(false);
							u = v;
							cx_ite = cx_ite.next;
						}
						if(cx_cont) do {
							var v = this.lverts.next;
							if(!cont) break;
							var cx_cont1 = true;
							var cx_ite1 = this.lverts.next;
							var a = cx_ite1;
							cx_ite1 = cx_ite1.next;
							while(cx_ite1 != null) {
								var b = cx_ite1;
								if(u == a || u == b || v == a || v == b) {
									a = b;
									cx_ite1 = cx_ite1.next;
									continue;
								}
								var sx;
								var sy;
								sx = u.x - a.x;
								sy = u.y - a.y;
								var vx;
								var vy;
								vx = v.x - u.x;
								vy = v.y - u.y;
								var qx;
								var qy;
								qx = b.x - a.x;
								qy = b.y - a.y;
								var den = vy * qx - vx * qy;
								if(den * den > 1e-8) {
									den = 1 / den;
									var t = (qy * sx - qx * sy) * den;
									if(t > 1e-8 && t < 1 - 1e-8) {
										var s = (vy * sx - vx * sy) * den;
										if(s > 1e-8 && s < 1 - 1e-8) {
											cont = false;
											cx_cont1 = false;
											break;
										}
									}
								}
								a = b;
								cx_ite1 = cx_ite1.next;
							}
							if(cx_cont1) do {
								var b = this.lverts.next;
								if(u == a || u == b || v == a || v == b) break;
								var sx;
								var sy;
								sx = u.x - a.x;
								sy = u.y - a.y;
								var vx;
								var vy;
								vx = v.x - u.x;
								vy = v.y - u.y;
								var qx;
								var qy;
								qx = b.x - a.x;
								qy = b.y - a.y;
								var den = vy * qx - vx * qy;
								if(den * den > 1e-8) {
									den = 1 / den;
									var t = (qy * sx - qx * sy) * den;
									if(t > 1e-8 && t < 1 - 1e-8) {
										var s = (vy * sx - vx * sy) * den;
										if(s > 1e-8 && s < 1 - 1e-8) {
											cont = false;
											break;
										}
									}
								}
							} while(false);
						} while(false);
						if(!cont) return this.validation = (function($this) {
							var $r;
							if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
								zpp_nape.util.ZPP_Flags.internal = true;
								zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
								zpp_nape.util.ZPP_Flags.internal = false;
							}
							$r = zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
							return $r;
						}(this)); else return this.validation = (function($this) {
							var $r;
							if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
								zpp_nape.util.ZPP_Flags.internal = true;
								zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
								zpp_nape.util.ZPP_Flags.internal = false;
							}
							$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
							return $r;
						}(this));
					}
				}
			}
		}
	} else return this.validation;
}
zpp_nape.shape.ZPP_Polygon.prototype.validate_lverts = function() {
	if(this.zip_lverts) {
		this.zip_lverts = false;
		this.splice_collinear();
		if(this.lverts.size() > 2) {
			if(this.zip_area_inertia) {
				this.zip_area_inertia = false;
				if(this.type == 0) this.circle.__validate_area_inertia(); else this.polygon.__validate_area_inertia();
			}
			if(this.area < 0) {
				this.reverse_vertices();
				this.area = -this.area;
			}
		}
	}
}
zpp_nape.shape.ZPP_Polygon.prototype.cleanup_lvert = function(x) {
	var ite = null;
	var ite2 = null;
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var i = cx_ite;
		if(i == x) break; else {
			ite = ite == null?this.gverts.next:ite.next;
			ite2 = ite2 == null?this.edges.head:ite2.next;
		}
		cx_ite = cx_ite.next;
	}
	var rem = ite == null?this.gverts.next:ite.next;
	this.gverts.erase(ite);
	var o = rem;
	{
		if(o.outer != null) o.outer.zpp_inner = null;
		o.outer = null;
		o._immutable = null;
		o._validate = null;
		o._invalidate = null;
		o.weak = false;
	}
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	if(this.lverts.next != null) {
		if(this.lverts.next.next == null) {
			var o = this.edges.head.elt;
			o.polygon = null;
			o.next = zpp_nape.shape.ZPP_Edge.zpp_pool;
			zpp_nape.shape.ZPP_Edge.zpp_pool = o;
			this.edges.pop();
			var o = this.edges.head.elt;
			o.polygon = null;
			o.next = zpp_nape.shape.ZPP_Edge.zpp_pool;
			zpp_nape.shape.ZPP_Edge.zpp_pool = o;
			this.edges.pop();
			this.edgeCnt -= 2;
		} else {
			var rem1 = ite2 == null?this.edges.head.elt:ite2.next.elt;
			this.edges.erase(ite2);
			var o = rem1;
			o.polygon = null;
			o.next = zpp_nape.shape.ZPP_Edge.zpp_pool;
			zpp_nape.shape.ZPP_Edge.zpp_pool = o;
			this.edgeCnt--;
		}
	}
}
zpp_nape.shape.ZPP_Polygon.prototype.splice_collinear = function() {
	var pre = this.lverts.next;
	var cur = pre.next;
	var cnt = this.lverts.size();
	while(cnt > 2) {
		var nxt = cur.next == null?this.lverts.next:cur.next;
		var u = pre;
		var v = cur;
		var w = nxt;
		var ax;
		var ay;
		ax = u.x - v.x;
		ay = u.y - v.y;
		var bx;
		var by;
		bx = w.x - v.x;
		by = w.y - v.y;
		var collinear = zpp_nape.util.ZPP_Math.sqr(by * ax - bx * ay) < 1e-8;
		if(collinear) {
			cnt--;
			this.cleanup_lvert(cur);
			if(cur == this.lverts.next) {
				this.lverts.pop();
				break;
			} else {
				cur = this.lverts.erase(pre);
				if(cur == null) cur = this.lverts.next;
			}
		} else {
			pre = cur;
			cur = nxt;
		}
		if(cur == this.lverts.next) break;
	}
}
zpp_nape.shape.ZPP_Polygon.prototype.reverse_vertices = function() {
	this.lverts.reverse();
	this.gverts.reverse();
	this.edges.reverse();
	var ite = this.edges.iterator_at(this.edgeCnt - 1);
	var elem = this.edges.pop_unsafe();
	this.edges.insert(ite,elem);
	this.reverse_flag = !this.reverse_flag;
	if(this.wrap_lverts != null) this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
	if(this.wrap_gverts != null) this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
	if(this.wrap_edges != null) this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
}
zpp_nape.shape.ZPP_Polygon.prototype.validate_laxi = function() {
	if(this.zip_laxi) {
		this.zip_laxi = false;
		if(this.zip_lverts) {
			this.zip_lverts = false;
			this.splice_collinear();
			if(this.lverts.size() > 2) {
				if(this.zip_area_inertia) {
					this.zip_area_inertia = false;
					if(this.type == 0) this.circle.__validate_area_inertia(); else this.polygon.__validate_area_inertia();
				}
				if(this.area < 0) {
					this.reverse_vertices();
					this.area = -this.area;
				}
			}
		}
		var ite = this.edges.head;
		var cx_ite = this.lverts.next;
		var u = cx_ite;
		cx_ite = cx_ite.next;
		while(cx_ite != null) {
			var v = cx_ite;
			var edge = ite.elt;
			ite = ite.next;
			edge.lp0 = u;
			edge.lp1 = v;
			var dx;
			var dy;
			dx = u.x - v.x;
			dy = u.y - v.y;
			var l = Math.sqrt(dx * dx + dy * dy);
			edge.length = l;
			var t = 1.0 / l;
			dx *= t;
			dy *= t;
			var t = dx;
			dx = -dy;
			dy = t;
			edge.lprojection = dx * u.x + dy * u.y;
			edge.lnormx = dx;
			edge.lnormy = dy;
			if(edge.wrap_lnorm != null) {
				edge.wrap_lnorm.zpp_inner.x = dx;
				edge.wrap_lnorm.zpp_inner.y = dy;
			}
			u = v;
			cx_ite = cx_ite.next;
		}
		var v = this.lverts.next;
		var edge = ite.elt;
		ite = ite.next;
		edge.lp0 = u;
		edge.lp1 = v;
		var dx;
		var dy;
		dx = u.x - v.x;
		dy = u.y - v.y;
		var l = Math.sqrt(dx * dx + dy * dy);
		edge.length = l;
		var t = 1.0 / l;
		dx *= t;
		dy *= t;
		var t = dx;
		dx = -dy;
		dy = t;
		edge.lprojection = dx * u.x + dy * u.y;
		edge.lnormx = dx;
		edge.lnormy = dy;
		if(edge.wrap_lnorm != null) {
			edge.wrap_lnorm.zpp_inner.x = dx;
			edge.wrap_lnorm.zpp_inner.y = dy;
		}
	}
}
zpp_nape.shape.ZPP_Polygon.prototype.validate_gverts = function() {
	if(this.zip_gverts) {
		if(this.body != null) {
			this.zip_gverts = false;
			if(this.zip_lverts) {
				this.zip_lverts = false;
				this.splice_collinear();
				if(this.lverts.size() > 2) {
					if(this.zip_area_inertia) {
						this.zip_area_inertia = false;
						if(this.type == 0) this.circle.__validate_area_inertia(); else this.polygon.__validate_area_inertia();
					}
					if(this.area < 0) {
						this.reverse_vertices();
						this.area = -this.area;
					}
				}
			}
			this.body.validate_axis();
			var li = this.lverts.next;
			var cx_ite = this.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
				g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
				cx_ite = cx_ite.next;
			}
		}
	}
}
zpp_nape.shape.ZPP_Polygon.prototype.validate_gaxi = function() {
	if(this.zip_gaxi) {
		if(this.body != null) {
			this.zip_gaxi = false;
			this.validate_laxi();
			this.body.validate_axis();
			var ite = this.edges.head;
			var cx_ite = this.gverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var v = cx_ite;
				var e = ite.elt;
				ite = ite.next;
				e.gp0 = u;
				e.gp1 = v;
				e.gnormx = this.body.axisy * e.lnormx - this.body.axisx * e.lnormy;
				e.gnormy = e.lnormx * this.body.axisx + e.lnormy * this.body.axisy;
				e.gprojection = this.body.posx * e.gnormx + this.body.posy * e.gnormy + e.lprojection;
				if(e.wrap_gnorm != null) {
					e.wrap_gnorm.zpp_inner.x = e.gnormx;
					e.wrap_gnorm.zpp_inner.y = e.gnormy;
				}
				e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
				e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
				u = v;
				cx_ite = cx_ite.next;
			}
			var v = this.gverts.next;
			var e = ite.elt;
			ite = ite.next;
			e.gp0 = u;
			e.gp1 = v;
			e.gnormx = this.body.axisy * e.lnormx - this.body.axisx * e.lnormy;
			e.gnormy = e.lnormx * this.body.axisx + e.lnormy * this.body.axisy;
			e.gprojection = this.body.posx * e.gnormx + this.body.posy * e.gnormy + e.lprojection;
			if(e.wrap_gnorm != null) {
				e.wrap_gnorm.zpp_inner.x = e.gnormx;
				e.wrap_gnorm.zpp_inner.y = e.gnormy;
			}
			e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
			e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
		}
	}
}
zpp_nape.shape.ZPP_Polygon.prototype.__validate_aabb = function() {
	if(this.lverts.next == null) throw "Error: An empty polygon has no meaningful bounds";
	this.validate_gverts();
	var p0 = this.gverts.next;
	this.aabb.minx = p0.x;
	this.aabb.miny = p0.y;
	this.aabb.maxx = p0.x;
	this.aabb.maxy = p0.y;
	var cx_ite = this.gverts.next.next;
	while(cx_ite != null) {
		var p = cx_ite;
		if(p.x < this.aabb.minx) this.aabb.minx = p.x;
		if(p.x > this.aabb.maxx) this.aabb.maxx = p.x;
		if(p.y < this.aabb.miny) this.aabb.miny = p.y;
		if(p.y > this.aabb.maxy) this.aabb.maxy = p.y;
		cx_ite = cx_ite.next;
	}
}
zpp_nape.shape.ZPP_Polygon.prototype.__validate_area_inertia = function() {
	if(this.lverts.next == null || this.lverts.next.next == null || this.lverts.next.next.next == null) {
		this.area = 0;
		this.inertia = 0;
	} else {
		this.area = 0.;
		var s1 = 0.;
		var s2 = 0.;
		var cx_ite = this.lverts.next;
		var u = cx_ite;
		cx_ite = cx_ite.next;
		var v = cx_ite;
		cx_ite = cx_ite.next;
		while(cx_ite != null) {
			var w = cx_ite;
			var a = v.y * u.x - v.x * u.y;
			var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a * b;
			s2 += a;
			this.area += v.x * (w.y - u.y);
			u = v;
			v = w;
			cx_ite = cx_ite.next;
		}
		cx_ite = this.lverts.next;
		var w = cx_ite;
		var a = v.y * u.x - v.x * u.y;
		var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
		s1 += a * b;
		s2 += a;
		this.area += v.x * (w.y - u.y);
		u = v;
		v = w;
		cx_ite = cx_ite.next;
		var w1 = cx_ite;
		var a = v.y * u.x - v.x * u.y;
		var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
		s1 += a * b;
		s2 += a;
		this.area += v.x * (w1.y - u.y);
		this.inertia = s1 / (6 * s2);
		this.area *= 0.5;
		if(this.area < 0) {
			this.area = -this.area;
			this.reverse_vertices();
		}
	}
}
zpp_nape.shape.ZPP_Polygon.prototype.__validate_angDrag = function() {
	if(this.lverts.size() < 3) throw "Error: Polygon's with less than 3 vertices have no meaningful angDrag";
	if(this.zip_area_inertia) {
		this.zip_area_inertia = false;
		if(this.type == 0) this.circle.__validate_area_inertia(); else this.polygon.__validate_area_inertia();
	}
	this.validate_laxi();
	var accum = 0.;
	var ei = this.edges.head;
	var perim = 0.;
	var cx_cont = true;
	var cx_itei = this.lverts.next;
	var u = cx_itei;
	var cx_itej = cx_itei.next;
	while(cx_itej != null) {
		var v = cx_itej;
		var edge = ei.elt;
		ei = ei.next;
		perim += edge.length;
		var dx;
		var dy;
		dx = v.x - u.x;
		dy = v.y - u.y;
		accum += edge.length * 2.5 * this.material.dynamicFriction * edge.lprojection * edge.lprojection;
		var t = -(u.y * edge.lnormx - u.x * edge.lnormy) / (dy * edge.lnormx - dx * edge.lnormy);
		if(t > 0) {
			var ta = t > 1?1:t;
			var cx;
			var cy;
			cx = u.x;
			cy = u.y;
			var t1 = ta;
			cx += dx * t1;
			cy += dy * t1;
			var dota = edge.lnormy * u.x - edge.lnormx * u.y;
			var dotb = edge.lnormy * cx - edge.lnormx * cy;
			var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
			accum += dots * ta * edge.length * 100;
		}
		if(t < 1) {
			var tb = t < 0?0:t;
			var cx;
			var cy;
			cx = u.x;
			cy = u.y;
			var t1 = tb;
			cx += dx * t1;
			cy += dy * t1;
			var dota = edge.lnormy * cx - edge.lnormx * cy;
			var dotb = edge.lnormy * v.x - edge.lnormx * v.y;
			var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
			accum += dots * 0.5 * (1 - tb) * edge.length * 100;
		}
		cx_itei = cx_itej;
		u = v;
		cx_itej = cx_itej.next;
	}
	if(cx_cont) do {
		cx_itej = this.lverts.next;
		var v = cx_itej;
		var edge = ei.elt;
		ei = ei.next;
		perim += edge.length;
		var dx;
		var dy;
		dx = v.x - u.x;
		dy = v.y - u.y;
		accum += edge.length * 2.5 * this.material.dynamicFriction * edge.lprojection * edge.lprojection;
		var t = -(u.y * edge.lnormx - u.x * edge.lnormy) / (dy * edge.lnormx - dx * edge.lnormy);
		if(t > 0) {
			var ta = t > 1?1:t;
			var cx;
			var cy;
			cx = u.x;
			cy = u.y;
			var t1 = ta;
			cx += dx * t1;
			cy += dy * t1;
			var dota = edge.lnormy * u.x - edge.lnormx * u.y;
			var dotb = edge.lnormy * cx - edge.lnormx * cy;
			var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
			accum += dots * ta * edge.length * 100;
		}
		if(t < 1) {
			var tb = t < 0?0:t;
			var cx;
			var cy;
			cx = u.x;
			cy = u.y;
			var t1 = tb;
			cx += dx * t1;
			cy += dy * t1;
			var dota = edge.lnormy * cx - edge.lnormx * cy;
			var dotb = edge.lnormy * v.x - edge.lnormx * v.y;
			var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
			accum += dots * 0.5 * (1 - tb) * edge.length * 100;
		}
	} while(false);
	this.angDrag = accum / (this.inertia * perim);
}
zpp_nape.shape.ZPP_Polygon.prototype.__validate_localCOM = function() {
	if(this.lverts.next == null) throw "Error: An empty polygon has no meaningful localCOM";
	if(this.lverts.next.next == null) {
		this.localCOMx = this.lverts.next.x;
		this.localCOMy = this.lverts.next.y;
	} else if(this.lverts.next.next.next == null) {
		this.localCOMx = this.lverts.next.x;
		this.localCOMy = this.lverts.next.y;
		var t = 1.0;
		this.localCOMx += this.lverts.next.next.x * t;
		this.localCOMy += this.lverts.next.next.y * t;
		var t = 0.5;
		this.localCOMx *= t;
		this.localCOMy *= t;
	} else {
		this.localCOMx = 0;
		this.localCOMy = 0;
		var area = 0.0;
		var cx_ite = this.lverts.next;
		var u = cx_ite;
		cx_ite = cx_ite.next;
		var v = cx_ite;
		cx_ite = cx_ite.next;
		while(cx_ite != null) {
			var w = cx_ite;
			area += v.x * (w.y - u.y);
			var cf = w.y * v.x - w.x * v.y;
			this.localCOMx += (v.x + w.x) * cf;
			this.localCOMy += (v.y + w.y) * cf;
			u = v;
			v = w;
			cx_ite = cx_ite.next;
		}
		cx_ite = this.lverts.next;
		var w = cx_ite;
		area += v.x * (w.y - u.y);
		var cf = w.y * v.x - w.x * v.y;
		this.localCOMx += (v.x + w.x) * cf;
		this.localCOMy += (v.y + w.y) * cf;
		u = v;
		v = w;
		cx_ite = cx_ite.next;
		var w1 = cx_ite;
		area += v.x * (w1.y - u.y);
		var cf = w1.y * v.x - w1.x * v.y;
		this.localCOMx += (v.x + w1.x) * cf;
		this.localCOMy += (v.y + w1.y) * cf;
		area = 1 / (3 * area);
		var t = area;
		this.localCOMx *= t;
		this.localCOMy *= t;
	}
}
zpp_nape.shape.ZPP_Polygon.prototype.setupLocalCOM = function() {
	var me = this;
	this.wrap_localCOM = nape.geom.Vec2.get(this.localCOMx,this.localCOMy,null);
	this.wrap_localCOM.zpp_inner.inuse = true;
	this.wrap_localCOM.zpp_inner._validate = function() {
		if(me.lverts.next == null) throw "Error: An empty polygon does not have any meaningful localCOM";
		if(me.zip_localCOM) {
			me.zip_localCOM = false;
			if(me.type == 1) me.polygon.__validate_localCOM();
			if(me.wrap_localCOM != null) {
				me.wrap_localCOM.zpp_inner.x = me.localCOMx;
				me.wrap_localCOM.zpp_inner.y = me.localCOMy;
			}
		}
	};
	this.wrap_localCOM.zpp_inner._invalidate = function(x) {
		throw "not done yet";
	};
}
zpp_nape.shape.ZPP_Polygon.prototype.__translate = function(dx,dy) {
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var p = cx_ite;
		var t = 1.0;
		p.x += dx * t;
		p.y += dy * t;
		cx_ite = cx_ite.next;
	}
	this.invalidate_lverts();
}
zpp_nape.shape.ZPP_Polygon.prototype.__scale = function(sx,sy) {
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var p = cx_ite;
		p.x *= sx;
		p.y *= sy;
		cx_ite = cx_ite.next;
	}
	this.invalidate_lverts();
}
zpp_nape.shape.ZPP_Polygon.prototype.__rotate = function(ax,ay) {
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var p = cx_ite;
		var tempx;
		var tempy;
		tempx = ay * p.x - ax * p.y;
		tempy = p.x * ax + p.y * ay;
		p.x = tempx;
		p.y = tempy;
		cx_ite = cx_ite.next;
	}
	this.invalidate_lverts();
}
zpp_nape.shape.ZPP_Polygon.prototype.__transform = function(mat) {
	var cx_ite = this.lverts.next;
	while(cx_ite != null) {
		var p = cx_ite;
		var t = mat.zpp_inner.a * p.x + mat.zpp_inner.b * p.y + mat.zpp_inner.tx;
		p.y = mat.zpp_inner.c * p.x + mat.zpp_inner.d * p.y + mat.zpp_inner.ty;
		p.x = t;
		cx_ite = cx_ite.next;
	}
	this.invalidate_lverts();
}
zpp_nape.shape.ZPP_Polygon.prototype.__copy = function() {
	var ret = new nape.shape.Polygon(this.outer_zn.flibget_localVerts()).zpp_inner_zn;
	return ret;
}
zpp_nape.shape.ZPP_Polygon.prototype.__class__ = zpp_nape.shape.ZPP_Polygon;
jeash.text.FontStyle = { __ename__ : ["jeash","text","FontStyle"], __constructs__ : ["REGULAR","ITALIC","BOLD_ITALIC","BOLD"] }
jeash.text.FontStyle.REGULAR = ["REGULAR",0];
jeash.text.FontStyle.REGULAR.toString = $estr;
jeash.text.FontStyle.REGULAR.__enum__ = jeash.text.FontStyle;
jeash.text.FontStyle.ITALIC = ["ITALIC",1];
jeash.text.FontStyle.ITALIC.toString = $estr;
jeash.text.FontStyle.ITALIC.__enum__ = jeash.text.FontStyle;
jeash.text.FontStyle.BOLD_ITALIC = ["BOLD_ITALIC",2];
jeash.text.FontStyle.BOLD_ITALIC.toString = $estr;
jeash.text.FontStyle.BOLD_ITALIC.__enum__ = jeash.text.FontStyle;
jeash.text.FontStyle.BOLD = ["BOLD",3];
jeash.text.FontStyle.BOLD.toString = $estr;
jeash.text.FontStyle.BOLD.__enum__ = jeash.text.FontStyle;
haxe.Resource = function() { }
haxe.Resource.__name__ = ["haxe","Resource"];
haxe.Resource.content = null;
haxe.Resource.listNames = function() {
	var names = new Array();
	var _g = 0, _g1 = haxe.Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		names.push(x.name);
	}
	return names;
}
haxe.Resource.getString = function(name) {
	var _g = 0, _g1 = haxe.Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return x.str;
			var b = haxe.Unserializer.run(x.data);
			return b.toString();
		}
	}
	return null;
}
haxe.Resource.getBytes = function(name) {
	var _g = 0, _g1 = haxe.Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return haxe.io.Bytes.ofString(x.str);
			return haxe.Unserializer.run(x.data);
		}
	}
	return null;
}
haxe.Resource.prototype.__class__ = haxe.Resource;
jeash.display.GraphicsDataType = { __ename__ : ["jeash","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH"] }
jeash.display.GraphicsDataType.STROKE = ["STROKE",0];
jeash.display.GraphicsDataType.STROKE.toString = $estr;
jeash.display.GraphicsDataType.STROKE.__enum__ = jeash.display.GraphicsDataType;
jeash.display.GraphicsDataType.SOLID = ["SOLID",1];
jeash.display.GraphicsDataType.SOLID.toString = $estr;
jeash.display.GraphicsDataType.SOLID.__enum__ = jeash.display.GraphicsDataType;
jeash.display.GraphicsDataType.GRADIENT = ["GRADIENT",2];
jeash.display.GraphicsDataType.GRADIENT.toString = $estr;
jeash.display.GraphicsDataType.GRADIENT.__enum__ = jeash.display.GraphicsDataType;
jeash.display.GraphicsDataType.PATH = ["PATH",3];
jeash.display.GraphicsDataType.PATH.toString = $estr;
jeash.display.GraphicsDataType.PATH.__enum__ = jeash.display.GraphicsDataType;
if(!jeash.media) jeash.media = {}
jeash.media.SoundChannel = function(p) {
	if( p === $_ ) return;
	jeash.events.EventDispatcher.call(this,this);
	this.ChannelId = -1;
	this.leftPeak = 0.;
	this.position = 0.;
	this.rightPeak = 0.;
	this.jeashAudioCurrentLoop = 1;
	this.jeashAudioTotalLoops = 1;
}
jeash.media.SoundChannel.__name__ = ["jeash","media","SoundChannel"];
jeash.media.SoundChannel.__super__ = jeash.events.EventDispatcher;
for(var k in jeash.events.EventDispatcher.prototype ) jeash.media.SoundChannel.prototype[k] = jeash.events.EventDispatcher.prototype[k];
jeash.media.SoundChannel.jeashCreate = function(src,startTime,loops,sndTransform,removeRef) {
	if(loops == null) loops = 0;
	if(startTime == null) startTime = 0.0;
	var channel = new jeash.media.SoundChannel();
	channel.jeashAudio = js.Lib.document.createElement("audio");
	channel.jeashRemoveRef = removeRef;
	channel.jeashAudio.addEventListener("ended",$closure(channel,"__onSoundChannelFinished"),false);
	channel.jeashAudio.addEventListener("seeked",$closure(channel,"__onSoundSeeked"),false);
	if(loops > 0) {
		channel.jeashAudioTotalLoops = loops;
		channel.jeashAudio.loop = true;
	}
	channel.jeashStartTime = startTime;
	if(startTime > 0.) {
		var onLoad = null;
		onLoad = function(_) {
			channel.jeashAudio.currentTime = channel.jeashStartTime;
			channel.jeashAudio.play();
			channel.jeashAudio.removeEventListener("canplaythrough",onLoad,false);
		};
		channel.jeashAudio.addEventListener("canplaythrough",onLoad,false);
	} else channel.jeashAudio.autoplay = true;
	channel.jeashAudio.src = src;
	return channel;
}
jeash.media.SoundChannel.prototype.ChannelId = null;
jeash.media.SoundChannel.prototype.leftPeak = null;
jeash.media.SoundChannel.prototype.position = null;
jeash.media.SoundChannel.prototype.rightPeak = null;
jeash.media.SoundChannel.prototype.soundTransform = null;
jeash.media.SoundChannel.prototype.jeashAudioCurrentLoop = null;
jeash.media.SoundChannel.prototype.jeashAudioTotalLoops = null;
jeash.media.SoundChannel.prototype.jeashRemoveRef = null;
jeash.media.SoundChannel.prototype.jeashStartTime = null;
jeash.media.SoundChannel.prototype.jeashAudio = null;
jeash.media.SoundChannel.prototype.stop = function() {
	if(this.jeashAudio != null) {
		this.jeashAudio.pause();
		this.jeashAudio = null;
		if(this.jeashRemoveRef != null) this.jeashRemoveRef();
	}
}
jeash.media.SoundChannel.prototype.__setSoundTransform = function(v) {
	return this.soundTransform = v;
}
jeash.media.SoundChannel.prototype.__onSoundSeeked = function(evt) {
	if(this.jeashAudioCurrentLoop >= this.jeashAudioTotalLoops) {
		this.jeashAudio.loop = false;
		this.stop();
	} else this.jeashAudioCurrentLoop++;
}
jeash.media.SoundChannel.prototype.__onSoundChannelFinished = function(evt) {
	if(this.jeashAudioCurrentLoop >= this.jeashAudioTotalLoops) {
		this.jeashAudio.removeEventListener("ended",$closure(this,"__onSoundChannelFinished"),false);
		this.jeashAudio.removeEventListener("seeked",$closure(this,"__onSoundSeeked"),false);
		this.jeashAudio = null;
		var evt1 = new jeash.events.Event(jeash.events.Event.COMPLETE);
		evt1.target = this;
		this.dispatchEvent(evt1);
		if(this.jeashRemoveRef != null) this.jeashRemoveRef();
	} else {
		this.jeashAudio.currentTime = this.jeashStartTime;
		this.jeashAudio.play();
	}
}
jeash.media.SoundChannel.prototype.__class__ = jeash.media.SoundChannel;
zpp_nape.geom.ZPP_GeomVert = function(p) {
}
zpp_nape.geom.ZPP_GeomVert.__name__ = ["zpp_nape","geom","ZPP_GeomVert"];
zpp_nape.geom.ZPP_GeomVert.zpp_pool = null;
zpp_nape.geom.ZPP_GeomVert.get = function(x,y) {
	var ret = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.geom.ZPP_GeomVert.zpp_pool == null) ret = new zpp_nape.geom.ZPP_GeomVert(); else {
			ret = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
			zpp_nape.geom.ZPP_GeomVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	ret.x = x;
	ret.y = y;
	return ret;
}
zpp_nape.geom.ZPP_GeomVert.prototype.x = null;
zpp_nape.geom.ZPP_GeomVert.prototype.y = null;
zpp_nape.geom.ZPP_GeomVert.prototype.prev = null;
zpp_nape.geom.ZPP_GeomVert.prototype.next = null;
zpp_nape.geom.ZPP_GeomVert.prototype.wrap = null;
zpp_nape.geom.ZPP_GeomVert.prototype.forced = null;
zpp_nape.geom.ZPP_GeomVert.prototype.free = function() {
	if(this.wrap != null) {
		this.wrap.zpp_inner.inuse = false;
		this.wrap.dispose();
		this.wrap = null;
	}
	this.forced = false;
}
zpp_nape.geom.ZPP_GeomVert.prototype.alloc = function() {
}
zpp_nape.geom.ZPP_GeomVert.prototype.wrapper = function() {
	if(this.wrap == null) {
		this.wrap = nape.geom.Vec2.get(this.x,this.y,null);
		this.wrap.zpp_inner.inuse = true;
		this.wrap.zpp_inner._invalidate = $closure(this,"modwrap");
		this.wrap.zpp_inner._validate = $closure(this,"getwrap");
	}
	return this.wrap;
}
zpp_nape.geom.ZPP_GeomVert.prototype.modwrap = function(n) {
	this.x = n.x;
	this.y = n.y;
}
zpp_nape.geom.ZPP_GeomVert.prototype.getwrap = function() {
	this.wrap.zpp_inner.x = this.x;
	this.wrap.zpp_inner.y = this.y;
}
zpp_nape.geom.ZPP_GeomVert.prototype.__class__ = zpp_nape.geom.ZPP_GeomVert;
zpp_nape.geom.ZPP_GeomPoly = function(outer) {
	if( outer === $_ ) return;
	this.outer = outer;
}
zpp_nape.geom.ZPP_GeomPoly.__name__ = ["zpp_nape","geom","ZPP_GeomPoly"];
zpp_nape.geom.ZPP_GeomPoly.prototype.outer = null;
zpp_nape.geom.ZPP_GeomPoly.prototype.vertices = null;
zpp_nape.geom.ZPP_GeomPoly.prototype.__class__ = zpp_nape.geom.ZPP_GeomPoly;
zpp_nape.geom.ZPP_GeomVertexIterator = function(p) {
	if( p === $_ ) return;
	zpp_nape.geom.ZPP_GeomVertexIterator.internal = true;
	this.outer = new nape.geom.GeomVertexIterator();
	zpp_nape.geom.ZPP_GeomVertexIterator.internal = false;
}
zpp_nape.geom.ZPP_GeomVertexIterator.__name__ = ["zpp_nape","geom","ZPP_GeomVertexIterator"];
zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = null;
zpp_nape.geom.ZPP_GeomVertexIterator.get = function(poly,forward) {
	var ret = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool == null) ret = new zpp_nape.geom.ZPP_GeomVertexIterator(); else {
			ret = zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool;
			zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	ret.outer.zpp_inner = ret;
	ret.ptr = poly;
	ret.forward = forward;
	ret.start = poly;
	ret.first = poly != null;
	return ret.outer;
}
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.ptr = null;
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.start = null;
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.first = null;
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.forward = null;
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.outer = null;
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.next = null;
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.free = function() {
	this.outer.zpp_inner = null;
	this.ptr = this.start = null;
}
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.alloc = function() {
}
zpp_nape.geom.ZPP_GeomVertexIterator.prototype.__class__ = zpp_nape.geom.ZPP_GeomVertexIterator;
zpp_nape.geom.ZPP_Mat23 = function(p) {
}
zpp_nape.geom.ZPP_Mat23.__name__ = ["zpp_nape","geom","ZPP_Mat23"];
zpp_nape.geom.ZPP_Mat23.zpp_pool = null;
zpp_nape.geom.ZPP_Mat23.get = function() {
	var ret = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.geom.ZPP_Mat23.zpp_pool == null) ret = new zpp_nape.geom.ZPP_Mat23(); else {
			ret = zpp_nape.geom.ZPP_Mat23.zpp_pool;
			zpp_nape.geom.ZPP_Mat23.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	return ret;
}
zpp_nape.geom.ZPP_Mat23.identity = function() {
	var ret = zpp_nape.geom.ZPP_Mat23.get();
	ret.tx = 0;
	ret.ty = 0;
	ret.a = 1;
	ret.b = 0;
	ret.c = 0;
	ret.d = 1;
	return ret;
}
zpp_nape.geom.ZPP_Mat23.prototype.outer = null;
zpp_nape.geom.ZPP_Mat23.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new nape.geom.Mat23();
		var o = this.outer.zpp_inner;
		null;
		o.next = zpp_nape.geom.ZPP_Mat23.zpp_pool;
		zpp_nape.geom.ZPP_Mat23.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
}
zpp_nape.geom.ZPP_Mat23.prototype.a = null;
zpp_nape.geom.ZPP_Mat23.prototype.b = null;
zpp_nape.geom.ZPP_Mat23.prototype.c = null;
zpp_nape.geom.ZPP_Mat23.prototype.d = null;
zpp_nape.geom.ZPP_Mat23.prototype.tx = null;
zpp_nape.geom.ZPP_Mat23.prototype.ty = null;
zpp_nape.geom.ZPP_Mat23.prototype.__invalidate = null;
zpp_nape.geom.ZPP_Mat23.prototype.set = function(m) {
	{
		this.tx = m.tx;
		this.ty = m.ty;
		this.a = m.a;
		this.b = m.b;
		this.c = m.c;
		this.d = m.d;
	}
}
zpp_nape.geom.ZPP_Mat23.prototype.setas = function(a,b,c,d,tx,ty) {
	this.tx = tx;
	this.ty = ty;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
}
zpp_nape.geom.ZPP_Mat23.prototype.next = null;
zpp_nape.geom.ZPP_Mat23.prototype.free = function() {
}
zpp_nape.geom.ZPP_Mat23.prototype.alloc = function() {
}
zpp_nape.geom.ZPP_Mat23.prototype.__class__ = zpp_nape.geom.ZPP_Mat23;
if(!haxe.io) haxe.io = {}
haxe.io.Bytes = function(length,b) {
	if( length === $_ ) return;
	this.length = length;
	this.b = b;
}
haxe.io.Bytes.__name__ = ["haxe","io","Bytes"];
haxe.io.Bytes.alloc = function(length) {
	var a = new Array();
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		a.push(0);
	}
	return new haxe.io.Bytes(length,a);
}
haxe.io.Bytes.ofString = function(s) {
	var a = new Array();
	var _g1 = 0, _g = s.length;
	while(_g1 < _g) {
		var i = _g1++;
		var c = s.cca(i);
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe.io.Bytes(a.length,a);
}
haxe.io.Bytes.ofData = function(b) {
	return new haxe.io.Bytes(b.length,b);
}
haxe.io.Bytes.prototype.length = null;
haxe.io.Bytes.prototype.b = null;
haxe.io.Bytes.prototype.get = function(pos) {
	return this.b[pos];
}
haxe.io.Bytes.prototype.set = function(pos,v) {
	this.b[pos] = v & 255;
}
haxe.io.Bytes.prototype.blit = function(pos,src,srcpos,len) {
	if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) throw haxe.io.Error.OutsideBounds;
	var b1 = this.b;
	var b2 = src.b;
	if(b1 == b2 && pos > srcpos) {
		var i = len;
		while(i > 0) {
			i--;
			b1[i + pos] = b2[i + srcpos];
		}
		return;
	}
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		b1[i + pos] = b2[i + srcpos];
	}
}
haxe.io.Bytes.prototype.sub = function(pos,len) {
	if(pos < 0 || len < 0 || pos + len > this.length) throw haxe.io.Error.OutsideBounds;
	return new haxe.io.Bytes(len,this.b.slice(pos,pos + len));
}
haxe.io.Bytes.prototype.compare = function(other) {
	var b1 = this.b;
	var b2 = other.b;
	var len = this.length < other.length?this.length:other.length;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		if(b1[i] != b2[i]) return b1[i] - b2[i];
	}
	return this.length - other.length;
}
haxe.io.Bytes.prototype.readString = function(pos,len) {
	if(pos < 0 || len < 0 || pos + len > this.length) throw haxe.io.Error.OutsideBounds;
	var s = "";
	var b = this.b;
	var fcc = String.fromCharCode;
	var i = pos;
	var max = pos + len;
	while(i < max) {
		var c = b[i++];
		if(c < 128) {
			if(c == 0) break;
			s += fcc(c);
		} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
			var c2 = b[i++];
			s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
		} else {
			var c2 = b[i++];
			var c3 = b[i++];
			s += fcc((c & 15) << 18 | (c2 & 127) << 12 | c3 << 6 & 127 | b[i++] & 127);
		}
	}
	return s;
}
haxe.io.Bytes.prototype.toString = function() {
	return this.readString(0,this.length);
}
haxe.io.Bytes.prototype.toHex = function() {
	var s = new StringBuf();
	var chars = [];
	var str = "0123456789abcdef";
	var _g1 = 0, _g = str.length;
	while(_g1 < _g) {
		var i = _g1++;
		chars.push(str.charCodeAt(i));
	}
	var _g1 = 0, _g = this.length;
	while(_g1 < _g) {
		var i = _g1++;
		var c = this.b[i];
		s.b[s.b.length] = String.fromCharCode(chars[c >> 4]);
		s.b[s.b.length] = String.fromCharCode(chars[c & 15]);
	}
	return s.b.join("");
}
haxe.io.Bytes.prototype.getData = function() {
	return this.b;
}
haxe.io.Bytes.prototype.__class__ = haxe.io.Bytes;
if(!nape.dynamics) nape.dynamics = {}
nape.dynamics.ArbiterList = function(p) {
	if( p === $_ ) return;
	this.zpp_inner = new zpp_nape.util.ZPP_ArbiterList();
	this.zpp_inner.outer = this;
}
nape.dynamics.ArbiterList.__name__ = ["nape","dynamics","ArbiterList"];
nape.dynamics.ArbiterList.fromArray = function(array) {
	var ret = new nape.dynamics.ArbiterList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.dynamics.ArbiterList.prototype.zpp_inner = null;
nape.dynamics.ArbiterList.prototype.length = null;
nape.dynamics.ArbiterList.prototype.flibget_length = function() {
	return this.zpp_gl();
}
nape.dynamics.ArbiterList.prototype.zpp_gl = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = 0;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.active) this.zpp_inner.user_length++;
			cx_ite = cx_ite.next;
		}
	}
	return this.zpp_inner.user_length;
}
nape.dynamics.ArbiterList.prototype.zpp_vm = function() {
	this.zpp_inner.valmod();
}
nape.dynamics.ArbiterList.prototype.has = function(obj) {
	this.zpp_vm();
	return this.zpp_inner.inner.has(obj.zpp_inner);
}
nape.dynamics.ArbiterList.prototype.at = function(index) {
	this.zpp_vm();
	if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = 0;
		this.zpp_inner.at_ite = this.zpp_inner.inner.head;
		while(true) {
			var x = this.zpp_inner.at_ite.elt;
			if(x.active) break;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		while(true) {
			var x = this.zpp_inner.at_ite.elt;
			if(x.active) break;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.elt.wrapper();
}
nape.dynamics.ArbiterList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.empty()?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.dynamics.ArbiterList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.empty()?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.dynamics.ArbiterList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.empty()) throw "Error: Cannot remove from empty list";
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.zpp_gl() == 1?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx = ret.wrapper();
	return retx;
}
nape.dynamics.ArbiterList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.empty()) throw "Error: Cannot remove from empty list";
	this.zpp_vm();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.zpp_gl() == 1?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.wrapper();
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx = ret.wrapper();
	return retx;
}
nape.dynamics.ArbiterList.prototype.add = function(obj) {
	return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
}
nape.dynamics.ArbiterList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_vm();
	var ret = (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var x = cx_ite.elt;
				if(x == obj.zpp_inner) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
}
nape.dynamics.ArbiterList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
}
nape.dynamics.ArbiterList.prototype.empty = function() {
	return this.zpp_gl() == 0;
}
nape.dynamics.ArbiterList.prototype.iterator = function() {
	this.zpp_vm();
	if(this.zpp_inner.iterators == null) this.zpp_inner.iterators = new zpp_nape.util.ZNPList_ArbiterIterator();
	return nape.dynamics.ArbiterIterator.get(this);
}
nape.dynamics.ArbiterList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.dynamics.ArbiterList();
	var $it0 = this.iterator();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Arbiter" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
}
nape.dynamics.ArbiterList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var $it0 = xs.iterator();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(!this.has(x)) this.add(x);
	}
}
nape.dynamics.ArbiterList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var $it0 = this.iterator();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		if(!fst) ret += ",";
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
}
nape.dynamics.ArbiterList.prototype.__class__ = nape.dynamics.ArbiterList;
if(!zpp_nape.dynamics) zpp_nape.dynamics = {}
zpp_nape.dynamics.ZPP_SpaceArbiterList = function(p) {
	if( p === $_ ) return;
	nape.dynamics.ArbiterList.call(this);
	this.at_index_0 = 0;
	this.at_index_1 = 0;
	this.at_index_2 = 0;
	this.at_index_3 = 0;
	this.zip_length = true;
	this._length = 0;
	this.lengths = new Array();
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		this.lengths.push(0);
	}
}
zpp_nape.dynamics.ZPP_SpaceArbiterList.__name__ = ["zpp_nape","dynamics","ZPP_SpaceArbiterList"];
zpp_nape.dynamics.ZPP_SpaceArbiterList.__super__ = nape.dynamics.ArbiterList;
for(var k in nape.dynamics.ArbiterList.prototype ) zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype[k] = nape.dynamics.ArbiterList.prototype[k];
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.space = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype._length = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.zip_length = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.zpp_gl = function() {
	this.zpp_vm();
	if(this.zip_length) {
		this._length = 0;
		var ind = 0;
		var len = 0;
		var cx_ite = this.space.c_arbiters_true.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.active) len++;
			cx_ite = cx_ite.next;
		}
		this.lengths[ind++] = len;
		this._length += len;
		var len = 0;
		var cx_ite = this.space.c_arbiters_false.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.active) len++;
			cx_ite = cx_ite.next;
		}
		this.lengths[ind++] = len;
		this._length += len;
		var len = 0;
		var cx_ite = this.space.f_arbiters.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.active) len++;
			cx_ite = cx_ite.next;
		}
		this.lengths[ind++] = len;
		this._length += len;
		var len = 0;
		var cx_ite = this.space.s_arbiters.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			if(i.active) len++;
			cx_ite = cx_ite.next;
		}
		this.lengths[ind++] = len;
		this._length += len;
		this.zip_length = false;
	}
	return this._length;
}
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.lengths = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.ite_0 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.ite_1 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.ite_2 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.ite_3 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.at_index_0 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.at_index_1 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.at_index_2 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.at_index_3 = null;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.zpp_vm = function() {
	var modified = false;
	if(this.space.c_arbiters_true.modified) {
		modified = true;
		this.space.c_arbiters_true.modified = false;
	}
	if(this.space.c_arbiters_false.modified) {
		modified = true;
		this.space.c_arbiters_false.modified = false;
	}
	if(this.space.f_arbiters.modified) {
		modified = true;
		this.space.f_arbiters.modified = false;
	}
	if(this.space.s_arbiters.modified) {
		modified = true;
		this.space.s_arbiters.modified = false;
	}
	if(modified) {
		if(this.zpp_inner.iterators != null) {
			var cx_ite = this.zpp_inner.iterators.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.zpp_critical) throw "Error: Lists should never be modified once hasNext() has been called, and before next() has been called on iterators to the list as it is not defined behaviour. In this case it appears that you are using api functions that modify this list between hasNext() and next() calls which bypass the usual checks.";
				cx_ite = cx_ite.next;
			}
		}
		this.zip_length = true;
		this._length = 0;
		this.ite_0 = null;
		this.ite_1 = null;
		this.ite_2 = null;
		this.ite_3 = null;
	}
}
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.push = function(obj) {
	throw "Error: ArbiterList is immutable";
	return false;
}
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.pop = function() {
	throw "Error: ArbiterList is immutable";
	return null;
}
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.unshift = function(obj) {
	throw "Error: ArbiterList is immutable";
	return false;
}
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.shift = function() {
	throw "Error: ArbiterList is immutable";
	return null;
}
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.remove = function(obj) {
	throw "Error: ArbiterList is immutable";
	return false;
}
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.clear = function() {
	throw "Error: ArbiterList is immutable";
}
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.at = function(index) {
	this.zpp_vm();
	if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
	var ret = null;
	var accum_length = 0;
	if(ret == null) {
		if(index < accum_length + this.lengths[0]) {
			var offset = index - accum_length;
			if(offset < this.at_index_0 || this.ite_0 == null) {
				this.at_index_0 = 0;
				this.ite_0 = this.space.c_arbiters_true.head;
				while(true) {
					var x = this.ite_0.elt;
					if(x.active) break;
					this.ite_0 = this.ite_0.next;
				}
			}
			while(this.at_index_0 != offset) {
				this.at_index_0++;
				this.ite_0 = this.ite_0.next;
				while(true) {
					var x = this.ite_0.elt;
					if(x.active) break;
					this.ite_0 = this.ite_0.next;
				}
			}
			ret = this.ite_0.elt.wrapper();
		} else accum_length += this.lengths[0];
	}
	if(ret == null) {
		if(index < accum_length + this.lengths[1]) {
			var offset = index - accum_length;
			if(offset < this.at_index_1 || this.ite_1 == null) {
				this.at_index_1 = 0;
				this.ite_1 = this.space.c_arbiters_false.head;
				while(true) {
					var x = this.ite_1.elt;
					if(x.active) break;
					this.ite_1 = this.ite_1.next;
				}
			}
			while(this.at_index_1 != offset) {
				this.at_index_1++;
				this.ite_1 = this.ite_1.next;
				while(true) {
					var x = this.ite_1.elt;
					if(x.active) break;
					this.ite_1 = this.ite_1.next;
				}
			}
			ret = this.ite_1.elt.wrapper();
		} else accum_length += this.lengths[1];
	}
	if(ret == null) {
		if(index < accum_length + this.lengths[2]) {
			var offset = index - accum_length;
			if(offset < this.at_index_2 || this.ite_2 == null) {
				this.at_index_2 = 0;
				this.ite_2 = this.space.f_arbiters.head;
				while(true) {
					var x = this.ite_2.elt;
					if(x.active) break;
					this.ite_2 = this.ite_2.next;
				}
			}
			while(this.at_index_2 != offset) {
				this.at_index_2++;
				this.ite_2 = this.ite_2.next;
				while(true) {
					var x = this.ite_2.elt;
					if(x.active) break;
					this.ite_2 = this.ite_2.next;
				}
			}
			ret = this.ite_2.elt.wrapper();
		} else accum_length += this.lengths[2];
	}
	if(ret == null) {
		if(index < accum_length + this.lengths[3]) {
			var offset = index - accum_length;
			if(offset < this.at_index_3 || this.ite_3 == null) {
				this.at_index_3 = 0;
				this.ite_3 = this.space.s_arbiters.head;
				while(true) {
					var x = this.ite_3.elt;
					if(x.active) break;
					this.ite_3 = this.ite_3.next;
				}
			}
			while(this.at_index_3 != offset) {
				this.at_index_3++;
				this.ite_3 = this.ite_3.next;
				while(true) {
					var x = this.ite_3.elt;
					if(x.active) break;
					this.ite_3 = this.ite_3.next;
				}
			}
			ret = this.ite_3.elt.wrapper();
		} else accum_length += this.lengths[3];
	}
	return ret;
}
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype.__class__ = zpp_nape.dynamics.ZPP_SpaceArbiterList;
jeash.display.GradientType = { __ename__ : ["jeash","display","GradientType"], __constructs__ : ["RADIAL","LINEAR"] }
jeash.display.GradientType.RADIAL = ["RADIAL",0];
jeash.display.GradientType.RADIAL.toString = $estr;
jeash.display.GradientType.RADIAL.__enum__ = jeash.display.GradientType;
jeash.display.GradientType.LINEAR = ["LINEAR",1];
jeash.display.GradientType.LINEAR.toString = $estr;
jeash.display.GradientType.LINEAR.__enum__ = jeash.display.GradientType;
jeash.display.LineScaleMode = { __ename__ : ["jeash","display","LineScaleMode"], __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] }
jeash.display.LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
jeash.display.LineScaleMode.HORIZONTAL.toString = $estr;
jeash.display.LineScaleMode.HORIZONTAL.__enum__ = jeash.display.LineScaleMode;
jeash.display.LineScaleMode.NONE = ["NONE",1];
jeash.display.LineScaleMode.NONE.toString = $estr;
jeash.display.LineScaleMode.NONE.__enum__ = jeash.display.LineScaleMode;
jeash.display.LineScaleMode.NORMAL = ["NORMAL",2];
jeash.display.LineScaleMode.NORMAL.toString = $estr;
jeash.display.LineScaleMode.NORMAL.__enum__ = jeash.display.LineScaleMode;
jeash.display.LineScaleMode.VERTICAL = ["VERTICAL",3];
jeash.display.LineScaleMode.VERTICAL.toString = $estr;
jeash.display.LineScaleMode.VERTICAL.__enum__ = jeash.display.LineScaleMode;
nape.geom.Mat23 = function(a,b,c,d,tx,ty) {
	if( a === $_ ) return;
	if(ty == null) ty = 0.0;
	if(tx == null) tx = 0.0;
	if(d == null) d = 1.0;
	if(c == null) c = 0.0;
	if(b == null) b = 0.0;
	if(a == null) a = 1.0;
	this.zpp_inner = zpp_nape.geom.ZPP_Mat23.get();
	this.zpp_inner.outer = this;
	if(a != a) throw "Error: Mat23::" + "a" + " cannot be NaN";
	this.zpp_inner.a = a;
	if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
	this.zpp_inner.a;
	if(b != b) throw "Error: Mat23::" + "b" + " cannot be NaN";
	this.zpp_inner.b = b;
	if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
	this.zpp_inner.b;
	if(tx != tx) throw "Error: Mat23::" + "tx" + " cannot be NaN";
	this.zpp_inner.tx = tx;
	if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
	this.zpp_inner.tx;
	if(c != c) throw "Error: Mat23::" + "c" + " cannot be NaN";
	this.zpp_inner.c = c;
	if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
	this.zpp_inner.c;
	if(d != d) throw "Error: Mat23::" + "d" + " cannot be NaN";
	this.zpp_inner.d = d;
	if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
	this.zpp_inner.d;
	if(ty != ty) throw "Error: Mat23::" + "ty" + " cannot be NaN";
	this.zpp_inner.ty = ty;
	if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
	this.zpp_inner.ty;
}
nape.geom.Mat23.__name__ = ["nape","geom","Mat23"];
nape.geom.Mat23.fromMatrix = function(m) {
	return new nape.geom.Mat23(m.a,m.c,m.b,m.d,m.tx,m.ty);
}
nape.geom.Mat23.rotation = function(angle) {
	var cos = Math.cos(angle);
	var sin = Math.sin(angle);
	return new nape.geom.Mat23(cos,-sin,sin,cos,0,0);
}
nape.geom.Mat23.translation = function(tx,ty) {
	return new nape.geom.Mat23(1,0,0,1,tx,ty);
}
nape.geom.Mat23.scale = function(sx,sy) {
	if(sy != sy) sy = sx;
	return new nape.geom.Mat23(sx,0,0,sy,0,0);
}
nape.geom.Mat23.prototype.zpp_inner = null;
nape.geom.Mat23.prototype.a = null;
nape.geom.Mat23.prototype.flibget_a = function() {
	return this.zpp_inner.a;
}
nape.geom.Mat23.prototype.flibset_a = function(a) {
	if(a != a) throw "Error: Mat23::" + "a" + " cannot be NaN";
	this.zpp_inner.a = a;
	if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
	return this.zpp_inner.a;
}
nape.geom.Mat23.prototype.b = null;
nape.geom.Mat23.prototype.flibget_b = function() {
	return this.zpp_inner.b;
}
nape.geom.Mat23.prototype.flibset_b = function(b) {
	if(b != b) throw "Error: Mat23::" + "b" + " cannot be NaN";
	this.zpp_inner.b = b;
	if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
	return this.zpp_inner.b;
}
nape.geom.Mat23.prototype.tx = null;
nape.geom.Mat23.prototype.flibget_tx = function() {
	return this.zpp_inner.tx;
}
nape.geom.Mat23.prototype.flibset_tx = function(tx) {
	if(tx != tx) throw "Error: Mat23::" + "tx" + " cannot be NaN";
	this.zpp_inner.tx = tx;
	if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
	return this.zpp_inner.tx;
}
nape.geom.Mat23.prototype.c = null;
nape.geom.Mat23.prototype.flibget_c = function() {
	return this.zpp_inner.c;
}
nape.geom.Mat23.prototype.flibset_c = function(c) {
	if(c != c) throw "Error: Mat23::" + "c" + " cannot be NaN";
	this.zpp_inner.c = c;
	if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
	return this.zpp_inner.c;
}
nape.geom.Mat23.prototype.d = null;
nape.geom.Mat23.prototype.flibget_d = function() {
	return this.zpp_inner.d;
}
nape.geom.Mat23.prototype.flibset_d = function(d) {
	if(d != d) throw "Error: Mat23::" + "d" + " cannot be NaN";
	this.zpp_inner.d = d;
	if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
	return this.zpp_inner.d;
}
nape.geom.Mat23.prototype.ty = null;
nape.geom.Mat23.prototype.flibget_ty = function() {
	return this.zpp_inner.ty;
}
nape.geom.Mat23.prototype.flibset_ty = function(ty) {
	if(ty != ty) throw "Error: Mat23::" + "ty" + " cannot be NaN";
	this.zpp_inner.ty = ty;
	if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
	return this.zpp_inner.ty;
}
nape.geom.Mat23.prototype.set = function(matrix) {
	if(matrix == null) throw "Error: Cannot set form null matrix";
	this.zpp_inner.set(matrix.zpp_inner);
	if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
}
nape.geom.Mat23.prototype.setAs = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0.0;
	if(tx == null) tx = 0.0;
	if(d == null) d = 1.0;
	if(c == null) c = 0.0;
	if(b == null) b = 0.0;
	if(a == null) a = 1.0;
	this.zpp_inner.setas(a,b,c,d,tx,ty);
	if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
}
nape.geom.Mat23.prototype.reset = function() {
	{
		this.zpp_inner.setas(1.0,0.0,0.0,1.0,0.0,0.0);
		if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
	}
}
nape.geom.Mat23.prototype.toMatrix = function() {
	return new jeash.geom.Matrix(this.zpp_inner.a,this.zpp_inner.c,this.zpp_inner.b,this.zpp_inner.d,this.zpp_inner.tx,this.zpp_inner.ty);
}
nape.geom.Mat23.prototype.copy = function() {
	return new nape.geom.Mat23(this.zpp_inner.a,this.zpp_inner.b,this.zpp_inner.c,this.zpp_inner.d,this.zpp_inner.tx,this.zpp_inner.ty);
}
nape.geom.Mat23.prototype.determinant = null;
nape.geom.Mat23.prototype.flibget_determinant = function() {
	return this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
}
nape.geom.Mat23.prototype.singular = function() {
	var d = this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
	return d * d < 1e-8;
}
nape.geom.Mat23.prototype.inverse = function() {
	var det = this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
	if(det * det < 1e-8) throw "Error: Matrix is singular and cannot be inverted";
	det = 1.0 / det;
	return new nape.geom.Mat23(this.zpp_inner.d * det,-this.zpp_inner.b * det,-this.zpp_inner.c * det,this.zpp_inner.a * det,(this.zpp_inner.b * this.zpp_inner.ty - this.zpp_inner.d * this.zpp_inner.tx) * det,(this.zpp_inner.c * this.zpp_inner.tx - this.zpp_inner.a * this.zpp_inner.ty) * det);
}
nape.geom.Mat23.prototype.transpose = function() {
	return new nape.geom.Mat23(this.zpp_inner.a,this.zpp_inner.c,this.zpp_inner.b,this.zpp_inner.d,this.zpp_inner.tx,this.zpp_inner.ty);
}
nape.geom.Mat23.prototype.concat = function(x) {
	return new nape.geom.Mat23(x.zpp_inner.a * this.zpp_inner.a + x.zpp_inner.b * this.zpp_inner.c,x.zpp_inner.a * this.zpp_inner.b + x.zpp_inner.b * this.zpp_inner.d,x.zpp_inner.c * this.zpp_inner.a + x.zpp_inner.d * this.zpp_inner.c,x.zpp_inner.c * this.zpp_inner.b + x.zpp_inner.d * this.zpp_inner.d,x.zpp_inner.a * this.zpp_inner.tx + x.zpp_inner.b * this.zpp_inner.ty + x.zpp_inner.tx,x.zpp_inner.c * this.zpp_inner.tx + x.zpp_inner.d * this.zpp_inner.ty + x.zpp_inner.ty);
}
nape.geom.Mat23.prototype.transform = function(p,no_translation,weak) {
	if(weak == null) weak = false;
	if(no_translation == null) no_translation = false;
	if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	var ret = no_translation?nape.geom.Vec2.get((function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.a + (function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.b,(function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.c + (function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.d,weak):nape.geom.Vec2.get((function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.a + (function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.b + this.zpp_inner.tx,(function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.c + (function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.d + this.zpp_inner.ty,weak);
	if(p.zpp_inner.weak) {
		p.dispose();
		true;
	} else false;
	return ret;
}
nape.geom.Mat23.prototype.inverse_transform = function(p,no_translation,weak) {
	if(weak == null) weak = false;
	if(no_translation == null) no_translation = false;
	var det = this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
	if(det * det < 1e-8) throw "Error: Matrix is singular and cannot be inverted in course of inverse transformation";
	det = 1.0 / det;
	var ret = no_translation?nape.geom.Vec2.get(((function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.d - (function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.b) * det,((function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.a - (function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.c) * det,weak):nape.geom.Vec2.get(((function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.d - (function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.b + this.zpp_inner.b * this.zpp_inner.ty - this.zpp_inner.d * this.zpp_inner.tx) * det,((function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.a - (function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.c + this.zpp_inner.c * this.zpp_inner.tx - this.zpp_inner.a * this.zpp_inner.ty) * det,weak);
	if(p.zpp_inner.weak) {
		p.dispose();
		true;
	} else false;
	return ret;
}
nape.geom.Mat23.prototype.toString = function() {
	return "{ a: " + this.zpp_inner.a + " b: " + this.zpp_inner.b + " c: " + this.zpp_inner.c + " d: " + this.zpp_inner.d + " tx: " + this.zpp_inner.tx + " ty: " + this.zpp_inner.ty + " }";
}
nape.geom.Mat23.prototype.equiorthogonal = function() {
	if(this.singular()) return false; else {
		var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
		if(x * x < 1e-8) {
			var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - this.zpp_inner.c * this.zpp_inner.c - this.zpp_inner.d * this.zpp_inner.d;
			return y * y < 1e-8;
		} else return false;
	}
}
nape.geom.Mat23.prototype.equiorthogonalise = function() {
	if(!this.equiorthogonal()) {
		var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
		var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
		if(k1 * k1 < 1e-8 || k2 * k2 < 1e-8) throw "Error: Matrix is singular and cannot be " + "equiorthogonal" + "ised";
		var k = (k1 + k2) / 2;
		k1 = k / k1;
		k2 = k / k2;
		var _g = this;
		_g.flibset_a(_g.zpp_inner.a * k1);
		var _g = this;
		_g.flibset_c(_g.zpp_inner.c * k1);
		var _g = this;
		_g.flibset_b(_g.zpp_inner.b * k2);
		var _g = this;
		_g.flibset_d(_g.zpp_inner.d * k2);
		var dot = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
		var ang = 0.25 * Math.PI - 0.5 * Math.acos(dot / (k * k));
		if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) ang = -ang;
		var sin = Math.sin(ang);
		var cos = Math.cos(ang);
		var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
		var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
		this.flibset_c(this.zpp_inner.c * cos + this.zpp_inner.a * sin);
		if(a2 != a2) throw "Error: Mat23::" + "a" + " cannot be NaN";
		this.zpp_inner.a = a2;
		if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
		this.zpp_inner.a;
		this.flibset_d(this.zpp_inner.d * cos - this.zpp_inner.b * sin);
		if(b2 != b2) throw "Error: Mat23::" + "b" + " cannot be NaN";
		this.zpp_inner.b = b2;
		if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
		this.zpp_inner.b;
		if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
	}
	return this;
}
nape.geom.Mat23.prototype.orthogonal = function() {
	var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
	if(x * x < 1e-8) {
		var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - 1;
		var z = this.zpp_inner.c * this.zpp_inner.c + this.zpp_inner.d * this.zpp_inner.d - 1;
		return y * y < 1e-8 && z * z < 1e-8;
	} else return false;
}
nape.geom.Mat23.prototype.orthogonalise = function() {
	if(!this.orthogonal()) {
		var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
		var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
		if(k1 * k1 < 1e-8 || k2 * k2 < 1e-8) throw "Error: Matrix is singular and cannot be " + "orthogonal" + "ised";
		var k = 1;
		k1 = k / k1;
		k2 = k / k2;
		var _g = this;
		_g.flibset_a(_g.zpp_inner.a * k1);
		var _g = this;
		_g.flibset_c(_g.zpp_inner.c * k1);
		var _g = this;
		_g.flibset_b(_g.zpp_inner.b * k2);
		var _g = this;
		_g.flibset_d(_g.zpp_inner.d * k2);
		var dot = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
		var ang = 0.25 * Math.PI - 0.5 * Math.acos(dot / (k * k));
		if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) ang = -ang;
		var sin = Math.sin(ang);
		var cos = Math.cos(ang);
		var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
		var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
		this.flibset_c(this.zpp_inner.c * cos + this.zpp_inner.a * sin);
		if(a2 != a2) throw "Error: Mat23::" + "a" + " cannot be NaN";
		this.zpp_inner.a = a2;
		if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
		this.zpp_inner.a;
		this.flibset_d(this.zpp_inner.d * cos - this.zpp_inner.b * sin);
		if(b2 != b2) throw "Error: Mat23::" + "b" + " cannot be NaN";
		this.zpp_inner.b = b2;
		if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
		this.zpp_inner.b;
		if(this.zpp_inner.__invalidate != null) this.zpp_inner.__invalidate();
	}
	return this;
}
nape.geom.Mat23.prototype.__class__ = nape.geom.Mat23;
zpp_nape.util.ZPP_PubPool = function() { }
zpp_nape.util.ZPP_PubPool.__name__ = ["zpp_nape","util","ZPP_PubPool"];
zpp_nape.util.ZPP_PubPool.prototype.__class__ = zpp_nape.util.ZPP_PubPool;
nape.geom.Vec3 = function(x,y,z) {
	if( x === $_ ) return;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.z = z;
}
nape.geom.Vec3.__name__ = ["nape","geom","Vec3"];
nape.geom.Vec3.prototype.x = null;
nape.geom.Vec3.prototype.y = null;
nape.geom.Vec3.prototype.z = null;
nape.geom.Vec3.prototype.copy = function() {
	return new nape.geom.Vec3(this.x,this.y,this.z);
}
nape.geom.Vec3.prototype.length = null;
nape.geom.Vec3.prototype.flibget_length = function() {
	return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
}
nape.geom.Vec3.prototype.flibset_length = function(length) {
	if(length != length) throw "Error: Vec3::length cannot be NaN";
	if(this.x * this.x + this.y * this.y + this.z * this.z == 0) throw "Error: Cannot set length of a zero vector";
	var t = length / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	var t1 = t;
	this.x *= t1;
	this.y *= t1;
	this.z *= t;
	return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
}
nape.geom.Vec3.prototype.lsq = function() {
	return this.x * this.x + this.y * this.y + this.z * this.z;
}
nape.geom.Vec3.prototype.set = function(p) {
	if(p == null) throw "Error: Cannot assign null Vec3";
	return (function($this) {
		var $r;
		{
			$this.x = p.x;
			$this.y = p.y;
			$this.z = p.z;
		}
		$r = $this;
		return $r;
	}(this));
}
nape.geom.Vec3.prototype.setxyz = function(x,y,z) {
	this.x = x;
	this.y = y;
	this.z = z;
	return this;
}
nape.geom.Vec3.prototype.xy = function(weak) {
	if(weak == null) weak = false;
	return nape.geom.Vec2.get(this.x,this.y,weak);
}
nape.geom.Vec3.prototype.toString = function() {
	return "{ x: " + this.x + " y: " + this.y + " z: " + this.z + " }";
}
nape.geom.Vec3.prototype.__class__ = nape.geom.Vec3;
if(!zpp_nape.callbacks) zpp_nape.callbacks = {}
zpp_nape.callbacks.ZPP_Callback = function(p) {
	if( p === $_ ) return;
	this.length = 0;
}
zpp_nape.callbacks.ZPP_Callback.__name__ = ["zpp_nape","callbacks","ZPP_Callback"];
zpp_nape.callbacks.ZPP_Callback.zpp_pool = null;
zpp_nape.callbacks.ZPP_Callback.prototype.outer = null;
zpp_nape.callbacks.ZPP_Callback.prototype.wrapper = function() {
	if(this.outer == null) {
		zpp_nape.callbacks.ZPP_Callback.internal = true;
		this.outer = new nape.callbacks.Callback();
		zpp_nape.callbacks.ZPP_Callback.internal = false;
		this.outer.zpp_inner = this;
	}
	return this.outer;
}
zpp_nape.callbacks.ZPP_Callback.prototype.event = null;
zpp_nape.callbacks.ZPP_Callback.prototype.space = null;
zpp_nape.callbacks.ZPP_Callback.prototype.index = null;
zpp_nape.callbacks.ZPP_Callback.prototype.next = null;
zpp_nape.callbacks.ZPP_Callback.prototype.prev = null;
zpp_nape.callbacks.ZPP_Callback.prototype.length = null;
zpp_nape.callbacks.ZPP_Callback.prototype.push = function(obj) {
	if(this.prev != null) this.prev.next = obj; else this.next = obj;
	obj.prev = this.prev;
	obj.next = null;
	this.prev = obj;
	this.length++;
}
zpp_nape.callbacks.ZPP_Callback.prototype.push_rev = function(obj) {
	if(this.next != null) this.next.prev = obj; else this.prev = obj;
	obj.next = this.next;
	obj.prev = null;
	this.next = obj;
	this.length++;
}
zpp_nape.callbacks.ZPP_Callback.prototype.pop = function() {
	var ret = this.next;
	this.next = ret.next;
	if(this.next == null) this.prev = null; else this.next.prev = null;
	this.length--;
	return ret;
}
zpp_nape.callbacks.ZPP_Callback.prototype.pop_rev = function() {
	var ret = this.prev;
	this.prev = ret.prev;
	if(this.prev == null) this.next = null; else this.prev.next = null;
	this.length--;
	return ret;
}
zpp_nape.callbacks.ZPP_Callback.prototype.empty = function() {
	return this.next == null;
}
zpp_nape.callbacks.ZPP_Callback.prototype.clear = function() {
	while(!(this.next == null)) this.pop();
}
zpp_nape.callbacks.ZPP_Callback.prototype.splice = function(o) {
	var ret = o.next;
	if(o.prev == null) {
		this.next = o.next;
		if(this.next != null) this.next.prev = null; else this.prev = null;
	} else {
		o.prev.next = o.next;
		if(o.next != null) o.next.prev = o.prev; else this.prev = o.prev;
	}
	this.length--;
	return ret;
}
zpp_nape.callbacks.ZPP_Callback.prototype.rotateL = function() {
	this.push(this.pop());
}
zpp_nape.callbacks.ZPP_Callback.prototype.rotateR = function() {
	this.push_rev(this.pop_rev());
}
zpp_nape.callbacks.ZPP_Callback.prototype.cycleNext = function(o) {
	if(o.next == null) return this.next; else return o.next;
}
zpp_nape.callbacks.ZPP_Callback.prototype.cyclePrev = function(o) {
	if(o.prev == null) return this.prev; else return o.prev;
}
zpp_nape.callbacks.ZPP_Callback.prototype.at = function(i) {
	var ret = this.next;
	while(i-- != 0) ret = ret.next;
	return ret;
}
zpp_nape.callbacks.ZPP_Callback.prototype.rev_at = function(i) {
	var ret = this.prev;
	while(i-- != 0) ret = ret.prev;
	return ret;
}
zpp_nape.callbacks.ZPP_Callback.prototype.free = function() {
}
zpp_nape.callbacks.ZPP_Callback.prototype.alloc = function() {
	this.arbiter = null;
	this.body = null;
	this.constraint = null;
}
zpp_nape.callbacks.ZPP_Callback.prototype.arbiter = null;
zpp_nape.callbacks.ZPP_Callback.prototype.body = null;
zpp_nape.callbacks.ZPP_Callback.prototype.constraint = null;
zpp_nape.callbacks.ZPP_Callback.prototype.listener = null;
zpp_nape.callbacks.ZPP_Callback.prototype.handler = null;
zpp_nape.callbacks.ZPP_Callback.prototype.__class__ = zpp_nape.callbacks.ZPP_Callback;
zpp_nape.geom.ZPP_MarchSpan = function(p) {
	if( p === $_ ) return;
	this.parent = this;
}
zpp_nape.geom.ZPP_MarchSpan.__name__ = ["zpp_nape","geom","ZPP_MarchSpan"];
zpp_nape.geom.ZPP_MarchSpan.zpp_pool = null;
zpp_nape.geom.ZPP_MarchSpan.prototype.freed = null;
zpp_nape.geom.ZPP_MarchSpan.prototype.parent = null;
zpp_nape.geom.ZPP_MarchSpan.prototype.rank = null;
zpp_nape.geom.ZPP_MarchSpan.prototype.out = null;
zpp_nape.geom.ZPP_MarchSpan.prototype.next = null;
zpp_nape.geom.ZPP_MarchSpan.prototype.free = function() {
	this.freed = true;
	this.parent = this;
}
zpp_nape.geom.ZPP_MarchSpan.prototype.alloc = function() {
	this.freed = false;
	this.out = false;
	this.rank = 0;
}
zpp_nape.geom.ZPP_MarchSpan.prototype.__class__ = zpp_nape.geom.ZPP_MarchSpan;
zpp_nape.geom.ZPP_MarchPair = function(p) {
}
zpp_nape.geom.ZPP_MarchPair.__name__ = ["zpp_nape","geom","ZPP_MarchPair"];
zpp_nape.geom.ZPP_MarchPair.zpp_pool = null;
zpp_nape.geom.ZPP_MarchPair.prototype.p1 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.key1 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.okey1 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.p2 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.key2 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.okey2 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.pr = null;
zpp_nape.geom.ZPP_MarchPair.prototype.keyr = null;
zpp_nape.geom.ZPP_MarchPair.prototype.okeyr = null;
zpp_nape.geom.ZPP_MarchPair.prototype.pd = null;
zpp_nape.geom.ZPP_MarchPair.prototype.span1 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.span2 = null;
zpp_nape.geom.ZPP_MarchPair.prototype.spanr = null;
zpp_nape.geom.ZPP_MarchPair.prototype.next = null;
zpp_nape.geom.ZPP_MarchPair.prototype.free = function() {
	this.p1 = this.p2 = this.pr = this.pd = null;
	this.span1 = this.span2 = this.spanr = null;
}
zpp_nape.geom.ZPP_MarchPair.prototype.alloc = function() {
}
zpp_nape.geom.ZPP_MarchPair.prototype.__class__ = zpp_nape.geom.ZPP_MarchPair;
zpp_nape.geom.ZPP_MarchingSquares = function() { }
zpp_nape.geom.ZPP_MarchingSquares.__name__ = ["zpp_nape","geom","ZPP_MarchingSquares"];
zpp_nape.geom.ZPP_MarchingSquares.run = function(iso,bx0,by0,bx1,by1,cell,quality,combine,ret) {
	var xp = (bx1 - bx0) / (function($this) {
		var $r;
		if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cell.zpp_inner.validate();
		$r = cell.zpp_inner.x;
		return $r;
	}(this));
	var xn = Std["int"](xp);
	var yp = (by1 - by0) / (function($this) {
		var $r;
		if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cell.zpp_inner.validate();
		$r = cell.zpp_inner.y;
		return $r;
	}(this));
	var yn = Std["int"](yp);
	if(xp != xn) xn++;
	if(yp != yn) yn++;
	var map = null;
	if(combine) map = new zpp_nape.util.Array2(xn,yn);
	var isos = new zpp_nape.util.Array2(xn + 1,yn + 1);
	var _g1 = 0, _g = yn + 1;
	while(_g1 < _g) {
		var y = _g1++;
		var yc = y == 0?by0:y <= yn?by0 + (function($this) {
			var $r;
			if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			cell.zpp_inner.validate();
			$r = cell.zpp_inner.y;
			return $r;
		}(this)) * y:by1;
		var _g3 = 0, _g2 = xn + 1;
		while(_g3 < _g2) {
			var x = _g3++;
			var xc = x == 0?bx0:x <= xn?bx0 + (function($this) {
				var $r;
				if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				cell.zpp_inner.validate();
				$r = cell.zpp_inner.x;
				return $r;
			}(this)) * x:bx1;
			{
				isos.list[y * isos.width + x] = iso(xc,yc);
			}
		}
	}
	var ints = new zpp_nape.util.Array2(xn + 1,(yn << 1) + 1);
	var py = by0;
	var _g = 0;
	while(_g < yn) {
		var y = _g++;
		var y0 = py;
		var y1 = y == yn - 1?by1:by0 + (function($this) {
			var $r;
			if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			cell.zpp_inner.validate();
			$r = cell.zpp_inner.y;
			return $r;
		}(this)) * (y + 1);
		py = y1;
		var px = bx0;
		var pre = null;
		var _g1 = 0;
		while(_g1 < xn) {
			var x = _g1++;
			var x0 = px;
			var x1 = x == xn - 1?bx1:bx0 + (function($this) {
				var $r;
				if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				cell.zpp_inner.validate();
				$r = cell.zpp_inner.x;
				return $r;
			}(this)) * (x + 1);
			px = x1;
			var fstx = x == 0 || !combine;
			var fsty = y == 0 || !combine;
			var sndx = x == xn - 1 || !combine;
			var sndy = y == yn - 1 || !combine;
			var pp = zpp_nape.geom.ZPP_MarchingSquares.marchSquare(iso,isos,ints,x0,y0,x1,y1,x,y,fstx,fsty,sndx,sndy,quality);
			if(pp == null) {
				pre = null;
				continue;
			}
			if(combine) {
				var pd = pp.p2 != null && pp.okey2 != 14?pp.p2:pp.p1;
				pp.pd = ((pd == pp.p2?pp.okey2:pp.okey1) & 128) == 0?pd.prev:pd.prev.prev;
				{
					map.list[y * map.width + x] = pp;
				}
				if(pre != null && zpp_nape.geom.ZPP_MarchingSquares.combLeft(pp.key1)) {
					zpp_nape.geom.ZPP_MarchingSquares.combLR(pre,pp);
					pp.span1 = pre.spanr;
				} else {
					pp.span1 = (function($this) {
						var $r;
						var ret1;
						if(zpp_nape.geom.ZPP_MarchSpan.zpp_pool == null) ret1 = new zpp_nape.geom.ZPP_MarchSpan(); else {
							ret1 = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
							zpp_nape.geom.ZPP_MarchSpan.zpp_pool = ret1.next;
							ret1.next = null;
						}
						{
							ret1.freed = false;
							ret1.out = false;
							ret1.rank = 0;
						}
						$r = ret1;
						return $r;
					}(this));
				}
				if(pp.p2 != null) pp.span2 = pp.spanr = (function($this) {
					var $r;
					var ret1;
					if(zpp_nape.geom.ZPP_MarchSpan.zpp_pool == null) ret1 = new zpp_nape.geom.ZPP_MarchSpan(); else {
						ret1 = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
						zpp_nape.geom.ZPP_MarchSpan.zpp_pool = ret1.next;
						ret1.next = null;
					}
					{
						ret1.freed = false;
						ret1.out = false;
						ret1.rank = 0;
					}
					$r = ret1;
					return $r;
				}(this)); else pp.spanr = pp.span1;
				if(zpp_nape.geom.ZPP_MarchingSquares.combRight(pp.keyr)) pre = pp; else pre = null;
			} else {
				zpp_nape.geom.ZPP_MarchingSquares.output(ret,pp.p1);
				if(pp.p2 != null) zpp_nape.geom.ZPP_MarchingSquares.output(ret,pp.p2);
			}
		}
	}
	if(!combine) return;
	var _g = 1;
	while(_g < yn) {
		var y = _g++;
		var pre = null;
		var _g1 = 0;
		while(_g1 < xn) {
			var x = _g1++;
			var b = (function($this) {
				var $r;
				{
				}
				$r = map.list[y * map.width + x];
				return $r;
			}(this));
			if(b == null) {
				pre = null;
				continue;
			}
			var bkey = b.p2 != null && b.okey2 == 14?b.okey2:b.okey1;
			if(!zpp_nape.geom.ZPP_MarchingSquares.combUp(bkey)) {
				pre = null;
				continue;
			}
			var a = (function($this) {
				var $r;
				{
				}
				$r = map.list[(y - 1) * map.width + x];
				return $r;
			}(this));
			if(a == null) {
				pre = null;
				continue;
			}
			var akey = a.p2 != null && a.okey2 == 56?a.okey2:a.okey1;
			if(!zpp_nape.geom.ZPP_MarchingSquares.combDown(akey)) {
				pre = null;
				continue;
			}
			var ad = a.p2 != null && a.okey2 == 56?a.span2:a.span1;
			var bu = b.p2 != null && b.okey2 == 14?b.span2:b.span1;
			if((ad == ad.parent?ad:(function($this) {
				var $r;
				var obj = ad;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this))) == (bu == bu.parent?bu:(function($this) {
				var $r;
				var obj = bu;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this)))) {
				if(pre != bu) zpp_nape.geom.ZPP_MarchingSquares.combUD_virtual(a,b);
			} else {
				var xr = ad == ad.parent?ad:(function($this) {
					var $r;
					var obj = ad;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt = stack.parent;
						stack.parent = obj;
						stack = nxt;
					}
					$r = obj;
					return $r;
				}(this));
				var yr = bu == bu.parent?bu:(function($this) {
					var $r;
					var obj = bu;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt = stack.parent;
						stack.parent = obj;
						stack = nxt;
					}
					$r = obj;
					return $r;
				}(this));
				if(xr != yr) {
					if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
						yr.parent = xr;
						xr.rank++;
					}
				}
				zpp_nape.geom.ZPP_MarchingSquares.combUD(a,b);
			}
			var key = bu == b.span2?b.okey2:b.okey1;
			pre = (key & 4) != 0?bu:null;
		}
	}
	var _g = 0;
	while(_g < yn) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < xn) {
			var x = _g1++;
			var p = (function($this) {
				var $r;
				{
				}
				$r = map.list[y * map.width + x];
				return $r;
			}(this));
			if(p == null) continue;
			var root = p.span1 == p.span1.parent?p.span1:(function($this) {
				var $r;
				var obj = p.span1;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(!root.out) {
				root.out = true;
				zpp_nape.geom.ZPP_MarchingSquares.output(ret,p.p1);
			}
			if(p.p2 != null) {
				root = p.span2 == p.span2.parent?p.span2:(function($this) {
					var $r;
					var obj = p.span2;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt = stack.parent;
						stack.parent = obj;
						stack = nxt;
					}
					$r = obj;
					return $r;
				}(this));
				if(!root.out) {
					root.out = true;
					zpp_nape.geom.ZPP_MarchingSquares.output(ret,p.p2);
				}
			}
			var o = p;
			{
				o.p1 = o.p2 = o.pr = o.pd = null;
				o.span1 = o.span2 = o.spanr = null;
			}
			o.next = zpp_nape.geom.ZPP_MarchPair.zpp_pool;
			zpp_nape.geom.ZPP_MarchPair.zpp_pool = o;
			{
				map.list[y * map.width + x] = null;
			}
		}
	}
}
zpp_nape.geom.ZPP_MarchingSquares.output = function(ret,poly) {
	var v = poly;
	do {
		var pre = v.prev;
		if(pre == v) {
			if(v != null && v.prev == v) {
				v.next = v.prev = null;
				v = null;
			} else {
				v.prev.next = v.next;
				v.next.prev = v.prev;
				v.next = v.prev = null;
			}
			return;
		}
		if(pre.x == v.x && pre.y == v.y) {
			var force = v.forced || pre.forced;
			if(pre == poly) poly = poly.prev;
			if(pre != null && pre.prev == pre) {
				pre.next = pre.prev = null;
				pre = null;
			} else {
				pre.prev.next = pre.next;
				pre.next.prev = pre.prev;
				pre.next = pre.prev = null;
			}
			v.forced = true;
		}
		v = v.next;
	} while(v != poly);
	if(poly == null || poly.next == null || poly.next == poly.prev?true:(function($this) {
		var $r;
		var a = (function($this) {
			var $r;
			{
			}
			var area = 0.0;
			{
				var F = poly;
				var L = poly;
				if(F != null) {
					var nite = F;
					do {
						var v1 = nite;
						area += v1.x * (v1.next.y - v1.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = area;
			return $r;
		}($this));
		$r = a * a < 1e-8 * 1e-8;
		return $r;
	}(this))) {
		while(!(poly == null)) poly = (function($this) {
			var $r;
			{
			}
			$r = poly != null && poly.prev == poly?(function($this) {
				var $r;
				poly.next = poly.prev = null;
				{
				}
				$r = poly = null;
				return $r;
			}($this)):(function($this) {
				var $r;
				var retnodes = poly.next;
				poly.prev.next = poly.next;
				poly.next.prev = poly.prev;
				poly.next = poly.prev = null;
				{
				}
				poly = null;
				$r = retnodes;
				return $r;
			}($this));
			return $r;
		}(this));
		return;
	}
	var gp = new nape.geom.GeomPoly();
	gp.zpp_inner.vertices = poly;
	if(ret.zpp_inner.reverse_flag) ret.push(gp); else ret.unshift(gp);
}
zpp_nape.geom.ZPP_MarchingSquares.linkright = function(poly,key) {
	var kind = key & 7;
	if(kind == 0) return poly; else if(kind == 3) return poly.next.next; else return poly.next;
}
zpp_nape.geom.ZPP_MarchingSquares.linkleft = function(poly,key) {
	return (key & 1) == 0?poly.prev:poly;
}
zpp_nape.geom.ZPP_MarchingSquares.linkdown = function(poly,key) {
	return (key & 128) == 0?poly.prev:poly.prev.prev;
}
zpp_nape.geom.ZPP_MarchingSquares.linkup = function(poly,key) {
	return poly;
}
zpp_nape.geom.ZPP_MarchingSquares.combLR = function(a,b) {
	var ap = zpp_nape.geom.ZPP_MarchingSquares.linkright(a.pr,a.okeyr);
	var bp = zpp_nape.geom.ZPP_MarchingSquares.linkleft(b.p1,b.okey1);
	var ap2 = ap.next;
	var bp2 = bp.prev;
	if((a.keyr & 4) != 0) {
		if(b.pr == b.p1) b.pr = ap.prev;
		b.p1 = ap.prev;
		ap.prev.next = bp.next;
		bp.next.prev = ap.prev;
		var o = ap;
		{
			if(o.wrap != null) {
				o.wrap.zpp_inner.inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.forced = false;
		}
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
	} else {
		ap.next = bp.next;
		bp.next.prev = ap;
	}
	var o = bp;
	{
		if(o.wrap != null) {
			o.wrap.zpp_inner.inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.forced = false;
	}
	o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
	zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
	if((a.keyr & 16) != 0) {
		b.pd = ap2.next;
		ap2.next.prev = bp2.prev;
		bp2.prev.next = ap2.next;
		var o = ap2;
		{
			if(o.wrap != null) {
				o.wrap.zpp_inner.inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.forced = false;
		}
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
	} else {
		ap2.prev = bp2.prev;
		bp2.prev.next = ap2;
	}
	var o = bp2;
	{
		if(o.wrap != null) {
			o.wrap.zpp_inner.inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.forced = false;
	}
	o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
	zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
}
zpp_nape.geom.ZPP_MarchingSquares.combUD = function(a,b) {
	var ad = a.p2 != null && a.key2 == 56?a.p2:a.p1;
	var bu = b.p2 != null && b.key2 == 14?b.p2:b.p1;
	var ap = a.pd;
	var bp = bu;
	var ap2 = ap.prev;
	var bp2 = bp.next;
	bp.next = ap.next;
	ap.next.prev = bp;
	var o = ap;
	{
		if(o.wrap != null) {
			o.wrap.zpp_inner.inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.forced = false;
	}
	o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
	zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
	bp2.prev = ap2.prev;
	ap2.prev.next = bp2;
	if(ap2 == a.p1) a.p1 = bp2;
	var o = ap2;
	{
		if(o.wrap != null) {
			o.wrap.zpp_inner.inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.forced = false;
	}
	o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
	zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
}
zpp_nape.geom.ZPP_MarchingSquares.combUD_virtual = function(a,b) {
	var ad = a.p2 != null && a.key2 == 56?a.p2:a.p1;
	var bu = b.p2 != null && b.key2 == 14?b.p2:b.p1;
	var ap = a.pd;
	var bp = bu;
	var ap2 = ap.prev;
	var bp2 = bp.next;
	ap.forced = bp.forced = ap2.forced = bp2.forced = true;
}
zpp_nape.geom.ZPP_MarchingSquares.combLeft = function(key) {
	var flag = key & 1 | (key & 192) >> 5;
	return zpp_nape.geom.ZPP_MarchingSquares.comb(flag);
}
zpp_nape.geom.ZPP_MarchingSquares.combRight = function(key) {
	var flag = (key & 28) >> 2;
	return zpp_nape.geom.ZPP_MarchingSquares.comb(flag);
}
zpp_nape.geom.ZPP_MarchingSquares.combUp = function(key) {
	var flag = key & 7;
	return zpp_nape.geom.ZPP_MarchingSquares.comb(flag);
}
zpp_nape.geom.ZPP_MarchingSquares.combDown = function(key) {
	var flag = (key & 112) >> 4;
	return zpp_nape.geom.ZPP_MarchingSquares.comb(flag);
}
zpp_nape.geom.ZPP_MarchingSquares.comb = function(flag) {
	var cnt = 0;
	if((flag & 1) != 0) cnt++;
	if((flag & 2) != 0) cnt++;
	if((flag & 4) != 0) cnt++;
	return cnt >= 2;
}
zpp_nape.geom.ZPP_MarchingSquares.marchSquare = function(iso,isos,ints,x0,y0,x1,y1,xn,yn,fstx,fsty,sndx,sndy,quality) {
	var key = 0;
	var v0 = (function($this) {
		var $r;
		{
		}
		$r = isos.list[yn * isos.width + xn];
		return $r;
	}(this));
	if(v0 < 0) key |= 8;
	var v1 = (function($this) {
		var $r;
		{
		}
		$r = isos.list[yn * isos.width + (xn + 1)];
		return $r;
	}(this));
	if(v1 < 0) key |= 4;
	var v2 = (function($this) {
		var $r;
		{
		}
		$r = isos.list[(yn + 1) * isos.width + (xn + 1)];
		return $r;
	}(this));
	if(v2 < 0) key |= 2;
	var v3 = (function($this) {
		var $r;
		{
		}
		$r = isos.list[(yn + 1) * isos.width + xn];
		return $r;
	}(this));
	if(v3 < 0) key |= 1;
	if(key == 0) return null; else {
		var ret = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.geom.ZPP_MarchPair.zpp_pool == null) ret = new zpp_nape.geom.ZPP_MarchPair(); else {
				ret = zpp_nape.geom.ZPP_MarchPair.zpp_pool;
				zpp_nape.geom.ZPP_MarchPair.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}(this));
		if(key != 10 && key != 5) {
			var val = zpp_nape.geom.ZPP_MarchingSquares.look_march[key];
			ret.okey1 = val;
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				if((val & 1 << i) != 0) {
					var p = null;
					if(i == 0) {
						p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
						if(fstx || fsty) p.forced = true;
					} else if(i == 2) {
						p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
						if(sndx || fsty) p.forced = true;
					} else if(i == 4) {
						p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
						if(sndx || sndy) p.forced = true;
					} else if(i == 6) {
						p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
						if(fstx || sndy) p.forced = true;
					} else if(i == 1) {
						p = (function($this) {
							var $r;
							{
							}
							$r = ints.list[(yn << 1) * ints.width + xn];
							return $r;
						}(this));
						if(p == null) {
							p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
							{
								ints.list[(yn << 1) * ints.width + xn] = p;
							}
						} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
						if(fsty) p.forced = true;
						if(p.x == x0 || p.x == x1) {
							if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) val ^= 2;
						}
					} else if(i == 5) {
						p = (function($this) {
							var $r;
							{
							}
							$r = ints.list[((yn << 1) + 2) * ints.width + xn];
							return $r;
						}(this));
						if(p == null) {
							p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
							{
								ints.list[((yn << 1) + 2) * ints.width + xn] = p;
							}
						} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
						if(sndy) p.forced = true;
						if(p.x == x0 || p.x == x1) {
							if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) val ^= 32;
						}
					} else if(i == 3) {
						p = (function($this) {
							var $r;
							{
							}
							$r = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
							return $r;
						}(this));
						if(p == null) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x1,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x1,v1,v2,iso,quality));
							{
								ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
							}
						} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
						if(sndx) p.forced = true;
						if(p.y == y0 || p.y == y1) {
							if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) val ^= 8;
						}
					} else {
						p = (function($this) {
							var $r;
							{
							}
							$r = ints.list[((yn << 1) + 1) * ints.width + xn];
							return $r;
						}(this));
						if(p == null) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x0,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x0,v0,v3,iso,quality));
							{
								ints.list[((yn << 1) + 1) * ints.width + xn] = p;
							}
						} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
						if(fstx) p.forced = true;
						if(p.y == y0 || p.y == y1) {
							if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) val ^= 128;
						}
					}
					ret.p1 = (function($this) {
						var $r;
						var obj = p;
						if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
							obj.prev = ret.p1;
							obj.next = ret.p1.next;
							ret.p1.next.prev = obj;
							ret.p1.next = obj;
						}
						$r = obj;
						return $r;
					}(this));
				}
			}
			ret.p1 = ret.p1.next;
			ret.key1 = val;
			if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
				val = 0;
				ret.key1 = 0;
				ret.p1 = null;
			}
			if(val == 0) ret = null; else {
				ret.pr = ret.p1;
				ret.okeyr = ret.okey1;
				ret.keyr = ret.key1;
			}
		} else {
			var mid = iso(0.5 * (x0 + x1),0.5 * (y0 + y1)) < 0;
			if(key == 10) {
				if(mid) {
					var val = 187;
					ret.okey1 = val;
					var _g = 0;
					while(_g < 8) {
						var i = _g++;
						if((val & 1 << i) != 0) {
							var p = null;
							if(i == 0) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
								if(fstx || fsty) p.forced = true;
							} else if(i == 2) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
								if(sndx || fsty) p.forced = true;
							} else if(i == 4) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
								if(sndx || sndy) p.forced = true;
							} else if(i == 6) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
								if(fstx || sndy) p.forced = true;
							} else if(i == 1) {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[(yn << 1) * ints.width + xn];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									{
										ints.list[(yn << 1) * ints.width + xn] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(fsty) p.forced = true;
								if(p.x == x0 || p.x == x1) {
									if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) val ^= 2;
								}
							} else if(i == 5) {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[((yn << 1) + 2) * ints.width + xn];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									{
										ints.list[((yn << 1) + 2) * ints.width + xn] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(sndy) p.forced = true;
								if(p.x == x0 || p.x == x1) {
									if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) val ^= 32;
								}
							} else if(i == 3) {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x1,v1,v2,iso,quality));
									{
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(sndx) p.forced = true;
								if(p.y == y0 || p.y == y1) {
									if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) val ^= 8;
								}
							} else {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[((yn << 1) + 1) * ints.width + xn];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x0,v0,v3,iso,quality));
									{
										ints.list[((yn << 1) + 1) * ints.width + xn] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(fstx) p.forced = true;
								if(p.y == y0 || p.y == y1) {
									if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) val ^= 128;
								}
							}
							ret.p1 = (function($this) {
								var $r;
								var obj = p;
								if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
									obj.prev = ret.p1;
									obj.next = ret.p1.next;
									ret.p1.next.prev = obj;
									ret.p1.next = obj;
								}
								$r = obj;
								return $r;
							}(this));
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val;
					if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
						val = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val == 0) ret = null; else {
						ret.pr = ret.p1;
						ret.okeyr = ret.okey1;
						ret.keyr = ret.key1;
					}
				} else {
					var val = 131;
					ret.okey1 = val;
					var _g = 0;
					while(_g < 8) {
						var i = _g++;
						if((val & 1 << i) != 0) {
							var p = null;
							if(i == 0) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
								if(fstx || fsty) p.forced = true;
							} else if(i == 2) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
								if(sndx || fsty) p.forced = true;
							} else if(i == 4) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
								if(sndx || sndy) p.forced = true;
							} else if(i == 6) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
								if(fstx || sndy) p.forced = true;
							} else if(i == 1) {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[(yn << 1) * ints.width + xn];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									{
										ints.list[(yn << 1) * ints.width + xn] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(fsty) p.forced = true;
								if(p.x == x0 || p.x == x1) {
									if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) val ^= 2;
								}
							} else if(i == 5) {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[((yn << 1) + 2) * ints.width + xn];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									{
										ints.list[((yn << 1) + 2) * ints.width + xn] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(sndy) p.forced = true;
								if(p.x == x0 || p.x == x1) {
									if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) val ^= 32;
								}
							} else if(i == 3) {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x1,v1,v2,iso,quality));
									{
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(sndx) p.forced = true;
								if(p.y == y0 || p.y == y1) {
									if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) val ^= 8;
								}
							} else {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[((yn << 1) + 1) * ints.width + xn];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x0,v0,v3,iso,quality));
									{
										ints.list[((yn << 1) + 1) * ints.width + xn] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(fstx) p.forced = true;
								if(p.y == y0 || p.y == y1) {
									if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) val ^= 128;
								}
							}
							ret.p1 = (function($this) {
								var $r;
								var obj = p;
								if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
									obj.prev = ret.p1;
									obj.next = ret.p1.next;
									ret.p1.next.prev = obj;
									ret.p1.next = obj;
								}
								$r = obj;
								return $r;
							}(this));
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val;
					if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
						val = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val != 0) {
						var val1 = 56;
						ret.okey2 = val1;
						var _g = 0;
						while(_g < 8) {
							var i = _g++;
							if((val1 & 1 << i) != 0) {
								var p = null;
								if(i == 0) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p.forced = true;
								} else if(i == 2) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p.forced = true;
								} else if(i == 4) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p.forced = true;
								} else if(i == 6) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p.forced = true;
								} else if(i == 1) {
									p = (function($this) {
										var $r;
										{
										}
										$r = ints.list[(yn << 1) * ints.width + xn];
										return $r;
									}(this));
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										{
											ints.list[(yn << 1) * ints.width + xn] = p;
										}
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(fsty) p.forced = true;
									if(p.x == x0 || p.x == x1) {
										if(p.x == x0 && (val1 & 1) != 0 || p.x == x1 && (val1 & 4) != 0) val1 ^= 2;
									}
								} else if(i == 5) {
									p = (function($this) {
										var $r;
										{
										}
										$r = ints.list[((yn << 1) + 2) * ints.width + xn];
										return $r;
									}(this));
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										{
											ints.list[((yn << 1) + 2) * ints.width + xn] = p;
										}
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(sndy) p.forced = true;
									if(p.x == x0 || p.x == x1) {
										if(p.x == x0 && (val1 & 64) != 0 || p.x == x1 && (val1 & 16) != 0) val1 ^= 32;
									}
								} else if(i == 3) {
									p = (function($this) {
										var $r;
										{
										}
										$r = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
										return $r;
									}(this));
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x1,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x1,v1,v2,iso,quality));
										{
											ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
										}
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(sndx) p.forced = true;
									if(p.y == y0 || p.y == y1) {
										if(p.y == y0 && (val1 & 4) != 0 || p.y == y1 && (val1 & 16) != 0) val1 ^= 8;
									}
								} else {
									p = (function($this) {
										var $r;
										{
										}
										$r = ints.list[((yn << 1) + 1) * ints.width + xn];
										return $r;
									}(this));
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x0,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x0,v0,v3,iso,quality));
										{
											ints.list[((yn << 1) + 1) * ints.width + xn] = p;
										}
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(fstx) p.forced = true;
									if(p.y == y0 || p.y == y1) {
										if(p.y == y0 && (val1 & 1) != 0 || p.y == y1 && (val1 & 64) != 0) val1 ^= 128;
									}
								}
								ret.p2 = (function($this) {
									var $r;
									var obj = p;
									if(ret.p2 == null) ret.p2 = obj.prev = obj.next = obj; else {
										obj.prev = ret.p2;
										obj.next = ret.p2.next;
										ret.p2.next.prev = obj;
										ret.p2.next = obj;
									}
									$r = obj;
									return $r;
								}(this));
							}
						}
						ret.p2 = ret.p2.next;
						ret.key2 = val1;
						if(val1 == 1 || val1 == 4 || val1 == 16 || val1 == 64 || val1 == 3 || val1 == 12 || val1 == 48 || val1 == 192 || val1 == 129 || val1 == 6 || val1 == 24 || val1 == 96 || val1 == 5 || val1 == 20 || val1 == 80 || val1 == 65 || val1 == 17 || val1 == 68) {
							val1 = 0;
							ret.key2 = 0;
							ret.p2 = null;
						}
						if(val1 == 0) {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						} else {
							ret.pr = ret.p2;
							ret.okeyr = ret.okey2;
							ret.keyr = ret.key2;
						}
					} else {
						var val1 = 56;
						ret.okey1 = val1;
						var _g = 0;
						while(_g < 8) {
							var i = _g++;
							if((val1 & 1 << i) != 0) {
								var p = null;
								if(i == 0) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p.forced = true;
								} else if(i == 2) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p.forced = true;
								} else if(i == 4) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p.forced = true;
								} else if(i == 6) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p.forced = true;
								} else if(i == 1) {
									p = (function($this) {
										var $r;
										{
										}
										$r = ints.list[(yn << 1) * ints.width + xn];
										return $r;
									}(this));
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										{
											ints.list[(yn << 1) * ints.width + xn] = p;
										}
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(fsty) p.forced = true;
									if(p.x == x0 || p.x == x1) {
										if(p.x == x0 && (val1 & 1) != 0 || p.x == x1 && (val1 & 4) != 0) val1 ^= 2;
									}
								} else if(i == 5) {
									p = (function($this) {
										var $r;
										{
										}
										$r = ints.list[((yn << 1) + 2) * ints.width + xn];
										return $r;
									}(this));
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										{
											ints.list[((yn << 1) + 2) * ints.width + xn] = p;
										}
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(sndy) p.forced = true;
									if(p.x == x0 || p.x == x1) {
										if(p.x == x0 && (val1 & 64) != 0 || p.x == x1 && (val1 & 16) != 0) val1 ^= 32;
									}
								} else if(i == 3) {
									p = (function($this) {
										var $r;
										{
										}
										$r = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
										return $r;
									}(this));
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x1,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x1,v1,v2,iso,quality));
										{
											ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
										}
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(sndx) p.forced = true;
									if(p.y == y0 || p.y == y1) {
										if(p.y == y0 && (val1 & 4) != 0 || p.y == y1 && (val1 & 16) != 0) val1 ^= 8;
									}
								} else {
									p = (function($this) {
										var $r;
										{
										}
										$r = ints.list[((yn << 1) + 1) * ints.width + xn];
										return $r;
									}(this));
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x0,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x0,v0,v3,iso,quality));
										{
											ints.list[((yn << 1) + 1) * ints.width + xn] = p;
										}
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(fstx) p.forced = true;
									if(p.y == y0 || p.y == y1) {
										if(p.y == y0 && (val1 & 1) != 0 || p.y == y1 && (val1 & 64) != 0) val1 ^= 128;
									}
								}
								ret.p1 = (function($this) {
									var $r;
									var obj = p;
									if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
										obj.prev = ret.p1;
										obj.next = ret.p1.next;
										ret.p1.next.prev = obj;
										ret.p1.next = obj;
									}
									$r = obj;
									return $r;
								}(this));
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val1;
						if(val1 == 1 || val1 == 4 || val1 == 16 || val1 == 64 || val1 == 3 || val1 == 12 || val1 == 48 || val1 == 192 || val1 == 129 || val1 == 6 || val1 == 24 || val1 == 96 || val1 == 5 || val1 == 20 || val1 == 80 || val1 == 65 || val1 == 17 || val1 == 68) {
							val1 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val1 == 0) ret = null; else {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						}
					}
				}
			} else if(mid) {
				var val = 238;
				ret.okey1 = val;
				var _g = 0;
				while(_g < 8) {
					var i = _g++;
					if((val & 1 << i) != 0) {
						var p = null;
						if(i == 0) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
							if(fstx || fsty) p.forced = true;
						} else if(i == 2) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
							if(sndx || fsty) p.forced = true;
						} else if(i == 4) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
							if(sndx || sndy) p.forced = true;
						} else if(i == 6) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
							if(fstx || sndy) p.forced = true;
						} else if(i == 1) {
							p = (function($this) {
								var $r;
								{
								}
								$r = ints.list[(yn << 1) * ints.width + xn];
								return $r;
							}(this));
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
								{
									ints.list[(yn << 1) * ints.width + xn] = p;
								}
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(fsty) p.forced = true;
							if(p.x == x0 || p.x == x1) {
								if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) val ^= 2;
							}
						} else if(i == 5) {
							p = (function($this) {
								var $r;
								{
								}
								$r = ints.list[((yn << 1) + 2) * ints.width + xn];
								return $r;
							}(this));
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
								{
									ints.list[((yn << 1) + 2) * ints.width + xn] = p;
								}
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(sndy) p.forced = true;
							if(p.x == x0 || p.x == x1) {
								if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) val ^= 32;
							}
						} else if(i == 3) {
							p = (function($this) {
								var $r;
								{
								}
								$r = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								return $r;
							}(this));
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x1,v1,v2,iso,quality));
								{
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
								}
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(sndx) p.forced = true;
							if(p.y == y0 || p.y == y1) {
								if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) val ^= 8;
							}
						} else {
							p = (function($this) {
								var $r;
								{
								}
								$r = ints.list[((yn << 1) + 1) * ints.width + xn];
								return $r;
							}(this));
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x0,v0,v3,iso,quality));
								{
									ints.list[((yn << 1) + 1) * ints.width + xn] = p;
								}
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(fstx) p.forced = true;
							if(p.y == y0 || p.y == y1) {
								if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) val ^= 128;
							}
						}
						ret.p1 = (function($this) {
							var $r;
							var obj = p;
							if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
								obj.prev = ret.p1;
								obj.next = ret.p1.next;
								ret.p1.next.prev = obj;
								ret.p1.next = obj;
							}
							$r = obj;
							return $r;
						}(this));
					}
				}
				ret.p1 = ret.p1.next;
				ret.key1 = val;
				if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
					val = 0;
					ret.key1 = 0;
					ret.p1 = null;
				}
				if(val == 0) ret = null; else {
					ret.pr = ret.p1;
					ret.okeyr = ret.okey1;
					ret.keyr = ret.key1;
				}
			} else {
				var val = 224;
				ret.okey1 = val;
				var _g = 0;
				while(_g < 8) {
					var i = _g++;
					if((val & 1 << i) != 0) {
						var p = null;
						if(i == 0) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
							if(fstx || fsty) p.forced = true;
						} else if(i == 2) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
							if(sndx || fsty) p.forced = true;
						} else if(i == 4) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
							if(sndx || sndy) p.forced = true;
						} else if(i == 6) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
							if(fstx || sndy) p.forced = true;
						} else if(i == 1) {
							p = (function($this) {
								var $r;
								{
								}
								$r = ints.list[(yn << 1) * ints.width + xn];
								return $r;
							}(this));
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
								{
									ints.list[(yn << 1) * ints.width + xn] = p;
								}
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(fsty) p.forced = true;
							if(p.x == x0 || p.x == x1) {
								if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) val ^= 2;
							}
						} else if(i == 5) {
							p = (function($this) {
								var $r;
								{
								}
								$r = ints.list[((yn << 1) + 2) * ints.width + xn];
								return $r;
							}(this));
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
								{
									ints.list[((yn << 1) + 2) * ints.width + xn] = p;
								}
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(sndy) p.forced = true;
							if(p.x == x0 || p.x == x1) {
								if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) val ^= 32;
							}
						} else if(i == 3) {
							p = (function($this) {
								var $r;
								{
								}
								$r = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								return $r;
							}(this));
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x1,v1,v2,iso,quality));
								{
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
								}
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(sndx) p.forced = true;
							if(p.y == y0 || p.y == y1) {
								if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) val ^= 8;
							}
						} else {
							p = (function($this) {
								var $r;
								{
								}
								$r = ints.list[((yn << 1) + 1) * ints.width + xn];
								return $r;
							}(this));
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x0,v0,v3,iso,quality));
								{
									ints.list[((yn << 1) + 1) * ints.width + xn] = p;
								}
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(fstx) p.forced = true;
							if(p.y == y0 || p.y == y1) {
								if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) val ^= 128;
							}
						}
						ret.p1 = (function($this) {
							var $r;
							var obj = p;
							if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
								obj.prev = ret.p1;
								obj.next = ret.p1.next;
								ret.p1.next.prev = obj;
								ret.p1.next = obj;
							}
							$r = obj;
							return $r;
						}(this));
					}
				}
				ret.p1 = ret.p1.next;
				ret.key1 = val;
				if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
					val = 0;
					ret.key1 = 0;
					ret.p1 = null;
				}
				if(val != 0) {
					var val1 = 14;
					ret.okey2 = val1;
					var _g = 0;
					while(_g < 8) {
						var i = _g++;
						if((val1 & 1 << i) != 0) {
							var p = null;
							if(i == 0) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
								if(fstx || fsty) p.forced = true;
							} else if(i == 2) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
								if(sndx || fsty) p.forced = true;
							} else if(i == 4) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
								if(sndx || sndy) p.forced = true;
							} else if(i == 6) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
								if(fstx || sndy) p.forced = true;
							} else if(i == 1) {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[(yn << 1) * ints.width + xn];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									{
										ints.list[(yn << 1) * ints.width + xn] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(fsty) p.forced = true;
								if(p.x == x0 || p.x == x1) {
									if(p.x == x0 && (val1 & 1) != 0 || p.x == x1 && (val1 & 4) != 0) val1 ^= 2;
								}
							} else if(i == 5) {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[((yn << 1) + 2) * ints.width + xn];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									{
										ints.list[((yn << 1) + 2) * ints.width + xn] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(sndy) p.forced = true;
								if(p.x == x0 || p.x == x1) {
									if(p.x == x0 && (val1 & 64) != 0 || p.x == x1 && (val1 & 16) != 0) val1 ^= 32;
								}
							} else if(i == 3) {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x1,v1,v2,iso,quality));
									{
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(sndx) p.forced = true;
								if(p.y == y0 || p.y == y1) {
									if(p.y == y0 && (val1 & 4) != 0 || p.y == y1 && (val1 & 16) != 0) val1 ^= 8;
								}
							} else {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[((yn << 1) + 1) * ints.width + xn];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x0,v0,v3,iso,quality));
									{
										ints.list[((yn << 1) + 1) * ints.width + xn] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(fstx) p.forced = true;
								if(p.y == y0 || p.y == y1) {
									if(p.y == y0 && (val1 & 1) != 0 || p.y == y1 && (val1 & 64) != 0) val1 ^= 128;
								}
							}
							ret.p2 = (function($this) {
								var $r;
								var obj = p;
								if(ret.p2 == null) ret.p2 = obj.prev = obj.next = obj; else {
									obj.prev = ret.p2;
									obj.next = ret.p2.next;
									ret.p2.next.prev = obj;
									ret.p2.next = obj;
								}
								$r = obj;
								return $r;
							}(this));
						}
					}
					ret.p2 = ret.p2.next;
					ret.key2 = val1;
					if(val1 == 1 || val1 == 4 || val1 == 16 || val1 == 64 || val1 == 3 || val1 == 12 || val1 == 48 || val1 == 192 || val1 == 129 || val1 == 6 || val1 == 24 || val1 == 96 || val1 == 5 || val1 == 20 || val1 == 80 || val1 == 65 || val1 == 17 || val1 == 68) {
						val1 = 0;
						ret.key2 = 0;
						ret.p2 = null;
					}
					if(val1 == 0) {
						ret.pr = ret.p1;
						ret.okeyr = ret.okey1;
						ret.keyr = ret.key1;
					} else {
						ret.pr = ret.p2;
						ret.okeyr = ret.okey2;
						ret.keyr = ret.key2;
					}
				} else {
					var val1 = 14;
					ret.okey1 = val1;
					var _g = 0;
					while(_g < 8) {
						var i = _g++;
						if((val1 & 1 << i) != 0) {
							var p = null;
							if(i == 0) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
								if(fstx || fsty) p.forced = true;
							} else if(i == 2) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
								if(sndx || fsty) p.forced = true;
							} else if(i == 4) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
								if(sndx || sndy) p.forced = true;
							} else if(i == 6) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
								if(fstx || sndy) p.forced = true;
							} else if(i == 1) {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[(yn << 1) * ints.width + xn];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									{
										ints.list[(yn << 1) * ints.width + xn] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(fsty) p.forced = true;
								if(p.x == x0 || p.x == x1) {
									if(p.x == x0 && (val1 & 1) != 0 || p.x == x1 && (val1 & 4) != 0) val1 ^= 2;
								}
							} else if(i == 5) {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[((yn << 1) + 2) * ints.width + xn];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(zpp_nape.geom.ZPP_MarchingSquares.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									{
										ints.list[((yn << 1) + 2) * ints.width + xn] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(sndy) p.forced = true;
								if(p.x == x0 || p.x == x1) {
									if(p.x == x0 && (val1 & 64) != 0 || p.x == x1 && (val1 & 16) != 0) val1 ^= 32;
								}
							} else if(i == 3) {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x1,v1,v2,iso,quality));
									{
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(sndx) p.forced = true;
								if(p.y == y0 || p.y == y1) {
									if(p.y == y0 && (val1 & 4) != 0 || p.y == y1 && (val1 & 16) != 0) val1 ^= 8;
								}
							} else {
								p = (function($this) {
									var $r;
									{
									}
									$r = ints.list[((yn << 1) + 1) * ints.width + xn];
									return $r;
								}(this));
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,zpp_nape.geom.ZPP_MarchingSquares.ylerp(y0,y1,x0,v0,v3,iso,quality));
									{
										ints.list[((yn << 1) + 1) * ints.width + xn] = p;
									}
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(fstx) p.forced = true;
								if(p.y == y0 || p.y == y1) {
									if(p.y == y0 && (val1 & 1) != 0 || p.y == y1 && (val1 & 64) != 0) val1 ^= 128;
								}
							}
							ret.p1 = (function($this) {
								var $r;
								var obj = p;
								if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
									obj.prev = ret.p1;
									obj.next = ret.p1.next;
									ret.p1.next.prev = obj;
									ret.p1.next = obj;
								}
								$r = obj;
								return $r;
							}(this));
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val1;
					if(val1 == 1 || val1 == 4 || val1 == 16 || val1 == 64 || val1 == 3 || val1 == 12 || val1 == 48 || val1 == 192 || val1 == 129 || val1 == 6 || val1 == 24 || val1 == 96 || val1 == 5 || val1 == 20 || val1 == 80 || val1 == 65 || val1 == 17 || val1 == 68) {
						val1 = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val1 == 0) ret = null; else {
						ret.pr = ret.p1;
						ret.okeyr = ret.okey1;
						ret.keyr = ret.key1;
					}
				}
			}
		}
		return ret;
	}
}
zpp_nape.geom.ZPP_MarchingSquares.lerp = function(x0,x1,v0,v1) {
	if(v0 == 0) return x0; else if(v1 == 0) return x1; else {
		var dv = v0 - v1;
		var t = dv * dv < 1e-8?0.5:v0 / dv;
		if(t < 0) t = 0; else if(t > 1) t = 1;
		return x0 + t * (x1 - x0);
	}
}
zpp_nape.geom.ZPP_MarchingSquares.xlerp = function(x0,x1,y,v0,v1,iso,quality) {
	var xm = zpp_nape.geom.ZPP_MarchingSquares.lerp(x0,x1,v0,v1);
	while(quality-- != 0 && x0 < xm && xm < x1) {
		var vm = iso(xm,y);
		if(vm == 0) break;
		if(v0 * vm < 0) {
			x1 = xm;
			v1 = vm;
		} else {
			x0 = xm;
			v0 = vm;
		}
		xm = zpp_nape.geom.ZPP_MarchingSquares.lerp(x0,x1,v0,v1);
	}
	return xm;
}
zpp_nape.geom.ZPP_MarchingSquares.ylerp = function(y0,y1,x,v0,v1,iso,quality) {
	var ym = zpp_nape.geom.ZPP_MarchingSquares.lerp(y0,y1,v0,v1);
	while(quality-- != 0 && y0 < ym && ym < y1) {
		var vm = iso(x,ym);
		if(vm == 0) break;
		if(v0 * vm < 0) {
			y1 = ym;
			v1 = vm;
		} else {
			y0 = ym;
			v0 = vm;
		}
		ym = zpp_nape.geom.ZPP_MarchingSquares.lerp(y0,y1,v0,v1);
	}
	return ym;
}
zpp_nape.geom.ZPP_MarchingSquares.prototype.__class__ = zpp_nape.geom.ZPP_MarchingSquares;
zpp_nape.constraint.ZPP_PivotJoint = function(p) {
	if( p === $_ ) return;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.stepped = false;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
}
zpp_nape.constraint.ZPP_PivotJoint.__name__ = ["zpp_nape","constraint","ZPP_PivotJoint"];
zpp_nape.constraint.ZPP_PivotJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
for(var k in zpp_nape.constraint.ZPP_Constraint.prototype ) zpp_nape.constraint.ZPP_PivotJoint.prototype[k] = zpp_nape.constraint.ZPP_Constraint.prototype[k];
zpp_nape.constraint.ZPP_PivotJoint.prototype.outer_zn = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		if(b == this.b1) return new nape.geom.Vec3(-this.jAccx - this.pjAccx,-this.jAccy - this.pjAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely) - (this.pjAccy * this.a1relx - this.pjAccx * this.a1rely)); else return new nape.geom.Vec3(this.jAccx + this.pjAccx,this.jAccy + this.pjAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely + (this.pjAccy * this.a2relx - this.pjAccx * this.a2rely));
	} else return new nape.geom.Vec3(0,0,0);
}
zpp_nape.constraint.ZPP_PivotJoint.prototype.activeBodies = function() {
	this.b1.constraints.add(this);
	if(this.b2 != this.b1) this.b2.constraints.add(this);
}
zpp_nape.constraint.ZPP_PivotJoint.prototype.inactiveBodies = function() {
	this.b1.constraints.remove(this);
	if(this.b2 != this.b1) this.b2.constraints.remove(this);
}
zpp_nape.constraint.ZPP_PivotJoint.prototype.b1 = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a1localx = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a1localy = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a1relx = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a1rely = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.setup_a1 = function() {
	var me = this;
	this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
	this.wrap_a1.zpp_inner.inuse = true;
	this.wrap_a1.zpp_inner._validate = function() {
		me.wrap_a1.zpp_inner.x = me.a1localx;
		me.wrap_a1.zpp_inner.y = me.a1localy;
	};
	this.wrap_a1.zpp_inner._invalidate = function(x) {
		me.a1localx = x.x;
		me.a1localy = x.y;
		if(me.space != null) me.space.wake_constraint(me);
	};
}
zpp_nape.constraint.ZPP_PivotJoint.prototype.wrap_a1 = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.b2 = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a2localx = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a2localy = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a2relx = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.a2rely = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.setup_a2 = function() {
	var me = this;
	this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
	this.wrap_a2.zpp_inner.inuse = true;
	this.wrap_a2.zpp_inner._validate = function() {
		me.wrap_a2.zpp_inner.x = me.a2localx;
		me.wrap_a2.zpp_inner.y = me.a2localy;
	};
	this.wrap_a2.zpp_inner._invalidate = function(x) {
		me.a2localx = x.x;
		me.a2localy = x.y;
		if(me.space != null) me.space.wake_constraint(me);
	};
}
zpp_nape.constraint.ZPP_PivotJoint.prototype.wrap_a2 = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.kMassa = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.kMassb = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.kMassc = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.jAccx = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.jAccy = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.pjAccx = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.pjAccy = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.jMax = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.gamma = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.biasx = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.biasy = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.stepped = null;
zpp_nape.constraint.ZPP_PivotJoint.prototype.validate = function() {
	if(this.b1 == this.b2) throw "Error: PivotJoint cannot be simulated with body1 == body2 (body1=body2=" + this.b1.outer.toString() + ")";
	if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")";
	if(!(this.b1.type == 2) && !(this.b2.type == 2)) throw "Error: Constraints cannot have both bodies non-dynamic (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")";
}
zpp_nape.constraint.ZPP_PivotJoint.prototype.wake_connected = function() {
	if(this.b1.type == 2) this.b1.wake();
	if(this.b2.type == 2) this.b2.wake();
}
zpp_nape.constraint.ZPP_PivotJoint.prototype.forest = function() {
	if(this.b1.type == 2) {
		var xr = this.b1.component == this.b1.component.parent?this.b1.component:(function($this) {
			var $r;
			var obj = $this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		var yr = this.component == this.component.parent?this.component:(function($this) {
			var $r;
			var obj = $this.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == 2) {
		var xr = this.b2.component == this.b2.component.parent?this.b2.component:(function($this) {
			var $r;
			var obj = $this.b2.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		var yr = this.component == this.component.parent?this.component:(function($this) {
			var $r;
			var obj = $this.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
}
zpp_nape.constraint.ZPP_PivotJoint.prototype.pair_exists = function(id,di) {
	return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
}
zpp_nape.constraint.ZPP_PivotJoint.prototype.destroy = function() {
	this.b1.constraints.remove(this);
	if(this.b2 != this.b1) this.b2.constraints.remove(this);
}
zpp_nape.constraint.ZPP_PivotJoint.prototype.clearcache = function() {
	this.jAccx = 0;
	this.jAccy = 0;
	this.pjAccx = 0;
	this.pjAccy = 0;
	this.pre_dt = -1.0;
}
zpp_nape.constraint.ZPP_PivotJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var m = this.b1.smass + this.b2.smass;
	this.kMassa = m;
	this.kMassb = 0;
	this.kMassc = m;
	if(this.b1.sinertia != 0) {
		var X = this.a1relx * this.b1.sinertia;
		var Y = this.a1rely * this.b1.sinertia;
		this.kMassa += Y * this.a1rely;
		this.kMassb += -Y * this.a1relx;
		this.kMassc += X * this.a1relx;
	}
	if(this.b2.sinertia != 0) {
		var X = this.a2relx * this.b2.sinertia;
		var Y = this.a2rely * this.b2.sinertia;
		this.kMassa += Y * this.a2rely;
		this.kMassb += -Y * this.a2relx;
		this.kMassc += X * this.a2relx;
	}
	var flag = (function($this) {
		var $r;
		var det = $this.kMassa * $this.kMassc - $this.kMassb * $this.kMassb;
		$r = det != det?(function($this) {
			var $r;
			$this.kMassa = $this.kMassb = $this.kMassc = 0;
			$r = 3;
			return $r;
		}($this)):det < 1e-8?(function($this) {
			var $r;
			var flag = 0;
			if($this.kMassa * $this.kMassa > 1e-8) $this.kMassa = 1 / $this.kMassa; else {
				$this.kMassa = 0;
				flag |= 1;
			}
			if($this.kMassc * $this.kMassc > 1e-8) $this.kMassc = 1 / $this.kMassc; else {
				$this.kMassc = 0;
				flag |= 2;
			}
			$this.kMassb = 0;
			$r = flag;
			return $r;
		}($this)):(function($this) {
			var $r;
			det = 1 / det;
			var t = $this.kMassc * det;
			$this.kMassc = $this.kMassa * det;
			$this.kMassa = t;
			$this.kMassb *= -det;
			$r = 0;
			return $r;
		}($this));
		return $r;
	}(this));
	if((flag & 1) != 0) this.jAccx = 0;
	if((flag & 2) != 0) this.jAccy = 0;
	if(!this.stiff) {
		var biasCoef;
		var X = (function($this) {
			var $r;
			var omega = 2 * Math.PI * $this.frequency;
			$this.gamma = 1 / (omega * dt * (2 * $this.damping + omega * dt));
			var ig = 1 / (1 + $this.gamma);
			biasCoef = omega * omega * $this.gamma;
			$this.gamma *= ig;
			$r = ig;
			return $r;
		}(this));
		this.kMassa *= X;
		this.kMassb *= X;
		this.kMassc *= X;
		this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy > this.maxError * this.maxError) return true;
		var t = -dt * biasCoef;
		this.biasx *= t;
		this.biasy *= t;
		var t = this.maxError;
		var ls = this.biasx * this.biasx + this.biasy * this.biasy;
		if(ls > t * t) {
			var t1 = t * (function($this) {
				var $r;
				{
				}
				$r = 1.0 / (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(ls);
					return $r;
				}($this));
				return $r;
			}(this));
			this.biasx *= t1;
			this.biasy *= t1;
		}
	} else {
		this.biasx = 0;
		this.biasy = 0;
		this.gamma = 0;
	}
	var t = dtratio;
	this.jAccx *= t;
	this.jAccy *= t;
	this.jMax = this.maxForce * dt;
	return false;
}
zpp_nape.constraint.ZPP_PivotJoint.prototype.warmStart = function() {
	var t = this.b1.imass;
	this.b1.velx -= this.jAccx * t;
	this.b1.vely -= this.jAccy * t;
	var t = this.b2.imass;
	this.b2.velx += this.jAccx * t;
	this.b2.vely += this.jAccy * t;
	this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely) * this.b1.iinertia;
	this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely) * this.b2.iinertia;
	this.pjAccx = this.jAccx;
	this.pjAccy = this.jAccy;
}
zpp_nape.constraint.ZPP_PivotJoint.prototype.applyImpulseVel = function() {
	var Ex;
	var Ey;
	Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
	Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
	var Jx;
	var Jy;
	Jx = this.biasx - Ex;
	Jy = this.biasy - Ey;
	var t = this.kMassa * Jx + this.kMassb * Jy;
	Jy = this.kMassb * Jx + this.kMassc * Jy;
	Jx = t;
	var t = this.gamma;
	Jx -= this.jAccx * t;
	Jy -= this.jAccy * t;
	var jOldx;
	var jOldy;
	jOldx = this.jAccx;
	jOldy = this.jAccy;
	var t = 1.0;
	this.jAccx += Jx * t;
	this.jAccy += Jy * t;
	if(this.breakUnderForce) {
		if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) return true;
	} else if(!this.stiff) {
		var t = this.jMax;
		var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
		if(ls > t * t) {
			var t1 = t * (function($this) {
				var $r;
				{
				}
				$r = 1.0 / (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(ls);
					return $r;
				}($this));
				return $r;
			}(this));
			this.jAccx *= t1;
			this.jAccy *= t1;
		}
	}
	Jx = this.jAccx - jOldx;
	Jy = this.jAccy - jOldy;
	var t = this.b1.imass;
	this.b1.velx -= Jx * t;
	this.b1.vely -= Jy * t;
	var t = this.b2.imass;
	this.b2.velx += Jx * t;
	this.b2.vely += Jy * t;
	this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely) * this.b1.iinertia;
	this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely) * this.b2.iinertia;
	return false;
}
zpp_nape.constraint.ZPP_PivotJoint.prototype.applyImpulsePos = function() {
	var r1x;
	var r1y;
	r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	var r2x;
	var r2y;
	r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var Ex;
	var Ey;
	Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
	Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
	if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) return true;
	if(Ex * Ex + Ey * Ey < 0.01) return false;
	var t = 0.5;
	Ex *= t;
	Ey *= t;
	var Jx;
	var Jy;
	if(Ex * Ex + Ey * Ey > 6) {
		var k = this.b1.smass + this.b2.smass;
		if(k > 1e-8) {
			k = 0.75 / k;
			Jx = -Ex * k;
			Jy = -Ey * k;
			var t = 20;
			var ls = Jx * Jx + Jy * Jy;
			if(ls > t * t) {
				var t1 = t * (function($this) {
					var $r;
					{
					}
					$r = 1.0 / (function($this) {
						var $r;
						{
						}
						$r = Math.sqrt(ls);
						return $r;
					}($this));
					return $r;
				}(this));
				Jx *= t1;
				Jy *= t1;
			}
			var t = this.b1.imass;
			this.b1.posx -= Jx * t;
			this.b1.posy -= Jy * t;
			var t = this.b2.imass;
			this.b2.posx += Jx * t;
			this.b2.posy += Jy * t;
			Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
			Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
			var t = 0.5;
			Ex *= t;
			Ey *= t;
		}
	}
	var Ka;
	var Kb;
	var Kc;
	var m = this.b1.smass + this.b2.smass;
	Ka = m;
	Kb = 0;
	Kc = m;
	if(this.b1.sinertia != 0) {
		var X = r1x * this.b1.sinertia;
		var Y = r1y * this.b1.sinertia;
		Ka += Y * r1y;
		Kb += -Y * r1x;
		Kc += X * r1x;
	}
	if(this.b2.sinertia != 0) {
		var X = r2x * this.b2.sinertia;
		var Y = r2y * this.b2.sinertia;
		Ka += Y * r2y;
		Kb += -Y * r2x;
		Kc += X * r2x;
	}
	Jx = -Ex;
	Jy = -Ey;
	var t = 6;
	var ls = Jx * Jx + Jy * Jy;
	if(ls > t * t) {
		var t1 = t * (function($this) {
			var $r;
			{
			}
			$r = 1.0 / (function($this) {
				var $r;
				{
				}
				$r = Math.sqrt(ls);
				return $r;
			}($this));
			return $r;
		}(this));
		Jx *= t1;
		Jy *= t1;
	}
	var det = Ka * Kc - Kb * Kb;
	if(det != det) Jx = Jy = 0; else if(det < 1e-8) {
		if(Ka * Ka > 1e-8) Jx /= Ka; else Jx = 0;
		if(Kc * Kc > 1e-8) Jy /= Kc; else Jy = 0;
	} else {
		det = 1 / det;
		var t = det * (Kc * Jx - Kb * Jy);
		Jy = det * (Ka * Jy - Kb * Jx);
		Jx = t;
	}
	var t = this.b1.imass;
	this.b1.posx -= Jx * t;
	this.b1.posy -= Jy * t;
	var t = this.b2.imass;
	this.b2.posx += Jx * t;
	this.b2.posy += Jy * t;
	this.b1.delta_rot(-(Jy * r1x - Jx * r1y) * this.b1.iinertia);
	this.b2.delta_rot((Jy * r2x - Jx * r2y) * this.b2.iinertia);
	return false;
}
zpp_nape.constraint.ZPP_PivotJoint.prototype.__class__ = zpp_nape.constraint.ZPP_PivotJoint;
StringTools = function() { }
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
}
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
}
StringTools.htmlEscape = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
}
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&amp;").join("&");
}
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && s.substr(0,start.length) == start;
}
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	return slen >= elen && s.substr(slen - elen,elen) == end;
}
StringTools.isSpace = function(s,pos) {
	var c = s.charCodeAt(pos);
	return c >= 9 && c <= 13 || c == 32;
}
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return s.substr(r,l - r); else return s;
}
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return s.substr(0,l - r); else return s;
}
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
}
StringTools.rpad = function(s,c,l) {
	var sl = s.length;
	var cl = c.length;
	while(sl < l) if(l - sl < cl) {
		s += c.substr(0,l - sl);
		sl = l;
	} else {
		s += c;
		sl += cl;
	}
	return s;
}
StringTools.lpad = function(s,c,l) {
	var ns = "";
	var sl = s.length;
	if(sl >= l) return s;
	var cl = c.length;
	while(sl < l) if(l - sl < cl) {
		ns += c.substr(0,l - sl);
		sl = l;
	} else {
		ns += c;
		sl += cl;
	}
	return ns + s;
}
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
}
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
}
StringTools.fastCodeAt = function(s,index) {
	return s.cca(index);
}
StringTools.isEOF = function(c) {
	return c != c;
}
StringTools.prototype.__class__ = StringTools;
if(!nape.shape) nape.shape = {}
nape.shape.ValidationResult = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ValidationResult" + " derp!";
}
nape.shape.ValidationResult.__name__ = ["nape","shape","ValidationResult"];
nape.shape.ValidationResult.VALID = null;
nape.shape.ValidationResult.flibget_VALID = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
}
nape.shape.ValidationResult.DEGENERATE = null;
nape.shape.ValidationResult.flibget_DEGENERATE = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
}
nape.shape.ValidationResult.DEGENERATE_EDGES = null;
nape.shape.ValidationResult.flibget_DEGENERATE_EDGES = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES;
}
nape.shape.ValidationResult.CONCAVE = null;
nape.shape.ValidationResult.flibget_CONCAVE = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
}
nape.shape.ValidationResult.SELF_INTERSECTING = null;
nape.shape.ValidationResult.flibget_SELF_INTERSECTING = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
}
nape.shape.ValidationResult.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
		return $r;
	}(this))) return "VALID"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
		return $r;
	}(this))) return "DEGENERATE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES = new nape.shape.ValidationResult();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES;
		return $r;
	}(this))) return "DEGENERATE_EDGES"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
		return $r;
	}(this))) return "CONCAVE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
		return $r;
	}(this))) return "SELF_INTERSECTING"; else return "";
}
nape.shape.ValidationResult.prototype.__class__ = nape.shape.ValidationResult;
nape.shape.Shape = function(p) {
	if( p === $_ ) return;
	throw "Error: Shape cannot be instantiated derp!";
}
nape.shape.Shape.__name__ = ["nape","shape","Shape"];
nape.shape.Shape.copy = function(shape) {
	if(shape == null) throw "Error: Cannot copy null Shape";
	var ret = shape.zpp_inner.copy();
	ret.userData = shape.userData;
	return ret;
}
nape.shape.Shape.prototype.zpp_inner = null;
nape.shape.Shape.prototype.type = null;
nape.shape.Shape.prototype.flibget_type = function() {
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = new nape.shape.ShapeType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ShapeType_POLYGON == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = new nape.shape.ShapeType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ShapeType_POLYGON;
		return $r;
	}(this))][this.zpp_inner.type];
}
nape.shape.Shape.prototype.id = null;
nape.shape.Shape.prototype.flibget_id = function() {
	return this.zpp_inner.id;
}
nape.shape.Shape.prototype.isCircle = function() {
	return this.zpp_inner.type == 0;
}
nape.shape.Shape.prototype.isPolygon = function() {
	return this.zpp_inner.type == 1;
}
nape.shape.Shape.prototype.userData = null;
nape.shape.Shape.prototype.body = null;
nape.shape.Shape.prototype.flibget_body = function() {
	return this.zpp_inner.body != null?this.zpp_inner.body.outer:null;
}
nape.shape.Shape.prototype.flibset_body = function(body) {
	if((this.zpp_inner.body != null?this.zpp_inner.body.outer:null) != body) {
		if(this.zpp_inner.body != null) (this.zpp_inner.body != null?this.zpp_inner.body.outer:null).zpp_inner.wrap_shapes.remove(this);
		if(body != null) body.zpp_inner.wrap_shapes.add(this);
	}
	return this.zpp_inner.body != null?this.zpp_inner.body.outer:null;
}
nape.shape.Shape.prototype.circle = null;
nape.shape.Shape.prototype.flibget_circle = function() {
	return this.zpp_inner.type == 0?this.zpp_inner.circle.outer_zn:null;
}
nape.shape.Shape.prototype.polygon = null;
nape.shape.Shape.prototype.flibget_polygon = function() {
	return this.zpp_inner.type == 1?this.zpp_inner.polygon.outer_zn:null;
}
nape.shape.Shape.prototype.worldCOM = null;
nape.shape.Shape.prototype.flibget_worldCOM = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_worldCOM == null) {
			$this.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get($this.zpp_inner.worldCOMx,$this.zpp_inner.worldCOMy,null);
			$this.zpp_inner.wrap_worldCOM.zpp_inner.inuse = true;
			$this.zpp_inner.wrap_worldCOM.zpp_inner.immutable = true;
			$this.zpp_inner.wrap_worldCOM.zpp_inner._validate = $closure($this.zpp_inner,"getworldCOM");
		}
		$r = $this.zpp_inner.wrap_worldCOM;
		return $r;
	}(this));
}
nape.shape.Shape.prototype.localCOM = null;
nape.shape.Shape.prototype.flibget_localCOM = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_localCOM == null) {
			if($this.zpp_inner.type == 0) $this.zpp_inner.circle.setupLocalCOM(); else $this.zpp_inner.polygon.setupLocalCOM();
		}
		$r = $this.zpp_inner.wrap_localCOM;
		return $r;
	}(this));
}
nape.shape.Shape.prototype.flibset_localCOM = function(localCOM) {
	if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(localCOM == null) throw "Error: Shape::localCOM cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_localCOM == null) {
			if($this.zpp_inner.type == 0) $this.zpp_inner.circle.setupLocalCOM(); else $this.zpp_inner.polygon.setupLocalCOM();
		}
		$r = $this.zpp_inner.wrap_localCOM;
		return $r;
	}(this))).set(localCOM);
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_localCOM == null) {
			if($this.zpp_inner.type == 0) $this.zpp_inner.circle.setupLocalCOM(); else $this.zpp_inner.polygon.setupLocalCOM();
		}
		$r = $this.zpp_inner.wrap_localCOM;
		return $r;
	}(this));
}
nape.shape.Shape.prototype.area = null;
nape.shape.Shape.prototype.flibget_area = function() {
	return (function($this) {
		var $r;
		$this.zpp_inner.validate_area_inertia();
		$r = $this.zpp_inner.area;
		return $r;
	}(this));
}
nape.shape.Shape.prototype.inertia = null;
nape.shape.Shape.prototype.flibget_inertia = function() {
	return (function($this) {
		var $r;
		$this.zpp_inner.validate_area_inertia();
		$r = $this.zpp_inner.inertia;
		return $r;
	}(this));
}
nape.shape.Shape.prototype.angDrag = null;
nape.shape.Shape.prototype.flibget_angDrag = function() {
	return (function($this) {
		var $r;
		$this.zpp_inner.validate_angDrag();
		$r = $this.zpp_inner.angDrag;
		return $r;
	}(this));
}
nape.shape.Shape.prototype.material = null;
nape.shape.Shape.prototype.flibget_material = function() {
	return this.zpp_inner.material.wrapper();
}
nape.shape.Shape.prototype.flibset_material = function(material) {
	if(material == null) throw "Error: Cannot assign null as Shape material";
	this.zpp_inner.setMaterial(material.zpp_inner);
	return this.zpp_inner.material.wrapper();
}
nape.shape.Shape.prototype.filter = null;
nape.shape.Shape.prototype.flibget_filter = function() {
	return this.zpp_inner.filter.wrapper();
}
nape.shape.Shape.prototype.flibset_filter = function(filter) {
	if(filter == null) throw "Error: Cannot assign null as Shape filter";
	this.zpp_inner.setFilter(filter.zpp_inner);
	return this.zpp_inner.filter.wrapper();
}
nape.shape.Shape.prototype.fluidProperties = null;
nape.shape.Shape.prototype.flibget_fluidProperties = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.fluidProperties == null) $this.zpp_inner.setFluid(new nape.phys.FluidProperties().zpp_inner);
		$r = $this.zpp_inner.fluidProperties.wrapper();
		return $r;
	}(this));
}
nape.shape.Shape.prototype.flibset_fluidProperties = function(fluidProperties) {
	if(fluidProperties == null) throw "Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false";
	this.zpp_inner.setFluid(fluidProperties.zpp_inner);
	return (function($this) {
		var $r;
		if($this.zpp_inner.fluidProperties == null) $this.zpp_inner.setFluid(new nape.phys.FluidProperties().zpp_inner);
		$r = $this.zpp_inner.fluidProperties.wrapper();
		return $r;
	}(this));
}
nape.shape.Shape.prototype.fluidEnabled = null;
nape.shape.Shape.prototype.flibget_fluidEnabled = function() {
	return this.zpp_inner.fluidEnabled;
}
nape.shape.Shape.prototype.flibset_fluidEnabled = function(fluidEnabled) {
	this.zpp_inner.fluidEnabled = fluidEnabled;
	if(fluidEnabled && this.zpp_inner.fluidProperties == null) this.flibset_fluidProperties(new nape.phys.FluidProperties());
	this.zpp_inner.wake();
	return this.zpp_inner.fluidEnabled;
}
nape.shape.Shape.prototype.cbType = null;
nape.shape.Shape.prototype.flibget_cbType = function() {
	return this.zpp_inner.cbType.wrapper();
}
nape.shape.Shape.prototype.flibset_cbType = function(cbType) {
	if(cbType == null) throw "Error: Cannot assign null CbType to Shape";
	this.zpp_inner.setCbType(cbType.zpp_inner);
	return this.zpp_inner.cbType.wrapper();
}
nape.shape.Shape.prototype.bounds = null;
nape.shape.Shape.prototype.flibget_bounds = function() {
	return this.zpp_inner.aabb.wrapper();
}
nape.shape.Shape.prototype.translate = function(displacement) {
	if(displacement != null && displacement.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == 1) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
	if(displacement == null) throw "Error: Cannot displace Shape by null Vec2";
	if(displacement.lsq() > 0) {
		if(this.zpp_inner.type == 0) this.zpp_inner.circle.__translate((function($this) {
			var $r;
			if(displacement != null && displacement.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			displacement.zpp_inner.validate();
			$r = displacement.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(displacement != null && displacement.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			displacement.zpp_inner.validate();
			$r = displacement.zpp_inner.y;
			return $r;
		}(this))); else this.zpp_inner.polygon.__translate((function($this) {
			var $r;
			if(displacement != null && displacement.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			displacement.zpp_inner.validate();
			$r = displacement.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(displacement != null && displacement.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			displacement.zpp_inner.validate();
			$r = displacement.zpp_inner.y;
			return $r;
		}(this)));
	}
	if(displacement.zpp_inner.weak) {
		displacement.dispose();
		true;
	} else false;
}
nape.shape.Shape.prototype.scale = function(scalex,scaley) {
	if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == 1) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
	if(scalex != scalex || scaley != scaley) throw "Error: Cannot scale Shape by NaN";
	if(scalex != 0 && scaley != 0) {
		if(this.zpp_inner.type == 0) {
			var d = scalex * scalex - scaley * scaley;
			if(d * d < 1e-8) this.zpp_inner.circle.__scale(scalex,scaley); else throw "Error: Cannot perform a non equal scaling on a Circle";
		} else this.zpp_inner.polygon.__scale(scalex,scaley);
	}
}
nape.shape.Shape.prototype.rotate = function(angle) {
	if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == 1) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
	if(angle != angle) throw "Error: Cannot rotate Shape by NaN";
	var dr = angle % (2 * Math.PI);
	if(dr != 0.0) {
		var cos = Math.cos(angle);
		var sin = Math.sin(angle);
		if(this.zpp_inner.type == 0) this.zpp_inner.circle.__rotate(sin,cos); else this.zpp_inner.polygon.__rotate(sin,cos);
	}
}
nape.shape.Shape.prototype.transform = function(matrix) {
	if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == 1) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
	if(matrix == null) throw "Error: Cannot transform Shape by null matrix";
	if(matrix.singular()) throw "Error: Cannot transform Shape by a singular matrix";
	if(this.zpp_inner.type == 0) {
		if(matrix.equiorthogonal()) this.zpp_inner.circle.__transform(matrix); else throw "Error: Cannot transform Circle by a non equiorthogonal matrix";
	} else this.zpp_inner.polygon.__transform(matrix);
}
nape.shape.Shape.prototype.contains = function(point) {
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(point == null) throw "Cannot check null point for containment";
	if((this.zpp_inner.body != null?this.zpp_inner.body.outer:null) == null) throw "Error: Shape is not well defined without a Body";
	zpp_nape.geom.ZPP_Geom.validateShape(this.zpp_inner);
	return zpp_nape.geom.ZPP_Collide.shapeContains(this.zpp_inner,point.zpp_inner);
}
nape.shape.Shape.prototype.toString = function() {
	var ret = this.zpp_inner.type == 0?"Circle":"Polygon";
	return ret + "#" + this.zpp_inner.id;
}
nape.shape.Shape.prototype.__class__ = nape.shape.Shape;
nape.shape.Polygon = function(localVerts,material,filter,cbType) {
	if( localVerts === $_ ) return;
	try {
		nape.shape.Shape.call(this);
	} catch( e ) {
	}
	if(localVerts == null) throw "Error: localVerts cannot be null";
	this.zpp_inner_zn = new zpp_nape.shape.ZPP_Polygon();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	if(Std["is"](localVerts,Array)) {
		var lv = localVerts;
		var _g = 0;
		while(_g < lv.length) {
			var vite = lv[_g];
			++_g;
			if(vite == null) throw "Error: Array<Vec2> contains null objects";
			if(!Std["is"](vite,nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
			var x = vite;
			if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			((function($this) {
				var $r;
				if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.get_lverts();
				$r = $this.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).push((function($this) {
				var $r;
				if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$r = nape.geom.Vec2.get((function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x.zpp_inner.validate();
					$r = x.zpp_inner.x;
					return $r;
				}($this)),(function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x.zpp_inner.validate();
					$r = x.zpp_inner.y;
					return $r;
				}($this)),false);
				return $r;
			}(this)));
		}
	} else if(Std["is"](localVerts,nape.geom.Vec2List)) {
		var lv = localVerts;
		var $it0 = lv.iterator();
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(x == null) throw "Error: Vec2List contains null objects";
			if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			((function($this) {
				var $r;
				if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.get_lverts();
				$r = $this.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).push((function($this) {
				var $r;
				if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$r = nape.geom.Vec2.get((function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x.zpp_inner.validate();
					$r = x.zpp_inner.x;
					return $r;
				}($this)),(function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x.zpp_inner.validate();
					$r = x.zpp_inner.y;
					return $r;
				}($this)),false);
				return $r;
			}(this)));
		}
	} else if(Std["is"](localVerts,nape.geom.GeomPoly)) {
		var lv = localVerts;
		var verts = lv.zpp_inner.vertices;
		if(verts != null) {
			var vite = verts;
			do {
				var x = nape.geom.Vec2.get(vite.x,vite.y,null);
				vite = vite.next;
				((function($this) {
					var $r;
					if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.get_lverts();
					$r = $this.zpp_inner_zn.wrap_lverts;
					return $r;
				}(this))).push((function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					$r = nape.geom.Vec2.get((function($this) {
						var $r;
						if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						x.zpp_inner.validate();
						$r = x.zpp_inner.x;
						return $r;
					}($this)),(function($this) {
						var $r;
						if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						x.zpp_inner.validate();
						$r = x.zpp_inner.y;
						return $r;
					}($this)),false);
					return $r;
				}(this)));
				x.dispose();
			} while(vite != verts);
		}
	} else throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash9+ flash.Vector<Vec2>";
	if(Std["is"](localVerts,Array)) {
		var lv = localVerts;
		var i = 0;
		while(i < lv.length) {
			var cur = lv[i];
			if(cur.zpp_inner.weak?(function($this) {
				var $r;
				cur.dispose();
				$r = true;
				return $r;
			}(this)):false) {
				lv.splice(i,1);
				continue;
			}
			i++;
		}
	} else if(Std["is"](localVerts,nape.geom.Vec2List)) {
		var lv = localVerts;
		var ins = lv.zpp_inner.inner;
		var pre = null;
		var cur = ins.head;
		while(cur != null) {
			var x = cur.elt;
			if(x.outer.zpp_inner.weak) {
				cur = ins.erase(pre);
				if(x.outer.zpp_inner.weak) {
					x.outer.dispose();
					true;
				} else false;
			} else {
				pre = cur;
				cur = cur.next;
			}
		}
	}
	if(material == null) this.zpp_inner.material = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.phys.ZPP_Material.zpp_pool == null) ret = new zpp_nape.phys.ZPP_Material(); else {
			ret = zpp_nape.phys.ZPP_Material.zpp_pool;
			zpp_nape.phys.ZPP_Material.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this)); else {
		if(material == null) throw "Error: Cannot assign null as Shape material";
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) this.zpp_inner.filter = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) ret = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
			ret = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this)); else {
		if(filter == null) throw "Error: Cannot assign null as Shape filter";
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	if(cbType == null) this.zpp_inner.cbType = zpp_nape.callbacks.ZPP_CbType.DEFAULT; else {
		if(cbType == null) throw "Error: Cannot assign null CbType to Shape";
		this.zpp_inner.setCbType(cbType.zpp_inner);
		this.zpp_inner.cbType.wrapper();
	}
}
nape.shape.Polygon.__name__ = ["nape","shape","Polygon"];
nape.shape.Polygon.__super__ = nape.shape.Shape;
for(var k in nape.shape.Shape.prototype ) nape.shape.Polygon.prototype[k] = nape.shape.Shape.prototype[k];
nape.shape.Polygon.copy = function(polygon) {
	if(polygon == null) throw "Error: Cannot copy null polygon";
	return polygon.zpp_inner.copy().flibget_polygon();
}
nape.shape.Polygon.rect = function(x,y,width,height,weak) {
	if(weak == null) weak = false;
	if(x != x || y != y || width != width || height != height) throw "Error: Polygon.rect cannot accept NaN arguments";
	return [nape.geom.Vec2.get(x,y,weak),nape.geom.Vec2.get(x + width,y,weak),nape.geom.Vec2.get(x + width,y + height,weak),nape.geom.Vec2.get(x,y + height,weak)];
}
nape.shape.Polygon.box = function(width,height,weak) {
	if(weak == null) weak = false;
	if(width != width || height != height) throw "Error: Polygon.box cannot accept NaN arguments";
	return nape.shape.Polygon.rect(-width / 2,-height / 2,width,height,weak);
}
nape.shape.Polygon.regular = function(width,height,edgeCount,angleOffset,weak) {
	if(weak == null) weak = false;
	if(angleOffset == null) angleOffset = 0.0;
	if(width != width || height != height || angleOffset != angleOffset) throw "Error: Polygon.regular cannot accept NaN arguments";
	var ret = [];
	var dangle = Math.PI * 2 / edgeCount;
	var _g = 0;
	while(_g < edgeCount) {
		var i = _g++;
		var ang = i * dangle + angleOffset;
		var x = nape.geom.Vec2.get(Math.cos(ang) * width / 2,Math.sin(ang) * height / 2,weak);
		ret.push(x);
	}
	return ret;
}
nape.shape.Polygon.prototype.zpp_inner_zn = null;
nape.shape.Polygon.prototype.localVerts = null;
nape.shape.Polygon.prototype.flibget_localVerts = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.get_lverts();
		$r = $this.zpp_inner_zn.wrap_lverts;
		return $r;
	}(this));
}
nape.shape.Polygon.prototype.worldVerts = null;
nape.shape.Polygon.prototype.flibget_worldVerts = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_gverts == null) $this.zpp_inner_zn.get_gverts();
		$r = $this.zpp_inner_zn.wrap_gverts;
		return $r;
	}(this));
}
nape.shape.Polygon.prototype.edges = null;
nape.shape.Polygon.prototype.flibget_edges = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_edges == null) $this.zpp_inner_zn.get_edges();
		$r = $this.zpp_inner_zn.wrap_edges;
		return $r;
	}(this));
}
nape.shape.Polygon.prototype.validity = function() {
	return this.zpp_inner_zn.valid();
}
nape.shape.Polygon.prototype.__class__ = nape.shape.Polygon;
nape.constraint.ConstraintList = function(p) {
	if( p === $_ ) return;
	this.zpp_inner = new zpp_nape.util.ZPP_ConstraintList();
	this.zpp_inner.outer = this;
}
nape.constraint.ConstraintList.__name__ = ["nape","constraint","ConstraintList"];
nape.constraint.ConstraintList.fromArray = function(array) {
	var ret = new nape.constraint.ConstraintList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.constraint.ConstraintList.prototype.zpp_inner = null;
nape.constraint.ConstraintList.prototype.length = null;
nape.constraint.ConstraintList.prototype.flibget_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.length;
	}
	return this.zpp_inner.user_length;
}
nape.constraint.ConstraintList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
}
nape.constraint.ConstraintList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.flibget_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.flibget_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.outer;
}
nape.constraint.ConstraintList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.constraint.ConstraintList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.constraint.ConstraintList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx = ret.outer;
	return retx;
}
nape.constraint.ConstraintList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx = ret.outer;
	return retx;
}
nape.constraint.ConstraintList.prototype.add = function(obj) {
	return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
}
nape.constraint.ConstraintList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret = (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var x = cx_ite.elt;
				if(x == obj.zpp_inner) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
}
nape.constraint.ConstraintList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
}
nape.constraint.ConstraintList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
}
nape.constraint.ConstraintList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.iterators == null) this.zpp_inner.iterators = new zpp_nape.util.ZNPList_ConstraintIterator();
	return nape.constraint.ConstraintIterator.get(this);
}
nape.constraint.ConstraintList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.constraint.ConstraintList();
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_ConstraintIterator();
		$r = nape.constraint.ConstraintIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Constraint" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
}
nape.constraint.ConstraintList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var $it0 = (function($this) {
		var $r;
		xs.zpp_inner.valmod();
		if(xs.zpp_inner.iterators == null) xs.zpp_inner.iterators = new zpp_nape.util.ZNPList_ConstraintIterator();
		$r = nape.constraint.ConstraintIterator.get(xs);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(!this.has(x)) if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
	}
}
nape.constraint.ConstraintList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_ConstraintIterator();
		$r = nape.constraint.ConstraintIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		if(!fst) ret += ",";
		ret += i == null?"NULL":"{Constraint}";
		fst = false;
	}
	return ret + "]";
}
nape.constraint.ConstraintList.prototype.__class__ = nape.constraint.ConstraintList;
nape.constraint.ConstraintIterator = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_ConstraintList.internal) throw "Error: Cannot instantiate " + "Constraint" + "Iterator derp!";
}
nape.constraint.ConstraintIterator.__name__ = ["nape","constraint","ConstraintIterator"];
nape.constraint.ConstraintIterator.zpp_pool = null;
nape.constraint.ConstraintIterator.get = function(list) {
	var ret = nape.constraint.ConstraintIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_ConstraintList.internal = true;
		var ret = new nape.constraint.ConstraintIterator();
		zpp_nape.util.ZPP_ConstraintList.internal = false;
		$r = ret;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.constraint.ConstraintIterator.zpp_pool;
		nape.constraint.ConstraintIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	list.zpp_inner.iterators.add(ret);
	return ret;
}
nape.constraint.ConstraintIterator.prototype.zpp_inner = null;
nape.constraint.ConstraintIterator.prototype.zpp_i = null;
nape.constraint.ConstraintIterator.prototype.zpp_critical = null;
nape.constraint.ConstraintIterator.prototype.zpp_next = null;
nape.constraint.ConstraintIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.flibget_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.constraint.ConstraintIterator.zpp_pool;
		nape.constraint.ConstraintIterator.zpp_pool = this;
		this.zpp_inner.zpp_inner.iterators.remove(this);
		return false;
	}
}
nape.constraint.ConstraintIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
}
nape.constraint.ConstraintIterator.prototype.__class__ = nape.constraint.ConstraintIterator;
zpp_nape.geom.ZPP_AABB = function(p) {
}
zpp_nape.geom.ZPP_AABB.__name__ = ["zpp_nape","geom","ZPP_AABB"];
zpp_nape.geom.ZPP_AABB.zpp_pool = null;
zpp_nape.geom.ZPP_AABB.get = function(minx,miny,maxx,maxy) {
	var ret = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) ret = new zpp_nape.geom.ZPP_AABB(); else {
			ret = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	ret.minx = minx;
	ret.miny = miny;
	ret.maxx = maxx;
	ret.maxy = maxy;
	return ret;
}
zpp_nape.geom.ZPP_AABB.prototype._invalidate = null;
zpp_nape.geom.ZPP_AABB.prototype._validate = null;
zpp_nape.geom.ZPP_AABB.prototype.immutable = null;
zpp_nape.geom.ZPP_AABB.prototype.validate = function() {
	if(this._validate != null) this._validate();
}
zpp_nape.geom.ZPP_AABB.prototype.invalidate = function() {
	if(this._invalidate != null) this._invalidate(this);
}
zpp_nape.geom.ZPP_AABB.prototype.outer = null;
zpp_nape.geom.ZPP_AABB.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new nape.geom.AABB();
		var o = this.outer.zpp_inner;
		{
			if(o.outer != null) o.outer.zpp_inner = null;
			o.outer = null;
			o.wrap_min = o.wrap_max = null;
			o._invalidate = null;
			o._validate = null;
		}
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
}
zpp_nape.geom.ZPP_AABB.prototype.next = null;
zpp_nape.geom.ZPP_AABB.prototype.alloc = function() {
}
zpp_nape.geom.ZPP_AABB.prototype.free = function() {
	if(this.outer != null) this.outer.zpp_inner = null;
	this.outer = null;
	this.wrap_min = this.wrap_max = null;
	this._invalidate = null;
	this._validate = null;
}
zpp_nape.geom.ZPP_AABB.prototype.copy = function() {
	return zpp_nape.geom.ZPP_AABB.get(this.minx,this.miny,this.maxx,this.maxy);
}
zpp_nape.geom.ZPP_AABB.prototype.width = function() {
	return this.maxx - this.minx;
}
zpp_nape.geom.ZPP_AABB.prototype.height = function() {
	return this.maxy - this.miny;
}
zpp_nape.geom.ZPP_AABB.prototype.perimeter = function() {
	return (this.maxx - this.minx + (this.maxy - this.miny)) * 2;
}
zpp_nape.geom.ZPP_AABB.prototype.minx = null;
zpp_nape.geom.ZPP_AABB.prototype.miny = null;
zpp_nape.geom.ZPP_AABB.prototype.wrap_min = null;
zpp_nape.geom.ZPP_AABB.prototype.get_min = function() {
	if(this.wrap_min == null) {
		this.wrap_min = nape.geom.Vec2.get(this.minx,this.miny,null);
		this.wrap_min.zpp_inner.inuse = true;
		if(this.immutable) this.wrap_min.zpp_inner.immutable = true; else this.wrap_min.zpp_inner._invalidate = $closure(this,"mod_min");
		this.wrap_min.zpp_inner._validate = $closure(this,"dom_min");
	}
	return this.wrap_min;
}
zpp_nape.geom.ZPP_AABB.prototype.dom_min = function() {
	if(this._validate != null) this._validate();
	this.wrap_min.zpp_inner.x = this.minx;
	this.wrap_min.zpp_inner.y = this.miny;
}
zpp_nape.geom.ZPP_AABB.prototype.mod_min = function(min) {
	if(min.x != this.minx || min.y != this.miny) {
		this.minx = min.x;
		this.miny = min.y;
		if(this._invalidate != null) this._invalidate(this);
	}
}
zpp_nape.geom.ZPP_AABB.prototype.maxx = null;
zpp_nape.geom.ZPP_AABB.prototype.maxy = null;
zpp_nape.geom.ZPP_AABB.prototype.wrap_max = null;
zpp_nape.geom.ZPP_AABB.prototype.get_max = function() {
	if(this.wrap_max == null) {
		this.wrap_max = nape.geom.Vec2.get(this.maxx,this.maxy,null);
		this.wrap_max.zpp_inner.inuse = true;
		if(this.immutable) this.wrap_max.zpp_inner.immutable = true; else this.wrap_max.zpp_inner._invalidate = $closure(this,"mod_max");
		this.wrap_max.zpp_inner._validate = $closure(this,"dom_max");
	}
	return this.wrap_max;
}
zpp_nape.geom.ZPP_AABB.prototype.dom_max = function() {
	if(this._validate != null) this._validate();
	this.wrap_max.zpp_inner.x = this.maxx;
	this.wrap_max.zpp_inner.y = this.maxy;
}
zpp_nape.geom.ZPP_AABB.prototype.mod_max = function(max) {
	if(max.x != this.maxx || max.y != this.maxy) {
		this.maxx = max.x;
		this.maxy = max.y;
		if(this._invalidate != null) this._invalidate(this);
	}
}
zpp_nape.geom.ZPP_AABB.prototype.intersectX = function(x) {
	return !(x.minx > this.maxx || this.minx > x.maxx);
}
zpp_nape.geom.ZPP_AABB.prototype.intersectY = function(x) {
	return !(x.miny > this.maxy || this.miny > x.maxy);
}
zpp_nape.geom.ZPP_AABB.prototype.intersect = function(x) {
	return x.miny <= this.maxy && this.miny <= x.maxy && x.minx <= this.maxx && this.minx <= x.maxx;
}
zpp_nape.geom.ZPP_AABB.prototype.combine = function(x) {
	if(x.minx < this.minx) this.minx = x.minx;
	if(x.maxx > this.maxx) this.maxx = x.maxx;
	if(x.miny < this.miny) this.miny = x.miny;
	if(x.maxy > this.maxy) this.maxy = x.maxy;
}
zpp_nape.geom.ZPP_AABB.prototype.contains = function(x) {
	return x.minx >= this.minx && x.miny >= this.miny && x.maxx <= this.maxx && x.maxy <= this.maxy;
}
zpp_nape.geom.ZPP_AABB.prototype.containsPoint = function(v) {
	return v.x >= this.minx && v.x <= this.maxx && v.y >= this.miny && v.y <= this.maxy;
}
zpp_nape.geom.ZPP_AABB.prototype.set_combine = function(a,b) {
	this.minx = a.minx < b.minx?a.minx:b.minx;
	this.miny = a.miny < b.miny?a.miny:b.miny;
	this.maxx = a.maxx > b.maxx?a.maxx:b.maxx;
	this.maxy = a.maxy > b.maxy?a.maxy:b.maxy;
}
zpp_nape.geom.ZPP_AABB.prototype.set_expand = function(a,fatten) {
	this.minx = a.minx - fatten;
	this.miny = a.miny - fatten;
	this.maxx = a.maxx + fatten;
	this.maxy = a.maxy + fatten;
}
zpp_nape.geom.ZPP_AABB.prototype.set_expand_point = function(x,y) {
	if(x < this.minx) this.minx = x;
	if(x > this.maxx) this.maxx = x;
	if(y < this.miny) this.miny = y;
	if(y > this.maxy) this.maxy = y;
}
zpp_nape.geom.ZPP_AABB.prototype.toString = function() {
	return "{ x: " + this.minx + " y: " + this.miny + " w: " + (this.maxx - this.minx) + " h: " + (this.maxy - this.miny) + " }";
}
zpp_nape.geom.ZPP_AABB.prototype.__class__ = zpp_nape.geom.ZPP_AABB;
jeash.display.StageQuality = function() { }
jeash.display.StageQuality.__name__ = ["jeash","display","StageQuality"];
jeash.display.StageQuality.prototype.__class__ = jeash.display.StageQuality;
jeash.display.Tilesheet = function(bitmapData) {
	if( bitmapData === $_ ) return;
	this.jeashSurface = bitmapData.clone().mTextureBuffer;
	this.jeashBitmapData = bitmapData;
	this.jeashTileRects = [];
	this.jeashTileHotspots = [];
}
jeash.display.Tilesheet.__name__ = ["jeash","display","Tilesheet"];
jeash.display.Tilesheet.prototype.jeashTileRects = null;
jeash.display.Tilesheet.prototype.jeashTileHotspots = null;
jeash.display.Tilesheet.prototype.jeashSurface = null;
jeash.display.Tilesheet.prototype.jeashBitmapData = null;
jeash.display.Tilesheet.prototype.addTileRect = function(rect,hotspot) {
	this.jeashTileRects.push(rect.clone());
	if(hotspot != null) this.jeashTileHotspots.push(hotspot.clone()); else this.jeashTileHotspots.push(new jeash.geom.Point((rect.width - rect.x) / 2,(rect.height - rect.y) / 2));
}
jeash.display.Tilesheet.prototype.__class__ = jeash.display.Tilesheet;
if(typeof js=='undefined') js = {}
js.Boot = function() { }
js.Boot.__name__ = ["js","Boot"];
js.Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
}
js.Boot.__trace = function(v,i) {
	var msg = i != null?i.fileName + ":" + i.lineNumber + ": ":"";
	msg += js.Boot.__unhtml(js.Boot.__string_rec(v,"")) + "<br/>";
	var d = document.getElementById("haxe:trace");
	if(d == null) alert("No haxe:trace element defined\n" + msg); else d.innerHTML += msg;
}
js.Boot.__clear_trace = function() {
	var d = document.getElementById("haxe:trace");
	if(d != null) d.innerHTML = "";
}
js.Boot.__closure = function(o,f) {
	var m = o[f];
	if(m == null) return null;
	var f1 = function() {
		return m.apply(o,arguments);
	};
	f1.scope = o;
	f1.method = m;
	return f1;
}
js.Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ != null || o.__ename__ != null)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__ != null) {
				if(o.length == 2) return o[0];
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2, _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) str += "," + js.Boot.__string_rec(o[i],s); else str += js.Boot.__string_rec(o[i],s);
				}
				return str + ")";
			}
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g = 0;
			while(_g < l) {
				var i1 = _g++;
				str += (i1 > 0?",":"") + js.Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString) {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) { ;
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
}
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0, _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
}
js.Boot.__instanceof = function(o,cl) {
	try {
		if(o instanceof cl) {
			if(cl == Array) return o.__enum__ == null;
			return true;
		}
		if(js.Boot.__interfLoop(o.__class__,cl)) return true;
	} catch( e ) {
		if(cl == null) return false;
	}
	switch(cl) {
	case Int:
		return Math.ceil(o%2147483648.0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return o === true || o === false;
	case String:
		return typeof(o) == "string";
	case Dynamic:
		return true;
	default:
		if(o == null) return false;
		return o.__enum__ == cl || cl == Class && o.__name__ != null || cl == Enum && o.__ename__ != null;
	}
}
js.Boot.__init = function() {
	js.Lib.isIE = typeof document!='undefined' && document.all != null && typeof window!='undefined' && window.opera == null;
	js.Lib.isOpera = typeof window!='undefined' && window.opera != null;
	Array.prototype.copy = Array.prototype.slice;
	Array.prototype.insert = function(i,x) {
		this.splice(i,0,x);
	};
	Array.prototype.remove = Array.prototype.indexOf?function(obj) {
		var idx = this.indexOf(obj);
		if(idx == -1) return false;
		this.splice(idx,1);
		return true;
	}:function(obj) {
		var i = 0;
		var l = this.length;
		while(i < l) {
			if(this[i] == obj) {
				this.splice(i,1);
				return true;
			}
			i++;
		}
		return false;
	};
	Array.prototype.iterator = function() {
		return { cur : 0, arr : this, hasNext : function() {
			return this.cur < this.arr.length;
		}, next : function() {
			return this.arr[this.cur++];
		}};
	};
	if(String.prototype.cca == null) String.prototype.cca = String.prototype.charCodeAt;
	String.prototype.charCodeAt = function(i) {
		var x = this.cca(i);
		if(x != x) return null;
		return x;
	};
	var oldsub = String.prototype.substr;
	String.prototype.substr = function(pos,len) {
		if(pos != null && pos != 0 && len != null && len < 0) return "";
		if(len == null) len = this.length;
		if(pos < 0) {
			pos = this.length + pos;
			if(pos < 0) pos = 0;
		} else if(len < 0) len = this.length + len - pos;
		return oldsub.apply(this,[pos,len]);
	};
	$closure = js.Boot.__closure;
}
js.Boot.prototype.__class__ = js.Boot;
if(!zpp_nape.space) zpp_nape.space = {}
zpp_nape.space.ZPP_Island = function(p) {
	if( p === $_ ) return;
	this.comps = new zpp_nape.util.ZNPList_ZPP_Component();
	this.waket = 0;
}
zpp_nape.space.ZPP_Island.__name__ = ["zpp_nape","space","ZPP_Island"];
zpp_nape.space.ZPP_Island.zpp_pool = null;
zpp_nape.space.ZPP_Island.prototype.next = null;
zpp_nape.space.ZPP_Island.prototype.elem = function() {
	return this;
}
zpp_nape.space.ZPP_Island.prototype.begin = function() {
	return this.next;
}
zpp_nape.space.ZPP_Island.prototype.inuse = null;
zpp_nape.space.ZPP_Island.prototype.modified = null;
zpp_nape.space.ZPP_Island.prototype.pushmod = null;
zpp_nape.space.ZPP_Island.prototype.mcnt = null;
zpp_nape.space.ZPP_Island.prototype.set_begin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.space.ZPP_Island.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		o.inuse = true;
		$r = o;
		return $r;
	}(this));
	temp.next = this.next;
	this.next = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.space.ZPP_Island.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		var i = cx_ite;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.space.ZPP_Island.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.next;
	} else {
		var temp = (function($this) {
			var $r;
			o.inuse = true;
			$r = o;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.space.ZPP_Island.prototype.pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret.inuse = false;
	if(this.next == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.space.ZPP_Island.prototype.pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
}
zpp_nape.space.ZPP_Island.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.space.ZPP_Island.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.next;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		old.inuse = false;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.space.ZPP_Island.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.space.ZPP_Island.prototype.clear = function() {
}
zpp_nape.space.ZPP_Island.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.space.ZPP_Island.prototype.empty = function() {
	return this.next == null;
}
zpp_nape.space.ZPP_Island.prototype.size = function() {
	var cnt = 0;
	var cur = this.next;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.space.ZPP_Island.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.next;
			while(cx_ite != null) {
				var npite = cx_ite;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.space.ZPP_Island.prototype.front = function() {
	return this.next;
}
zpp_nape.space.ZPP_Island.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.space.ZPP_Island.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.space.ZPP_Island.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it:null;
}
zpp_nape.space.ZPP_Island.prototype.comps = null;
zpp_nape.space.ZPP_Island.prototype.sleep = null;
zpp_nape.space.ZPP_Island.prototype.waket = null;
zpp_nape.space.ZPP_Island.prototype.free = function() {
	this.waket = 0;
}
zpp_nape.space.ZPP_Island.prototype.alloc = function() {
}
zpp_nape.space.ZPP_Island.prototype.__class__ = zpp_nape.space.ZPP_Island;
zpp_nape.space.ZPP_Component = function(p) {
	if( p === $_ ) return;
	{
		this.sleeping = false;
		this.island = null;
		this.parent = this;
		this.rank = 0;
	}
	this.woken = false;
}
zpp_nape.space.ZPP_Component.__name__ = ["zpp_nape","space","ZPP_Component"];
zpp_nape.space.ZPP_Component.zpp_pool = null;
zpp_nape.space.ZPP_Component.prototype.next = null;
zpp_nape.space.ZPP_Component.prototype.parent = null;
zpp_nape.space.ZPP_Component.prototype.rank = null;
zpp_nape.space.ZPP_Component.prototype.isBody = null;
zpp_nape.space.ZPP_Component.prototype.body = null;
zpp_nape.space.ZPP_Component.prototype.constraint = null;
zpp_nape.space.ZPP_Component.prototype.island = null;
zpp_nape.space.ZPP_Component.prototype.sleeping = null;
zpp_nape.space.ZPP_Component.prototype.waket = null;
zpp_nape.space.ZPP_Component.prototype.woken = null;
zpp_nape.space.ZPP_Component.prototype.free = function() {
	this.body = null;
	this.constraint = null;
}
zpp_nape.space.ZPP_Component.prototype.alloc = function() {
}
zpp_nape.space.ZPP_Component.prototype.reset = function() {
	this.sleeping = false;
	this.island = null;
	this.parent = this;
	this.rank = 0;
}
zpp_nape.space.ZPP_Component.prototype.__class__ = zpp_nape.space.ZPP_Component;
zpp_nape.space.ZPP_Space = function(gravity,broadphase) {
	if( gravity === $_ ) return;
	this.pre_dt = 0.0;
	if(broadphase == null || broadphase == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
		return $r;
	}(this))) this.bphase = new zpp_nape.space.ZPP_DynAABBPhase(this); else if(broadphase == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
		return $r;
	}(this))) this.bphase = new zpp_nape.space.ZPP_SweepPhase(this);
	this.time = 0.0;
	var me = this;
	if(gravity != null) {
		this.gravityx = gravity.x;
		this.gravityy = gravity.y;
	} else {
		this.gravityx = 0;
		this.gravityy = 0;
	}
	this.bodies = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_bodies = zpp_nape.util.ZPP_BodyList.get(this.bodies,null);
	this.wrap_bodies.zpp_inner.adder = function(x) {
		if(x.zpp_inner.space != me) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_bodies.remove(x);
			me.addBody(x.zpp_inner,0);
			return true;
		} else return false;
	};
	this.wrap_bodies.zpp_inner.subber = function(x) {
		me.removeBody(x.zpp_inner,0);
	};
	this.statics = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_statics = zpp_nape.util.ZPP_BodyList.get(this.statics,null);
	this.wrap_statics.zpp_inner.adder = function(x) {
		if([null,(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
			return $r;
		}(this))][x.zpp_inner.type] != (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this))) throw "Error: Cannot add non-" + "static" + " Body to " + "static" + "s list";
		if(x.zpp_inner.space != me) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_statics.remove(x);
			me.addBody(x.zpp_inner,1);
			return true;
		} else return false;
	};
	this.wrap_statics.zpp_inner.subber = function(x) {
		me.removeBody(x.zpp_inner,1);
	};
	this.dynamics = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_dynamics = zpp_nape.util.ZPP_BodyList.get(this.dynamics,null);
	this.wrap_dynamics.zpp_inner.adder = function(x) {
		if([null,(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
			return $r;
		}(this))][x.zpp_inner.type] != (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
			return $r;
		}(this))) throw "Error: Cannot add non-" + "dynamic" + " Body to " + "dynamic" + "s list";
		if(x.zpp_inner.space != me) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_dynamics.remove(x);
			me.addBody(x.zpp_inner,2);
			return true;
		} else return false;
	};
	this.wrap_dynamics.zpp_inner.subber = function(x) {
		me.removeBody(x.zpp_inner,2);
	};
	this.kinematics = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_kinematics = zpp_nape.util.ZPP_BodyList.get(this.kinematics,null);
	this.wrap_kinematics.zpp_inner.adder = function(x) {
		if([null,(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
			return $r;
		}(this))][x.zpp_inner.type] != (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
			return $r;
		}(this))) throw "Error: Cannot add non-" + "kinematic" + " Body to " + "kinematic" + "s list";
		if(x.zpp_inner.space != me) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_kinematics.remove(x);
			me.addBody(x.zpp_inner,3);
			return true;
		} else return false;
	};
	this.wrap_kinematics.zpp_inner.subber = function(x) {
		me.removeBody(x.zpp_inner,3);
	};
	this.c_arbiters_true = new zpp_nape.util.ZNPList_ZPP_ColArbiter();
	this.c_arbiters_false = new zpp_nape.util.ZNPList_ZPP_ColArbiter();
	this.f_arbiters = new zpp_nape.util.ZNPList_ZPP_FluidArbiter();
	this.s_arbiters = new zpp_nape.util.ZNPList_ZPP_SensorArbiter();
	this.map_arb = new zpp_nape.util.FastHash2_ZPP_Arbiter();
	this.islands = new zpp_nape.space.ZPP_Island();
	this.live = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_live = zpp_nape.util.ZPP_BodyList.get(this.live,true);
	this.staticsleep = new zpp_nape.util.ZNPList_ZPP_Body();
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.constraints,null);
	this.wrap_constraints.zpp_inner.adder = function(x) {
		if(x.zpp_inner.space != me) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(x);
			me.addConstraint(x.zpp_inner);
			return true;
		} else return false;
	};
	this.wrap_constraints.zpp_inner.subber = function(x) {
		me.remConstraint(x.zpp_inner);
	};
	this.live_constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.wrap_livecon = zpp_nape.util.ZPP_ConstraintList.get(this.live_constraints,true);
	this.__static = zpp_nape.phys.ZPP_Body.__static();
	this.__static.zpp_inner.space = this;
	this.callbacks = new zpp_nape.callbacks.ZPP_Callback();
	this.midstep = false;
	this.listeners = new zpp_nape.util.ZNPList_ZPP_Listener();
	this.wrap_listeners = zpp_nape.util.ZPP_ListenerList.get(this.listeners,null);
	this.wrap_listeners.zpp_inner.adder = function(x) {
		if(x.zpp_inner.space != me) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(x);
			me.addListener(x.zpp_inner);
			return true;
		} else return false;
	};
	this.wrap_listeners.zpp_inner.subber = function(x) {
		me.remListener(x.zpp_inner);
	};
}
zpp_nape.space.ZPP_Space.__name__ = ["zpp_nape","space","ZPP_Space"];
zpp_nape.space.ZPP_Space.prototype.outer = null;
zpp_nape.space.ZPP_Space.prototype.gravityx = null;
zpp_nape.space.ZPP_Space.prototype.gravityy = null;
zpp_nape.space.ZPP_Space.prototype.wrap_gravity = null;
zpp_nape.space.ZPP_Space.prototype.getgravity = function() {
	var me = this;
	this.wrap_gravity = nape.geom.Vec2.get(this.gravityx,this.gravityy,null);
	this.wrap_gravity.zpp_inner.inuse = true;
	this.wrap_gravity.zpp_inner._invalidate = function(x) {
		me.gravityx = x.x;
		me.gravityy = x.y;
		var cx_ite = me.bodies.head;
		while(cx_ite != null) {
			var b = cx_ite.elt;
			me.wake(b);
			cx_ite = cx_ite.next;
		}
	};
	this.wrap_gravity.zpp_inner._validate = function() {
		me.wrap_gravity.zpp_inner.x = me.gravityx;
		me.wrap_gravity.zpp_inner.y = me.gravityy;
	};
}
zpp_nape.space.ZPP_Space.prototype.bodies = null;
zpp_nape.space.ZPP_Space.prototype.wrap_bodies = null;
zpp_nape.space.ZPP_Space.prototype.statics = null;
zpp_nape.space.ZPP_Space.prototype.wrap_statics = null;
zpp_nape.space.ZPP_Space.prototype.dynamics = null;
zpp_nape.space.ZPP_Space.prototype.wrap_dynamics = null;
zpp_nape.space.ZPP_Space.prototype.kinematics = null;
zpp_nape.space.ZPP_Space.prototype.wrap_kinematics = null;
zpp_nape.space.ZPP_Space.prototype.constraints = null;
zpp_nape.space.ZPP_Space.prototype.wrap_constraints = null;
zpp_nape.space.ZPP_Space.prototype.bphase = null;
zpp_nape.space.ZPP_Space.prototype.__static = null;
zpp_nape.space.ZPP_Space.prototype.stamp = null;
zpp_nape.space.ZPP_Space.prototype.midstep = null;
zpp_nape.space.ZPP_Space.prototype.time = null;
zpp_nape.space.ZPP_Space.prototype.c_arbiters_true = null;
zpp_nape.space.ZPP_Space.prototype.c_arbiters_false = null;
zpp_nape.space.ZPP_Space.prototype.f_arbiters = null;
zpp_nape.space.ZPP_Space.prototype.s_arbiters = null;
zpp_nape.space.ZPP_Space.prototype.map_arb = null;
zpp_nape.space.ZPP_Space.prototype.wrap_arbiters = null;
zpp_nape.space.ZPP_Space.prototype.live = null;
zpp_nape.space.ZPP_Space.prototype.wrap_live = null;
zpp_nape.space.ZPP_Space.prototype.live_constraints = null;
zpp_nape.space.ZPP_Space.prototype.wrap_livecon = null;
zpp_nape.space.ZPP_Space.prototype.staticsleep = null;
zpp_nape.space.ZPP_Space.prototype.islands = null;
zpp_nape.space.ZPP_Space.prototype.listeners = null;
zpp_nape.space.ZPP_Space.prototype.wrap_listeners = null;
zpp_nape.space.ZPP_Space.prototype.callbacks = null;
zpp_nape.space.ZPP_Space.prototype.wrap_callbacks = null;
zpp_nape.space.ZPP_Space.prototype.clear = function() {
	this.callbacks.clear();
	while(!(this.listeners.head == null)) {
		var c = this.listeners.pop_unsafe();
		this.remListener(c);
	}
	while(!(this.c_arbiters_true.head == null)) {
		var arb = this.c_arbiters_true.pop_unsafe();
		arb.retire();
	}
	while(!(this.c_arbiters_false.head == null)) {
		var arb = this.c_arbiters_false.pop_unsafe();
		arb.retire();
	}
	while(!(this.s_arbiters.head == null)) {
		var arb = this.s_arbiters.pop_unsafe();
		arb.retire();
	}
	while(!(this.f_arbiters.head == null)) {
		var arb = this.f_arbiters.pop_unsafe();
		arb.retire();
	}
	this.map_arb.clear();
	this.bphase.clear();
	while(!(this.bodies.head == null)) {
		var b = this.bodies.pop_unsafe();
		if(b.component != null) {
			var i = b.component.island;
			if(i != null) {
				while(!(i.comps.head == null)) {
					var c = i.comps.pop_unsafe();
					{
						c.sleeping = false;
						c.island = null;
						c.parent = c;
						c.rank = 0;
					}
				}
				var o = i;
				o.waket = 0;
				o.next = zpp_nape.space.ZPP_Island.zpp_pool;
				zpp_nape.space.ZPP_Island.zpp_pool = o;
			}
		}
		b.removedFromSpace();
		b.space = null;
	}
	this.statics.clear();
	this.dynamics.clear();
	this.kinematics.clear();
	while(!(this.constraints.head == null)) {
		var c = this.constraints.pop_unsafe();
		if(c.component != null) {
			var i = c.component.island;
			if(i != null) {
				while(!(i.comps.head == null)) {
					var c1 = i.comps.pop_unsafe();
					{
						c1.sleeping = false;
						c1.island = null;
						c1.parent = c1;
						c1.rank = 0;
					}
				}
				var o = i;
				o.waket = 0;
				o.next = zpp_nape.space.ZPP_Island.zpp_pool;
				zpp_nape.space.ZPP_Island.zpp_pool = o;
			}
		}
		if(c.active) c.inactiveOrOutSpace();
		c.space = null;
	}
	this.staticsleep.clear();
	this.live.clear();
	this.live_constraints.clear();
	this.stamp = 0;
	this.time = 0.0;
	this.gravityx = 0;
	this.gravityy = 0;
}
zpp_nape.space.ZPP_Space.prototype.addListener = function(x) {
	x.space = this;
	if(x.type == 0) x.body.addedToSpace(); else if(x.type == 1) x.constraint.addedToSpace();
}
zpp_nape.space.ZPP_Space.prototype.remListener = function(x) {
	x.space = null;
	if(x.type == 0) x.body.removedFromSpace(); else if(x.type == 1) x.constraint.removedFromSpace();
}
zpp_nape.space.ZPP_Space.prototype.transmitType = function(p,new_type) {
	this.wake(p);
	if(p.type == 2) {
		this.dynamics.remove(p);
		this.live.remove(p);
	} else if(p.type == 3) {
		this.kinematics.remove(p);
		this.staticsleep.remove(p);
	} else if(p.type == 1) {
		this.statics.remove(p);
		this.staticsleep.remove(p);
	}
	p.type = new_type;
	if(p.type == 2) this.dynamics.add(p); else if(p.type == 3) this.kinematics.add(p); else if(p.type == 1) this.statics.add(p);
	if(p.type == 1) this.static_validation(p);
	p.component.sleeping = true;
	this.wake(p,true);
}
zpp_nape.space.ZPP_Space.prototype.added_shape = function(s) {
	this.wake(s.body);
	this.bphase.insert(s);
	s.addedToSpace();
}
zpp_nape.space.ZPP_Space.prototype.removed_shape = function(s,deleting) {
	if(deleting == null) deleting = false;
	var body = s.body;
	if(!deleting) body.wake();
	var pre = null;
	var cx_ite = body.arbiters.head;
	while(cx_ite != null) {
		var xarb = cx_ite.elt;
		var rem = xarb.ws1 == s || xarb.ws2 == s;
		if(rem) {
			if(xarb.b1 != body && xarb.b1.type == 2) this.wake(xarb.b1);
			if(xarb.b2 != body && xarb.b2.type == 2) this.wake(xarb.b2);
			{
				xarb.cleared = true;
				if(body == null) {
					xarb.b1.arbiters.remove(xarb);
					xarb.b2.arbiters.remove(xarb);
				} else if(xarb.b1 == body) xarb.b2.arbiters.remove(xarb); else xarb.b1.arbiters.remove(xarb);
				this.map_arb.remove(xarb);
				if(xarb.pair != null) {
					xarb.pair.arb = null;
					xarb.pair = null;
				}
				xarb.active = false;
				this.f_arbiters.modified = true;
			}
			cx_ite = body.arbiters.erase(pre);
			continue;
		}
		pre = cx_ite;
		cx_ite = cx_ite.next;
	}
	this.bphase.remove(s);
	s.removedFromSpace();
}
zpp_nape.space.ZPP_Space.prototype.addConstraint = function(con) {
	con.space = this;
	if(con.active) con.activeInSpace();
	if(con.active) {
		con.component.sleeping = true;
		this.wake_constraint(con,true);
	}
}
zpp_nape.space.ZPP_Space.prototype.remConstraint = function(con) {
	if(con.active) {
		this.wake_constraint(con,true);
		this.live_constraints.remove(con);
	}
	if(con.active) con.inactiveOrOutSpace();
	con.space = null;
}
zpp_nape.space.ZPP_Space.prototype.addBody = function(body,flag) {
	if(flag == null) flag = -1;
	body.space = this;
	body.addedToSpace();
	body.component.sleeping = true;
	this.wake(body,true);
	var cx_ite = body.shapes.head;
	while(cx_ite != null) {
		var shape = cx_ite.elt;
		this.added_shape(shape);
		cx_ite = cx_ite.next;
	}
	if(body.type == 1) {
		this.static_validation(body);
		if(flag != 1) this.statics.add(body);
		if(flag != 0) this.bodies.add(body);
	} else if(body.type == 2) {
		if(flag != 2) this.dynamics.add(body);
		if(flag != 0) this.bodies.add(body);
	} else {
		if(flag != 3) this.kinematics.add(body);
		if(flag != 0) this.bodies.add(body);
	}
}
zpp_nape.space.ZPP_Space.prototype.removeBody = function(body,flag) {
	if(flag == null) flag = -1;
	if(body.type == 1) {
		if(flag != 1) this.statics.remove(body);
		if(flag != 0) this.bodies.remove(body);
		this.wake(body,true);
		this.staticsleep.remove(body);
	} else if(body.type == 2) {
		if(flag != 2) this.dynamics.remove(body);
		if(flag != 0) this.bodies.remove(body);
		this.wake(body,true);
		this.live.remove(body);
	} else {
		if(flag != 3) this.kinematics.remove(body);
		if(flag != 0) this.bodies.remove(body);
		this.wake(body,true);
		this.staticsleep.remove(body);
	}
	var cx_ite = body.shapes.head;
	while(cx_ite != null) {
		var shape = cx_ite.elt;
		this.removed_shape(shape,true);
		cx_ite = cx_ite.next;
	}
	body.removedFromSpace();
	body.space = null;
}
zpp_nape.space.ZPP_Space.prototype.shapesUnderPoint = function(x,y,filter) {
	return this.bphase.shapesUnderPoint(x,y,filter);
}
zpp_nape.space.ZPP_Space.prototype.bodiesUnderPoint = function(x,y,filter) {
	return this.bphase.bodiesUnderPoint(x,y,filter);
}
zpp_nape.space.ZPP_Space.prototype.shapesInAABB = function(aabb,strict,cont,filter) {
	return this.bphase.shapesInAABB(aabb.zpp_inner,strict,cont,filter);
}
zpp_nape.space.ZPP_Space.prototype.bodiesInAABB = function(aabb,strict,cont,filter) {
	return this.bphase.bodiesInAABB(aabb.zpp_inner,strict,cont,filter);
}
zpp_nape.space.ZPP_Space.prototype.shapesInCircle = function(pos,rad,cont,filter) {
	return this.bphase.shapesInCircle((function($this) {
		var $r;
		if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		pos.zpp_inner.validate();
		$r = pos.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		pos.zpp_inner.validate();
		$r = pos.zpp_inner.y;
		return $r;
	}(this)),rad,cont,filter);
}
zpp_nape.space.ZPP_Space.prototype.bodiesInCircle = function(pos,rad,cont,filter) {
	return this.bphase.bodiesInCircle((function($this) {
		var $r;
		if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		pos.zpp_inner.validate();
		$r = pos.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		pos.zpp_inner.validate();
		$r = pos.zpp_inner.y;
		return $r;
	}(this)),rad,cont,filter);
}
zpp_nape.space.ZPP_Space.prototype.shapesInShape = function(shape,cont,filter) {
	return this.bphase.shapesInShape(shape,cont,filter);
}
zpp_nape.space.ZPP_Space.prototype.bodiesInShape = function(shape,cont,filter) {
	return this.bphase.bodiesInShape(shape,cont,filter);
}
zpp_nape.space.ZPP_Space.prototype.rayCast = function(ray,inner,filter) {
	return this.bphase.rayCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner);
}
zpp_nape.space.ZPP_Space.prototype.rayMultiCast = function(ray,inner,filter) {
	return this.bphase.rayMultiCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner);
}
zpp_nape.space.ZPP_Space.prototype.any_handler = null;
zpp_nape.space.ZPP_Space.prototype.push_callback = function(i,hasHandler) {
	var cb = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.callbacks.ZPP_Callback.zpp_pool == null) ret = new zpp_nape.callbacks.ZPP_Callback(); else {
			ret = zpp_nape.callbacks.ZPP_Callback.zpp_pool;
			zpp_nape.callbacks.ZPP_Callback.zpp_pool = ret.next;
			ret.next = null;
		}
		{
			ret.arbiter = null;
			ret.body = null;
			ret.constraint = null;
		}
		$r = ret;
		return $r;
	}(this));
	this.callbacks.push(cb);
	cb.listener = i;
	cb.handler = hasHandler;
	this.any_handler = this.any_handler || hasHandler;
	return cb;
}
zpp_nape.space.ZPP_Space.prototype.pre_dt = null;
zpp_nape.space.ZPP_Space.prototype.step = function(deltaTime,velocityIterations,positionIterations) {
	this.time += deltaTime;
	this.pre_dt = deltaTime;
	this.any_handler = false;
	this.midstep = true;
	var elastic = velocityIterations >> 1;
	var inelastic = velocityIterations - elastic;
	this.stamp++;
	this.validation();
	this.bphase.broadphase();
	this.doForests(deltaTime);
	this.prestep(deltaTime);
	this.iterateVel(elastic,true);
	this.updateVel(deltaTime);
	this.warmStart();
	this.iterateVel(inelastic,false);
	var cx_ite = this.kinematics.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		cur.pre_posx = cur.posx;
		cur.pre_posy = cur.posy;
		cur.pre_rot = cur.rot;
		cx_ite = cx_ite.next;
	}
	var cx_ite = this.live.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		cur.pre_posx = cur.posx;
		cur.pre_posy = cur.posy;
		cur.pre_rot = cur.rot;
		cx_ite = cx_ite.next;
	}
	this.updatePos(deltaTime);
	this.iteratePos(positionIterations);
	var cx_ite = this.kinematics.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		if(!(cur.posx == cur.pre_posx && cur.posy == cur.pre_posy)) cur.invalidate_pos();
		cur.pre_posx = cur.posx;
		cur.pre_posy = cur.posy;
		if(cur.pre_rot != cur.rot) cur.invalidate_rot();
		cur.pre_rot = cur.rot;
		if(!this.bphase.is_sweep) {
			var cx_ite1 = cur.shapes.head;
			while(cx_ite1 != null) {
				var shape = cx_ite1.elt;
				this.bphase.sync(shape);
				cx_ite1 = cx_ite1.next;
			}
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite = this.live.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		if(!(cur.posx == cur.pre_posx && cur.posy == cur.pre_posy)) cur.invalidate_pos();
		cur.pre_posx = cur.posx;
		cur.pre_posy = cur.posy;
		if(cur.pre_rot != cur.rot) cur.invalidate_rot();
		cur.pre_rot = cur.rot;
		if(!this.bphase.is_sweep) {
			var cx_ite1 = cur.shapes.head;
			while(cx_ite1 != null) {
				var shape = cx_ite1.elt;
				this.bphase.sync(shape);
				cx_ite1 = cx_ite1.next;
			}
		}
		cx_ite = cx_ite.next;
	}
	while(!(this.staticsleep.head == null)) {
		var b = this.staticsleep.pop_unsafe();
		b.component.sleeping = true;
	}
	this.midstep = false;
	if(this.any_handler) {
		var cx_ite = this.callbacks.next;
		while(cx_ite != null) {
			var cb = cx_ite;
			if(cb.handler) {
				if(cb.listener.type == 0) {
					var o = cb.listener.body;
					o.handler(cb.body.outer);
				} else if(cb.listener.type == 1) {
					var o = cb.listener.constraint;
					o.handler(cb.constraint.outer);
				}
				cx_ite = this.callbacks.splice(cb);
				var o = cb;
				null;
				o.next = zpp_nape.callbacks.ZPP_Callback.zpp_pool;
				zpp_nape.callbacks.ZPP_Callback.zpp_pool = o;
				continue;
			}
			cx_ite = cx_ite.next;
		}
	}
}
zpp_nape.space.ZPP_Space.prototype.bodyCbWake = function(b) {
	if(b.type == 2 && b.cbType._bodywake != null) {
		if(this.midstep) {
			var i = b.cbType._bodywake;
			var cb = this.push_callback(i,i.handler != null);
			cb.event = 3;
			cb.body = b;
		} else b.component.woken = true;
	}
}
zpp_nape.space.ZPP_Space.prototype.bodyCbSleep = function(b) {
	if(b.type == 2 && b.cbType._bodysleep != null) {
		var i = b.cbType._bodysleep;
		var cb = this.push_callback(i,i.handler != null);
		cb.event = 4;
		cb.body = b;
	}
}
zpp_nape.space.ZPP_Space.prototype.constraintCbWake = function(con) {
	if(con.cbType._conwake != null) {
		if(this.midstep) {
			var i = con.cbType._conwake;
			var cb = this.push_callback(i,i.handler != null);
			cb.event = 3;
			cb.constraint = con;
		} else con.component.woken = true;
	}
}
zpp_nape.space.ZPP_Space.prototype.constraintCbSleep = function(con) {
	if(con.cbType._consleep != null) {
		var i = con.cbType._consleep;
		var cb = this.push_callback(i,i.handler != null);
		cb.event = 4;
		cb.constraint = con;
	}
}
zpp_nape.space.ZPP_Space.prototype.constraintCbBreak = function(con) {
	if(con.cbType._break != null) {
		var i = con.cbType._break;
		var cb = this.push_callback(i,i.handler != null);
		cb.event = 5;
		cb.constraint = con;
	}
}
zpp_nape.space.ZPP_Space.prototype.wakeIsland = function(i) {
	while(!(i.comps.head == null)) {
		var c = i.comps.pop_unsafe();
		c.waket = this.stamp + 1;
		if(c.isBody) {
			var b = c.body;
			this.live.add(b);
			var cx_ite = b.arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if(arb.sleeping) {
					arb.sleeping = false;
					arb.up_stamp += this.stamp - arb.sleep_stamp;
					if(arb.type == 0) {
						var carb = arb.colarb;
						if(carb.stat) this.c_arbiters_true.add(carb); else this.c_arbiters_false.add(carb);
					} else if(arb.type == 1) this.f_arbiters.add(arb.fluidarb); else this.s_arbiters.add(arb.sensorarb);
				}
				cx_ite = cx_ite.next;
			}
			this.bodyCbWake(b);
			{
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
			}
			if(!this.bphase.is_sweep && !(b.type == 1)) {
				var cx_ite = b.shapes.head;
				while(cx_ite != null) {
					var shape = cx_ite.elt;
					if(shape.node != null) this.bphase.sync(shape);
					cx_ite = cx_ite.next;
				}
			}
		} else {
			var con = c.constraint;
			this.live_constraints.add(con);
			this.constraintCbWake(con);
			{
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
			}
		}
	}
	var o = i;
	o.waket = 0;
	o.next = zpp_nape.space.ZPP_Island.zpp_pool;
	zpp_nape.space.ZPP_Island.zpp_pool = o;
}
zpp_nape.space.ZPP_Space.prototype.wake = function(o,fst) {
	if(fst == null) fst = false;
	if(!o.world) {
		o.component.waket = this.stamp + 1;
		if(o.component.sleeping) {
			if(o.component.island == null) {
				o.component.sleeping = false;
				if(o.type == 3 || o.type == 1) this.staticsleep.add(o); else this.live.add(o);
				if(!(o.type == 2)) {
					var cx_ite = o.constraints.head;
					while(cx_ite != null) {
						var con = cx_ite.elt;
						if(con.space == this) this.wake_constraint(con);
						cx_ite = cx_ite.next;
					}
					var cx_ite = o.arbiters.head;
					while(cx_ite != null) {
						var arb = cx_ite.elt;
						if(arb.sleeping) {
							arb.sleeping = false;
							arb.up_stamp += this.stamp - arb.sleep_stamp;
							if(arb.type == 0) {
								var carb = arb.colarb;
								if(carb.stat) this.c_arbiters_true.add(carb); else this.c_arbiters_false.add(carb);
							} else if(arb.type == 1) this.f_arbiters.add(arb.fluidarb); else this.s_arbiters.add(arb.sensorarb);
						}
						if(arb.type != 2 && !arb.cleared && arb.up_stamp == this.stamp) {
							if(arb.b1.type == 2 && arb.b1.component.sleeping) this.wake(arb.b1);
							if(arb.b2.type == 2 && arb.b2.component.sleeping) this.wake(arb.b2);
						}
						cx_ite = cx_ite.next;
					}
				} else if(!fst) this.bodyCbWake(o);
				if(!fst && !this.bphase.is_sweep && !(o.type == 1)) {
					var cx_ite = o.shapes.head;
					while(cx_ite != null) {
						var shape = cx_ite.elt;
						if(shape.node != null) this.bphase.sync(shape);
						cx_ite = cx_ite.next;
					}
				}
			} else this.wakeIsland(o.component.island);
			return true;
		} else return false;
	} else return true;
}
zpp_nape.space.ZPP_Space.prototype.wake_constraint = function(con,fst) {
	if(fst == null) fst = false;
	if(con.active) {
		con.component.waket = this.stamp + 1;
		if(con.component.sleeping) {
			if(con.component.island == null) {
				con.component.sleeping = false;
				this.live_constraints.add(con);
				con.wake_connected();
				if(!fst) this.constraintCbWake(con);
			} else this.wakeIsland(con.component.island);
			return true;
		} else return false;
	} else return false;
}
zpp_nape.space.ZPP_Space.prototype.doForests = function(dt) {
	var cx_ite = this.c_arbiters_false.head;
	while(cx_ite != null) {
		var arb = cx_ite.elt;
		if(!arb.cleared && arb.up_stamp == this.stamp) {
			if(arb.b1.type == 2 && arb.b2.type == 2) {
				var xr = arb.b1.component == arb.b1.component.parent?arb.b1.component:(function($this) {
					var $r;
					var obj = arb.b1.component;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt = stack.parent;
						stack.parent = obj;
						stack = nxt;
					}
					$r = obj;
					return $r;
				}(this));
				var yr = arb.b2.component == arb.b2.component.parent?arb.b2.component:(function($this) {
					var $r;
					var obj = arb.b2.component;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt = stack.parent;
						stack.parent = obj;
						stack = nxt;
					}
					$r = obj;
					return $r;
				}(this));
				if(xr != yr) {
					if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
						yr.parent = xr;
						xr.rank++;
					}
				}
			}
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite = this.f_arbiters.head;
	while(cx_ite != null) {
		var arb = cx_ite.elt;
		if(!arb.cleared && arb.up_stamp == this.stamp) {
			if(arb.b1.type == 2 && arb.b2.type == 2) {
				var xr = arb.b1.component == arb.b1.component.parent?arb.b1.component:(function($this) {
					var $r;
					var obj = arb.b1.component;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt = stack.parent;
						stack.parent = obj;
						stack = nxt;
					}
					$r = obj;
					return $r;
				}(this));
				var yr = arb.b2.component == arb.b2.component.parent?arb.b2.component:(function($this) {
					var $r;
					var obj = arb.b2.component;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt = stack.parent;
						stack.parent = obj;
						stack = nxt;
					}
					$r = obj;
					return $r;
				}(this));
				if(xr != yr) {
					if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
						yr.parent = xr;
						xr.rank++;
					}
				}
			}
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite = this.live_constraints.head;
	while(cx_ite != null) {
		var con = cx_ite.elt;
		con.forest();
		cx_ite = cx_ite.next;
	}
	while(!(this.live.head == null)) {
		var o = this.live.pop_unsafe();
		var oc = o.component;
		var root = oc == oc.parent?oc:(function($this) {
			var $r;
			var obj = oc;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		if(root.island == null) {
			root.island = (function($this) {
				var $r;
				var ret;
				if(zpp_nape.space.ZPP_Island.zpp_pool == null) ret = new zpp_nape.space.ZPP_Island(); else {
					ret = zpp_nape.space.ZPP_Island.zpp_pool;
					zpp_nape.space.ZPP_Island.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
				$r = ret;
				return $r;
			}(this));
			this.islands.add(root.island);
			root.island.sleep = true;
		}
		oc.island = root.island;
		oc.island.comps.add(oc);
		var rest = o.atRest(dt);
		oc.island.sleep = oc.island.sleep && rest;
		if(oc.waket > oc.island.waket) oc.island.waket = oc.waket;
	}
	while(!(this.live_constraints.head == null)) {
		var o = this.live_constraints.pop_unsafe();
		var oc = o.component;
		var root = oc == oc.parent?oc:(function($this) {
			var $r;
			var obj = oc;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		oc.island = root.island;
		oc.island.comps.add(oc);
		if(oc.waket > oc.island.waket) oc.island.waket = oc.waket;
	}
	while(!(this.islands.next == null)) {
		var i = this.islands.pop_unsafe();
		if(i.sleep) {
			var cx_ite = i.comps.head;
			while(cx_ite != null) {
				var c = cx_ite.elt;
				if(c.isBody) {
					var b = c.body;
					b.velx = 0;
					b.vely = 0;
					b.angvel = 0;
					b.forcex = 0;
					b.forcey = 0;
					b.torque = 0;
					c.sleeping = true;
					if(!this.bphase.is_sweep) {
						var cx_ite1 = b.shapes.head;
						while(cx_ite1 != null) {
							var shape = cx_ite1.elt;
							this.bphase.sync(shape);
							cx_ite1 = cx_ite1.next;
						}
					}
					this.bodyCbSleep(b);
				} else {
					var con = c.constraint;
					this.constraintCbSleep(con);
					c.sleeping = true;
				}
				cx_ite = cx_ite.next;
			}
		} else {
			while(!(i.comps.head == null)) {
				var c = i.comps.pop_unsafe();
				c.waket = i.waket;
				if(c.isBody) this.live.add(c.body); else this.live_constraints.add(c.constraint);
				{
					c.sleeping = false;
					c.island = null;
					c.parent = c;
					c.rank = 0;
				}
			}
			var o = i;
			o.waket = 0;
			o.next = zpp_nape.space.ZPP_Island.zpp_pool;
			zpp_nape.space.ZPP_Island.zpp_pool = o;
		}
	}
}
zpp_nape.space.ZPP_Space.prototype.static_validation = function(body) {
	body.validate_aabb();
	body.validate_mass();
	body.validate_inertia();
	if(body.velx != 0 || body.vely != 0 || body.angvel != 0) throw "Error: Static body cannot have any real velocity, only kinematic or surface velocities";
	var cx_ite = body.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(s.type == 1) {
			s.polygon.validate_gaxi();
			var res = s.polygon.valid();
			if(res != (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
				return $r;
			}(this))) throw "Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + (res == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
				return $r;
			}(this))?"VALID":res == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
				return $r;
			}(this))?"DEGENERATE":res == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES;
				return $r;
			}(this))?"DEGENERATE_EDGES":res == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
				return $r;
			}(this))?"CONCAVE":res == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
				return $r;
			}(this))?"SELF_INTERSECTING":"");
		}
		cx_ite = cx_ite.next;
	}
}
zpp_nape.space.ZPP_Space.prototype.validation = function() {
	var cx_ite = this.live.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		if(cur.shapes.head == null) throw "Error: Cannot simulate an empty Body";
		cur.validate_mass();
		cur.validate_inertia();
		cur.validate_aabb();
		if(cur.zip_gravMass) {
			cur.zip_gravMass = false;
			cur.validate_mass();
			if(cur.gravMassMode == 0) {
				cur.validate_mass();
				cur.gravMass = cur.cmass;
			} else if(cur.gravMassMode == 2) {
				cur.validate_mass();
				cur.gravMass = cur.cmass * cur.gravMassScale;
			}
		}
		if(cur.zip_worldCOM) {
			cur.zip_worldCOM = false;
			cur.validate_localCOM();
			if(cur.zip_axis) {
				cur.zip_axis = false;
				{
					cur.axisx = Math.sin(cur.rot);
					cur.axisy = Math.cos(cur.rot);
					null;
				}
			}
			cur.worldCOMx = cur.posx + (cur.axisy * cur.localCOMx - cur.axisx * cur.localCOMy);
			cur.worldCOMy = cur.posy + (cur.localCOMx * cur.axisx + cur.localCOMy * cur.axisy);
			if(cur.wrap_worldCOM != null) {
				cur.wrap_worldCOM.zpp_inner.x = cur.worldCOMx;
				cur.wrap_worldCOM.zpp_inner.y = cur.worldCOMy;
			}
		}
		if(cur.zip_axis) {
			cur.zip_axis = false;
			{
				cur.axisx = Math.sin(cur.rot);
				cur.axisy = Math.cos(cur.rot);
				null;
			}
		}
		var cx_ite1 = cur.shapes.head;
		while(cx_ite1 != null) {
			var s = cx_ite1.elt;
			if(s.type == 1) {
				var res = s.polygon.valid();
				if(res != (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
					return $r;
				}(this))) throw "Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + (res == (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
					return $r;
				}(this))?"VALID":res == (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
					return $r;
				}(this))?"DEGENERATE":res == (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES;
					return $r;
				}(this))?"DEGENERATE_EDGES":res == (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
					return $r;
				}(this))?"CONCAVE":res == (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
					return $r;
				}(this))?"SELF_INTERSECTING":"");
				s.polygon.validate_gaxi();
			}
			cx_ite1 = cx_ite1.next;
		}
		if(cur.component.woken) {
			var i = cur.cbType._bodywake;
			var cb = this.push_callback(i,i.handler != null);
			cb.event = 3;
			cb.body = cur;
		}
		cur.component.woken = false;
		cx_ite = cx_ite.next;
	}
	var cx_ite = this.kinematics.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		if(cur.shapes.head == null) throw "Error: Cannot simulate an empty Body";
		cur.validate_mass();
		cur.validate_inertia();
		cur.validate_aabb();
		if(cur.zip_gravMass) {
			cur.zip_gravMass = false;
			cur.validate_mass();
			if(cur.gravMassMode == 0) {
				cur.validate_mass();
				cur.gravMass = cur.cmass;
			} else if(cur.gravMassMode == 2) {
				cur.validate_mass();
				cur.gravMass = cur.cmass * cur.gravMassScale;
			}
		}
		if(cur.zip_worldCOM) {
			cur.zip_worldCOM = false;
			cur.validate_localCOM();
			if(cur.zip_axis) {
				cur.zip_axis = false;
				{
					cur.axisx = Math.sin(cur.rot);
					cur.axisy = Math.cos(cur.rot);
					null;
				}
			}
			cur.worldCOMx = cur.posx + (cur.axisy * cur.localCOMx - cur.axisx * cur.localCOMy);
			cur.worldCOMy = cur.posy + (cur.localCOMx * cur.axisx + cur.localCOMy * cur.axisy);
			if(cur.wrap_worldCOM != null) {
				cur.wrap_worldCOM.zpp_inner.x = cur.worldCOMx;
				cur.wrap_worldCOM.zpp_inner.y = cur.worldCOMy;
			}
		}
		if(cur.zip_axis) {
			cur.zip_axis = false;
			{
				cur.axisx = Math.sin(cur.rot);
				cur.axisy = Math.cos(cur.rot);
				null;
			}
		}
		var cx_ite1 = cur.shapes.head;
		while(cx_ite1 != null) {
			var s = cx_ite1.elt;
			if(s.type == 1) {
				var res = s.polygon.valid();
				if(res != (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
					return $r;
				}(this))) throw "Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + (res == (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
					return $r;
				}(this))?"VALID":res == (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
					return $r;
				}(this))?"DEGENERATE":res == (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES;
					return $r;
				}(this))?"DEGENERATE_EDGES":res == (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
					return $r;
				}(this))?"CONCAVE":res == (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
					return $r;
				}(this))?"SELF_INTERSECTING":"");
				s.polygon.validate_gaxi();
			}
			cx_ite1 = cx_ite1.next;
		}
		cx_ite = cx_ite.next;
	}
	var cx_ite = this.live_constraints.head;
	while(cx_ite != null) {
		var con = cx_ite.elt;
		if(con.active) {
			con.validate();
			if(con.component.woken) {
				var i = con.cbType._conwake;
				var cb = this.push_callback(i,i.handler != null);
				cb.event = 3;
				cb.constraint = con;
			}
			con.component.woken = false;
		}
		cx_ite = cx_ite.next;
	}
}
zpp_nape.space.ZPP_Space.prototype.updateVel = function(dt) {
	var pre = null;
	var cx_ite = this.live.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		var t = cur.gravMass;
		cur.forcex += this.gravityx * t;
		cur.forcey += this.gravityy * t;
		var t = -0.015 * cur.mass;
		cur.forcex += cur.velx * t;
		cur.forcey += cur.vely * t;
		if(cur.smass != 0.0) {
			var t = dt * cur.imass;
			cur.velx += cur.forcex * t;
			cur.vely += cur.forcey * t;
		}
		cur.forcex = 0;
		cur.forcey = 0;
		if(cur.sinertia != 0.0) {
			var dpx;
			var dpy;
			dpx = cur.worldCOMx - cur.posx;
			dpy = cur.worldCOMy - cur.posy;
			cur.torque += (this.gravityy * dpx - this.gravityx * dpy) * cur.gravMass;
			cur.torque -= cur.angvel * 0.015 * cur.inertia;
			cur.angvel += cur.torque * dt * cur.iinertia;
		}
		cur.torque = 0;
		pre = cx_ite;
		cx_ite = cx_ite.next;
	}
}
zpp_nape.space.ZPP_Space.prototype.updatePos = function(dt) {
	var cx_ite = this.live.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		var t = dt;
		cur.posx += cur.velx * t;
		cur.posy += cur.vely * t;
		if(cur.angvel != 0) cur.delta_rot(cur.angvel * dt);
		cx_ite = cx_ite.next;
	}
	var cx_ite = this.kinematics.head;
	while(cx_ite != null) {
		var cur = cx_ite.elt;
		var t = dt;
		cur.posx += cur.velx * t;
		cur.posy += cur.vely * t;
		if(cur.angvel != 0) cur.delta_rot(cur.angvel * dt);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.space.ZPP_Space.prototype.prestep = function(dt) {
	var pre = null;
	var cx_ite = this.live_constraints.head;
	while(cx_ite != null) {
		var con = cx_ite.elt;
		if(con.preStep(dt)) {
			cx_ite = this.live_constraints.erase(pre);
			if(con.removeOnBreak) {
				con.component.sleeping = true;
				this.remConstraint(con);
				this.constraints.remove(con);
			} else con.active = false;
			con.clearcache();
			this.constraintCbBreak(con);
			continue;
		}
		pre = cx_ite;
		cx_ite = cx_ite.next;
	}
	var pre1 = null;
	var cx_ite = this.c_arbiters_true.head;
	while(cx_ite != null) {
		var arb = cx_ite.elt;
		if(!arb.cleared && (arb.b1.component.sleeping && arb.b2.component.sleeping)) {
			arb.sleep_stamp = this.stamp;
			arb.sleeping = true;
			cx_ite = this.c_arbiters_true.erase(pre1);
			continue;
		}
		if(arb.cleared || (arb.type == 2 || arb.type == 1) && arb.up_stamp < this.stamp || arb.up_stamp + 6 < this.stamp) {
			if(!arb.cleared) this.map_arb.remove(arb);
			arb.retire();
			cx_ite = this.c_arbiters_true.erase(pre1);
			continue;
		}
		var pact = arb.active;
		arb.active = arb.up_stamp == this.stamp;
		if(!(arb.active?arb.preStep(dt):null)) arb.active = false;
		if(pact != arb.active) {
			arb.b1.arbiters.modified = true;
			arb.b2.arbiters.modified = true;
			this.c_arbiters_true.modified = true;
		}
		pre1 = cx_ite;
		cx_ite = cx_ite.next;
	}
	var pre1 = null;
	var cx_ite = this.c_arbiters_false.head;
	while(cx_ite != null) {
		var arb = cx_ite.elt;
		if(!arb.cleared && (arb.b1.component.sleeping && arb.b2.component.sleeping)) {
			arb.sleep_stamp = this.stamp;
			arb.sleeping = true;
			cx_ite = this.c_arbiters_false.erase(pre1);
			continue;
		}
		if(arb.cleared || (arb.type == 2 || arb.type == 1) && arb.up_stamp < this.stamp || arb.up_stamp + 6 < this.stamp) {
			if(!arb.cleared) this.map_arb.remove(arb);
			arb.retire();
			cx_ite = this.c_arbiters_false.erase(pre1);
			continue;
		}
		var pact = arb.active;
		arb.active = arb.up_stamp == this.stamp;
		if(!(arb.active?arb.preStep(dt):null)) arb.active = false;
		if(pact != arb.active) {
			arb.b1.arbiters.modified = true;
			arb.b2.arbiters.modified = true;
			this.c_arbiters_false.modified = true;
		}
		pre1 = cx_ite;
		cx_ite = cx_ite.next;
	}
	var pre1 = null;
	var cx_ite = this.f_arbiters.head;
	while(cx_ite != null) {
		var arb = cx_ite.elt;
		if(!arb.cleared && (arb.b1.component.sleeping && arb.b2.component.sleeping)) {
			arb.sleep_stamp = this.stamp;
			arb.sleeping = true;
			cx_ite = this.f_arbiters.erase(pre1);
			continue;
		}
		if(arb.cleared || (arb.type == 2 || arb.type == 1) && arb.up_stamp < this.stamp || arb.up_stamp + 6 < this.stamp) {
			if(!arb.cleared) this.map_arb.remove(arb);
			arb.retire();
			cx_ite = this.f_arbiters.erase(pre1);
			continue;
		}
		var pact = arb.active;
		arb.active = arb.up_stamp == this.stamp;
		if(!(function($this) {
			var $r;
			if(arb.active) arb.preStep($this,dt);
			$r = true;
			return $r;
		}(this))) arb.active = false;
		if(pact != arb.active) {
			arb.b1.arbiters.modified = true;
			arb.b2.arbiters.modified = true;
			this.f_arbiters.modified = true;
		}
		pre1 = cx_ite;
		cx_ite = cx_ite.next;
	}
	var pre1 = null;
	var cx_ite = this.s_arbiters.head;
	while(cx_ite != null) {
		var arb = cx_ite.elt;
		if(!arb.cleared && (arb.b1.component.sleeping && arb.b2.component.sleeping)) {
			arb.sleep_stamp = this.stamp;
			arb.sleeping = true;
			cx_ite = this.s_arbiters.erase(pre1);
			continue;
		}
		if(arb.cleared || (arb.type == 2 || arb.type == 1) && arb.up_stamp < this.stamp || arb.up_stamp + 6 < this.stamp) {
			if(!arb.cleared) this.map_arb.remove(arb);
			arb.retire();
			cx_ite = this.s_arbiters.erase(pre1);
			continue;
		}
		var pact = arb.active;
		arb.active = arb.up_stamp == this.stamp;
		if(pact != arb.active) {
			arb.b1.arbiters.modified = true;
			arb.b2.arbiters.modified = true;
			this.s_arbiters.modified = true;
		}
		pre1 = cx_ite;
		cx_ite = cx_ite.next;
	}
}
zpp_nape.space.ZPP_Space.prototype.warmStart = function() {
	var cx_ite = this.f_arbiters.head;
	while(cx_ite != null) {
		var arb = cx_ite.elt;
		if(arb.active) arb.warmStart();
		cx_ite = cx_ite.next;
	}
	var cx_ite = this.c_arbiters_false.head;
	while(cx_ite != null) {
		var arb = cx_ite.elt;
		if(arb.active) arb.warmStart();
		cx_ite = cx_ite.next;
	}
	var cx_ite = this.c_arbiters_true.head;
	while(cx_ite != null) {
		var arb = cx_ite.elt;
		if(arb.active) arb.warmStart();
		cx_ite = cx_ite.next;
	}
	var cx_ite = this.live_constraints.head;
	while(cx_ite != null) {
		var con = cx_ite.elt;
		con.warmStart();
		cx_ite = cx_ite.next;
	}
}
zpp_nape.space.ZPP_Space.prototype.iterateVel = function(times,bouncy) {
	var _g = 0;
	while(_g < times) {
		var i = _g++;
		var cx_ite = this.f_arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(arb.active) arb.applyImpulseVel();
			cx_ite = cx_ite.next;
		}
		var pre = null;
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.applyImpulseVel()) {
				cx_ite = this.live_constraints.erase(pre);
				if(con.removeOnBreak) {
					con.component.sleeping = true;
					this.remConstraint(con);
					this.constraints.remove(con);
				} else con.active = false;
				con.clearcache();
				this.constraintCbBreak(con);
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.c_arbiters_false.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(arb.active) arb.applyImpulseVel(bouncy);
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.c_arbiters_true.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(arb.active) arb.applyImpulseVel(bouncy);
			cx_ite = cx_ite.next;
		}
	}
}
zpp_nape.space.ZPP_Space.prototype.iteratePos = function(times) {
	var _g = 0;
	while(_g < times) {
		var i = _g++;
		var pre = null;
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(!con.__velocity && con.stiff) {
				if(con.applyImpulsePos()) {
					cx_ite = this.live_constraints.erase(pre);
					if(con.removeOnBreak) {
						con.component.sleeping = true;
						this.remConstraint(con);
						this.constraints.remove(con);
					} else con.active = false;
					con.clearcache();
					this.constraintCbBreak(con);
					continue;
				}
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.c_arbiters_false.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(arb.active) arb.applyImpulsePos();
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.c_arbiters_true.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(arb.active) arb.applyImpulsePos();
			cx_ite = cx_ite.next;
		}
	}
}
zpp_nape.space.ZPP_Space.prototype.narrowPhase = function(s1,s2,stat,in_arb) {
	var ret = null;
	var b1 = s1.body;
	var b2 = s2.body;
	if(!(function($this) {
		var $r;
		var ret1 = false;
		{
			var cx_ite = b1.constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(con.ignore && con.pair_exists(b1.id,b2.id)) {
					ret1 = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret1;
		return $r;
	}(this))) {
		var gcol = s1.filter.shouldCollide(s2.filter) && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0);
		var scol = s1.filter.shouldSense(s2.filter);
		var fcol = (s1.fluidEnabled || s2.fluidEnabled) && s1.filter.shouldFlow(s2.filter) && !(s1.fluidEnabled && b1.type == 2 && !s2.fluidEnabled && !(b2.type == 2) || s2.fluidEnabled && b2.type == 2 && !s1.fluidEnabled && !(b1.type == 2) || s1.fluidEnabled && !(b1.type == 2) && !(b2.type == 2) || s2.fluidEnabled && !(b2.type == 2) && !(b1.type == 2));
		if(scol || gcol || fcol) {
			var sa, sb;
			if(s1.type > s2.type) {
				sa = s2;
				sb = s1;
			} else if(s1.type == s2.type) {
				if(s1.id < s2.id) {
					sa = s1;
					sb = s2;
				} else {
					sb = s1;
					sa = s2;
				}
			} else {
				sa = s1;
				sb = s2;
			}
			var reverse = sa == s2;
			if(fcol) {
				var xarb = in_arb == null?this.map_arb.get(sa.id,sb.id):in_arb;
				var first = xarb == null;
				var arb;
				if(first) arb = (function($this) {
					var $r;
					var ret1;
					if(zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool == null) ret1 = new zpp_nape.dynamics.ZPP_FluidArbiter(); else {
						ret1 = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = ret1.next;
						ret1.next = null;
					}
					{
						ret1.pdampx = 0;
						ret1.pdampy = 0;
						ret1.padamp = 0;
					}
					$r = ret1;
					return $r;
				}(this)); else if(xarb.fluidarb == null) {
					{
						xarb.cleared = true;
						xarb.b1.arbiters.remove(xarb);
						xarb.b2.arbiters.remove(xarb);
						this.map_arb.remove(xarb);
						if(xarb.pair != null) {
							xarb.pair.arb = null;
							xarb.pair = null;
						}
						xarb.active = false;
						this.f_arbiters.modified = true;
					}
					arb = (function($this) {
						var $r;
						var ret1;
						if(zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool == null) ret1 = new zpp_nape.dynamics.ZPP_FluidArbiter(); else {
							ret1 = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
							zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = ret1.next;
							ret1.next = null;
						}
						{
							ret1.pdampx = 0;
							ret1.pdampy = 0;
							ret1.padamp = 0;
						}
						$r = ret1;
						return $r;
					}(this));
					first = true;
				} else arb = xarb.fluidarb;
				if(first || arb.stamp != this.stamp) {
					arb.stamp = this.stamp;
					if(zpp_nape.geom.ZPP_Collide.flowCollide(sa,sb,arb)) {
						if(first) {
							{
								{
									arb.b1 = s1.body;
									arb.ws1 = s1;
									arb.b2 = s2.body;
									arb.ws2 = s2;
									arb.id = sa.id;
									arb.di = sb.id;
									arb.b1.arbiters.add(arb);
									arb.b2.arbiters.add(arb);
									arb.active = true;
									arb.cleared = false;
									arb.sleeping = false;
								}
								arb.nx = 0;
								arb.ny = 1;
								arb.dampx = 0;
								arb.dampy = 0;
								arb.adamp = 0.0;
							}
							this.f_arbiters.add(arb);
							this.map_arb.add(arb);
						}
						arb.up_stamp = arb.stamp;
						if(arb.b1.component.sleeping && arb.b1.type == 2) this.wake(arb.b1);
						if(arb.b2.component.sleeping && arb.b2.type == 2) this.wake(arb.b2);
						if(arb.sleeping) {
							arb.sleeping = false;
							this.f_arbiters.add(arb);
						}
						ret = arb;
					} else if(first) {
						var o = arb;
						null;
						o.next = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = o;
					}
				}
			} else if(gcol) {
				var carbs = stat?this.c_arbiters_true:this.c_arbiters_false;
				var xarb = in_arb == null?this.map_arb.get(sa.id,sb.id):in_arb;
				var first = xarb == null;
				var arb;
				if(first) {
					arb = (function($this) {
						var $r;
						var ret1;
						if(zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool == null) ret1 = new zpp_nape.dynamics.ZPP_ColArbiter(); else {
							ret1 = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
							zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = ret1.next;
							ret1.next = null;
						}
						{
							ret1.pjrAcc = 0.0;
							null;
						}
						$r = ret1;
						return $r;
					}(this));
					arb.stat = stat;
				} else if(xarb.colarb == null) {
					{
						xarb.cleared = true;
						xarb.b1.arbiters.remove(xarb);
						xarb.b2.arbiters.remove(xarb);
						this.map_arb.remove(xarb);
						if(xarb.pair != null) {
							xarb.pair.arb = null;
							xarb.pair = null;
						}
						xarb.active = false;
						this.f_arbiters.modified = true;
					}
					arb = (function($this) {
						var $r;
						var ret1;
						if(zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool == null) ret1 = new zpp_nape.dynamics.ZPP_ColArbiter(); else {
							ret1 = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
							zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = ret1.next;
							ret1.next = null;
						}
						{
							ret1.pjrAcc = 0.0;
							null;
						}
						$r = ret1;
						return $r;
					}(this));
					arb.stat = stat;
					first = true;
				} else {
					arb = xarb.colarb;
					reverse = sa != arb.s1;
					if(arb.stat != stat) {
						arb.stat = stat;
						if(!arb.sleeping) {
							(stat?this.c_arbiters_false:this.c_arbiters_true).remove(arb);
							carbs.add(arb);
						}
					}
				}
				if(first || arb.stamp != this.stamp) {
					arb.stamp = this.stamp;
					if(zpp_nape.geom.ZPP_Collide.contactCollide(sa,sb,arb,reverse)) {
						if(first) {
							{
								{
									arb.b1 = s1.body;
									arb.ws1 = s1;
									arb.b2 = s2.body;
									arb.ws2 = s2;
									arb.id = sa.id;
									arb.di = sb.id;
									arb.b1.arbiters.add(arb);
									arb.b2.arbiters.add(arb);
									arb.active = true;
									arb.cleared = false;
									arb.sleeping = false;
								}
								arb.s1 = s1;
								arb.s2 = s2;
								{
									if(arb.s1.material.elasticity == Math.NEGATIVE_INFINITY || arb.s2.material.elasticity == Math.NEGATIVE_INFINITY) arb.restitution = 0; else if(arb.s1.material.elasticity == Math.POSITIVE_INFINITY || arb.s2.material.elasticity == Math.POSITIVE_INFINITY) arb.restitution = 1; else arb.restitution = (arb.s1.material.elasticity + arb.s2.material.elasticity) / 2;
									if(arb.restitution < 0) arb.restitution = 0;
									if(arb.restitution > 1) arb.restitution = 1;
									arb.dyn_fric = (function($this) {
										var $r;
										{
										}
										$r = Math.sqrt(arb.s1.material.dynamicFriction * arb.s2.material.dynamicFriction);
										return $r;
									}(this));
									arb.stat_fric = (function($this) {
										var $r;
										{
										}
										$r = Math.sqrt(arb.s1.material.staticFriction * arb.s2.material.staticFriction);
										return $r;
									}(this));
									arb.rfric = (function($this) {
										var $r;
										{
										}
										$r = Math.sqrt(arb.s1.material.rollingFriction * arb.s2.material.rollingFriction);
										return $r;
									}(this));
								}
							}
							carbs.add(arb);
							this.map_arb.add(arb);
						}
						arb.up_stamp = arb.stamp;
						if(arb.b1.component.sleeping && arb.b1.type == 2) this.wake(arb.b1);
						if(arb.b2.component.sleeping && arb.b2.type == 2) this.wake(arb.b2);
						if(arb.sleeping) {
							arb.sleeping = false;
							carbs.add(arb);
						}
						ret = arb;
					} else if(first) {
						var o = arb;
						null;
						o.next = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = o;
					}
				}
			} else if(scol) {
				var xarb = in_arb == null?this.map_arb.get(sa.id,sb.id):in_arb;
				var first = xarb == null;
				var arb;
				if(first) arb = (function($this) {
					var $r;
					var ret1;
					if(zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool == null) ret1 = new zpp_nape.dynamics.ZPP_SensorArbiter(); else {
						ret1 = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = ret1.next;
						ret1.next = null;
					}
					null;
					$r = ret1;
					return $r;
				}(this)); else if(xarb.sensorarb == null) {
					{
						xarb.cleared = true;
						xarb.b1.arbiters.remove(xarb);
						xarb.b2.arbiters.remove(xarb);
						this.map_arb.remove(xarb);
						if(xarb.pair != null) {
							xarb.pair.arb = null;
							xarb.pair = null;
						}
						xarb.active = false;
						this.f_arbiters.modified = true;
					}
					arb = (function($this) {
						var $r;
						var ret1;
						if(zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool == null) ret1 = new zpp_nape.dynamics.ZPP_SensorArbiter(); else {
							ret1 = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
							zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = ret1.next;
							ret1.next = null;
						}
						null;
						$r = ret1;
						return $r;
					}(this));
					first = true;
				} else arb = xarb.sensorarb;
				if(first || arb.stamp != this.stamp) {
					arb.stamp = this.stamp;
					if(zpp_nape.geom.ZPP_Collide.testCollide(sa,sb)) {
						if(first) {
							{
								arb.b1 = s1.body;
								arb.ws1 = s1;
								arb.b2 = s2.body;
								arb.ws2 = s2;
								arb.id = sa.id;
								arb.di = sb.id;
								arb.b1.arbiters.add(arb);
								arb.b2.arbiters.add(arb);
								arb.active = true;
								arb.cleared = false;
								arb.sleeping = false;
							}
							this.s_arbiters.add(arb);
							this.map_arb.add(arb);
						}
						arb.up_stamp = arb.stamp;
						if(arb.sleeping) {
							arb.sleeping = false;
							this.s_arbiters.add(arb);
						}
						ret = arb;
					} else if(first) {
						var o = arb;
						null;
						o.next = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = o;
					}
				}
			}
		}
	}
	return ret;
}
zpp_nape.space.ZPP_Space.prototype.__class__ = zpp_nape.space.ZPP_Space;
zpp_nape.util.Array2 = function(width,height) {
	if( width === $_ ) return;
	this.width = width;
	this.list = new Array();
}
zpp_nape.util.Array2.__name__ = ["zpp_nape","util","Array2"];
zpp_nape.util.Array2.prototype.list = null;
zpp_nape.util.Array2.prototype.width = null;
zpp_nape.util.Array2.prototype.get = function(x,y) {
	return this.list[y * this.width + x];
}
zpp_nape.util.Array2.prototype.set = function(x,y,obj) {
	return this.list[y * this.width + x] = obj;
}
zpp_nape.util.Array2.prototype.__class__ = zpp_nape.util.Array2;
jeash.display.IGraphicsPath = function() { }
jeash.display.IGraphicsPath.__name__ = ["jeash","display","IGraphicsPath"];
jeash.display.IGraphicsPath.prototype.__class__ = jeash.display.IGraphicsPath;
jeash.display.GraphicsPath = function(commands,data,winding) {
	if( commands === $_ ) return;
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.jeashGraphicsDataType = jeash.display.GraphicsDataType.PATH;
}
jeash.display.GraphicsPath.__name__ = ["jeash","display","GraphicsPath"];
jeash.display.GraphicsPath.prototype.commands = null;
jeash.display.GraphicsPath.prototype.data = null;
jeash.display.GraphicsPath.prototype.winding = null;
jeash.display.GraphicsPath.prototype.jeashGraphicsDataType = null;
jeash.display.GraphicsPath.prototype.curveTo = function(controlX,controlY,anchorX,anchorY) {
	if(this.commands != null && this.data != null) {
		this.commands.push(3);
		this.data.push(anchorX);
		this.data.push(anchorY);
		this.data.push(controlX);
		this.data.push(controlY);
	}
}
jeash.display.GraphicsPath.prototype.lineTo = function(x,y) {
	if(this.commands != null && this.data != null) {
		this.commands.push(2);
		this.data.push(x);
		this.data.push(y);
	}
}
jeash.display.GraphicsPath.prototype.moveTo = function(x,y) {
	if(this.commands != null && this.data != null) {
		this.commands.push(1);
		this.data.push(x);
		this.data.push(y);
	}
}
jeash.display.GraphicsPath.prototype.__class__ = jeash.display.GraphicsPath;
jeash.display.GraphicsPath.__interfaces__ = [jeash.display.IGraphicsPath,jeash.display.IGraphicsData];
zpp_nape.geom.ZPP_Chain = function(front_back,cw) {
	if( front_back === $_ ) return;
	this.front = this.back = front_back;
	this.cw = cw;
}
zpp_nape.geom.ZPP_Chain.__name__ = ["zpp_nape","geom","ZPP_Chain"];
zpp_nape.geom.ZPP_Chain.prototype.front = null;
zpp_nape.geom.ZPP_Chain.prototype.back = null;
zpp_nape.geom.ZPP_Chain.prototype.cw = null;
zpp_nape.geom.ZPP_Chain.prototype.initialise = function(front_back) {
	this.front = this.back = front_back;
}
zpp_nape.geom.ZPP_Chain.prototype.push_back = function(back) {
	this.back = back;
}
zpp_nape.geom.ZPP_Chain.prototype.push_front = function(front) {
	this.front = front;
}
zpp_nape.geom.ZPP_Chain.prototype.pop_back = function() {
	this.back = this.cw?this.back.prev:this.back.next;
}
zpp_nape.geom.ZPP_Chain.prototype.pop_front = function() {
	this.front = this.cw?this.front.next:this.front.prev;
}
zpp_nape.geom.ZPP_Chain.prototype.before_back = function() {
	return this.cw?this.back.prev:this.back.next;
}
zpp_nape.geom.ZPP_Chain.prototype.after_back = function() {
	return this.cw?this.back.next:this.back.prev;
}
zpp_nape.geom.ZPP_Chain.prototype.before_front = function() {
	return this.cw?this.front.next:this.front.prev;
}
zpp_nape.geom.ZPP_Chain.prototype.after_front = function() {
	return this.cw?this.front.prev:this.front.next;
}
zpp_nape.geom.ZPP_Chain.prototype.set_direction = function(dir) {
	this.cw = dir;
}
zpp_nape.geom.ZPP_Chain.prototype.set = function(x) {
	this.front = x.front;
	this.back = x.back;
	this.cw = x.cw;
}
zpp_nape.geom.ZPP_Chain.prototype.__class__ = zpp_nape.geom.ZPP_Chain;
zpp_nape.geom.ZPP_Greene = function() { }
zpp_nape.geom.ZPP_Greene.__name__ = ["zpp_nape","geom","ZPP_Greene"];
zpp_nape.geom.ZPP_Greene.less_yx = function(a,b) {
	return a.y < b.y || a.y == b.y && a.x < b.x;
}
zpp_nape.geom.ZPP_Greene.left_turn = function(a,b,c) {
	var ux;
	var uy;
	ux = b.x - a.x;
	uy = b.y - a.y;
	var vx;
	var vy;
	vx = c.x - b.x;
	vy = c.y - b.y;
	return vy * ux - vx * uy > 0;
}
zpp_nape.geom.ZPP_Greene.right_turn = function(a,b,c) {
	var ux;
	var uy;
	ux = b.x - a.x;
	uy = b.y - a.y;
	var vx;
	var vy;
	vx = c.x - b.x;
	vy = c.y - b.y;
	return vy * ux - vx * uy < 0;
}
zpp_nape.geom.ZPP_Greene.is_adjacent_to = function(new_point,old_point) {
	if(new_point == old_point.next) return true; else if(new_point == old_point.prev) return true; else return false;
}
zpp_nape.geom.ZPP_Greene.diagonal = function(poly,a,b) {
	if(a != b && !(a == b.next?true:a == b.prev?true:false)) poly.insert_diagonal(a.link,b.link);
}
zpp_nape.geom.ZPP_Greene.visible = function(polygon,new_point_ref,stack,bottom,top) {
	if(bottom.cw && zpp_nape.geom.ZPP_Greene.right_turn(stack.back,stack.cw?stack.back.prev:stack.back.next,new_point_ref) || !bottom.cw && zpp_nape.geom.ZPP_Greene.left_turn(stack.back,stack.cw?stack.back.prev:stack.back.next,new_point_ref)) {
		var done = false;
		var big = false;
		var isvisible = false;
		do {
			stack.back = stack.cw?stack.back.prev:stack.back.next;
			if(bottom.cw) {
				zpp_nape.geom.ZPP_Greene.diagonal(polygon,bottom.front,(stack.cw?stack.back.prev:stack.back.next).prev);
				var F = bottom.cw?bottom.front.next:bottom.front.prev;
				var L = stack.back;
				while(F != L) {
					var t = F;
					F = F.next;
					if(t != null && t.prev == t) {
						t.next = t.prev = null;
						t = null;
					} else {
						t.prev.next = t.next;
						t.next.prev = t.prev;
						t.next = t.prev = null;
					}
				}
				polygon.vertices = stack.back;
			} else {
				zpp_nape.geom.ZPP_Greene.diagonal(polygon,stack.back,(bottom.cw?bottom.front.prev:bottom.front.next).prev);
				var F = bottom.back;
				var L = bottom.front;
				while(F != L) {
					var t = F;
					F = F.next;
					if(t != null && t.prev == t) {
						t.next = t.prev = null;
						t = null;
					} else {
						t.prev.next = t.next;
						t.next.prev = t.prev;
						t.next = t.prev = null;
					}
				}
				polygon.vertices = bottom.front;
			}
			bottom.back = stack.back;
			if(stack.back == stack.front) {
				done = true;
				if(zpp_nape.geom.ZPP_Greene.less_yx(stack.front,bottom.front)) {
					stack.front = bottom.front;
					stack.cw = !stack.cw;
					{
						bottom.front = top.front;
						bottom.back = top.back;
						bottom.cw = top.cw;
					}
					top.front = top.back = stack.front;
					top.cw = !top.cw;
				} else {
					stack.back = bottom.front;
					bottom.back = bottom.front;
				}
			} else {
				if(bottom.cw) big = zpp_nape.geom.ZPP_Greene.right_turn(bottom.front,stack.back,stack.cw?stack.back.prev:stack.back.next); else big = zpp_nape.geom.ZPP_Greene.left_turn(bottom.front,stack.back,stack.cw?stack.back.prev:stack.back.next);
				if(bottom.cw) isvisible = !zpp_nape.geom.ZPP_Greene.right_turn(stack.back,stack.cw?stack.back.prev:stack.back.next,new_point_ref); else isvisible = !zpp_nape.geom.ZPP_Greene.left_turn(stack.back,stack.cw?stack.back.prev:stack.back.next,new_point_ref);
			}
		} while(!done && !big && !isvisible);
		if(big) {
			stack.back = bottom.front;
			bottom.back = bottom.front;
		}
	}
}
zpp_nape.geom.ZPP_Greene.change_top_chain = function(polygon,new_point_ref,stack,top) {
	var next_point_ref = top.cw?new_point_ref.prev:new_point_ref.next;
	if(!top.cw && !zpp_nape.geom.ZPP_Greene.right_turn(top.front,new_point_ref,next_point_ref) || top.cw && !zpp_nape.geom.ZPP_Greene.left_turn(top.front,new_point_ref,next_point_ref)) top.front = new_point_ref; else {
		var old_top_ref = stack.front;
		stack.front = stack.cw?stack.front.next:stack.front.prev;
		var done = false;
		var big = false;
		var small = false;
		do {
			if(!top.cw) {
				zpp_nape.geom.ZPP_Greene.diagonal(polygon,stack.front,next_point_ref.prev);
				var F = old_top_ref;
				var L = new_point_ref;
				while(F != L) {
					var t = F;
					F = F.next;
					if(t != null && t.prev == t) {
						t.next = t.prev = null;
						t = null;
					} else {
						t.prev.next = t.next;
						t.next.prev = t.prev;
						t.next = t.prev = null;
					}
				}
				polygon.vertices = new_point_ref;
			} else {
				zpp_nape.geom.ZPP_Greene.diagonal(polygon,new_point_ref,(stack.cw?stack.front.next:stack.front.prev).prev);
				var F = top.front;
				var L = stack.front;
				while(F != L) {
					var t = F;
					F = F.next;
					if(t != null && t.prev == t) {
						t.next = t.prev = null;
						t = null;
					} else {
						t.prev.next = t.next;
						t.next.prev = t.prev;
						t.next = t.prev = null;
					}
				}
				top.front = stack.front;
				polygon.vertices = stack.front;
			}
			if(stack.front == stack.back) {
				done = true;
				stack.front = new_point_ref;
				top.front = top.back = new_point_ref;
			} else {
				if(!top.cw) big = !zpp_nape.geom.ZPP_Greene.left_turn(stack.cw?stack.front.next:stack.front.prev,stack.front,new_point_ref); else big = !zpp_nape.geom.ZPP_Greene.right_turn(stack.cw?stack.front.next:stack.front.prev,stack.front,new_point_ref);
				if(!top.cw) small = zpp_nape.geom.ZPP_Greene.left_turn(stack.front,new_point_ref,next_point_ref); else small = zpp_nape.geom.ZPP_Greene.right_turn(stack.front,new_point_ref,next_point_ref);
				if(!big && !small) {
					old_top_ref = stack.front;
					stack.front = stack.cw?stack.front.next:stack.front.prev;
				}
			}
		} while(!done && !big && !small);
		if(big) {
			stack.front = new_point_ref;
			top.front = top.back = new_point_ref;
		} else if(small) {
			top.back = stack.front;
			top.front = new_point_ref;
		}
	}
}
zpp_nape.geom.ZPP_Greene.change_bottom_chain = function(polygon,new_point_ref,stack,bottom,top) {
	var next_point_ref = bottom.cw?new_point_ref.prev:new_point_ref.next;
	if(bottom.cw && !zpp_nape.geom.ZPP_Greene.left_turn(bottom.front,new_point_ref,next_point_ref) || !bottom.cw && !zpp_nape.geom.ZPP_Greene.right_turn(bottom.front,new_point_ref,next_point_ref)) bottom.front = new_point_ref; else {
		var done = false;
		var small = false;
		do {
			stack.back = stack.cw?stack.back.prev:stack.back.next;
			if(bottom.cw) {
				zpp_nape.geom.ZPP_Greene.diagonal(polygon,new_point_ref,(stack.cw?stack.back.prev:stack.back.next).prev);
				var F = bottom.front;
				var L = stack.back;
				while(F != L) {
					var t = F;
					F = F.next;
					if(t != null && t.prev == t) {
						t.next = t.prev = null;
						t = null;
					} else {
						t.prev.next = t.next;
						t.next.prev = t.prev;
						t.next = t.prev = null;
					}
				}
				polygon.vertices = stack.back;
			} else {
				zpp_nape.geom.ZPP_Greene.diagonal(polygon,stack.back,next_point_ref.prev);
				var F = bottom.back;
				var L = new_point_ref;
				while(F != L) {
					var t = F;
					F = F.next;
					if(t != null && t.prev == t) {
						t.next = t.prev = null;
						t = null;
					} else {
						t.prev.next = t.next;
						t.next.prev = t.prev;
						t.next = t.prev = null;
					}
				}
				polygon.vertices = new_point_ref;
			}
			bottom.front = bottom.back = stack.back;
			if(stack.back == stack.front) {
				done = true;
				if(zpp_nape.geom.ZPP_Greene.less_yx(stack.front,new_point_ref)) {
					stack.front = new_point_ref;
					stack.cw = !stack.cw;
					{
						bottom.front = top.front;
						bottom.back = top.back;
						bottom.cw = top.cw;
					}
					top.front = top.back = stack.front;
					top.cw = !top.cw;
				} else stack.back = new_point_ref;
			} else if(bottom.cw) small = zpp_nape.geom.ZPP_Greene.right_turn(stack.back,new_point_ref,next_point_ref); else small = zpp_nape.geom.ZPP_Greene.left_turn(stack.back,new_point_ref,next_point_ref);
		} while(!done && !small);
		if(small) {
			bottom.back = stack.back;
			bottom.front = new_point_ref;
		}
	}
}
zpp_nape.geom.ZPP_Greene.stack_extend = function(polygon,point_ref,stack,top) {
	if(!stack.cw && zpp_nape.geom.ZPP_Greene.right_turn(stack.cw?stack.front.next:stack.front.prev,stack.front,point_ref) || stack.cw && zpp_nape.geom.ZPP_Greene.left_turn(stack.cw?stack.front.next:stack.front.prev,stack.front,point_ref)) {
		stack.front = point_ref;
		top.front = top.back = point_ref;
	} else zpp_nape.geom.ZPP_Greene.change_top_chain(polygon,point_ref,stack,top);
}
zpp_nape.geom.ZPP_Greene.make_polygons_from_stack = function(polygon,high_point_ref,stack,bottom) {
	var next_point_ref = high_point_ref;
	if(!bottom.cw) next_point_ref = next_point_ref.next;
	stack.back = stack.cw?stack.back.prev:stack.back.next;
	while(stack.front != stack.back) {
		if(bottom.cw) {
			zpp_nape.geom.ZPP_Greene.diagonal(polygon,high_point_ref,(stack.cw?stack.back.prev:stack.back.next).prev);
			var F = bottom.front;
			var L = stack.back;
			while(F != L) {
				var t = F;
				F = F.next;
				if(t != null && t.prev == t) {
					t.next = t.prev = null;
					t = null;
				} else {
					t.prev.next = t.next;
					t.next.prev = t.prev;
					t.next = t.prev = null;
				}
			}
			bottom.front = bottom.back = stack.back;
			polygon.vertices = stack.back;
		} else {
			zpp_nape.geom.ZPP_Greene.diagonal(polygon,stack.back,next_point_ref.prev);
			var F = bottom.back;
			var L = high_point_ref;
			while(F != L) {
				var t = F;
				F = F.next;
				if(t != null && t.prev == t) {
					t.next = t.prev = null;
					t = null;
				} else {
					t.prev.next = t.next;
					t.next.prev = t.prev;
					t.next = t.prev = null;
				}
			}
			bottom.back = stack.back;
			polygon.vertices = high_point_ref;
		}
		stack.back = stack.cw?stack.back.prev:stack.back.next;
	}
}
zpp_nape.geom.ZPP_Greene.find_smallest_yx = function(polygon) {
	var current = polygon.vertices.next;
	if(zpp_nape.geom.ZPP_Greene.less_yx(current,polygon.vertices)) do {
		polygon.vertices = current;
		current = current.next;
	} while(zpp_nape.geom.ZPP_Greene.less_yx(current,polygon.vertices)); else {
		current = polygon.vertices.prev;
		if(zpp_nape.geom.ZPP_Greene.less_yx(current,polygon.vertices)) do {
			polygon.vertices = current;
			current = current.prev;
		} while(zpp_nape.geom.ZPP_Greene.less_yx(current,polygon.vertices));
	}
	return polygon.vertices;
}
zpp_nape.geom.ZPP_Greene.second_point_is_next = function(v) {
	return zpp_nape.geom.ZPP_Greene.less_yx(v.next,v.prev);
}
zpp_nape.geom.ZPP_Greene.ga_convex_decomposition = function(polygon) {
	var point_ref = zpp_nape.geom.ZPP_Greene.find_smallest_yx(polygon);
	var circ = point_ref;
	var ccw_chain_ref = point_ref;
	var cw_chain_ref = point_ref;
	var stack = new zpp_nape.geom.ZPP_Chain(point_ref,false);
	var bottom = new zpp_nape.geom.ZPP_Chain(point_ref,true);
	var top = new zpp_nape.geom.ZPP_Chain(point_ref,false);
	if(zpp_nape.geom.ZPP_Greene.less_yx(point_ref.next,point_ref.prev)) {
		ccw_chain_ref = ccw_chain_ref.next;
		stack.front = ccw_chain_ref;
		stack.cw = false;
		top.front = top.back = ccw_chain_ref;
		top.cw = false;
		bottom.cw = true;
	} else {
		cw_chain_ref = cw_chain_ref.prev;
		stack.front = cw_chain_ref;
		stack.cw = true;
		top.front = top.back = cw_chain_ref;
		top.cw = true;
		bottom.cw = false;
	}
	while(ccw_chain_ref != cw_chain_ref) {
		point_ref = (function($this) {
			var $r;
			var ccw2 = ccw_chain_ref.next;
			var cw2 = cw_chain_ref.prev;
			$r = ccw2 == cw2?(function($this) {
				var $r;
				cw_chain_ref = cw2;
				ccw_chain_ref = ccw2;
				$r = cw_chain_ref;
				return $r;
			}($this)):ccw2.y < cw2.y || ccw2.y == cw2.y && ccw2.x < cw2.x?(function($this) {
				var $r;
				ccw_chain_ref = ccw2;
				$r = ccw_chain_ref;
				return $r;
			}($this)):(function($this) {
				var $r;
				cw_chain_ref = cw2;
				$r = cw_chain_ref;
				return $r;
			}($this));
			return $r;
		}(this));
		if(zpp_nape.geom.ZPP_Greene.is_adjacent_to(point_ref,bottom.front)) zpp_nape.geom.ZPP_Greene.visible(polygon,point_ref,stack,bottom,top);
		if(ccw_chain_ref == cw_chain_ref) {
			zpp_nape.geom.ZPP_Greene.make_polygons_from_stack(polygon,point_ref,stack,bottom);
			break;
		}
		if(zpp_nape.geom.ZPP_Greene.is_adjacent_to(point_ref,stack.front)) if(!stack.cw && zpp_nape.geom.ZPP_Greene.right_turn(stack.cw?stack.front.next:stack.front.prev,stack.front,point_ref) || stack.cw && zpp_nape.geom.ZPP_Greene.left_turn(stack.cw?stack.front.next:stack.front.prev,stack.front,point_ref)) {
			stack.front = point_ref;
			top.front = top.back = point_ref;
		} else zpp_nape.geom.ZPP_Greene.change_top_chain(polygon,point_ref,stack,top); else if(zpp_nape.geom.ZPP_Greene.is_adjacent_to(point_ref,top.front)) zpp_nape.geom.ZPP_Greene.change_top_chain(polygon,point_ref,stack,top); else zpp_nape.geom.ZPP_Greene.change_bottom_chain(polygon,point_ref,stack,bottom,top);
	}
}
zpp_nape.geom.ZPP_Greene.decompose = function(P) {
	var MPs = zpp_nape.geom.ZPP_Monotone.decompose(P);
	var rets = new zpp_nape.util.ZNPList_ZPP_GeomVert();
	while(!(MPs.head == null)) {
		var MP = MPs.pop_unsafe();
		var opoly = new zpp_nape.geom.ZPP_PartitionPoly(MP);
		var poly = opoly.linked();
		zpp_nape.geom.ZPP_Greene.ga_convex_decomposition(poly);
		opoly.partition_to(rets);
	}
	return rets;
}
zpp_nape.geom.ZPP_Greene.prototype.__class__ = zpp_nape.geom.ZPP_Greene;
jeash.display.LoaderInfo = function(p) {
	if( p === $_ ) return;
	jeash.events.EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
}
jeash.display.LoaderInfo.__name__ = ["jeash","display","LoaderInfo"];
jeash.display.LoaderInfo.__super__ = jeash.events.EventDispatcher;
for(var k in jeash.events.EventDispatcher.prototype ) jeash.display.LoaderInfo.prototype[k] = jeash.events.EventDispatcher.prototype[k];
jeash.display.LoaderInfo.create = function(ldr) {
	var li = new jeash.display.LoaderInfo();
	li.loader = ldr;
	return li;
}
jeash.display.LoaderInfo.prototype.bytes = null;
jeash.display.LoaderInfo.prototype.bytesLoaded = null;
jeash.display.LoaderInfo.prototype.bytesTotal = null;
jeash.display.LoaderInfo.prototype.childAllowsParent = null;
jeash.display.LoaderInfo.prototype.content = null;
jeash.display.LoaderInfo.prototype.contentType = null;
jeash.display.LoaderInfo.prototype.frameRate = null;
jeash.display.LoaderInfo.prototype.height = null;
jeash.display.LoaderInfo.prototype.loader = null;
jeash.display.LoaderInfo.prototype.loaderURL = null;
jeash.display.LoaderInfo.prototype.parameters = null;
jeash.display.LoaderInfo.prototype.parentAllowsChild = null;
jeash.display.LoaderInfo.prototype.sameDomain = null;
jeash.display.LoaderInfo.prototype.sharedEvents = null;
jeash.display.LoaderInfo.prototype.url = null;
jeash.display.LoaderInfo.prototype.width = null;
jeash.display.LoaderInfo.prototype.__class__ = jeash.display.LoaderInfo;
jeash.media.SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if( bufferTime === $_ ) return;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
}
jeash.media.SoundLoaderContext.__name__ = ["jeash","media","SoundLoaderContext"];
jeash.media.SoundLoaderContext.prototype.bufferTime = null;
jeash.media.SoundLoaderContext.prototype.checkPolicyFile = null;
jeash.media.SoundLoaderContext.prototype.__class__ = jeash.media.SoundLoaderContext;
jeash.display.BlendMode = { __ename__ : ["jeash","display","BlendMode"], __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SUBTRACT"] }
jeash.display.BlendMode.ADD = ["ADD",0];
jeash.display.BlendMode.ADD.toString = $estr;
jeash.display.BlendMode.ADD.__enum__ = jeash.display.BlendMode;
jeash.display.BlendMode.ALPHA = ["ALPHA",1];
jeash.display.BlendMode.ALPHA.toString = $estr;
jeash.display.BlendMode.ALPHA.__enum__ = jeash.display.BlendMode;
jeash.display.BlendMode.DARKEN = ["DARKEN",2];
jeash.display.BlendMode.DARKEN.toString = $estr;
jeash.display.BlendMode.DARKEN.__enum__ = jeash.display.BlendMode;
jeash.display.BlendMode.DIFFERENCE = ["DIFFERENCE",3];
jeash.display.BlendMode.DIFFERENCE.toString = $estr;
jeash.display.BlendMode.DIFFERENCE.__enum__ = jeash.display.BlendMode;
jeash.display.BlendMode.ERASE = ["ERASE",4];
jeash.display.BlendMode.ERASE.toString = $estr;
jeash.display.BlendMode.ERASE.__enum__ = jeash.display.BlendMode;
jeash.display.BlendMode.HARDLIGHT = ["HARDLIGHT",5];
jeash.display.BlendMode.HARDLIGHT.toString = $estr;
jeash.display.BlendMode.HARDLIGHT.__enum__ = jeash.display.BlendMode;
jeash.display.BlendMode.INVERT = ["INVERT",6];
jeash.display.BlendMode.INVERT.toString = $estr;
jeash.display.BlendMode.INVERT.__enum__ = jeash.display.BlendMode;
jeash.display.BlendMode.LAYER = ["LAYER",7];
jeash.display.BlendMode.LAYER.toString = $estr;
jeash.display.BlendMode.LAYER.__enum__ = jeash.display.BlendMode;
jeash.display.BlendMode.LIGHTEN = ["LIGHTEN",8];
jeash.display.BlendMode.LIGHTEN.toString = $estr;
jeash.display.BlendMode.LIGHTEN.__enum__ = jeash.display.BlendMode;
jeash.display.BlendMode.MULTIPLY = ["MULTIPLY",9];
jeash.display.BlendMode.MULTIPLY.toString = $estr;
jeash.display.BlendMode.MULTIPLY.__enum__ = jeash.display.BlendMode;
jeash.display.BlendMode.NORMAL = ["NORMAL",10];
jeash.display.BlendMode.NORMAL.toString = $estr;
jeash.display.BlendMode.NORMAL.__enum__ = jeash.display.BlendMode;
jeash.display.BlendMode.OVERLAY = ["OVERLAY",11];
jeash.display.BlendMode.OVERLAY.toString = $estr;
jeash.display.BlendMode.OVERLAY.__enum__ = jeash.display.BlendMode;
jeash.display.BlendMode.SCREEN = ["SCREEN",12];
jeash.display.BlendMode.SCREEN.toString = $estr;
jeash.display.BlendMode.SCREEN.__enum__ = jeash.display.BlendMode;
jeash.display.BlendMode.SUBTRACT = ["SUBTRACT",13];
jeash.display.BlendMode.SUBTRACT.toString = $estr;
jeash.display.BlendMode.SUBTRACT.__enum__ = jeash.display.BlendMode;
haxe.io.Error = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] }
haxe.io.Error.Blocked = ["Blocked",0];
haxe.io.Error.Blocked.toString = $estr;
haxe.io.Error.Blocked.__enum__ = haxe.io.Error;
haxe.io.Error.Overflow = ["Overflow",1];
haxe.io.Error.Overflow.toString = $estr;
haxe.io.Error.Overflow.__enum__ = haxe.io.Error;
haxe.io.Error.OutsideBounds = ["OutsideBounds",2];
haxe.io.Error.OutsideBounds.toString = $estr;
haxe.io.Error.OutsideBounds.__enum__ = haxe.io.Error;
haxe.io.Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe.io.Error; $x.toString = $estr; return $x; }
jeash.geom.Point = function(inX,inY) {
	if( inX === $_ ) return;
	this.x = inX == null?0.0:inX;
	this.y = inY == null?0.0:inY;
}
jeash.geom.Point.__name__ = ["jeash","geom","Point"];
jeash.geom.Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
}
jeash.geom.Point.interpolate = function(pt1,pt2,f) {
	return new jeash.geom.Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
}
jeash.geom.Point.polar = function(len,angle) {
	return new jeash.geom.Point(len * Math.cos(angle),len * Math.sin(angle));
}
jeash.geom.Point.prototype.x = null;
jeash.geom.Point.prototype.y = null;
jeash.geom.Point.prototype.add = function(v) {
	return new jeash.geom.Point(v.x + this.x,v.y + this.y);
}
jeash.geom.Point.prototype.clone = function() {
	return new jeash.geom.Point(this.x,this.y);
}
jeash.geom.Point.prototype.equals = function(toCompare) {
	return toCompare.x == this.x && toCompare.y == this.y;
}
jeash.geom.Point.prototype.length = null;
jeash.geom.Point.prototype.get_length = function() {
	return Math.sqrt(this.x * this.x + this.y * this.y);
}
jeash.geom.Point.prototype.normalize = function(thickness) {
	if(this.x == 0 && this.y == 0) this.x = thickness; else {
		var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
		this.x *= norm;
		this.y *= norm;
	}
}
jeash.geom.Point.prototype.offset = function(dx,dy) {
	this.x += dx;
	this.y += dy;
}
jeash.geom.Point.prototype.subtract = function(v) {
	return new jeash.geom.Point(this.x - v.x,this.y - v.y);
}
jeash.geom.Point.prototype.__class__ = jeash.geom.Point;
jeash.Lib = function(title,width,height) {
	if( title === $_ ) return;
	this.mKilled = false;
	this.mRequestedWidth = width;
	this.mRequestedHeight = height;
	this.mResizePending = false;
	this.__scr = js.Lib.document.getElementById(title);
	if(this.__scr == null) throw "Element with id '" + title + "' not found";
	this.__scr.style.setProperty("overflow","hidden","");
	this.__scr.style.setProperty("position","absolute","");
	this.__scr.appendChild(jeash.Lib.jeashGetCanvas());
}
jeash.Lib.__name__ = ["jeash","Lib"];
jeash.Lib.mMe = null;
jeash.Lib.context = null;
jeash.Lib.current = null;
jeash.Lib.glContext = null;
jeash.Lib.canvas = null;
jeash.Lib.mStage = null;
jeash.Lib.mMainClassRoot = null;
jeash.Lib.mCurrent = null;
jeash.Lib.mRolling = null;
jeash.Lib.mDownObj = null;
jeash.Lib.mMouseX = null;
jeash.Lib.mMouseY = null;
jeash.Lib.trace = function(arg) {
	if(window.console != null) window.console.log(arg); else if(jeash.Lib.mMe.jeashTraceTextField != null) {
		var _g = jeash.Lib.mMe.jeashTraceTextField;
		_g.SetText(_g.GetText() + (arg + "\n"));
	}
}
jeash.Lib.getURL = function(request,target) {
	var document = js.Lib.document;
	var window = js.Lib.window;
	if(target == null || target == "_self") document.open(request.url); else switch(target) {
	case "_blank":
		window.open(request.url);
		break;
	case "_parent":
		window.parent.open(request.url);
		break;
	case "_top":
		window.top.open(request.url);
		break;
	}
}
jeash.Lib.jeashGetCanvas = function() {
	if(jeash.Lib.canvas == null) {
		if(document == null) throw "Document not loaded yet, cannot create root canvas!";
		jeash.Lib.canvas = document.createElement("canvas");
		jeash.Lib.canvas.id = "Root Surface";
		jeash.Lib.context = "2d";
		jeash.Lib.jeashBootstrap();
		jeash.Lib.starttime = haxe.Timer.stamp();
	}
	return jeash.Lib.canvas;
}
jeash.Lib.jeashGetCurrent = function() {
	jeash.Lib.jeashGetCanvas();
	if(jeash.Lib.mMainClassRoot == null) {
		jeash.Lib.mMainClassRoot = new jeash.display.MovieClip();
		jeash.Lib.mCurrent = jeash.Lib.mMainClassRoot;
		jeash.Lib.mCurrent.name = "Root MovieClip";
	}
	return jeash.Lib.mMainClassRoot;
}
jeash.Lib["as"] = function(v,c) {
	return Std["is"](v,c)?v:null;
}
jeash.Lib.starttime = null;
jeash.Lib.getTimer = function() {
	return Std["int"]((haxe.Timer.stamp() - jeash.Lib.starttime) * 1000);
}
jeash.Lib.jeashGetStage = function() {
	jeash.Lib.jeashGetCanvas();
	if(jeash.Lib.mStage == null) {
		var width = jeash.Lib.jeashGetWidth();
		var height = jeash.Lib.jeashGetHeight();
		jeash.Lib.mStage = new jeash.display.Stage(width,height);
		jeash.Lib.mStage.addChild(jeash.Lib.jeashGetCurrent());
	}
	return jeash.Lib.mStage;
}
jeash.Lib.jeashAppendSurface = function(surface,before) {
	if(jeash.Lib.mMe.__scr != null) {
		surface.style.setProperty("position","absolute","");
		surface.style.setProperty("left","0px","");
		surface.style.setProperty("top","0px","");
		surface.style.setProperty("-moz-transform-origin","0 0","");
		surface.style.setProperty("-webkit-transform-origin","0 0","");
		surface.style.setProperty("-o-transform-origin","0 0","");
		surface.style.setProperty("-ms-transform-origin","0 0","");
		try {
			surface.onmouseover = surface.onselectstart = function() {
				return false;
			};
		} catch( e ) {
		}
		if(before != null) jeash.Lib.mMe.__scr.insertBefore(surface,before); else jeash.Lib.mMe.__scr.appendChild(surface);
	}
}
jeash.Lib.jeashSwapSurface = function(surface1,surface2) {
	var c1 = -1;
	var c2 = -1;
	var swap;
	var _g1 = 0, _g = jeash.Lib.mMe.__scr.childNodes.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(jeash.Lib.mMe.__scr.childNodes[i] == surface1) c1 = i; else if(jeash.Lib.mMe.__scr.childNodes[i] == surface2) c2 = i;
	}
	if(c1 != -1 && c2 != -1) {
		swap = jeash.Lib.mMe.__scr.removeChild(jeash.Lib.mMe.__scr.childNodes[c1]);
		if(c2 > c1) c2--;
		if(c2 < jeash.Lib.mMe.__scr.childNodes.length - 1) jeash.Lib.mMe.__scr.insertBefore(swap,jeash.Lib.mMe.__scr.childNodes[c2++]); else jeash.Lib.mMe.__scr.appendChild(swap);
		swap = jeash.Lib.mMe.__scr.removeChild(jeash.Lib.mMe.__scr.childNodes[c2]);
		if(c1 > c2) c1--;
		if(c1 < jeash.Lib.mMe.__scr.childNodes.length - 1) jeash.Lib.mMe.__scr.insertBefore(swap,jeash.Lib.mMe.__scr.childNodes[c1++]); else jeash.Lib.mMe.__scr.appendChild(swap);
	}
}
jeash.Lib.jeashIsOnStage = function(surface) {
	var _g1 = 0, _g = jeash.Lib.mMe.__scr.childNodes.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(jeash.Lib.mMe.__scr.childNodes[i] == surface) return true;
	}
	return false;
}
jeash.Lib.jeashRemoveSurface = function(surface) {
	if(jeash.Lib.mMe.__scr != null) jeash.Lib.mMe.__scr.removeChild(surface);
}
jeash.Lib.jeashSetSurfaceTransform = function(surface,matrix) {
	if(matrix.a == 1 && matrix.b == 0 && matrix.c == 0 && matrix.d == 1) {
		surface.style.left = matrix.tx + "px";
		surface.style.top = matrix.ty + "px";
	} else {
		surface.style.setProperty("-moz-transform","matrix(" + matrix.a.toFixed(4) + ", " + matrix.b.toFixed(4) + ", " + matrix.c.toFixed(4) + ", " + matrix.d.toFixed(4) + ", " + matrix.tx.toFixed(4) + "px, " + matrix.ty.toFixed(4) + "px)","");
		surface.style.setProperty("-webkit-transform","matrix(" + matrix.a.toFixed(4) + ", " + matrix.b.toFixed(4) + ", " + matrix.c.toFixed(4) + ", " + matrix.d.toFixed(4) + ", " + matrix.tx.toFixed(4) + ", " + matrix.ty.toFixed(4) + ")","");
		surface.style.setProperty("-o-transform","matrix(" + matrix.a.toFixed(4) + ", " + matrix.b.toFixed(4) + ", " + matrix.c.toFixed(4) + ", " + matrix.d.toFixed(4) + ", " + matrix.tx.toFixed(4) + ", " + matrix.ty.toFixed(4) + ")","");
		surface.style.setProperty("-ms-transform","matrix(" + matrix.a.toFixed(4) + ", " + matrix.b.toFixed(4) + ", " + matrix.c.toFixed(4) + ", " + matrix.d.toFixed(4) + ", " + matrix.tx.toFixed(4) + ", " + matrix.ty.toFixed(4) + ")","");
	}
}
jeash.Lib.jeashSetSurfaceOpacity = function(surface,alpha) {
	surface.style.setProperty("opacity",Std.string(alpha),"");
}
jeash.Lib.jeashSetSurfaceFont = function(surface,font,bold,size,color,align,lineHeight) {
	surface.style.setProperty("font-family",font,"");
	surface.style.setProperty("font-weight",Std.string(bold),"");
	surface.style.setProperty("color","#" + StringTools.hex(color),"");
	surface.style.setProperty("font-size",size + "px","");
	surface.style.setProperty("text-align",align,"");
	surface.style.setProperty("line-height",lineHeight + "px","");
}
jeash.Lib.jeashSetSurfaceBorder = function(surface,color,size) {
	surface.style.setProperty("border-color","#" + StringTools.hex(color),"");
	surface.style.setProperty("border-style","solid","");
	surface.style.setProperty("border-width",size + "px","");
	surface.style.setProperty("border-collapse","collapse","");
}
jeash.Lib.jeashSetSurfacePadding = function(surface,padding,margin,display) {
	surface.style.setProperty("padding",padding + "px","");
	surface.style.setProperty("margin",margin + "px","");
	surface.style.setProperty("top",padding + 2 + "px","");
	surface.style.setProperty("right",padding + 1 + "px","");
	surface.style.setProperty("left",padding + 1 + "px","");
	surface.style.setProperty("bottom",padding + 1 + "px","");
	surface.style.setProperty("display",display?"inline":"block","");
}
jeash.Lib.jeashAppendText = function(surface,container,text,wrap,isHtml) {
	var _g1 = 0, _g = surface.childNodes.length;
	while(_g1 < _g) {
		var i = _g1++;
		surface.removeChild(surface.childNodes[i]);
	}
	if(isHtml) container.innerHTML = text; else container.appendChild(js.Lib.document.createTextNode(text));
	container.style.setProperty("position","relative","");
	container.style.setProperty("cursor","default","");
	if(!wrap) container.style.setProperty("white-space","nowrap","");
	surface.appendChild(container);
}
jeash.Lib.jeashSetTextDimensions = function(surface,width,height,align) {
	surface.style.setProperty("width",width + "px","");
	surface.style.setProperty("height",height + "px","");
	surface.style.setProperty("overflow","hidden","");
	surface.style.setProperty("text-align",align,"");
}
jeash.Lib.jeashSetSurfaceAlign = function(surface,align) {
	surface.style.setProperty("text-align",align,"");
}
jeash.Lib.jeashSurfaceHitTest = function(surface,x,y) {
	var _g1 = 0, _g = surface.childNodes.length;
	while(_g1 < _g) {
		var i = _g1++;
		var node = surface.childNodes[i];
		if(x >= node.offsetLeft && x <= node.offsetLeft + node.offsetWidth && y >= node.offsetTop && y <= node.offsetTop + node.offsetHeight) return true;
	}
	return false;
}
jeash.Lib.jeashCopyStyle = function(src,tgt) {
	tgt.id = src.id;
	var _g = 0, _g1 = ["left","top","-moz-transform","-moz-transform-origin","-webkit-transform","-webkit-transform-origin","-o-transform","-o-transform-origin","opacity","display"];
	while(_g < _g1.length) {
		var prop = _g1[_g];
		++_g;
		tgt.style.setProperty(prop,src.style.getPropertyValue(prop),"");
	}
}
jeash.Lib.jeashDrawToSurface = function(surface,tgt,matrix,alpha) {
	if(alpha == null) alpha = 1.0;
	var srcCtx = surface.getContext("2d");
	var tgtCtx = tgt.getContext("2d");
	if(alpha != 1.0) tgtCtx.globalAlpha = alpha;
	if(surface.width > 0 && surface.height > 0) {
		if(matrix != null) {
			tgtCtx.save();
			if(matrix.a == 1 && matrix.b == 0 && matrix.c == 0 && matrix.d == 1) tgtCtx.translate(matrix.tx,matrix.ty); else tgtCtx.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			tgtCtx.drawImage(surface,0,0);
			tgtCtx.restore();
		} else tgtCtx.drawImage(surface,0,0);
	}
}
jeash.Lib.jeashDisableRightClick = function() {
	if(jeash.Lib.mMe != null) try {
		jeash.Lib.mMe.__scr.oncontextmenu = function() {
			return false;
		};
	} catch( e ) {
		jeash.Lib.trace("Disable right click not supported in this browser.");
	}
}
jeash.Lib.jeashEnableRightClick = function() {
	if(jeash.Lib.mMe != null) try {
		jeash.Lib.mMe.__scr.oncontextmenu = null;
	} catch( e ) {
	}
}
jeash.Lib.jeashEnableFullScreen = function() {
	if(jeash.Lib.mMe != null) {
		var origWidth = jeash.Lib.mMe.__scr.style.getPropertyValue("width");
		var origHeight = jeash.Lib.mMe.__scr.style.getPropertyValue("height");
		jeash.Lib.mMe.__scr.style.setProperty("width","100%","");
		jeash.Lib.mMe.__scr.style.setProperty("height","100%","");
		jeash.Lib.jeashDisableFullScreen = function() {
			jeash.Lib.mMe.__scr.style.setProperty("width",origWidth,"");
			jeash.Lib.mMe.__scr.style.setProperty("height",origHeight,"");
		};
	}
}
jeash.Lib.jeashDisableFullScreen = function() {
}
jeash.Lib.jeashFullScreenWidth = function() {
	var window = js.Lib.window;
	return window.innerWidth;
}
jeash.Lib.jeashFullScreenHeight = function() {
	var window = js.Lib.window;
	return window.innerHeight;
}
jeash.Lib.jeashSetCursor = function(hand) {
	if(jeash.Lib.mMe != null) {
		if(hand) jeash.Lib.mMe.__scr.style.setProperty("cursor","pointer",""); else jeash.Lib.mMe.__scr.style.setProperty("cursor","default","");
	}
}
jeash.Lib.jeashSetSurfaceVisible = function(surface,visible) {
	if(visible) surface.style.setProperty("display","block",""); else surface.style.setProperty("display","none","");
}
jeash.Lib.jeashSetSurfaceId = function(surface,name) {
	surface.id = name;
}
jeash.Lib.jeashDrawSurfaceRect = function(surface,tgt,x,y,rect) {
	var tgtCtx = tgt.getContext("2d");
	tgt.width = rect.width;
	tgt.height = rect.height;
	tgtCtx.drawImage(surface,rect.x,rect.y,rect.width,rect.height,0,0,rect.width,rect.height);
	tgt.style.left = x + "px";
	tgt.style.top = y + "px";
}
jeash.Lib.jeashSetSurfaceScale = function(surface,scale) {
	surface.style.setProperty("-moz-transform","scale(" + scale + ")","");
	surface.style.setProperty("-webkit-transform","scale(" + scale + ")","");
	surface.style.setProperty("-o-transform","scale(" + scale + ")","");
	surface.style.setProperty("-ms-transform","scale(" + scale + ")","");
}
jeash.Lib.jeashSetSurfaceRotation = function(surface,rotate) {
	surface.style.setProperty("-moz-transform","rotate(" + rotate + "deg)","");
	surface.style.setProperty("-webkit-transform","rotate(" + rotate + "deg)","");
	surface.style.setProperty("-o-transform","rotate(" + rotate + "deg)","");
	surface.style.setProperty("-ms-transform","rotate(" + rotate + "deg)","");
}
jeash.Lib.Run = function(tgt,width,height) {
	jeash.Lib.mMe = new jeash.Lib(tgt.id,width,height);
	jeash.Lib.jeashGetCanvas().width = width;
	jeash.Lib.jeashGetCanvas().height = height;
	if(!StringTools.startsWith(jeash.Lib.context,"swf")) {
		var _g1 = 0, _g = tgt.attributes.length;
		while(_g1 < _g) {
			var i = _g1++;
			var attr = tgt.attributes.item(i);
			if(StringTools.startsWith(attr.name,"data-")) switch(attr.name) {
			case "data-" + "framerate":
				jeash.Lib.jeashGetStage().jeashSetFrameRate(Std.parseFloat(attr.value));
				break;
			default:
			}
		}
		var _g = 0, _g1 = ["resize","mouseup","mouseover","mouseout","mousemove","mousedown","mousewheel","focus","dblclick","click","blur"];
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			tgt.addEventListener(type,$closure(jeash.Lib.jeashGetStage(),"jeashProcessStageEvent"),true);
		}
		var _g = 0, _g1 = ["keyup","keypress","keydown"];
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			var window = js.Lib.window;
			window.addEventListener(type,$closure(jeash.Lib.jeashGetStage(),"jeashProcessStageEvent"),true);
		}
		jeash.Lib.jeashGetStage().jeashSetBackgroundColour(tgt.style.backgroundColor != null && tgt.style.backgroundColor != ""?jeash.Lib.ParseColor(tgt.style.backgroundColor,function(res,pos,cur) {
			return (function($this) {
				var $r;
				switch(pos) {
				case 0:
					$r = res | cur << 16;
					break;
				case 1:
					$r = res | cur << 8;
					break;
				case 2:
					$r = res | cur;
					break;
				}
				return $r;
			}(this));
		}):16777215);
		jeash.Lib.jeashGetCurrent().jeashGetGraphics().beginFill(jeash.Lib.jeashGetStage().jeashGetBackgroundColour());
		jeash.Lib.jeashGetCurrent().jeashGetGraphics().drawRect(0,0,width,height);
		jeash.Lib.jeashGetCurrent().jeashGetGraphics().jeashSurface.id = "Root MovieClip";
		jeash.Lib.mMe.jeashTraceTextField = new jeash.text.TextField();
		jeash.Lib.mMe.jeashTraceTextField.jeashSetWidth(jeash.Lib.jeashGetStage().jeashGetStageWidth());
		jeash.Lib.mMe.jeashTraceTextField.SetWordWrap(true);
		jeash.Lib.jeashGetCurrent().addChild(jeash.Lib.mMe.jeashTraceTextField);
		jeash.Lib.jeashGetStage().jeashUpdateNextWake();
	}
	return jeash.Lib.mMe;
}
jeash.Lib.ParseColor = function(str,cb) {
	var re = new EReg("rgb\\(([0-9]*), ?([0-9]*), ?([0-9]*)\\)","");
	var hex = new EReg("#([0-9a-zA-Z][0-9a-zA-Z])([0-9a-zA-Z][0-9a-zA-Z])([0-9a-zA-Z][0-9a-zA-Z])","");
	if(re.match(str)) {
		var col = 0;
		var _g = 1;
		while(_g < 4) {
			var pos = _g++;
			var v = Std.parseInt(re.matched(pos));
			col = cb(col,pos - 1,v);
		}
		return col;
	} else if(hex.match(str)) {
		var col = 0;
		var _g = 1;
		while(_g < 4) {
			var pos = _g++;
			var v = "0x" + hex.matched(pos) & 255;
			v = cb(col,pos - 1,v);
		}
		return col;
	} else throw "Cannot parse color '" + str + "'.";
}
jeash.Lib.jeashGetWidth = function() {
	var tgt = js.Lib.document.getElementById("haxe:jeash");
	return tgt.clientWidth > 0?tgt.clientWidth:500;
}
jeash.Lib.jeashGetHeight = function() {
	var tgt = js.Lib.document.getElementById("haxe:jeash");
	return tgt.clientHeight > 0?tgt.clientHeight:500;
}
jeash.Lib.jeashBootstrap = function() {
	var tgt = js.Lib.document.getElementById("haxe:jeash");
	var lib = jeash.Lib.Run(tgt,jeash.Lib.jeashGetWidth(),jeash.Lib.jeashGetHeight());
	return lib;
}
jeash.Lib.prototype.mKilled = null;
jeash.Lib.prototype.mRequestedWidth = null;
jeash.Lib.prototype.mRequestedHeight = null;
jeash.Lib.prototype.mResizePending = null;
jeash.Lib.prototype.__scr = null;
jeash.Lib.prototype.mArgs = null;
jeash.Lib.prototype.jeashTraceTextField = null;
jeash.Lib.prototype.__class__ = jeash.Lib;
haxe.io.Eof = function(p) {
}
haxe.io.Eof.__name__ = ["haxe","io","Eof"];
haxe.io.Eof.prototype.toString = function() {
	return "Eof";
}
haxe.io.Eof.prototype.__class__ = haxe.io.Eof;
jeash.text.TextFieldAutoSize = function(p) {
}
jeash.text.TextFieldAutoSize.__name__ = ["jeash","text","TextFieldAutoSize"];
jeash.text.TextFieldAutoSize.prototype.__class__ = jeash.text.TextFieldAutoSize;
jeash.display.IGraphicsStroke = function() { }
jeash.display.IGraphicsStroke.__name__ = ["jeash","display","IGraphicsStroke"];
jeash.display.IGraphicsStroke.prototype.__class__ = jeash.display.IGraphicsStroke;
jeash.display.GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if( thickness === $_ ) return;
	if(miterLimit == null) miterLimit = 3;
	if(pixelHinting == null) pixelHinting = false;
	if(thickness == null) thickness = 0.;
	this.caps = caps != null?caps:null;
	this.fill = fill;
	this.joints = joints != null?joints:null;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	this.scaleMode = scaleMode != null?scaleMode:null;
	this.thickness = thickness;
	this.jeashGraphicsDataType = jeash.display.GraphicsDataType.STROKE;
}
jeash.display.GraphicsStroke.__name__ = ["jeash","display","GraphicsStroke"];
jeash.display.GraphicsStroke.prototype.caps = null;
jeash.display.GraphicsStroke.prototype.fill = null;
jeash.display.GraphicsStroke.prototype.joints = null;
jeash.display.GraphicsStroke.prototype.miterLimit = null;
jeash.display.GraphicsStroke.prototype.pixelHinting = null;
jeash.display.GraphicsStroke.prototype.scaleMode = null;
jeash.display.GraphicsStroke.prototype.thickness = null;
jeash.display.GraphicsStroke.prototype.jeashGraphicsDataType = null;
jeash.display.GraphicsStroke.prototype.__class__ = jeash.display.GraphicsStroke;
jeash.display.GraphicsStroke.__interfaces__ = [jeash.display.IGraphicsStroke,jeash.display.IGraphicsData];
nape.shape.ShapeType = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ShapeType" + " derp!";
}
nape.shape.ShapeType.__name__ = ["nape","shape","ShapeType"];
nape.shape.ShapeType.CIRCLE = null;
nape.shape.ShapeType.flibget_CIRCLE = function() {
	if(zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE;
}
nape.shape.ShapeType.POLYGON = null;
nape.shape.ShapeType.flibget_POLYGON = function() {
	if(zpp_nape.util.ZPP_Flags.ShapeType_POLYGON == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ShapeType_POLYGON;
}
nape.shape.ShapeType.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = new nape.shape.ShapeType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE;
		return $r;
	}(this))) return "CIRCLE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ShapeType_POLYGON == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = new nape.shape.ShapeType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ShapeType_POLYGON;
		return $r;
	}(this))) return "POLYGON"; else return "";
}
nape.shape.ShapeType.prototype.__class__ = nape.shape.ShapeType;
nape.shape.ShapeList = function(p) {
	if( p === $_ ) return;
	this.zpp_inner = new zpp_nape.util.ZPP_ShapeList();
	this.zpp_inner.outer = this;
}
nape.shape.ShapeList.__name__ = ["nape","shape","ShapeList"];
nape.shape.ShapeList.fromArray = function(array) {
	var ret = new nape.shape.ShapeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.shape.ShapeList.prototype.zpp_inner = null;
nape.shape.ShapeList.prototype.length = null;
nape.shape.ShapeList.prototype.flibget_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.length;
	}
	return this.zpp_inner.user_length;
}
nape.shape.ShapeList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
}
nape.shape.ShapeList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.flibget_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.flibget_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.outer;
}
nape.shape.ShapeList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.shape.ShapeList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.shape.ShapeList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx = ret.outer;
	return retx;
}
nape.shape.ShapeList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx = ret.outer;
	return retx;
}
nape.shape.ShapeList.prototype.add = function(obj) {
	return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
}
nape.shape.ShapeList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret = (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var x = cx_ite.elt;
				if(x == obj.zpp_inner) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
}
nape.shape.ShapeList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
}
nape.shape.ShapeList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
}
nape.shape.ShapeList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.iterators == null) this.zpp_inner.iterators = new zpp_nape.util.ZNPList_ShapeIterator();
	return nape.shape.ShapeIterator.get(this);
}
nape.shape.ShapeList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.shape.ShapeList();
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_ShapeIterator();
		$r = nape.shape.ShapeIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Shape" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
}
nape.shape.ShapeList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var $it0 = (function($this) {
		var $r;
		xs.zpp_inner.valmod();
		if(xs.zpp_inner.iterators == null) xs.zpp_inner.iterators = new zpp_nape.util.ZNPList_ShapeIterator();
		$r = nape.shape.ShapeIterator.get(xs);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(!this.has(x)) if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
	}
}
nape.shape.ShapeList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_ShapeIterator();
		$r = nape.shape.ShapeIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		if(!fst) ret += ",";
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
}
nape.shape.ShapeList.prototype.__class__ = nape.shape.ShapeList;
nape.shape.ShapeIterator = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_ShapeList.internal) throw "Error: Cannot instantiate " + "Shape" + "Iterator derp!";
}
nape.shape.ShapeIterator.__name__ = ["nape","shape","ShapeIterator"];
nape.shape.ShapeIterator.zpp_pool = null;
nape.shape.ShapeIterator.get = function(list) {
	var ret = nape.shape.ShapeIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_ShapeList.internal = true;
		var ret = new nape.shape.ShapeIterator();
		zpp_nape.util.ZPP_ShapeList.internal = false;
		$r = ret;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.shape.ShapeIterator.zpp_pool;
		nape.shape.ShapeIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	list.zpp_inner.iterators.add(ret);
	return ret;
}
nape.shape.ShapeIterator.prototype.zpp_inner = null;
nape.shape.ShapeIterator.prototype.zpp_i = null;
nape.shape.ShapeIterator.prototype.zpp_critical = null;
nape.shape.ShapeIterator.prototype.zpp_next = null;
nape.shape.ShapeIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.flibget_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.shape.ShapeIterator.zpp_pool;
		nape.shape.ShapeIterator.zpp_pool = this;
		this.zpp_inner.zpp_inner.iterators.remove(this);
		return false;
	}
}
nape.shape.ShapeIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
}
nape.shape.ShapeIterator.prototype.__class__ = nape.shape.ShapeIterator;
zpp_nape.dynamics.ZPP_InteractionFilter = function(p) {
	if( p === $_ ) return;
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.collisionGroup = this.sensorGroup = this.fluidGroup = 1;
	this.collisionMask = this.sensorMask = this.fluidMask = -1;
}
zpp_nape.dynamics.ZPP_InteractionFilter.__name__ = ["zpp_nape","dynamics","ZPP_InteractionFilter"];
zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.next = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.outer = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new nape.dynamics.InteractionFilter();
		var o = this.outer.zpp_inner;
		o.outer = null;
		o.next = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
}
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.free = function() {
	this.outer = null;
}
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.alloc = function() {
}
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.shapes = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.wrap_shapes = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.feature_cons = function() {
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
}
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.addShape = function(shape) {
	this.shapes.add(shape);
}
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.remShape = function(shape) {
	this.shapes.remove(shape);
}
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.copy = function() {
	var ret = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) ret = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
			ret = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	ret.collisionGroup = this.collisionGroup;
	ret.collisionMask = this.collisionMask;
	ret.sensorGroup = this.sensorGroup;
	ret.sensorMask = this.sensorMask;
	ret.fluidGroup = this.fluidGroup;
	ret.fluidMask = this.fluidMask;
	return ret;
}
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.collisionGroup = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.collisionMask = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.collisionFilter = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.shouldCollide = function(x) {
	return (this.collisionFilter == null && (this.collisionMask & x.collisionGroup) != 0 || this.collisionFilter != null && this.collisionFilter(this.wrapper(),x.wrapper())) && (x.collisionFilter == null && (x.collisionMask & this.collisionGroup) != 0 || x.collisionFilter != null && x.collisionFilter(x.wrapper(),this.wrapper()));
}
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.sensorGroup = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.sensorMask = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.sensorFilter = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.shouldSense = function(x) {
	return (this.sensorFilter == null && (this.sensorMask & x.sensorGroup) != 0 || this.sensorFilter != null && this.sensorFilter(this.wrapper(),x.wrapper())) && (x.sensorFilter == null && (x.sensorMask & this.sensorGroup) != 0 || x.sensorFilter != null && x.sensorFilter(x.wrapper(),this.wrapper()));
}
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.fluidGroup = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.fluidMask = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.fluidFilter = null;
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.shouldFlow = function(x) {
	return (this.fluidFilter == null && (this.fluidMask & x.fluidGroup) != 0 || this.fluidFilter != null && this.fluidFilter(this.wrapper(),x.wrapper())) && (x.fluidFilter == null && (x.fluidMask & this.fluidGroup) != 0 || x.fluidFilter != null && x.fluidFilter(x.wrapper(),this.wrapper()));
}
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.invalidate = function() {
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.wake();
		cx_ite = cx_ite.next;
	}
}
zpp_nape.dynamics.ZPP_InteractionFilter.prototype.__class__ = zpp_nape.dynamics.ZPP_InteractionFilter;
jeash.display.Shape = function(p) {
	if( p === $_ ) return;
	jeash.Lib.jeashGetCanvas();
	this.jeashGraphics = new jeash.display.Graphics();
	if(this.jeashGraphics != null) this.jeashGraphics.owner = this;
	jeash.display.DisplayObject.call(this);
	this.name = "Shape " + jeash.display.DisplayObject.mNameID++;
}
jeash.display.Shape.__name__ = ["jeash","display","Shape"];
jeash.display.Shape.__super__ = jeash.display.DisplayObject;
for(var k in jeash.display.DisplayObject.prototype ) jeash.display.Shape.prototype[k] = jeash.display.DisplayObject.prototype[k];
jeash.display.Shape.prototype.jeashGraphics = null;
jeash.display.Shape.prototype.graphics = null;
jeash.display.Shape.prototype.jeashGetGraphics = function() {
	return this.jeashGraphics;
}
jeash.display.Shape.prototype.jeashGetObjectUnderPoint = function(point) {
	return null;
}
jeash.display.Shape.prototype.__class__ = jeash.display.Shape;
if(!jeash.utils) jeash.utils = {}
jeash.utils.ByteArray = function(p) {
	if( p === $_ ) return;
	this.position = 0;
	this.data = [];
	this.TWOeN23 = Math.pow(2,-23);
	this.pow = Math.pow;
	this.LN2 = Math.log(2);
	this.abs = Math.abs;
	this.log = Math.log;
	this.floor = Math.floor;
	this.bigEndian = false;
}
jeash.utils.ByteArray.__name__ = ["jeash","utils","ByteArray"];
jeash.utils.ByteArray.prototype.data = null;
jeash.utils.ByteArray.prototype.bigEndian = null;
jeash.utils.ByteArray.prototype.bytesAvailable = null;
jeash.utils.ByteArray.prototype.endian = null;
jeash.utils.ByteArray.prototype.objectEncoding = null;
jeash.utils.ByteArray.prototype.position = null;
jeash.utils.ByteArray.prototype.length = null;
jeash.utils.ByteArray.prototype.TWOeN23 = null;
jeash.utils.ByteArray.prototype.pow = null;
jeash.utils.ByteArray.prototype.LN2 = null;
jeash.utils.ByteArray.prototype.abs = null;
jeash.utils.ByteArray.prototype.log = null;
jeash.utils.ByteArray.prototype.floor = null;
jeash.utils.ByteArray.prototype.GetBytesAvailable = function() {
	return this.GetLength() - this.position;
}
jeash.utils.ByteArray.prototype.readString = function(len) {
	var bytes = haxe.io.Bytes.alloc(len);
	this.readFullBytes(bytes,0,len);
	return bytes.toString();
}
jeash.utils.ByteArray.prototype.readFullBytes = function(bytes,pos,len) {
	var _g1 = pos, _g = pos + len;
	while(_g1 < _g) {
		var i = _g1++;
		this.data[this.position++] = bytes.b[i];
	}
}
jeash.utils.ByteArray.prototype.read = function(nbytes) {
	var s = new jeash.utils.ByteArray();
	this.readBytes(s,0,nbytes);
	return haxe.io.Bytes.ofData(s.data);
}
jeash.utils.ByteArray.prototype.GetLength = function() {
	return this.data.length;
}
jeash.utils.ByteArray.prototype.readByte = function() {
	if(this.position >= this.GetLength()) throw new jeash.errors.IOError("Read error - Out of bounds");
	return this.data[this.position++];
}
jeash.utils.ByteArray.prototype.readBytes = function(bytes,offset,length) {
	if(offset < 0 || length < 0 || offset + length > this.data.length) throw new jeash.errors.IOError("Read error - Out of bounds");
	if(this.data.length == 0 && length > 0) throw new jeash.errors.IOError("Read error - Out of bounds");
	if(this.data.length < length) length = this.data.length;
	var b1 = this.data;
	var b2 = bytes;
	b2.position = offset;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		b2.writeByte(b1[this.position + i]);
	}
	b2.position = offset;
	this.position += length;
}
jeash.utils.ByteArray.prototype.writeByte = function(value) {
	this.data[this.position++] = value;
}
jeash.utils.ByteArray.prototype.writeBytes = function(bytes,offset,length) {
	if(offset < 0 || length < 0 || offset + length > bytes.GetLength()) throw new jeash.errors.IOError("Write error - Out of bounds");
	var b2 = bytes;
	b2.position = offset;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		this.data[this.position++] = b2.readByte();
	}
}
jeash.utils.ByteArray.prototype.readBoolean = function() {
	return this.readByte() == 1?true:false;
}
jeash.utils.ByteArray.prototype.writeBoolean = function(value) {
	this.writeByte(value?1:0);
}
jeash.utils.ByteArray.prototype.readDouble = function() {
	var data = this.data, pos, b1, b2, b3, b4, b5, b6, b7, b8;
	if(this.bigEndian) {
		pos = (this.position += 8) - 8;
		b1 = data[pos] & 255;
		b2 = data[++pos] & 255;
		b3 = data[++pos] & 255;
		b4 = data[++pos] & 255;
		b5 = data[++pos] & 255;
		b6 = data[++pos] & 255;
		b7 = data[++pos] & 255;
		b8 = data[++pos] & 255;
	} else {
		pos = this.position += 8;
		b1 = data[--pos] & 255;
		b2 = data[--pos] & 255;
		b3 = data[--pos] & 255;
		b4 = data[--pos] & 255;
		b5 = data[--pos] & 255;
		b6 = data[--pos] & 255;
		b7 = data[--pos] & 255;
		b8 = data[--pos] & 255;
	}
	var sign = 1 - (b1 >> 7 << 1);
	var exp = (b1 << 4 & 2047 | b2 >> 4) - 1023;
	var sig = parseInt((((b2 & 15) << 16 | b3 << 8 | b4) * this.pow(2,32)).toString(2),2) + parseInt(((b5 >> 7) * this.pow(2,31)).toString(2),2) + parseInt(((b5 & 127) << 24 | b6 << 16 | b7 << 8 | b8).toString(2),2);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + this.pow(2,-52) * sig) * this.pow(2,exp);
}
jeash.utils.ByteArray.prototype.writeDouble = function(x) {
	if(x == 0.0) {
		var _g = 0;
		while(_g < 8) {
			var _ = _g++;
			this.data[this.position++] = 0;
		}
	}
	var exp = this.floor(this.log(this.abs(x)) / this.LN2);
	var sig = this.floor(this.abs(x) / this.pow(2,exp) * this.pow(2,52));
	var sig_h = sig & 34359738367;
	var sig_l = this.floor(sig / this.pow(2,32));
	var b1 = exp + 1023 >> 4 | (exp > 0?x < 0?128:64:x < 0?128:0), b2 = exp + 1023 << 4 & 255 | sig_l >> 16 & 15, b3 = sig_l >> 8 & 255, b4 = sig_l & 255, b5 = sig_h >> 24 & 255, b6 = sig_h >> 16 & 255, b7 = sig_h >> 8 & 255, b8 = sig_h & 255;
	if(this.bigEndian) {
		this.data[this.position++] = b1;
		this.data[this.position++] = b2;
		this.data[this.position++] = b3;
		this.data[this.position++] = b4;
		this.data[this.position++] = b5;
		this.data[this.position++] = b6;
		this.data[this.position++] = b7;
		this.data[this.position++] = b8;
	} else {
		this.data[this.position++] = b8;
		this.data[this.position++] = b7;
		this.data[this.position++] = b6;
		this.data[this.position++] = b5;
		this.data[this.position++] = b4;
		this.data[this.position++] = b3;
		this.data[this.position++] = b2;
		this.data[this.position++] = b1;
	}
}
jeash.utils.ByteArray.prototype.readFloat = function() {
	var data = this.data, pos, b1, b2, b3, b4;
	if(this.bigEndian) {
		pos = (this.position += 4) - 4;
		b1 = data[pos] & 255;
		b2 = data[++pos] & 255;
		b3 = data[++pos] & 255;
		b4 = data[++pos] & 255;
	} else {
		pos = this.position += 4;
		b1 = data[--pos] & 255;
		b2 = data[--pos] & 255;
		b3 = data[--pos] & 255;
		b4 = data[--pos] & 255;
	}
	var sign = 1 - (b1 >> 7 << 1);
	var exp = (b1 << 1 & 255 | b2 >> 7) - 127;
	var sig = (b2 & 127) << 16 | b3 << 8 | b4;
	if(sig == 0 && exp == -127) return 0.0;
	return sign * (1 + this.TWOeN23 * sig) * this.pow(2,exp);
}
jeash.utils.ByteArray.prototype.writeFloat = function(x) {
	if(x == 0.0) {
		var _g = 0;
		while(_g < 4) {
			var _ = _g++;
			this.data[this.position++] = 0;
		}
	}
	var exp = this.floor(this.log(this.abs(x)) / this.LN2);
	var sig = this.floor(this.abs(x) / this.pow(2,exp) * this.pow(2,23)) & 8388607;
	var b1 = exp + 127 >> 1 | (exp > 0?x < 0?128:64:x < 0?128:0), b2 = exp + 127 << 7 & 255 | sig >> 16 & 127, b3 = sig >> 8 & 255, b4 = sig & 255;
	if(this.bigEndian) {
		this.data[this.position++] = b1;
		this.data[this.position++] = b2;
		this.data[this.position++] = b3;
		this.data[this.position++] = b4;
	} else {
		this.data[this.position++] = b4;
		this.data[this.position++] = b3;
		this.data[this.position++] = b2;
		this.data[this.position++] = b1;
	}
}
jeash.utils.ByteArray.prototype.readInt = function() {
	var ch1, ch2, ch3, ch4;
	if(this.bigEndian) {
		ch4 = this.readByte();
		ch3 = this.readByte();
		ch2 = this.readByte();
		ch1 = this.readByte();
	} else {
		ch1 = this.readByte();
		ch2 = this.readByte();
		ch3 = this.readByte();
		ch4 = this.readByte();
	}
	return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
}
jeash.utils.ByteArray.prototype.writeInt = function(value) {
	if(this.bigEndian) {
		this.writeByte(value >>> 24);
		this.writeByte(value >> 16 & 255);
		this.writeByte(value >> 8 & 255);
		this.writeByte(value & 255);
	} else {
		this.writeByte(value & 255);
		this.writeByte(value >> 8 & 255);
		this.writeByte(value >> 16 & 255);
		this.writeByte(value >>> 24);
	}
}
jeash.utils.ByteArray.prototype.readShort = function() {
	var ch1 = this.readByte();
	var ch2 = this.readByte();
	var n = this.bigEndian?ch2 | ch1 << 8:ch1 | ch2 << 8;
	if((n & 32768) != 0) return n - 65536;
	return n;
}
jeash.utils.ByteArray.prototype.writeShort = function(value) {
	if(value < -32768 || value >= 32768) throw new jeash.errors.IOError("Write error - overflow");
	this.writeUnsignedShort(value & 65535);
}
jeash.utils.ByteArray.prototype.writeUnsignedShort = function(value) {
	if(value < 0 || value >= 65536) throw new jeash.errors.IOError("Write error - overflow");
	if(this.__GetEndian() == jeash.utils.Endian.BIG_ENDIAN) {
		this.writeByte(value >> 8);
		this.writeByte(value & 255);
	} else {
		this.writeByte(value & 255);
		this.writeByte(value >> 8);
	}
}
jeash.utils.ByteArray.prototype.readUTF = function() {
	var len = this.readShort();
	var bytes = haxe.io.Bytes.ofData(this.data);
	return bytes.readString(2,len);
}
jeash.utils.ByteArray.prototype.writeUTF = function(value) {
	var bytes = haxe.io.Bytes.ofString(value);
	this.writeShort(bytes.length);
	var _g1 = 0, _g = bytes.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.data[this.position++] = bytes.b[i];
	}
}
jeash.utils.ByteArray.prototype.writeUTFBytes = function(value) {
	var bytes = haxe.io.Bytes.ofString(value);
	var _g1 = 0, _g = bytes.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.data[this.position++] = bytes.b[i];
	}
}
jeash.utils.ByteArray.prototype.readUTFBytes = function(len) {
	var bytes = haxe.io.Bytes.ofData(this.data);
	return bytes.readString(0,len);
}
jeash.utils.ByteArray.prototype.readUnsignedByte = function() {
	return this.readByte();
}
jeash.utils.ByteArray.prototype.readUnsignedShort = function() {
	return this.readShort();
}
jeash.utils.ByteArray.prototype.readUnsignedInt = function() {
	return this.readInt();
}
jeash.utils.ByteArray.prototype.writeUnsignedInt = function(value) {
	this.writeInt(value);
}
jeash.utils.ByteArray.prototype.__GetEndian = function() {
	if(this.bigEndian == true) return jeash.utils.Endian.BIG_ENDIAN; else return jeash.utils.Endian.LITTLE_ENDIAN;
}
jeash.utils.ByteArray.prototype.__SetEndian = function(endian) {
	if(endian == jeash.utils.Endian.BIG_ENDIAN) this.bigEndian = true; else this.bigEndian = false;
	return endian;
}
jeash.utils.ByteArray.prototype.__class__ = jeash.utils.ByteArray;
zpp_nape.geom.ZPP_Ray = function(p) {
	if( p === $_ ) return;
	this.origin = nape.geom.Vec2.get(null,null,null);
	this.direction = nape.geom.Vec2.get(null,null,null);
	var me = this;
	this.origin.zpp_inner._invalidate = function(x) {
		me.originx = x.x;
		me.originy = x.y;
	};
	this.direction.zpp_inner._invalidate = function(x) {
		me.dirx = x.x;
		me.diry = x.y;
		me.zip_dir = true;
	};
	this.zip_dir = false;
}
zpp_nape.geom.ZPP_Ray.__name__ = ["zpp_nape","geom","ZPP_Ray"];
zpp_nape.geom.ZPP_Ray.prototype.origin = null;
zpp_nape.geom.ZPP_Ray.prototype.direction = null;
zpp_nape.geom.ZPP_Ray.prototype.maxdist = null;
zpp_nape.geom.ZPP_Ray.prototype.originx = null;
zpp_nape.geom.ZPP_Ray.prototype.originy = null;
zpp_nape.geom.ZPP_Ray.prototype.dirx = null;
zpp_nape.geom.ZPP_Ray.prototype.diry = null;
zpp_nape.geom.ZPP_Ray.prototype.idirx = null;
zpp_nape.geom.ZPP_Ray.prototype.idiry = null;
zpp_nape.geom.ZPP_Ray.prototype.normalx = null;
zpp_nape.geom.ZPP_Ray.prototype.normaly = null;
zpp_nape.geom.ZPP_Ray.prototype.absnormalx = null;
zpp_nape.geom.ZPP_Ray.prototype.absnormaly = null;
zpp_nape.geom.ZPP_Ray.prototype.zip_dir = null;
zpp_nape.geom.ZPP_Ray.prototype.invalidate_dir = function() {
	this.zip_dir = true;
}
zpp_nape.geom.ZPP_Ray.prototype.validate_dir = function() {
	if(this.zip_dir) {
		this.zip_dir = false;
		if(this.dirx * this.dirx + this.diry * this.diry < 1e-8) throw "Error: Ray::direction is degenerate";
		var d = this.dirx * this.dirx + this.diry * this.diry;
		var imag = 1.0 / Math.sqrt(d);
		var t = imag;
		this.dirx *= t;
		this.diry *= t;
		this.idirx = 1 / this.dirx;
		this.idiry = 1 / this.diry;
		this.normalx = -this.diry;
		this.normaly = this.dirx;
		this.absnormalx = (function($this) {
			var $r;
			var x = $this.normalx;
			$r = x < 0?-x:x;
			return $r;
		}(this));
		this.absnormaly = (function($this) {
			var $r;
			var x = $this.normaly;
			$r = x < 0?-x:x;
			return $r;
		}(this));
	}
}
zpp_nape.geom.ZPP_Ray.prototype.rayAABB = function() {
	var x0 = this.originx;
	var x1 = x0;
	var y0 = this.originy;
	var y1 = y0;
	if(this.maxdist == Math.POSITIVE_INFINITY) {
		if(this.dirx > 0) x1 = Math.POSITIVE_INFINITY; else if(this.dirx < 0) x1 = -Math.POSITIVE_INFINITY;
		if(this.diry > 0) y1 = Math.POSITIVE_INFINITY; else if(this.diry < 0) y1 = -Math.POSITIVE_INFINITY;
	} else {
		x1 += this.maxdist * this.dirx;
		y1 += this.maxdist * this.diry;
	}
	if(x1 < x0) {
		var t = x0;
		x0 = x1;
		x1 = t;
	}
	if(y1 < y0) {
		var t = y0;
		y0 = y1;
		y1 = t;
	}
	var rayab = zpp_nape.geom.ZPP_AABB.get(x0,y0,x1,y1);
	return rayab;
}
zpp_nape.geom.ZPP_Ray.prototype.aabbtest = function(a) {
	var dot1 = this.normalx * (this.originx - 0.5 * (a.minx + a.maxx)) + this.normaly * (this.originy - 0.5 * (a.miny + a.maxy));
	var dot2 = this.absnormalx * 0.5 * (a.maxx - a.minx) + this.absnormaly * 0.5 * (a.maxy - a.miny);
	return (function($this) {
		var $r;
		var x = dot1;
		$r = x < 0?-x:x;
		return $r;
	}(this)) < dot2;
}
zpp_nape.geom.ZPP_Ray.prototype.aabbsect = function(a) {
	var cx = this.originx >= a.minx && this.originx <= a.maxx;
	var cy = this.originy >= a.miny && this.originy <= a.maxy;
	if(cx && cy) return 0.0; else {
		var ret = -1.0;
		do {
			if(this.dirx >= 0 && this.originx >= a.maxx) break;
			if(this.dirx <= 0 && this.originx <= a.minx) break;
			if(this.diry >= 0 && this.originy >= a.maxy) break;
			if(this.diry <= 0 && this.originy <= a.miny) break;
			if(this.dirx > 0) {
				var t = (a.minx - this.originx) * this.idirx;
				if(t >= 0 && t <= this.maxdist) {
					var y = this.originy + t * this.diry;
					if(y >= a.miny && y <= a.maxy) {
						ret = t;
						break;
					}
				}
			} else if(this.dirx < 0) {
				var t = (a.maxx - this.originx) * this.idirx;
				if(t >= 0 && t <= this.maxdist) {
					var y = this.originy + t * this.diry;
					if(y >= a.miny && y <= a.maxy) {
						ret = t;
						break;
					}
				}
			}
			if(this.diry > 0) {
				var t = (a.miny - this.originy) * this.idiry;
				if(t >= 0 && t <= this.maxdist) {
					var x = this.originx + t * this.dirx;
					if(x >= a.minx && x <= a.maxx) {
						ret = t;
						break;
					}
				}
			} else if(this.diry < 0) {
				var t = (a.maxy - this.originy) * this.idiry;
				if(t >= 0 && t <= this.maxdist) {
					var x = this.originx + t * this.dirx;
					if(x >= a.minx && x <= a.maxx) {
						ret = t;
						break;
					}
				}
			}
		} while(false);
		return ret;
	}
}
zpp_nape.geom.ZPP_Ray.prototype.circlesect = function(c,inner,mint) {
	if(c.zip_worldCOM) {
		if(c.body != null) {
			c.zip_worldCOM = false;
			if(c.zip_localCOM) {
				c.zip_localCOM = false;
				if(c.type == 1) c.polygon.__validate_localCOM();
				if(c.wrap_localCOM != null) {
					c.wrap_localCOM.zpp_inner.x = c.localCOMx;
					c.wrap_localCOM.zpp_inner.y = c.localCOMy;
				}
			}
			c.body.validate_axis();
			c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
			c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
			if(c.wrap_worldCOM != null) {
				c.wrap_worldCOM.zpp_inner.x = c.worldCOMx;
				c.wrap_worldCOM.zpp_inner.y = c.worldCOMy;
			}
		}
	}
	var acx;
	var acy;
	acx = this.originx - c.worldCOMx;
	acy = this.originy - c.worldCOMy;
	var A = this.dirx * this.dirx + this.diry * this.diry;
	var B = 2 * (acx * this.dirx + acy * this.diry);
	var C = acx * acx + acy * acy - c.radius * c.radius;
	var det = B * B - 4 * A * C;
	if(det == 0) {
		var t = -B / 2 * A;
		if((!inner || C > 0) && t > 0 && t < mint && t <= this.maxdist) {
			var nx;
			var ny;
			nx = this.originx;
			ny = this.originy;
			var t1 = t;
			nx += this.dirx * t1;
			ny += this.diry * t1;
			var t1 = 1.0;
			nx -= c.worldCOMx * t1;
			ny -= c.worldCOMy * t1;
			var d = nx * nx + ny * ny;
			var imag = 1.0 / Math.sqrt(d);
			var t1 = imag;
			nx *= t1;
			ny *= t1;
			if(C <= 0) {
				nx = -nx;
				ny = -ny;
			}
			zpp_nape.geom.ZPP_Ray.internal = true;
			var ret = new nape.geom.RayResult(nape.geom.Vec2.get(nx,ny,null),t,C <= 0,c.outer);
			zpp_nape.geom.ZPP_Ray.internal = false;
			return ret;
		} else return null;
	} else {
		det = Math.sqrt(det);
		A = 1 / (2 * A);
		var t0 = (-B - det) * A;
		var t1 = (-B + det) * A;
		if(t0 > 0) {
			if(t0 < mint && t0 <= this.maxdist) {
				var nx;
				var ny;
				nx = this.originx;
				ny = this.originy;
				var t = t0;
				nx += this.dirx * t;
				ny += this.diry * t;
				var t = 1.0;
				nx -= c.worldCOMx * t;
				ny -= c.worldCOMy * t;
				var d = nx * nx + ny * ny;
				var imag = 1.0 / Math.sqrt(d);
				var t = imag;
				nx *= t;
				ny *= t;
				zpp_nape.geom.ZPP_Ray.internal = true;
				var ret = new nape.geom.RayResult(nape.geom.Vec2.get(nx,ny,null),t0,false,c.outer);
				zpp_nape.geom.ZPP_Ray.internal = false;
				return ret;
			} else return null;
		} else if(t1 > 0 && inner) {
			if(t1 < mint && t1 <= this.maxdist) {
				var nx;
				var ny;
				nx = this.originx;
				ny = this.originy;
				var t = t1;
				nx += this.dirx * t;
				ny += this.diry * t;
				var t = 1.0;
				nx -= c.worldCOMx * t;
				ny -= c.worldCOMy * t;
				var d = nx * nx + ny * ny;
				var imag = 1.0 / Math.sqrt(d);
				var t = imag;
				nx *= t;
				ny *= t;
				nx = -nx;
				ny = -ny;
				zpp_nape.geom.ZPP_Ray.internal = true;
				var ret = new nape.geom.RayResult(nape.geom.Vec2.get(nx,ny,null),t1,true,c.outer);
				zpp_nape.geom.ZPP_Ray.internal = false;
				return ret;
			} else return null;
		} else return null;
	}
}
zpp_nape.geom.ZPP_Ray.prototype.circlesect2 = function(c,inner,list) {
	if(c.zip_worldCOM) {
		if(c.body != null) {
			c.zip_worldCOM = false;
			if(c.zip_localCOM) {
				c.zip_localCOM = false;
				if(c.type == 1) c.polygon.__validate_localCOM();
				if(c.wrap_localCOM != null) {
					c.wrap_localCOM.zpp_inner.x = c.localCOMx;
					c.wrap_localCOM.zpp_inner.y = c.localCOMy;
				}
			}
			c.body.validate_axis();
			c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
			c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
			if(c.wrap_worldCOM != null) {
				c.wrap_worldCOM.zpp_inner.x = c.worldCOMx;
				c.wrap_worldCOM.zpp_inner.y = c.worldCOMy;
			}
		}
	}
	var acx;
	var acy;
	acx = this.originx - c.worldCOMx;
	acy = this.originy - c.worldCOMy;
	var A = this.dirx * this.dirx + this.diry * this.diry;
	var B = 2 * (acx * this.dirx + acy * this.diry);
	var C = acx * acx + acy * acy - c.radius * c.radius;
	var det = B * B - 4 * A * C;
	if(det == 0) {
		var t = -B / 2 * A;
		if((!inner || C > 0) && t > 0 && t <= this.maxdist) {
			var nx;
			var ny;
			nx = this.originx;
			ny = this.originy;
			var t1 = t;
			nx += this.dirx * t1;
			ny += this.diry * t1;
			var t1 = 1.0;
			nx -= c.worldCOMx * t1;
			ny -= c.worldCOMy * t1;
			var d = nx * nx + ny * ny;
			var imag = 1.0 / Math.sqrt(d);
			var t1 = imag;
			nx *= t1;
			ny *= t1;
			if(C <= 0) {
				nx = -nx;
				ny = -ny;
			}
			zpp_nape.geom.ZPP_Ray.internal = true;
			var res = new nape.geom.RayResult(nape.geom.Vec2.get(nx,ny,null),t,C <= 0,c.outer);
			zpp_nape.geom.ZPP_Ray.internal = false;
			var pre = null;
			var cx_ite = list.zpp_inner.inner.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(res.distance < j.distance) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			list.zpp_inner.inner.insert(pre,res);
		}
	} else {
		det = Math.sqrt(det);
		A = 1 / (2 * A);
		var t0 = (-B - det) * A;
		var t1 = (-B + det) * A;
		if(t0 > 0 && t0 <= this.maxdist) {
			var nx;
			var ny;
			nx = this.originx;
			ny = this.originy;
			var t = t0;
			nx += this.dirx * t;
			ny += this.diry * t;
			var t = 1.0;
			nx -= c.worldCOMx * t;
			ny -= c.worldCOMy * t;
			var d = nx * nx + ny * ny;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			nx *= t;
			ny *= t;
			zpp_nape.geom.ZPP_Ray.internal = true;
			var res = new nape.geom.RayResult(nape.geom.Vec2.get(nx,ny,null),t0,false,c.outer);
			zpp_nape.geom.ZPP_Ray.internal = false;
			var pre = null;
			var cx_ite = list.zpp_inner.inner.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(res.distance < j.distance) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			list.zpp_inner.inner.insert(pre,res);
		}
		if(t1 > 0 && t1 <= this.maxdist && inner) {
			var nx;
			var ny;
			nx = this.originx;
			ny = this.originy;
			var t = t1;
			nx += this.dirx * t;
			ny += this.diry * t;
			var t = 1.0;
			nx -= c.worldCOMx * t;
			ny -= c.worldCOMy * t;
			var d = nx * nx + ny * ny;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			nx *= t;
			ny *= t;
			nx = -nx;
			ny = -ny;
			zpp_nape.geom.ZPP_Ray.internal = true;
			var res = new nape.geom.RayResult(nape.geom.Vec2.get(nx,ny,null),t1,true,c.outer);
			zpp_nape.geom.ZPP_Ray.internal = false;
			var pre = null;
			var cx_ite = list.zpp_inner.inner.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(res.distance < j.distance) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			list.zpp_inner.inner.insert(pre,res);
		}
	}
}
zpp_nape.geom.ZPP_Ray.prototype.polysect = function(p,inner,mint) {
	var min = mint;
	var edge = null;
	var ei = p.edges.head;
	var cx_cont = true;
	var cx_itei = p.gverts.next;
	var u = cx_itei;
	var cx_itej = cx_itei.next;
	while(cx_itej != null) {
		var v = cx_itej;
		var e = ei.elt;
		if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
			var _vx;
			var _vy;
			_vx = v.x - u.x;
			_vy = v.y - u.y;
			var _sx;
			var _sy;
			_sx = u.x - this.originx;
			_sy = u.y - this.originy;
			var den = _vy * this.dirx - _vx * this.diry;
			if(den * den > 1e-8) {
				den = 1 / den;
				var sxx = (_vy * _sx - _vx * _sy) * den;
				if(sxx > 0 && sxx < min && sxx <= this.maxdist) {
					var txx = (this.diry * _sx - this.dirx * _sy) * den;
					if(txx > -1e-008 && txx < 1 + 1e-8) {
						min = sxx;
						edge = ei.elt;
					}
				}
			}
		}
		ei = ei.next;
		cx_itei = cx_itej;
		u = v;
		cx_itej = cx_itej.next;
	}
	if(cx_cont) do {
		cx_itej = p.gverts.next;
		var v = cx_itej;
		var e = ei.elt;
		if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
			var _vx;
			var _vy;
			_vx = v.x - u.x;
			_vy = v.y - u.y;
			var _sx;
			var _sy;
			_sx = u.x - this.originx;
			_sy = u.y - this.originy;
			var den = _vy * this.dirx - _vx * this.diry;
			if(den * den > 1e-8) {
				den = 1 / den;
				var sxx = (_vy * _sx - _vx * _sy) * den;
				if(sxx > 0 && sxx < min && sxx <= this.maxdist) {
					var txx = (this.diry * _sx - this.dirx * _sy) * den;
					if(txx > -1e-008 && txx < 1 + 1e-8) {
						min = sxx;
						edge = ei.elt;
					}
				}
			}
		}
		ei = ei.next;
	} while(false);
	if(edge != null) {
		var nx;
		var ny;
		nx = edge.gnormx;
		ny = edge.gnormy;
		var inner1 = nx * this.dirx + ny * this.diry > 0;
		if(inner1) {
			nx = -nx;
			ny = -ny;
		}
		zpp_nape.geom.ZPP_Ray.internal = true;
		var ret = new nape.geom.RayResult(nape.geom.Vec2.get(nx,ny,null),min,inner1,p.outer);
		zpp_nape.geom.ZPP_Ray.internal = false;
		return ret;
	} else return null;
}
zpp_nape.geom.ZPP_Ray.prototype.polysect2 = function(p,inner,list) {
	var min = Math.POSITIVE_INFINITY;
	var max = -1.0;
	var edge = null;
	var edgemax = null;
	var ei = p.edges.head;
	var cx_cont = true;
	var cx_itei = p.gverts.next;
	var u = cx_itei;
	var cx_itej = cx_itei.next;
	while(cx_itej != null) {
		var v = cx_itej;
		var e = ei.elt;
		if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
			var _vx;
			var _vy;
			_vx = v.x - u.x;
			_vy = v.y - u.y;
			var _sx;
			var _sy;
			_sx = u.x - this.originx;
			_sy = u.y - this.originy;
			var den = _vy * this.dirx - _vx * this.diry;
			if(den * den > 1e-8) {
				den = 1 / den;
				var sxx = (_vy * _sx - _vx * _sy) * den;
				if(sxx > 0 && sxx <= this.maxdist && (sxx < min || sxx > max)) {
					var txx = (this.diry * _sx - this.dirx * _sy) * den;
					if(txx > -1e-008 && txx < 1 + 1e-8) {
						if(sxx < min) {
							min = sxx;
							edge = ei.elt;
						}
						if(sxx > max) {
							max = sxx;
							edgemax = ei.elt;
						}
					}
				}
			}
		}
		ei = ei.next;
		cx_itei = cx_itej;
		u = v;
		cx_itej = cx_itej.next;
	}
	if(cx_cont) do {
		cx_itej = p.gverts.next;
		var v = cx_itej;
		var e = ei.elt;
		if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
			var _vx;
			var _vy;
			_vx = v.x - u.x;
			_vy = v.y - u.y;
			var _sx;
			var _sy;
			_sx = u.x - this.originx;
			_sy = u.y - this.originy;
			var den = _vy * this.dirx - _vx * this.diry;
			if(den * den > 1e-8) {
				den = 1 / den;
				var sxx = (_vy * _sx - _vx * _sy) * den;
				if(sxx > 0 && sxx <= this.maxdist && (sxx < min || sxx > max)) {
					var txx = (this.diry * _sx - this.dirx * _sy) * den;
					if(txx > -1e-008 && txx < 1 + 1e-8) {
						if(sxx < min) {
							min = sxx;
							edge = ei.elt;
						}
						if(sxx > max) {
							max = sxx;
							edgemax = ei.elt;
						}
					}
				}
			}
		}
		ei = ei.next;
	} while(false);
	if(edge != null) {
		var nx;
		var ny;
		nx = edge.gnormx;
		ny = edge.gnormy;
		var inner1 = nx * this.dirx + ny * this.diry > 0;
		if(inner1) {
			nx = -nx;
			ny = -ny;
		}
		zpp_nape.geom.ZPP_Ray.internal = true;
		var ret = new nape.geom.RayResult(nape.geom.Vec2.get(nx,ny,null),min,inner1,p.outer);
		zpp_nape.geom.ZPP_Ray.internal = false;
		var pre = null;
		var cx_ite = list.zpp_inner.inner.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(ret.distance < j.distance) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		list.zpp_inner.inner.insert(pre,ret);
	}
	if(edgemax != null && edge != edgemax) {
		var nx;
		var ny;
		nx = edgemax.gnormx;
		ny = edgemax.gnormy;
		var inner1 = nx * this.dirx + ny * this.diry > 0;
		if(inner1) {
			nx = -nx;
			ny = -ny;
		}
		zpp_nape.geom.ZPP_Ray.internal = true;
		var ret = new nape.geom.RayResult(nape.geom.Vec2.get(nx,ny,null),max,inner1,p.outer);
		zpp_nape.geom.ZPP_Ray.internal = false;
		var pre = null;
		var cx_ite = list.zpp_inner.inner.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(ret.distance < j.distance) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		list.zpp_inner.inner.insert(pre,ret);
	}
}
zpp_nape.geom.ZPP_Ray.prototype.__class__ = zpp_nape.geom.ZPP_Ray;
if(!jeash.net) jeash.net = {}
jeash.net.URLRequest = function(inURL) {
	if( inURL === $_ ) return;
	if(inURL != null) this.url = inURL;
}
jeash.net.URLRequest.__name__ = ["jeash","net","URLRequest"];
jeash.net.URLRequest.prototype.url = null;
jeash.net.URLRequest.prototype.__class__ = jeash.net.URLRequest;
jeash.media.Sound = function(stream,context) {
	if( stream === $_ ) return;
	jeash.events.EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.length = 0;
	this.url = null;
	this.jeashSoundChannels = new IntHash();
	this.jeashSoundIdx = 0;
	if(stream != null) this.load(stream,context);
}
jeash.media.Sound.__name__ = ["jeash","media","Sound"];
jeash.media.Sound.__super__ = jeash.events.EventDispatcher;
for(var k in jeash.events.EventDispatcher.prototype ) jeash.media.Sound.prototype[k] = jeash.events.EventDispatcher.prototype[k];
jeash.media.Sound.jeashCanPlayType = function(extension) {
	var audio = js.Lib.document.createElement("audio");
	var playable = function(ok) {
		if(ok != "" && ok != "no") return true; else return false;
	};
	switch(extension) {
	case "mp3":
		return playable(audio.canPlayType("audio/mpeg"));
	case "ogg":
		return playable(audio.canPlayType("audio/ogg; codecs=\"vorbis\""));
	case "wav":
		return playable(audio.canPlayType("audio/wav; codecs=\"1\""));
	case "aac":
		return playable(audio.canPlayType("audio/mp4; codecs=\"mp4a.40.2\""));
	default:
		return false;
	}
}
jeash.media.Sound.prototype.bytesLoaded = null;
jeash.media.Sound.prototype.bytesTotal = null;
jeash.media.Sound.prototype.id3 = null;
jeash.media.Sound.prototype.isBuffering = null;
jeash.media.Sound.prototype.length = null;
jeash.media.Sound.prototype.url = null;
jeash.media.Sound.prototype.jeashStreamUrl = null;
jeash.media.Sound.prototype.jeashSoundChannels = null;
jeash.media.Sound.prototype.jeashSoundIdx = null;
jeash.media.Sound.prototype.jeashSoundCache = null;
jeash.media.Sound.prototype.jeashCreateAudio = function() {
}
jeash.media.Sound.prototype.close = function() {
}
jeash.media.Sound.prototype.load = function(stream,context) {
	var url = stream.url.split("?");
	var extension = url[0].substr(url[0].lastIndexOf(".") + 1);
	if(!jeash.media.Sound.jeashCanPlayType(extension.toLowerCase())) jeash.Lib.trace("Warning: '" + stream.url + "' may not play on this browser.");
	this.jeashStreamUrl = stream.url;
	this.jeashSoundCache = new jeash.net.URLLoader(stream);
}
jeash.media.Sound.prototype.play = function(startTime,loops,sndTransform) {
	if(loops == null) loops = 0;
	if(startTime == null) startTime = 0.0;
	if(this.jeashStreamUrl == null) return null;
	var self = this;
	var curIdx = this.jeashSoundIdx;
	var removeRef = function() {
		self.jeashSoundChannels.remove(curIdx);
	};
	var channel = jeash.media.SoundChannel.jeashCreate(this.jeashStreamUrl,startTime,loops,sndTransform,removeRef);
	this.jeashSoundChannels.set(curIdx,channel);
	this.jeashSoundIdx++;
	var audio = channel.jeashAudio;
	this.jeashAddEventListeners(audio);
	return channel;
}
jeash.media.Sound.prototype.jeashAddEventListeners = function(audio) {
	audio.addEventListener("canplay",$closure(this,"__onSoundLoaded"),false);
	audio.addEventListener("error",$closure(this,"__onSoundLoadError"),false);
	audio.addEventListener("abort",$closure(this,"__onSoundLoadError"),false);
}
jeash.media.Sound.prototype.jeashRemoveEventListeners = function(audio) {
	audio.removeEventListener("canplay",$closure(this,"__onSoundLoaded"),false);
	audio.removeEventListener("error",$closure(this,"__onSoundLoadError"),false);
	audio.removeEventListener("abort",$closure(this,"__onSoundLoadError"),false);
}
jeash.media.Sound.prototype.__onSoundLoaded = function(evt) {
	var audio = evt.target;
	this.jeashRemoveEventListeners(audio);
	var evt1 = new jeash.events.Event(jeash.events.Event.COMPLETE);
	this.dispatchEvent(evt1);
}
jeash.media.Sound.prototype.__onSoundLoadError = function(evt) {
	var audio = evt.target;
	this.jeashRemoveEventListeners(audio);
	jeash.Lib.trace("Error loading sound '" + audio.src + "'");
	var evt1 = new jeash.events.IOErrorEvent(jeash.events.IOErrorEvent.IO_ERROR);
	this.dispatchEvent(evt1);
}
jeash.media.Sound.prototype.__class__ = jeash.media.Sound;
zpp_nape.dynamics.ZPP_Contact = function(p) {
	if( p === $_ ) return;
	this.inner = new zpp_nape.dynamics.ZPP_IContact();
}
zpp_nape.dynamics.ZPP_Contact.__name__ = ["zpp_nape","dynamics","ZPP_Contact"];
zpp_nape.dynamics.ZPP_Contact.zpp_pool = null;
zpp_nape.dynamics.ZPP_Contact.prototype.outer = null;
zpp_nape.dynamics.ZPP_Contact.prototype.wrapper = function() {
	if(this.outer == null) {
		zpp_nape.dynamics.ZPP_Contact.internal = true;
		this.outer = new nape.dynamics.Contact();
		zpp_nape.dynamics.ZPP_Contact.internal = false;
		this.outer.zpp_inner = this;
	}
	return this.outer;
}
zpp_nape.dynamics.ZPP_Contact.prototype.px = null;
zpp_nape.dynamics.ZPP_Contact.prototype.py = null;
zpp_nape.dynamics.ZPP_Contact.prototype.wrap_position = null;
zpp_nape.dynamics.ZPP_Contact.prototype.getposition = function() {
	var me = this;
	this.wrap_position = nape.geom.Vec2.get(null,null,null);
	this.wrap_position.zpp_inner.inuse = true;
	this.wrap_position.zpp_inner.immutable = true;
	this.wrap_position.zpp_inner._validate = function() {
		if(me.arbiter == null || me.arbiter.cleared) throw "Error: Contact not currently in use";
		me.wrap_position.zpp_inner.x = me.px;
		me.wrap_position.zpp_inner.y = me.py;
	};
}
zpp_nape.dynamics.ZPP_Contact.prototype.arbiter = null;
zpp_nape.dynamics.ZPP_Contact.prototype.inner = null;
zpp_nape.dynamics.ZPP_Contact.prototype.active = null;
zpp_nape.dynamics.ZPP_Contact.prototype.stamp = null;
zpp_nape.dynamics.ZPP_Contact.prototype.hash = null;
zpp_nape.dynamics.ZPP_Contact.prototype.fresh = null;
zpp_nape.dynamics.ZPP_Contact.prototype.sBias = null;
zpp_nape.dynamics.ZPP_Contact.prototype.dist = null;
zpp_nape.dynamics.ZPP_Contact.prototype.elasticity = null;
zpp_nape.dynamics.ZPP_Contact.prototype.pjnAcc = null;
zpp_nape.dynamics.ZPP_Contact.prototype.pjtAcc = null;
zpp_nape.dynamics.ZPP_Contact.prototype.free = function() {
	this.arbiter = null;
}
zpp_nape.dynamics.ZPP_Contact.prototype.alloc = function() {
	this.pjnAcc = this.pjtAcc = 0.0;
}
zpp_nape.dynamics.ZPP_Contact.prototype.next = null;
zpp_nape.dynamics.ZPP_Contact.prototype.elem = function() {
	return this;
}
zpp_nape.dynamics.ZPP_Contact.prototype.begin = function() {
	return this.next;
}
zpp_nape.dynamics.ZPP_Contact.prototype.inuse = null;
zpp_nape.dynamics.ZPP_Contact.prototype.modified = null;
zpp_nape.dynamics.ZPP_Contact.prototype.pushmod = null;
zpp_nape.dynamics.ZPP_Contact.prototype.mcnt = null;
zpp_nape.dynamics.ZPP_Contact.prototype.set_begin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.dynamics.ZPP_Contact.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		o.inuse = true;
		$r = o;
		return $r;
	}(this));
	temp.next = this.next;
	this.next = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.dynamics.ZPP_Contact.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		var i = cx_ite;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.dynamics.ZPP_Contact.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.next;
	} else {
		var temp = (function($this) {
			var $r;
			o.inuse = true;
			$r = o;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.dynamics.ZPP_Contact.prototype.pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret.inuse = false;
	if(this.next == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.dynamics.ZPP_Contact.prototype.pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
}
zpp_nape.dynamics.ZPP_Contact.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.dynamics.ZPP_Contact.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.next;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		old.inuse = false;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.dynamics.ZPP_Contact.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.dynamics.ZPP_Contact.prototype.clear = function() {
}
zpp_nape.dynamics.ZPP_Contact.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.dynamics.ZPP_Contact.prototype.empty = function() {
	return this.next == null;
}
zpp_nape.dynamics.ZPP_Contact.prototype.size = function() {
	var cnt = 0;
	var cur = this.next;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.dynamics.ZPP_Contact.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.next;
			while(cx_ite != null) {
				var npite = cx_ite;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.dynamics.ZPP_Contact.prototype.front = function() {
	return this.next;
}
zpp_nape.dynamics.ZPP_Contact.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.dynamics.ZPP_Contact.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.dynamics.ZPP_Contact.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it:null;
}
zpp_nape.dynamics.ZPP_Contact.prototype.__class__ = zpp_nape.dynamics.ZPP_Contact;
zpp_nape.dynamics.ZPP_IContact = function(p) {
}
zpp_nape.dynamics.ZPP_IContact.__name__ = ["zpp_nape","dynamics","ZPP_IContact"];
zpp_nape.dynamics.ZPP_IContact.prototype.r1x = null;
zpp_nape.dynamics.ZPP_IContact.prototype.r1y = null;
zpp_nape.dynamics.ZPP_IContact.prototype.r2x = null;
zpp_nape.dynamics.ZPP_IContact.prototype.r2y = null;
zpp_nape.dynamics.ZPP_IContact.prototype.nMass = null;
zpp_nape.dynamics.ZPP_IContact.prototype.tMass = null;
zpp_nape.dynamics.ZPP_IContact.prototype.bounce = null;
zpp_nape.dynamics.ZPP_IContact.prototype.friction = null;
zpp_nape.dynamics.ZPP_IContact.prototype.jnAcc = null;
zpp_nape.dynamics.ZPP_IContact.prototype.jtAcc = null;
zpp_nape.dynamics.ZPP_IContact.prototype.biasCoef = null;
zpp_nape.dynamics.ZPP_IContact.prototype.lr1x = null;
zpp_nape.dynamics.ZPP_IContact.prototype.lr1y = null;
zpp_nape.dynamics.ZPP_IContact.prototype.lr2x = null;
zpp_nape.dynamics.ZPP_IContact.prototype.lr2y = null;
zpp_nape.dynamics.ZPP_IContact.prototype.next = null;
zpp_nape.dynamics.ZPP_IContact.prototype.elem = function() {
	return this;
}
zpp_nape.dynamics.ZPP_IContact.prototype.begin = function() {
	return this.next;
}
zpp_nape.dynamics.ZPP_IContact.prototype.inuse = null;
zpp_nape.dynamics.ZPP_IContact.prototype.modified = null;
zpp_nape.dynamics.ZPP_IContact.prototype.pushmod = null;
zpp_nape.dynamics.ZPP_IContact.prototype.mcnt = null;
zpp_nape.dynamics.ZPP_IContact.prototype.set_begin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.dynamics.ZPP_IContact.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		o.inuse = true;
		$r = o;
		return $r;
	}(this));
	temp.next = this.next;
	this.next = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.dynamics.ZPP_IContact.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		var i = cx_ite;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.dynamics.ZPP_IContact.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.next;
	} else {
		var temp = (function($this) {
			var $r;
			o.inuse = true;
			$r = o;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.dynamics.ZPP_IContact.prototype.pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret.inuse = false;
	if(this.next == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.dynamics.ZPP_IContact.prototype.pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
}
zpp_nape.dynamics.ZPP_IContact.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.dynamics.ZPP_IContact.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.next;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		old.inuse = false;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.dynamics.ZPP_IContact.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.dynamics.ZPP_IContact.prototype.clear = function() {
}
zpp_nape.dynamics.ZPP_IContact.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.dynamics.ZPP_IContact.prototype.empty = function() {
	return this.next == null;
}
zpp_nape.dynamics.ZPP_IContact.prototype.size = function() {
	var cnt = 0;
	var cur = this.next;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.dynamics.ZPP_IContact.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.next;
			while(cx_ite != null) {
				var npite = cx_ite;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.dynamics.ZPP_IContact.prototype.front = function() {
	return this.next;
}
zpp_nape.dynamics.ZPP_IContact.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.dynamics.ZPP_IContact.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.dynamics.ZPP_IContact.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it:null;
}
zpp_nape.dynamics.ZPP_IContact.prototype.__class__ = zpp_nape.dynamics.ZPP_IContact;
jeash.geom.Transform = function(inParent) {
	if( inParent === $_ ) return;
	this.mObj = inParent;
}
jeash.geom.Transform.__name__ = ["jeash","geom","Transform"];
jeash.geom.Transform.prototype.colorTransform = null;
jeash.geom.Transform.prototype.matrix = null;
jeash.geom.Transform.prototype.pixelBounds = null;
jeash.geom.Transform.prototype.mObj = null;
jeash.geom.Transform.prototype.jeashGetMatrix = function() {
	return this.mObj.jeashGetMatrix();
}
jeash.geom.Transform.prototype.jeashSetMatrix = function(inMatrix) {
	return this.mObj.jeashSetMatrix(inMatrix);
}
jeash.geom.Transform.prototype.GetPixelBounds = function() {
	return this.mObj.getBounds(jeash.Lib.jeashGetStage());
}
jeash.geom.Transform.prototype.GetColorTransform = function() {
	return new jeash.geom.ColorTransform();
}
jeash.geom.Transform.prototype.SetColorTransform = function(inColorTransform) {
	return inColorTransform;
}
jeash.geom.Transform.prototype.__class__ = jeash.geom.Transform;
jeash.display.StageDisplayState = { __ename__ : ["jeash","display","StageDisplayState"], __constructs__ : ["FULL_SCREEN","NORMAL"] }
jeash.display.StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",0];
jeash.display.StageDisplayState.FULL_SCREEN.toString = $estr;
jeash.display.StageDisplayState.FULL_SCREEN.__enum__ = jeash.display.StageDisplayState;
jeash.display.StageDisplayState.NORMAL = ["NORMAL",1];
jeash.display.StageDisplayState.NORMAL.toString = $estr;
jeash.display.StageDisplayState.NORMAL.__enum__ = jeash.display.StageDisplayState;
List = function(p) {
	if( p === $_ ) return;
	this.length = 0;
}
List.__name__ = ["List"];
List.prototype.h = null;
List.prototype.q = null;
List.prototype.length = null;
List.prototype.add = function(item) {
	var x = [item];
	if(this.h == null) this.h = x; else this.q[1] = x;
	this.q = x;
	this.length++;
}
List.prototype.push = function(item) {
	var x = [item,this.h];
	this.h = x;
	if(this.q == null) this.q = x;
	this.length++;
}
List.prototype.first = function() {
	return this.h == null?null:this.h[0];
}
List.prototype.last = function() {
	return this.q == null?null:this.q[0];
}
List.prototype.pop = function() {
	if(this.h == null) return null;
	var x = this.h[0];
	this.h = this.h[1];
	if(this.h == null) this.q = null;
	this.length--;
	return x;
}
List.prototype.isEmpty = function() {
	return this.h == null;
}
List.prototype.clear = function() {
	this.h = null;
	this.q = null;
	this.length = 0;
}
List.prototype.remove = function(v) {
	var prev = null;
	var l = this.h;
	while(l != null) {
		if(l[0] == v) {
			if(prev == null) this.h = l[1]; else prev[1] = l[1];
			if(this.q == l) this.q = prev;
			this.length--;
			return true;
		}
		prev = l;
		l = l[1];
	}
	return false;
}
List.prototype.iterator = function() {
	return { h : this.h, hasNext : function() {
		return this.h != null;
	}, next : function() {
		if(this.h == null) return null;
		var x = this.h[0];
		this.h = this.h[1];
		return x;
	}};
}
List.prototype.toString = function() {
	var s = new StringBuf();
	var first = true;
	var l = this.h;
	s.b[s.b.length] = "{" == null?"null":"{";
	while(l != null) {
		if(first) first = false; else s.b[s.b.length] = ", " == null?"null":", ";
		s.add(Std.string(l[0]));
		l = l[1];
	}
	s.b[s.b.length] = "}" == null?"null":"}";
	return s.b.join("");
}
List.prototype.join = function(sep) {
	var s = new StringBuf();
	var first = true;
	var l = this.h;
	while(l != null) {
		if(first) first = false; else s.b[s.b.length] = sep == null?"null":sep;
		s.add(l[0]);
		l = l[1];
	}
	return s.b.join("");
}
List.prototype.filter = function(f) {
	var l2 = new List();
	var l = this.h;
	while(l != null) {
		var v = l[0];
		l = l[1];
		if(f(v)) l2.add(v);
	}
	return l2;
}
List.prototype.map = function(f) {
	var b = new List();
	var l = this.h;
	while(l != null) {
		var v = l[0];
		l = l[1];
		b.add(f(v));
	}
	return b;
}
List.prototype.__class__ = List;
zpp_nape.callbacks.ZPP_CbType = function(p) {
	if( p === $_ ) return;
	this.id = zpp_nape.callbacks.ZPP_CbType.nextId++;
	zpp_nape.callbacks.ZPP_CbType.map.push(this);
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.bodies = new zpp_nape.util.ZNPList_ZPP_Body();
	this._begin = this._ongoing = this._end = false;
	this._prebegin = this._preongoing = false;
	this.listeners = new zpp_nape.util.ZNPList_ZPP_Listener();
}
zpp_nape.callbacks.ZPP_CbType.__name__ = ["zpp_nape","callbacks","ZPP_CbType"];
zpp_nape.callbacks.ZPP_CbType.prototype.outer = null;
zpp_nape.callbacks.ZPP_CbType.prototype.wrapper = function() {
	if(this.outer == null) {
		zpp_nape.callbacks.ZPP_CbType.internal = true;
		this.outer = new nape.callbacks.CbType();
		zpp_nape.callbacks.ZPP_CbType.internal = false;
		this.outer.zpp_inner = this;
	}
	return this.outer;
}
zpp_nape.callbacks.ZPP_CbType.prototype.id = null;
zpp_nape.callbacks.ZPP_CbType.prototype.shapes = null;
zpp_nape.callbacks.ZPP_CbType.prototype.wrap_shapes = null;
zpp_nape.callbacks.ZPP_CbType.prototype.constraints = null;
zpp_nape.callbacks.ZPP_CbType.prototype.wrap_constraints = null;
zpp_nape.callbacks.ZPP_CbType.prototype.bodies = null;
zpp_nape.callbacks.ZPP_CbType.prototype.wrap_bodies = null;
zpp_nape.callbacks.ZPP_CbType.prototype.addShape = function(shape) {
	this.shapes.add(shape);
}
zpp_nape.callbacks.ZPP_CbType.prototype.addConstraint = function(con) {
	this.constraints.add(con);
}
zpp_nape.callbacks.ZPP_CbType.prototype.addBody = function(body) {
	this.bodies.add(body);
}
zpp_nape.callbacks.ZPP_CbType.prototype.remShape = function(shape) {
	this.shapes.remove(shape);
}
zpp_nape.callbacks.ZPP_CbType.prototype.remConstraint = function(con) {
	this.constraints.remove(con);
}
zpp_nape.callbacks.ZPP_CbType.prototype.remBody = function(body) {
	this.bodies.remove(body);
}
zpp_nape.callbacks.ZPP_CbType.prototype._bodywake = null;
zpp_nape.callbacks.ZPP_CbType.prototype._bodysleep = null;
zpp_nape.callbacks.ZPP_CbType.prototype._conwake = null;
zpp_nape.callbacks.ZPP_CbType.prototype._consleep = null;
zpp_nape.callbacks.ZPP_CbType.prototype._break = null;
zpp_nape.callbacks.ZPP_CbType.prototype._begin = null;
zpp_nape.callbacks.ZPP_CbType.prototype._ongoing = null;
zpp_nape.callbacks.ZPP_CbType.prototype._end = null;
zpp_nape.callbacks.ZPP_CbType.prototype._prebegin = null;
zpp_nape.callbacks.ZPP_CbType.prototype._preongoing = null;
zpp_nape.callbacks.ZPP_CbType.prototype.listeners = null;
zpp_nape.callbacks.ZPP_CbType.prototype.wrap_listeners = null;
zpp_nape.callbacks.ZPP_CbType.prototype.__class__ = zpp_nape.callbacks.ZPP_CbType;
if(!nape.phys) nape.phys = {}
nape.phys.Material = function(elasticity,dynamicFriction,staticFriction,density,rollingFriction) {
	if( elasticity === $_ ) return;
	if(rollingFriction == null) rollingFriction = 0.01;
	if(density == null) density = 1;
	if(staticFriction == null) staticFriction = 2.0;
	if(dynamicFriction == null) dynamicFriction = 1.0;
	if(elasticity == null) elasticity = 0.0;
	this.zpp_inner = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.phys.ZPP_Material.zpp_pool == null) ret = new zpp_nape.phys.ZPP_Material(); else {
			ret = zpp_nape.phys.ZPP_Material.zpp_pool;
			zpp_nape.phys.ZPP_Material.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	this.zpp_inner.outer = this;
	if(elasticity != this.zpp_inner.elasticity * ("elasticity" == "density"?1000:1)) {
		if(elasticity != elasticity) throw "Error: Material::" + "elasticity" + " cannot be NaN";
		if("elasticity" != "elasticity" && elasticity < 0) throw "Error: Material::" + "elasticity" + " (" + elasticity + ") must be >= 0";
		if("elasticity" == "density" && elasticity == 0) throw "Error: Material::density cannot be 0";
		if("elasticity" != "elasticity" && elasticity == Math.POSITIVE_INFINITY) throw "Error: Material::" + "elasticity" + " cannot be infinite";
		this.zpp_inner.elasticity = elasticity / ("elasticity" == "density"?1000:1);
		this.zpp_inner.invalidate(9);
	}
	this.zpp_inner.elasticity * ("elasticity" == "density"?1000:1);
	if(dynamicFriction != this.zpp_inner.dynamicFriction * ("dynamicFriction" == "density"?1000:1)) {
		if(dynamicFriction != dynamicFriction) throw "Error: Material::" + "dynamicFriction" + " cannot be NaN";
		if("dynamicFriction" != "elasticity" && dynamicFriction < 0) throw "Error: Material::" + "dynamicFriction" + " (" + dynamicFriction + ") must be >= 0";
		if("dynamicFriction" == "density" && dynamicFriction == 0) throw "Error: Material::density cannot be 0";
		if("dynamicFriction" != "elasticity" && dynamicFriction == Math.POSITIVE_INFINITY) throw "Error: Material::" + "dynamicFriction" + " cannot be infinite";
		this.zpp_inner.dynamicFriction = dynamicFriction / ("dynamicFriction" == "density"?1000:1);
		this.zpp_inner.invalidate(13);
	}
	this.zpp_inner.dynamicFriction * ("dynamicFriction" == "density"?1000:1);
	if(staticFriction != this.zpp_inner.staticFriction * ("staticFriction" == "density"?1000:1)) {
		if(staticFriction != staticFriction) throw "Error: Material::" + "staticFriction" + " cannot be NaN";
		if("staticFriction" != "elasticity" && staticFriction < 0) throw "Error: Material::" + "staticFriction" + " (" + staticFriction + ") must be >= 0";
		if("staticFriction" == "density" && staticFriction == 0) throw "Error: Material::density cannot be 0";
		if("staticFriction" != "elasticity" && staticFriction == Math.POSITIVE_INFINITY) throw "Error: Material::" + "staticFriction" + " cannot be infinite";
		this.zpp_inner.staticFriction = staticFriction / ("staticFriction" == "density"?1000:1);
		this.zpp_inner.invalidate(9);
	}
	this.zpp_inner.staticFriction * ("staticFriction" == "density"?1000:1);
	if(density != this.zpp_inner.density * ("density" == "density"?1000:1)) {
		if(density != density) throw "Error: Material::" + "density" + " cannot be NaN";
		if("density" != "elasticity" && density < 0) throw "Error: Material::" + "density" + " (" + density + ") must be >= 0";
		if("density" == "density" && density == 0) throw "Error: Material::density cannot be 0";
		if("density" != "elasticity" && density == Math.POSITIVE_INFINITY) throw "Error: Material::" + "density" + " cannot be infinite";
		this.zpp_inner.density = density / ("density" == "density"?1000:1);
		this.zpp_inner.invalidate(3);
	}
	this.zpp_inner.density * ("density" == "density"?1000:1);
	if(rollingFriction != this.zpp_inner.rollingFriction * ("rollingFriction" == "density"?1000:1)) {
		if(rollingFriction != rollingFriction) throw "Error: Material::" + "rollingFriction" + " cannot be NaN";
		if("rollingFriction" != "elasticity" && rollingFriction < 0) throw "Error: Material::" + "rollingFriction" + " (" + rollingFriction + ") must be >= 0";
		if("rollingFriction" == "density" && rollingFriction == 0) throw "Error: Material::density cannot be 0";
		if("rollingFriction" != "elasticity" && rollingFriction == Math.POSITIVE_INFINITY) throw "Error: Material::" + "rollingFriction" + " cannot be infinite";
		this.zpp_inner.rollingFriction = rollingFriction / ("rollingFriction" == "density"?1000:1);
		this.zpp_inner.invalidate(9);
	}
	this.zpp_inner.rollingFriction * ("rollingFriction" == "density"?1000:1);
}
nape.phys.Material.__name__ = ["nape","phys","Material"];
nape.phys.Material.wood = function() {
	return new nape.phys.Material(0.4,0.2,0.38,0.7,0.005);
}
nape.phys.Material.steel = function() {
	return new nape.phys.Material(0.2,0.57,0.74,7.8,0.001);
}
nape.phys.Material.ice = function() {
	return new nape.phys.Material(0.3,0.03,0.1,0.9,0.0001);
}
nape.phys.Material.rubber = function() {
	return new nape.phys.Material(0.8,1.0,1.4,1.5,0.01);
}
nape.phys.Material.glass = function() {
	return new nape.phys.Material(0.4,0.4,0.94,2.6,0.002);
}
nape.phys.Material.sand = function() {
	return new nape.phys.Material(-1.0,0.45,0.6,1.6,16.0);
}
nape.phys.Material.prototype.zpp_inner = null;
nape.phys.Material.prototype.shapes = null;
nape.phys.Material.prototype.flibget_shapes = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_shapes == null) $this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get($this.zpp_inner.shapes,true);
		$r = $this.zpp_inner.wrap_shapes;
		return $r;
	}(this));
}
nape.phys.Material.prototype.copy = function() {
	var ret = new nape.phys.Material(this.zpp_inner.elasticity * ("elasticity" == "density"?1000:1),this.zpp_inner.dynamicFriction * ("dynamicFriction" == "density"?1000:1),this.zpp_inner.staticFriction * ("staticFriction" == "density"?1000:1),this.zpp_inner.density * ("density" == "density"?1000:1),this.zpp_inner.rollingFriction * ("rollingFriction" == "density"?1000:1));
	ret.userData = this.userData;
	return ret;
}
nape.phys.Material.prototype.userData = null;
nape.phys.Material.prototype.elasticity = null;
nape.phys.Material.prototype.flibget_elasticity = function() {
	return this.zpp_inner.elasticity * ("elasticity" == "density"?1000:1);
}
nape.phys.Material.prototype.flibset_elasticity = function(elasticity) {
	if(elasticity != this.zpp_inner.elasticity * ("elasticity" == "density"?1000:1)) {
		if(elasticity != elasticity) throw "Error: Material::" + "elasticity" + " cannot be NaN";
		if("elasticity" != "elasticity" && elasticity < 0) throw "Error: Material::" + "elasticity" + " (" + elasticity + ") must be >= 0";
		if("elasticity" == "density" && elasticity == 0) throw "Error: Material::density cannot be 0";
		if("elasticity" != "elasticity" && elasticity == Math.POSITIVE_INFINITY) throw "Error: Material::" + "elasticity" + " cannot be infinite";
		this.zpp_inner.elasticity = elasticity / ("elasticity" == "density"?1000:1);
		this.zpp_inner.invalidate(9);
	}
	return this.zpp_inner.elasticity * ("elasticity" == "density"?1000:1);
}
nape.phys.Material.prototype.dynamicFriction = null;
nape.phys.Material.prototype.flibget_dynamicFriction = function() {
	return this.zpp_inner.dynamicFriction * ("dynamicFriction" == "density"?1000:1);
}
nape.phys.Material.prototype.flibset_dynamicFriction = function(dynamicFriction) {
	if(dynamicFriction != this.zpp_inner.dynamicFriction * ("dynamicFriction" == "density"?1000:1)) {
		if(dynamicFriction != dynamicFriction) throw "Error: Material::" + "dynamicFriction" + " cannot be NaN";
		if("dynamicFriction" != "elasticity" && dynamicFriction < 0) throw "Error: Material::" + "dynamicFriction" + " (" + dynamicFriction + ") must be >= 0";
		if("dynamicFriction" == "density" && dynamicFriction == 0) throw "Error: Material::density cannot be 0";
		if("dynamicFriction" != "elasticity" && dynamicFriction == Math.POSITIVE_INFINITY) throw "Error: Material::" + "dynamicFriction" + " cannot be infinite";
		this.zpp_inner.dynamicFriction = dynamicFriction / ("dynamicFriction" == "density"?1000:1);
		this.zpp_inner.invalidate(13);
	}
	return this.zpp_inner.dynamicFriction * ("dynamicFriction" == "density"?1000:1);
}
nape.phys.Material.prototype.staticFriction = null;
nape.phys.Material.prototype.flibget_staticFriction = function() {
	return this.zpp_inner.staticFriction * ("staticFriction" == "density"?1000:1);
}
nape.phys.Material.prototype.flibset_staticFriction = function(staticFriction) {
	if(staticFriction != this.zpp_inner.staticFriction * ("staticFriction" == "density"?1000:1)) {
		if(staticFriction != staticFriction) throw "Error: Material::" + "staticFriction" + " cannot be NaN";
		if("staticFriction" != "elasticity" && staticFriction < 0) throw "Error: Material::" + "staticFriction" + " (" + staticFriction + ") must be >= 0";
		if("staticFriction" == "density" && staticFriction == 0) throw "Error: Material::density cannot be 0";
		if("staticFriction" != "elasticity" && staticFriction == Math.POSITIVE_INFINITY) throw "Error: Material::" + "staticFriction" + " cannot be infinite";
		this.zpp_inner.staticFriction = staticFriction / ("staticFriction" == "density"?1000:1);
		this.zpp_inner.invalidate(9);
	}
	return this.zpp_inner.staticFriction * ("staticFriction" == "density"?1000:1);
}
nape.phys.Material.prototype.density = null;
nape.phys.Material.prototype.flibget_density = function() {
	return this.zpp_inner.density * ("density" == "density"?1000:1);
}
nape.phys.Material.prototype.flibset_density = function(density) {
	if(density != this.zpp_inner.density * ("density" == "density"?1000:1)) {
		if(density != density) throw "Error: Material::" + "density" + " cannot be NaN";
		if("density" != "elasticity" && density < 0) throw "Error: Material::" + "density" + " (" + density + ") must be >= 0";
		if("density" == "density" && density == 0) throw "Error: Material::density cannot be 0";
		if("density" != "elasticity" && density == Math.POSITIVE_INFINITY) throw "Error: Material::" + "density" + " cannot be infinite";
		this.zpp_inner.density = density / ("density" == "density"?1000:1);
		this.zpp_inner.invalidate(3);
	}
	return this.zpp_inner.density * ("density" == "density"?1000:1);
}
nape.phys.Material.prototype.rollingFriction = null;
nape.phys.Material.prototype.flibget_rollingFriction = function() {
	return this.zpp_inner.rollingFriction * ("rollingFriction" == "density"?1000:1);
}
nape.phys.Material.prototype.flibset_rollingFriction = function(rollingFriction) {
	if(rollingFriction != this.zpp_inner.rollingFriction * ("rollingFriction" == "density"?1000:1)) {
		if(rollingFriction != rollingFriction) throw "Error: Material::" + "rollingFriction" + " cannot be NaN";
		if("rollingFriction" != "elasticity" && rollingFriction < 0) throw "Error: Material::" + "rollingFriction" + " (" + rollingFriction + ") must be >= 0";
		if("rollingFriction" == "density" && rollingFriction == 0) throw "Error: Material::density cannot be 0";
		if("rollingFriction" != "elasticity" && rollingFriction == Math.POSITIVE_INFINITY) throw "Error: Material::" + "rollingFriction" + " cannot be infinite";
		this.zpp_inner.rollingFriction = rollingFriction / ("rollingFriction" == "density"?1000:1);
		this.zpp_inner.invalidate(9);
	}
	return this.zpp_inner.rollingFriction * ("rollingFriction" == "density"?1000:1);
}
nape.phys.Material.prototype.toString = function() {
	return "{ elasticity: " + this.zpp_inner.elasticity * ("elasticity" == "density"?1000:1) + " dynamicFriction: " + this.zpp_inner.dynamicFriction * ("dynamicFriction" == "density"?1000:1) + " staticFriction: " + this.zpp_inner.staticFriction * ("staticFriction" == "density"?1000:1) + " density: " + this.zpp_inner.density * ("density" == "density"?1000:1) + " rollingFriction: " + this.zpp_inner.rollingFriction * ("rollingFriction" == "density"?1000:1) + " }";
}
nape.phys.Material.prototype.__class__ = nape.phys.Material;
jeash.display.GraphicsFillType = { __ename__ : ["jeash","display","GraphicsFillType"], __constructs__ : ["SOLID_FILL","GRADIENT_FILL"] }
jeash.display.GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
jeash.display.GraphicsFillType.SOLID_FILL.toString = $estr;
jeash.display.GraphicsFillType.SOLID_FILL.__enum__ = jeash.display.GraphicsFillType;
jeash.display.GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
jeash.display.GraphicsFillType.GRADIENT_FILL.toString = $estr;
jeash.display.GraphicsFillType.GRADIENT_FILL.__enum__ = jeash.display.GraphicsFillType;
zpp_nape.phys.ZPP_FluidProperties = function(p) {
	if( p === $_ ) return;
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.density = this.viscosity = 1;
	this.wrap_gravity = null;
	this.gravityx = 0;
	this.gravityy = 0;
}
zpp_nape.phys.ZPP_FluidProperties.__name__ = ["zpp_nape","phys","ZPP_FluidProperties"];
zpp_nape.phys.ZPP_FluidProperties.zpp_pool = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.next = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.outer = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new nape.phys.FluidProperties();
		var o = this.outer.zpp_inner;
		o.outer = null;
		o.next = zpp_nape.phys.ZPP_FluidProperties.zpp_pool;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
}
zpp_nape.phys.ZPP_FluidProperties.prototype.free = function() {
	this.outer = null;
}
zpp_nape.phys.ZPP_FluidProperties.prototype.alloc = function() {
}
zpp_nape.phys.ZPP_FluidProperties.prototype.shapes = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.wrap_shapes = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.feature_cons = function() {
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
}
zpp_nape.phys.ZPP_FluidProperties.prototype.addShape = function(shape) {
	this.shapes.add(shape);
}
zpp_nape.phys.ZPP_FluidProperties.prototype.remShape = function(shape) {
	this.shapes.remove(shape);
}
zpp_nape.phys.ZPP_FluidProperties.prototype.copy = function() {
	var ret = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.phys.ZPP_FluidProperties.zpp_pool == null) ret = new zpp_nape.phys.ZPP_FluidProperties(); else {
			ret = zpp_nape.phys.ZPP_FluidProperties.zpp_pool;
			zpp_nape.phys.ZPP_FluidProperties.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	ret.viscosity = this.viscosity;
	ret.density = this.density;
	return ret;
}
zpp_nape.phys.ZPP_FluidProperties.prototype.viscosity = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.density = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.gravityx = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.gravityy = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.wrap_gravity = null;
zpp_nape.phys.ZPP_FluidProperties.prototype.getgravity = function() {
	var me = this;
	this.wrap_gravity = nape.geom.Vec2.get(this.gravityx,this.gravityy,null);
	this.wrap_gravity.zpp_inner.inuse = true;
	this.wrap_gravity.zpp_inner._invalidate = function(x) {
		me.gravityx = x.x;
		me.gravityy = x.y;
		me.invalidate();
	};
	this.wrap_gravity.zpp_inner._validate = function() {
		me.wrap_gravity.zpp_inner.x = me.gravityx;
		me.wrap_gravity.zpp_inner.y = me.gravityy;
	};
}
zpp_nape.phys.ZPP_FluidProperties.prototype.invalidate = function() {
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var shape = cx_ite.elt;
		if(shape.fluidEnabled) shape.wake();
		cx_ite = cx_ite.next;
	}
}
zpp_nape.phys.ZPP_FluidProperties.prototype.__class__ = zpp_nape.phys.ZPP_FluidProperties;
zpp_nape.geom.ZPP_MatMN = function(m,n) {
	if( m === $_ ) return;
	this.m = m;
	this.n = n;
	this.x = new Array();
	var _g1 = 0, _g = m * n;
	while(_g1 < _g) {
		var i = _g1++;
		this.x.push(0.0);
	}
}
zpp_nape.geom.ZPP_MatMN.__name__ = ["zpp_nape","geom","ZPP_MatMN"];
zpp_nape.geom.ZPP_MatMN.prototype.outer = null;
zpp_nape.geom.ZPP_MatMN.prototype.m = null;
zpp_nape.geom.ZPP_MatMN.prototype.n = null;
zpp_nape.geom.ZPP_MatMN.prototype.x = null;
zpp_nape.geom.ZPP_MatMN.prototype.__class__ = zpp_nape.geom.ZPP_MatMN;
IntIter = function(min,max) {
	if( min === $_ ) return;
	this.min = min;
	this.max = max;
}
IntIter.__name__ = ["IntIter"];
IntIter.prototype.min = null;
IntIter.prototype.max = null;
IntIter.prototype.hasNext = function() {
	return this.min < this.max;
}
IntIter.prototype.next = function() {
	return this.min++;
}
IntIter.prototype.__class__ = IntIter;
jeash.geom.ColorTransform = function(inRedMultiplier,inGreenMultiplier,inBlueMultiplier,inAlphaMultiplier,inRedOffset,inGreenOffset,inBlueOffset,inAlphaOffset) {
	if( inRedMultiplier === $_ ) return;
	this.redMultiplier = inRedMultiplier == null?1.0:inRedMultiplier;
	this.greenMultiplier = inGreenMultiplier == null?1.0:inGreenMultiplier;
	this.blueMultiplier = inBlueMultiplier == null?1.0:inBlueMultiplier;
	this.alphaMultiplier = inAlphaMultiplier == null?1.0:inAlphaMultiplier;
	this.redOffset = inRedOffset == null?0.0:inRedOffset;
	this.greenOffset = inGreenOffset == null?0.0:inGreenOffset;
	this.blueOffset = inBlueOffset == null?0.0:inBlueOffset;
	this.alphaOffset = inAlphaOffset == null?0.0:inAlphaOffset;
	this.color = 0;
}
jeash.geom.ColorTransform.__name__ = ["jeash","geom","ColorTransform"];
jeash.geom.ColorTransform.prototype.alphaMultiplier = null;
jeash.geom.ColorTransform.prototype.alphaOffset = null;
jeash.geom.ColorTransform.prototype.blueMultiplier = null;
jeash.geom.ColorTransform.prototype.blueOffset = null;
jeash.geom.ColorTransform.prototype.color = null;
jeash.geom.ColorTransform.prototype.greenMultiplier = null;
jeash.geom.ColorTransform.prototype.greenOffset = null;
jeash.geom.ColorTransform.prototype.redMultiplier = null;
jeash.geom.ColorTransform.prototype.redOffset = null;
jeash.geom.ColorTransform.prototype.concat = function(second) {
	throw "Not implemented";
}
jeash.geom.ColorTransform.prototype.__class__ = jeash.geom.ColorTransform;
jeash.display.StageScaleMode = { __ename__ : ["jeash","display","StageScaleMode"], __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] }
jeash.display.StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
jeash.display.StageScaleMode.SHOW_ALL.toString = $estr;
jeash.display.StageScaleMode.SHOW_ALL.__enum__ = jeash.display.StageScaleMode;
jeash.display.StageScaleMode.NO_SCALE = ["NO_SCALE",1];
jeash.display.StageScaleMode.NO_SCALE.toString = $estr;
jeash.display.StageScaleMode.NO_SCALE.__enum__ = jeash.display.StageScaleMode;
jeash.display.StageScaleMode.NO_BORDER = ["NO_BORDER",2];
jeash.display.StageScaleMode.NO_BORDER.toString = $estr;
jeash.display.StageScaleMode.NO_BORDER.__enum__ = jeash.display.StageScaleMode;
jeash.display.StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
jeash.display.StageScaleMode.EXACT_FIT.toString = $estr;
jeash.display.StageScaleMode.EXACT_FIT.__enum__ = jeash.display.StageScaleMode;
nape.geom.RayResult = function(normal,distance,inner,shape) {
	if( normal === $_ ) return;
	if(!zpp_nape.geom.ZPP_Ray.internal) throw "Error: RayResult cannot be instantiated derp!";
	this.normal = normal;
	this.distance = distance;
	this.inner = inner;
	this.shape = shape;
}
nape.geom.RayResult.__name__ = ["nape","geom","RayResult"];
nape.geom.RayResult.prototype.normal = null;
nape.geom.RayResult.prototype.distance = null;
nape.geom.RayResult.prototype.inner = null;
nape.geom.RayResult.prototype.shape = null;
nape.geom.RayResult.prototype.toString = function() {
	return "{ shape: " + this.shape + " distance: " + this.distance + " ?inner: " + this.inner + " }";
}
nape.geom.RayResult.prototype.__class__ = nape.geom.RayResult;
nape.geom.RayResultList = function(p) {
	if( p === $_ ) return;
	this.zpp_inner = new zpp_nape.util.ZPP_RayResultList();
	this.zpp_inner.outer = this;
}
nape.geom.RayResultList.__name__ = ["nape","geom","RayResultList"];
nape.geom.RayResultList.fromArray = function(array) {
	var ret = new nape.geom.RayResultList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.geom.RayResultList.prototype.zpp_inner = null;
nape.geom.RayResultList.prototype.length = null;
nape.geom.RayResultList.prototype.flibget_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.length;
	}
	return this.zpp_inner.user_length;
}
nape.geom.RayResultList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj);
}
nape.geom.RayResultList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.flibget_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.flibget_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt;
}
nape.geom.RayResultList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj); else {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.geom.RayResultList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
		} else this.zpp_inner.inner.add(obj);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.geom.RayResultList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx = ret;
	return retx;
}
nape.geom.RayResultList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx = ret;
	return retx;
}
nape.geom.RayResultList.prototype.add = function(obj) {
	return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
}
nape.geom.RayResultList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret = (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var x = cx_ite.elt;
				if(x == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		this.zpp_inner.inner.remove(obj);
		this.zpp_inner.invalidate();
	}
	return ret;
}
nape.geom.RayResultList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
}
nape.geom.RayResultList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
}
nape.geom.RayResultList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.iterators == null) this.zpp_inner.iterators = new zpp_nape.util.ZNPList_RayResultIterator();
	return nape.geom.RayResultIterator.get(this);
}
nape.geom.RayResultList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.geom.RayResultList();
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_RayResultIterator();
		$r = nape.geom.RayResultIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "RayResult" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
}
nape.geom.RayResultList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var $it0 = (function($this) {
		var $r;
		xs.zpp_inner.valmod();
		if(xs.zpp_inner.iterators == null) xs.zpp_inner.iterators = new zpp_nape.util.ZNPList_RayResultIterator();
		$r = nape.geom.RayResultIterator.get(xs);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(!this.has(x)) if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
	}
}
nape.geom.RayResultList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_RayResultIterator();
		$r = nape.geom.RayResultIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		if(!fst) ret += ",";
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
}
nape.geom.RayResultList.prototype.__class__ = nape.geom.RayResultList;
nape.geom.RayResultIterator = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_RayResultList.internal) throw "Error: Cannot instantiate " + "RayResult" + "Iterator derp!";
}
nape.geom.RayResultIterator.__name__ = ["nape","geom","RayResultIterator"];
nape.geom.RayResultIterator.zpp_pool = null;
nape.geom.RayResultIterator.get = function(list) {
	var ret = nape.geom.RayResultIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_RayResultList.internal = true;
		var ret = new nape.geom.RayResultIterator();
		zpp_nape.util.ZPP_RayResultList.internal = false;
		$r = ret;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.geom.RayResultIterator.zpp_pool;
		nape.geom.RayResultIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	list.zpp_inner.iterators.add(ret);
	return ret;
}
nape.geom.RayResultIterator.prototype.zpp_inner = null;
nape.geom.RayResultIterator.prototype.zpp_i = null;
nape.geom.RayResultIterator.prototype.zpp_critical = null;
nape.geom.RayResultIterator.prototype.zpp_next = null;
nape.geom.RayResultIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.flibget_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.geom.RayResultIterator.zpp_pool;
		nape.geom.RayResultIterator.zpp_pool = this;
		this.zpp_inner.zpp_inner.iterators.remove(this);
		return false;
	}
}
nape.geom.RayResultIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
}
nape.geom.RayResultIterator.prototype.__class__ = nape.geom.RayResultIterator;
nape.geom.Ray = function(origin,direction) {
	if( origin === $_ ) return;
	if(origin != null && origin.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner = new zpp_nape.geom.ZPP_Ray();
	if(origin != null && origin.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(origin == null) throw "Error: Ray::origin cannot be null";
	this.zpp_inner.origin.set(origin);
	this.zpp_inner.origin;
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction == null) throw "Error: Ray::direction cannot be null";
	if(direction.lsq() < 1e-8) throw "Error: Ray::direction cannot be degenerate";
	this.zpp_inner.direction.set(direction);
	this.zpp_inner.zip_dir = true;
	this.zpp_inner.direction;
	this.zpp_inner.maxdist = Math.POSITIVE_INFINITY;
}
nape.geom.Ray.__name__ = ["nape","geom","Ray"];
nape.geom.Ray.fromSegment = function(start,end) {
	if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(start == null) throw "Error: Ray::fromSegment::start is null";
	if(end == null) throw "Error: Ray::fromSegment::end is null";
	var dir = end.sub(start,true);
	var ret = new nape.geom.Ray(start,dir);
	ret.flibset_maxDistance(Math.sqrt((function($this) {
		var $r;
		var dx;
		var dy;
		{
			dx = (function($this) {
				var $r;
				if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				start.zpp_inner.validate();
				$r = start.zpp_inner.x;
				return $r;
			}($this)) - (function($this) {
				var $r;
				if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				end.zpp_inner.validate();
				$r = end.zpp_inner.x;
				return $r;
			}($this));
			dy = (function($this) {
				var $r;
				if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				start.zpp_inner.validate();
				$r = start.zpp_inner.y;
				return $r;
			}($this)) - (function($this) {
				var $r;
				if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				end.zpp_inner.validate();
				$r = end.zpp_inner.y;
				return $r;
			}($this));
		}
		$r = dx * dx + dy * dy;
		return $r;
	}(this))));
	if(start.zpp_inner.weak) {
		start.dispose();
		true;
	} else false;
	if(end.zpp_inner.weak) {
		end.dispose();
		true;
	} else false;
	return ret;
}
nape.geom.Ray.prototype.zpp_inner = null;
nape.geom.Ray.prototype.userData = null;
nape.geom.Ray.prototype.origin = null;
nape.geom.Ray.prototype.flibget_origin = function() {
	return this.zpp_inner.origin;
}
nape.geom.Ray.prototype.flibset_origin = function(origin) {
	if(origin != null && origin.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(origin == null) throw "Error: Ray::origin cannot be null";
	this.zpp_inner.origin.set(origin);
	return this.zpp_inner.origin;
}
nape.geom.Ray.prototype.direction = null;
nape.geom.Ray.prototype.flibget_direction = function() {
	return this.zpp_inner.direction;
}
nape.geom.Ray.prototype.flibset_direction = function(direction) {
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction == null) throw "Error: Ray::direction cannot be null";
	if(direction.lsq() < 1e-8) throw "Error: Ray::direction cannot be degenerate";
	this.zpp_inner.direction.set(direction);
	this.zpp_inner.zip_dir = true;
	return this.zpp_inner.direction;
}
nape.geom.Ray.prototype.maxDistance = null;
nape.geom.Ray.prototype.flibget_maxDistance = function() {
	return this.zpp_inner.maxdist;
}
nape.geom.Ray.prototype.flibset_maxDistance = function(maxDistance) {
	if(maxDistance != maxDistance) throw "Error: maxDistance cannot be NaN";
	this.zpp_inner.maxdist = maxDistance;
	return this.zpp_inner.maxdist;
}
nape.geom.Ray.prototype.aabb = function() {
	return this.zpp_inner.rayAABB().wrapper();
}
nape.geom.Ray.prototype.copy = function() {
	var ret = new nape.geom.Ray(this.zpp_inner.origin,this.zpp_inner.direction);
	ret.flibset_maxDistance(this.zpp_inner.maxdist);
	return ret;
}
nape.geom.Ray.prototype.at = function(distance,weak) {
	if(weak == null) weak = false;
	this.zpp_inner.validate_dir();
	return nape.geom.Vec2.get(this.zpp_inner.origin.flibget_x() + distance * this.zpp_inner.dirx,this.zpp_inner.origin.flibget_y() + distance * this.zpp_inner.diry,weak);
}
nape.geom.Ray.prototype.__class__ = nape.geom.Ray;
if(!jeash.ui) jeash.ui = {}
jeash.ui.Keyboard = function() { }
jeash.ui.Keyboard.__name__ = ["jeash","ui","Keyboard"];
jeash.ui.Keyboard.jeashConvertWebkitCode = function(code) {
	switch(code.toLowerCase()) {
	case "backspace":
		return jeash.ui.Keyboard.BACKSPACE;
	case "tab":
		return jeash.ui.Keyboard.TAB;
	case "enter":
		return jeash.ui.Keyboard.ENTER;
	case "shift":
		return jeash.ui.Keyboard.SHIFT;
	case "control":
		return jeash.ui.Keyboard.CONTROL;
	case "capslock":
		return jeash.ui.Keyboard.CAPS_LOCK;
	case "escape":
		return jeash.ui.Keyboard.ESCAPE;
	case "space":
		return jeash.ui.Keyboard.SPACE;
	case "pageup":
		return jeash.ui.Keyboard.PAGE_UP;
	case "pagedown":
		return jeash.ui.Keyboard.PAGE_DOWN;
	case "end":
		return jeash.ui.Keyboard.END;
	case "home":
		return jeash.ui.Keyboard.HOME;
	case "left":
		return jeash.ui.Keyboard.LEFT;
	case "right":
		return jeash.ui.Keyboard.RIGHT;
	case "up":
		return jeash.ui.Keyboard.UP;
	case "down":
		return jeash.ui.Keyboard.DOWN;
	case "insert":
		return jeash.ui.Keyboard.INSERT;
	case "delete":
		return jeash.ui.Keyboard.DELETE;
	case "numlock":
		return jeash.ui.Keyboard.NUMLOCK;
	case "break":
		return jeash.ui.Keyboard.BREAK;
	}
	if(code.indexOf("U+") == 0) return Std.parseInt("0x" + code.substr(3));
	throw "Unrecognised key code: " + code;
	return 0;
}
jeash.ui.Keyboard.jeashConvertMozillaCode = function(code) {
	switch(code) {
	case jeash.ui.Keyboard.DOM_VK_BACK_SPACE:
		return jeash.ui.Keyboard.BACKSPACE;
	case jeash.ui.Keyboard.DOM_VK_TAB:
		return jeash.ui.Keyboard.TAB;
	case jeash.ui.Keyboard.DOM_VK_RETURN:
		return jeash.ui.Keyboard.ENTER;
	case jeash.ui.Keyboard.DOM_VK_ENTER:
		return jeash.ui.Keyboard.ENTER;
	case jeash.ui.Keyboard.DOM_VK_SHIFT:
		return jeash.ui.Keyboard.SHIFT;
	case jeash.ui.Keyboard.DOM_VK_CONTROL:
		return jeash.ui.Keyboard.CONTROL;
	case jeash.ui.Keyboard.DOM_VK_CAPS_LOCK:
		return jeash.ui.Keyboard.CAPS_LOCK;
	case jeash.ui.Keyboard.DOM_VK_ESCAPE:
		return jeash.ui.Keyboard.ESCAPE;
	case jeash.ui.Keyboard.DOM_VK_SPACE:
		return jeash.ui.Keyboard.SPACE;
	case jeash.ui.Keyboard.DOM_VK_PAGE_UP:
		return jeash.ui.Keyboard.PAGE_UP;
	case jeash.ui.Keyboard.DOM_VK_PAGE_DOWN:
		return jeash.ui.Keyboard.PAGE_DOWN;
	case jeash.ui.Keyboard.DOM_VK_END:
		return jeash.ui.Keyboard.END;
	case jeash.ui.Keyboard.DOM_VK_HOME:
		return jeash.ui.Keyboard.HOME;
	case jeash.ui.Keyboard.DOM_VK_LEFT:
		return jeash.ui.Keyboard.LEFT;
	case jeash.ui.Keyboard.DOM_VK_RIGHT:
		return jeash.ui.Keyboard.RIGHT;
	case jeash.ui.Keyboard.DOM_VK_UP:
		return jeash.ui.Keyboard.UP;
	case jeash.ui.Keyboard.DOM_VK_DOWN:
		return jeash.ui.Keyboard.DOWN;
	case jeash.ui.Keyboard.DOM_VK_INSERT:
		return jeash.ui.Keyboard.INSERT;
	case jeash.ui.Keyboard.DOM_VK_DELETE:
		return jeash.ui.Keyboard.DELETE;
	case jeash.ui.Keyboard.DOM_VK_NUM_LOCK:
		return jeash.ui.Keyboard.NUMLOCK;
	default:
		return code;
	}
}
jeash.ui.Keyboard.capsLock = null;
jeash.ui.Keyboard.numLock = null;
jeash.ui.Keyboard.isAccessible = function() {
	return false;
}
jeash.ui.Keyboard.prototype.__class__ = jeash.ui.Keyboard;
zpp_nape.util.ZPP_Math = function() { }
zpp_nape.util.ZPP_Math.__name__ = ["zpp_nape","util","ZPP_Math"];
zpp_nape.util.ZPP_Math.sqrt = function(x) {
	return Math.sqrt(x);
}
zpp_nape.util.ZPP_Math.invsqrt = function(x) {
	return 1.0 / (function($this) {
		var $r;
		{
		}
		$r = Math.sqrt(x);
		return $r;
	}(this));
}
zpp_nape.util.ZPP_Math.sqr = function(x) {
	return x * x;
}
zpp_nape.util.ZPP_Math.clamp2 = function(x,a) {
	return zpp_nape.util.ZPP_Math.clamp(x,-a,a);
}
zpp_nape.util.ZPP_Math.clamp = function(x,a,b) {
	return x < a?a:x > b?b:x;
}
zpp_nape.util.ZPP_Math.prototype.__class__ = zpp_nape.util.ZPP_Math;
zpp_nape.geom.ZPP_PartitionPoly = function(P) {
	if( P === $_ ) return;
	if(P == null) return;
	var p = P;
	var cw = (function($this) {
		var $r;
		{
		}
		var area = 0.0;
		{
			var F = P;
			var L = P;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					area += v.x * (v.next.y - v.prev.y);
					nite = nite.next;
				} while(nite != L);
			}
		}
		$r = area;
		return $r;
	}(this)) > 0.0;
	do {
		if(this.eq(p,p.next)) {
		} else {
			var pre = p.prev;
			while(this.eq(pre,p) && pre != p) pre = pre.prev;
			if(pre == p) break;
			var ux;
			var uy;
			ux = p.x - pre.x;
			uy = p.y - pre.y;
			var vx;
			var vy;
			vx = p.next.x - p.x;
			vy = p.next.y - p.y;
			if(vy * ux - vx * uy != 0.0) {
				this.vertices = cw?(function($this) {
					var $r;
					var obj = zpp_nape.geom.ZPP_PartitionVertex.get(p.x,p.y);
					if($this.vertices == null) $this.vertices = obj.prev = obj.next = obj; else {
						obj.prev = $this.vertices;
						obj.next = $this.vertices.next;
						$this.vertices.next.prev = obj;
						$this.vertices.next = obj;
					}
					$r = obj;
					return $r;
				}(this)):(function($this) {
					var $r;
					var obj = zpp_nape.geom.ZPP_PartitionVertex.get(p.x,p.y);
					if($this.vertices == null) $this.vertices = obj.prev = obj.next = obj; else {
						obj.next = $this.vertices;
						obj.prev = $this.vertices.prev;
						$this.vertices.prev.next = obj;
						$this.vertices.prev = obj;
					}
					$r = obj;
					return $r;
				}(this));
				this.vertices.forced = p.forced;
			}
		}
		p = p.next;
	} while(p != P);
	if((function($this) {
		var $r;
		var ret = 0;
		{
			var F = $this.vertices;
			var L = $this.vertices;
			if(F != null) {
				var nite = F;
				do {
					var i = nite;
					ret++;
					nite = nite.next;
				} while(nite != L);
			}
		}
		$r = ret;
		return $r;
	}(this)) < 3) throw "Error: Degenerate poly cannot be decomposed";
}
zpp_nape.geom.ZPP_PartitionPoly.__name__ = ["zpp_nape","geom","ZPP_PartitionPoly"];
zpp_nape.geom.ZPP_PartitionPoly.prototype.vertices = null;
zpp_nape.geom.ZPP_PartitionPoly.prototype.linked = function() {
	var ret = new zpp_nape.geom.ZPP_PartitionPoly();
	var F = this.vertices;
	var L = this.vertices;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			ret.vertices = (function($this) {
				var $r;
				var obj = v.linked();
				if(ret.vertices == null) ret.vertices = obj.prev = obj.next = obj; else {
					obj.prev = ret.vertices;
					obj.next = ret.vertices.next;
					ret.vertices.next.prev = obj;
					ret.vertices.next = obj;
				}
				$r = obj;
				return $r;
			}(this));
			nite = nite.next;
		} while(nite != L);
	}
	return ret;
}
zpp_nape.geom.ZPP_PartitionPoly.prototype.eq = function(a,b) {
	return (function($this) {
		var $r;
		var dx;
		var dy;
		{
			dx = a.x - b.x;
			dy = a.y - b.y;
		}
		$r = dx * dx + dy * dy;
		return $r;
	}(this)) < 1e-8;
}
zpp_nape.geom.ZPP_PartitionPoly.prototype.insert_diagonal = function(p,q) {
	{
		p.diagonals.add(q);
		p.icnt += 2;
	}
	{
		q.diagonals.add(p);
		q.icnt += 2;
	}
	p.forced = q.forced = true;
}
zpp_nape.geom.ZPP_PartitionPoly.prototype.partition_to = function(rets) {
	var F = this.vertices;
	var L = this.vertices;
	if(F != null) {
		var nite = F;
		do {
			var c = nite;
			c.sort_diagonals();
			nite = nite.next;
		} while(nite != L);
	}
	this.make_polygon(this.vertices,rets);
}
zpp_nape.geom.ZPP_PartitionPoly.prototype.partition = function() {
	var rets = new zpp_nape.util.ZNPList_ZPP_GeomVert();
	this.partition_to(rets);
	return rets;
}
zpp_nape.geom.ZPP_PartitionPoly.prototype.make_polygon = function(start,rets) {
	var poly = null;
	var next = start;
	do {
		poly = (function($this) {
			var $r;
			var obj = zpp_nape.geom.ZPP_GeomVert.get(next.x,next.y);
			if(poly == null) poly = obj.prev = obj.next = obj; else {
				obj.prev = poly;
				obj.next = poly.next;
				poly.next.prev = obj;
				poly.next = obj;
			}
			$r = obj;
			return $r;
		}(this));
		poly.forced = next.forced;
		if(!(next.diagonals.head == null)) {
			var diag = next.diagonals.pop_unsafe();
			if(diag == start) break; else next = this.make_polygon(next,rets);
		} else {
			var n = next.next;
			var o = next;
			{
				o.helper = null;
				o.prev = null;
				o.node = null;
			}
			o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
			zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
			next = n;
		}
	} while(next != start);
	if((function($this) {
		var $r;
		{
		}
		var area = 0.0;
		{
			var F = poly;
			var L = poly;
			if(F != null) {
				var nite = F;
				do {
					var v = nite;
					area += v.x * (v.next.y - v.prev.y);
					nite = nite.next;
				} while(nite != L);
			}
		}
		$r = area;
		return $r;
	}(this)) != 0) rets.add(poly);
	return next;
}
zpp_nape.geom.ZPP_PartitionPoly.prototype.__class__ = zpp_nape.geom.ZPP_PartitionPoly;
zpp_nape.geom.ZPP_PartitionVertex = function(p) {
	if( p === $_ ) return;
	this.diagonals = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
}
zpp_nape.geom.ZPP_PartitionVertex.__name__ = ["zpp_nape","geom","ZPP_PartitionVertex"];
zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = null;
zpp_nape.geom.ZPP_PartitionVertex.get = function(x,y) {
	var ret = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.geom.ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.geom.ZPP_PartitionVertex(); else {
			ret = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
			zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		{
			ret.x = 0;
			ret.y = 0;
			ret.forced = false;
		}
		$r = ret;
		return $r;
	}(this));
	ret.x = x;
	ret.y = y;
	return ret;
}
zpp_nape.geom.ZPP_PartitionVertex.vert_lt = function(q,v) {
	if(v == q || v == q.next) return true;
	var min;
	var max;
	if(q.x < q.next.x) {
		min = q;
		max = q.next;
	} else {
		min = q.next;
		max = q;
	}
	if(min.y == max.y) return min.x <= v.x; else {
		var flip = q.next.y > q.y;
		var ux;
		var uy;
		ux = q.next.x - q.x;
		uy = q.next.y - q.y;
		var vx;
		var vy;
		vx = v.x - q.x;
		vy = v.y - q.y;
		return (flip?uy * vx - ux * vy:vy * ux - vx * uy) <= 0;
	}
}
zpp_nape.geom.ZPP_PartitionVertex.edge_swap = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
}
zpp_nape.geom.ZPP_PartitionVertex.edge_lt = function(p,q) {
	var ux;
	var uy;
	var vx;
	var vy;
	var flip;
	if(p == q && p.next == q.next) {
		return false;
	} else if(p == q.next) return p.y == p.next.y?p.x < p.next.x?p.x > q.x:p.next.x > q.x:(function($this) {
		var $r;
		flip = p.next.y > p.y;
		{
			ux = p.next.x - p.x;
			uy = p.next.y - p.y;
		}
		{
			vx = q.x - p.x;
			vy = q.y - p.y;
		}
		$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
		return $r;
	}(this)) < 0; else if(p.next == q) return !(q.y == q.next.y?q.x < q.next.x?q.x > p.x:q.next.x > p.x:(function($this) {
		var $r;
		flip = q.next.y > q.y;
		{
			ux = q.next.x - q.x;
			uy = q.next.y - q.y;
		}
		{
			vx = p.x - q.x;
			vy = p.y - q.y;
		}
		$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
		return $r;
	}(this)) < 0); else if(p == q) return (function($this) {
		var $r;
		{
		}
		$r = p.y == p.next.y?p.x < p.next.x?p.x > q.next.x:p.next.x > q.next.x:(function($this) {
			var $r;
			flip = p.next.y > p.y;
			{
				ux = p.next.x - p.x;
				uy = p.next.y - p.y;
			}
			{
				vx = q.next.x - p.x;
				vy = q.next.y - p.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}($this)) < 0;
		return $r;
	}(this)); else if(p.next == q.next) return (function($this) {
		var $r;
		{
		}
		$r = p.y == p.next.y?p.x < p.next.x?p.x > q.x:p.next.x > q.x:(function($this) {
			var $r;
			flip = p.next.y > p.y;
			{
				ux = p.next.x - p.x;
				uy = p.next.y - p.y;
			}
			{
				vx = q.x - p.x;
				vy = q.y - p.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}($this)) < 0;
		return $r;
	}(this)); else if(p.y == p.next.y) {
		if(q.y == q.next.y) {
			var pmax = p.x < p.next.x?p.next:p;
			var qmax = q.x < q.next.x?q.next:q;
			return pmax.x > qmax.x;
		} else return (function($this) {
			var $r;
			flip = q.next.y > q.y;
			{
				ux = q.next.x - q.x;
				uy = q.next.y - q.y;
			}
			{
				vx = p.x - q.x;
				vy = p.y - q.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) > 0;
	} else {
		var qlrgv = (function($this) {
			var $r;
			flip = p.next.y > p.y;
			{
				ux = p.next.x - p.x;
				uy = p.next.y - p.y;
			}
			{
				vx = q.x - p.x;
				vy = q.y - p.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this));
		var qlrg = qlrgv < 0;
		var aqlrg = (function($this) {
			var $r;
			flip = p.next.y > p.y;
			{
				ux = p.next.x - p.x;
				uy = p.next.y - p.y;
			}
			{
				vx = q.next.x - p.x;
				vy = q.next.y - p.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0;
		if(qlrg == aqlrg) return qlrg; else if(q.y == q.next.y) return qlrgv > 0; else return (function($this) {
			var $r;
			flip = q.next.y > q.y;
			{
				ux = q.next.x - q.x;
				uy = q.next.y - q.y;
			}
			{
				vx = p.x - q.x;
				vy = p.y - q.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) >= 0;
	}
}
zpp_nape.geom.ZPP_PartitionVertex.prototype.next = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.free = function() {
	this.helper = null;
	this.prev = null;
	this.node = null;
}
zpp_nape.geom.ZPP_PartitionVertex.prototype.alloc = function() {
	this.x = 0;
	this.y = 0;
	this.forced = false;
}
zpp_nape.geom.ZPP_PartitionVertex.prototype.linked = function() {
	var ret = zpp_nape.geom.ZPP_PartitionVertex.get(this.x,this.y);
	ret.link = this;
	return ret;
}
zpp_nape.geom.ZPP_PartitionVertex.prototype.x = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.y = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.prev = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.diagonals = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.icnt = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.forced = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.insert_diagonal = function(x) {
	this.diagonals.add(x);
	this.icnt += 2;
}
zpp_nape.geom.ZPP_PartitionVertex.prototype.prune_diagonals = function() {
	var prev = null;
	var pre = null;
	var cx_ite = this.diagonals.head;
	while(cx_ite != null) {
		var d = cx_ite.elt;
		if(prev != null) {
			if((function($this) {
				var $r;
				var ux;
				var uy;
				var vx;
				var vy;
				{
					ux = $this.x - prev.x;
					uy = $this.y - prev.y;
				}
				{
					vx = d.x - prev.x;
					vy = d.y - prev.y;
				}
				var ret = vy * ux - vx * uy;
				$r = ret > 0?-1:ret == 0?0:1;
				return $r;
			}(this)) == 0) {
				if(d.next == prev || d.prev == prev) {
					if((function($this) {
						var $r;
						var dx;
						var dy;
						{
							dx = $this.x - prev.x;
							dy = $this.y - prev.y;
						}
						$r = dx * dx + dy * dy;
						return $r;
					}(this)) > (function($this) {
						var $r;
						var dx;
						var dy;
						{
							dx = $this.x - d.x;
							dy = $this.y - d.y;
						}
						$r = dx * dx + dy * dy;
						return $r;
					}(this))) {
						this.diagonals.remove(prev);
						prev.diagonals.remove(this);
					} else {
						cx_ite = this.diagonals.erase(pre);
						d.diagonals.remove(this);
						continue;
					}
				}
			}
		}
		prev = d;
		pre = cx_ite;
		cx_ite = cx_ite.next;
	}
}
zpp_nape.geom.ZPP_PartitionVertex.prototype.sort_diagonals = function() {
	var vorient = (function($this) {
		var $r;
		var ux;
		var uy;
		var vx;
		var vy;
		{
			ux = $this.prev.x - $this.x;
			uy = $this.prev.y - $this.y;
		}
		{
			vx = $this.next.x - $this.x;
			vy = $this.next.y - $this.y;
		}
		var ret = vy * ux - vx * uy;
		$r = ret > 0?-1:ret == 0?0:1;
		return $r;
	}(this));
	var xxlist = this.diagonals;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges, leftSize, rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if((function($this) {
						var $r;
						var d1 = (function($this) {
							var $r;
							var ux;
							var uy;
							var vx;
							var vy;
							{
								ux = $this.prev.x - $this.x;
								uy = $this.prev.y - $this.y;
							}
							{
								vx = left.elt.x - $this.x;
								vy = left.elt.y - $this.y;
							}
							var ret = vy * ux - vx * uy;
							$r = ret > 0?-1:ret == 0?0:1;
							return $r;
						}($this));
						var d2 = (function($this) {
							var $r;
							var ux;
							var uy;
							var vx;
							var vy;
							{
								ux = $this.prev.x - $this.x;
								uy = $this.prev.y - $this.y;
							}
							{
								vx = right.elt.x - $this.x;
								vy = right.elt.y - $this.y;
							}
							var ret = vy * ux - vx * uy;
							$r = ret > 0?-1:ret == 0?0:1;
							return $r;
						}($this));
						$r = d1 == d2?(function($this) {
							var $r;
							var ux;
							var uy;
							var vx;
							var vy;
							{
								ux = left.elt.x - $this.x;
								uy = left.elt.y - $this.y;
							}
							{
								vx = right.elt.x - $this.x;
								vy = right.elt.y - $this.y;
							}
							var ret = vy * ux - vx * uy;
							$r = ret > 0?-1:ret == 0?0:1;
							return $r;
						}($this)) == 1:d1 == 0?d2 == vorient:d1 != vorient;
						return $r;
					}(this))) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		{
			xxlist.head = head;
			xxlist.modified = true;
			xxlist.pushmod = true;
		}
	}
	this.prune_diagonals();
}
zpp_nape.geom.ZPP_PartitionVertex.prototype.link = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.helper = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.type = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.node = null;
zpp_nape.geom.ZPP_PartitionVertex.prototype.__class__ = zpp_nape.geom.ZPP_PartitionVertex;
nape.dynamics.ArbiterType = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ArbiterType" + " derp!";
}
nape.dynamics.ArbiterType.__name__ = ["nape","dynamics","ArbiterType"];
nape.dynamics.ArbiterType.COLLISION = null;
nape.dynamics.ArbiterType.flibget_COLLISION = function() {
	if(zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION;
}
nape.dynamics.ArbiterType.FLUID = null;
nape.dynamics.ArbiterType.flibget_FLUID = function() {
	if(zpp_nape.util.ZPP_Flags.ArbiterType_FLUID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ArbiterType_FLUID;
}
nape.dynamics.ArbiterType.SENSOR = null;
nape.dynamics.ArbiterType.flibget_SENSOR = function() {
	if(zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR;
}
nape.dynamics.ArbiterType.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = new nape.dynamics.ArbiterType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION;
		return $r;
	}(this))) return "COLLISION"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ArbiterType_FLUID == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = new nape.dynamics.ArbiterType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ArbiterType_FLUID;
		return $r;
	}(this))) return "FLUID"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = new nape.dynamics.ArbiterType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR;
		return $r;
	}(this))) return "SENSOR"; else return "";
}
nape.dynamics.ArbiterType.prototype.__class__ = nape.dynamics.ArbiterType;
nape.dynamics.ArbiterIterator = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_ArbiterList.internal) throw "Error: Cannot instantiate " + "Arbiter" + "Iterator derp!";
}
nape.dynamics.ArbiterIterator.__name__ = ["nape","dynamics","ArbiterIterator"];
nape.dynamics.ArbiterIterator.zpp_pool = null;
nape.dynamics.ArbiterIterator.get = function(list) {
	var ret = nape.dynamics.ArbiterIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_ArbiterList.internal = true;
		var ret = new nape.dynamics.ArbiterIterator();
		zpp_nape.util.ZPP_ArbiterList.internal = false;
		$r = ret;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.dynamics.ArbiterIterator.zpp_pool;
		nape.dynamics.ArbiterIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	list.zpp_inner.iterators.add(ret);
	return ret;
}
nape.dynamics.ArbiterIterator.prototype.zpp_inner = null;
nape.dynamics.ArbiterIterator.prototype.zpp_i = null;
nape.dynamics.ArbiterIterator.prototype.zpp_critical = null;
nape.dynamics.ArbiterIterator.prototype.zpp_next = null;
nape.dynamics.ArbiterIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.zpp_gl();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.dynamics.ArbiterIterator.zpp_pool;
		nape.dynamics.ArbiterIterator.zpp_pool = this;
		this.zpp_inner.zpp_inner.iterators.remove(this);
		return false;
	}
}
nape.dynamics.ArbiterIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
}
nape.dynamics.ArbiterIterator.prototype.__class__ = nape.dynamics.ArbiterIterator;
nape.dynamics.Arbiter = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.dynamics.ZPP_Arbiter.internal) throw "Error: Cannot instantiate Arbiter derp!";
}
nape.dynamics.Arbiter.__name__ = ["nape","dynamics","Arbiter"];
nape.dynamics.Arbiter.prototype.zpp_inner = null;
nape.dynamics.Arbiter.prototype.id = null;
nape.dynamics.Arbiter.prototype.flibget_id = function() {
	return (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.id;
		return $r;
	}(this));
}
nape.dynamics.Arbiter.prototype.active = null;
nape.dynamics.Arbiter.prototype.flibget_active = function() {
	return !this.zpp_inner.cleared;
}
nape.dynamics.Arbiter.prototype.type = null;
nape.dynamics.Arbiter.prototype.flibget_type = function() {
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = new nape.dynamics.ArbiterType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ArbiterType_FLUID == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = new nape.dynamics.ArbiterType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ArbiterType_FLUID;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = new nape.dynamics.ArbiterType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR;
		return $r;
	}(this))][this.zpp_inner.type];
}
nape.dynamics.Arbiter.prototype.isCollisionArbiter = function() {
	return this.zpp_inner.type == 0;
}
nape.dynamics.Arbiter.prototype.isFluidArbiter = function() {
	return this.zpp_inner.type == 1;
}
nape.dynamics.Arbiter.prototype.isSensorArbiter = function() {
	return this.zpp_inner.type == 2;
}
nape.dynamics.Arbiter.prototype.collisionArbiter = null;
nape.dynamics.Arbiter.prototype.flibget_collisionArbiter = function() {
	return this.zpp_inner.type == 0?this.zpp_inner.colarb.outer_zn:null;
}
nape.dynamics.Arbiter.prototype.fluidArbiter = null;
nape.dynamics.Arbiter.prototype.flibget_fluidArbiter = function() {
	return this.zpp_inner.type == 1?this.zpp_inner.fluidarb.outer_zn:null;
}
nape.dynamics.Arbiter.prototype.shape1 = null;
nape.dynamics.Arbiter.prototype.flibget_shape1 = function() {
	return (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws2.outer:$this.zpp_inner.ws1.outer;
		return $r;
	}(this));
}
nape.dynamics.Arbiter.prototype.shape2 = null;
nape.dynamics.Arbiter.prototype.flibget_shape2 = function() {
	return (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws1.outer:$this.zpp_inner.ws2.outer;
		return $r;
	}(this));
}
nape.dynamics.Arbiter.prototype.body1 = null;
nape.dynamics.Arbiter.prototype.flibget_body1 = function() {
	return (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this));
}
nape.dynamics.Arbiter.prototype.body2 = null;
nape.dynamics.Arbiter.prototype.flibget_body2 = function() {
	return (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this));
}
nape.dynamics.Arbiter.prototype.totalImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	if(!!this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	return new nape.geom.Vec3(0,0,0);
}
nape.dynamics.Arbiter.prototype.toString = function() {
	var ret = this.zpp_inner.type == 0?"CollisionArbiter":this.zpp_inner.type == 1?"FluidArbiter":"SensorArbiter";
	if(this.zpp_inner.cleared) return ret + "(object-pooled)"; else return ret + "(" + ((function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws2.outer:$this.zpp_inner.ws1.outer;
		return $r;
	}(this))).toString() + "|" + ((function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws1.outer:$this.zpp_inner.ws2.outer;
		return $r;
	}(this))).toString() + ")" + (this.zpp_inner.type == 0?"[" + ["SD","DD"][this.zpp_inner.colarb.stat?0:1] + "]":"");
}
nape.dynamics.Arbiter.prototype.__class__ = nape.dynamics.Arbiter;
nape.dynamics.CollisionArbiter = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.dynamics.ZPP_Arbiter.internal) throw "Error: Cannot instantiate CollisionArbiter derp!";
	nape.dynamics.Arbiter.call(this);
}
nape.dynamics.CollisionArbiter.__name__ = ["nape","dynamics","CollisionArbiter"];
nape.dynamics.CollisionArbiter.__super__ = nape.dynamics.Arbiter;
for(var k in nape.dynamics.Arbiter.prototype ) nape.dynamics.CollisionArbiter.prototype[k] = nape.dynamics.Arbiter.prototype[k];
nape.dynamics.CollisionArbiter.prototype.contacts = null;
nape.dynamics.CollisionArbiter.prototype.flibget_contacts = function() {
	return (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		if($this.zpp_inner.colarb.wrap_contacts == null) $this.zpp_inner.colarb.wrap_contacts = zpp_nape.util.ZPP_ContactList.get($this.zpp_inner.colarb.contacts,true);
		$r = $this.zpp_inner.colarb.wrap_contacts;
		return $r;
	}(this));
}
nape.dynamics.CollisionArbiter.prototype.normal = null;
nape.dynamics.CollisionArbiter.prototype.flibget_normal = function() {
	return (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		if($this.zpp_inner.colarb.wrap_normal == null) $this.zpp_inner.colarb.getnormal();
		$r = $this.zpp_inner.colarb.wrap_normal;
		return $r;
	}(this));
}
nape.dynamics.CollisionArbiter.prototype.normalImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	if(!!this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var colarb = this.zpp_inner.colarb;
	if(!freshOnly || colarb.oc1.fresh) {
		var imp = colarb.oc1.wrapper().normalImpulse(body);
		var t = 1;
		var t1 = t;
		retx += imp.x * t1;
		rety += imp.y * t1;
		retz += imp.z * t;
	}
	if(colarb.hc2) {
		if(!freshOnly || colarb.oc2.fresh) {
			var imp = colarb.oc2.wrapper().normalImpulse(body);
			var t = 1;
			var t1 = t;
			retx += imp.x * t1;
			rety += imp.y * t1;
			retz += imp.z * t;
		}
	}
	return new nape.geom.Vec3(retx,rety,retz);
}
nape.dynamics.CollisionArbiter.prototype.tangentImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	if(!!this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var colarb = this.zpp_inner.colarb;
	if(!freshOnly || colarb.oc1.fresh) {
		var imp = colarb.oc1.wrapper().tangentImpulse(body);
		var t = 1;
		var t1 = t;
		retx += imp.x * t1;
		rety += imp.y * t1;
		retz += imp.z * t;
	}
	if(colarb.hc2) {
		if(!freshOnly || colarb.oc2.fresh) {
			var imp = colarb.oc2.wrapper().tangentImpulse(body);
			var t = 1;
			var t1 = t;
			retx += imp.x * t1;
			rety += imp.y * t1;
			retz += imp.z * t;
		}
	}
	return new nape.geom.Vec3(retx,rety,retz);
}
nape.dynamics.CollisionArbiter.prototype.totalImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	if(!!this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var colarb = this.zpp_inner.colarb;
	if(!freshOnly || colarb.oc1.fresh) {
		var imp = colarb.oc1.wrapper().totalImpulse(body);
		var t = 1;
		var t1 = t;
		retx += imp.x * t1;
		rety += imp.y * t1;
		retz += imp.z * t;
	}
	if(colarb.hc2) {
		if(!freshOnly || colarb.oc2.fresh) {
			var imp = colarb.oc2.wrapper().totalImpulse(body);
			var t = 1;
			var t1 = t;
			retx += imp.x * t1;
			rety += imp.y * t1;
			retz += imp.z * t;
		}
	}
	return new nape.geom.Vec3(retx,rety,retz);
}
nape.dynamics.CollisionArbiter.prototype.rollingImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	if(!!this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	var colarb = this.zpp_inner.colarb;
	if(!freshOnly || colarb.oc1.fresh) return colarb.oc1.wrapper().rollingImpulse(body); else return 0.0;
}
nape.dynamics.CollisionArbiter.prototype.restitution = null;
nape.dynamics.CollisionArbiter.prototype.flibget_restitution = function() {
	return (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		var colarb = $this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			{
				if(colarb.s1.material.elasticity == Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity == Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity == Math.POSITIVE_INFINITY || colarb.s2.material.elasticity == Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
				colarb.dyn_fric = (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
					return $r;
				}($this));
				colarb.stat_fric = (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
					return $r;
				}($this));
				colarb.rfric = (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
					return $r;
				}($this));
			}
		}
		$r = colarb.restitution;
		return $r;
	}(this));
}
nape.dynamics.CollisionArbiter.prototype.dynamicFriction = null;
nape.dynamics.CollisionArbiter.prototype.flibget_dynamicFriction = function() {
	return (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		var colarb = $this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			{
				if(colarb.s1.material.elasticity == Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity == Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity == Math.POSITIVE_INFINITY || colarb.s2.material.elasticity == Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
				colarb.dyn_fric = (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
					return $r;
				}($this));
				colarb.stat_fric = (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
					return $r;
				}($this));
				colarb.rfric = (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
					return $r;
				}($this));
			}
		}
		$r = colarb.dyn_fric;
		return $r;
	}(this));
}
nape.dynamics.CollisionArbiter.prototype.staticFriction = null;
nape.dynamics.CollisionArbiter.prototype.flibget_staticFriction = function() {
	return (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		var colarb = $this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			{
				if(colarb.s1.material.elasticity == Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity == Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity == Math.POSITIVE_INFINITY || colarb.s2.material.elasticity == Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
				colarb.dyn_fric = (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
					return $r;
				}($this));
				colarb.stat_fric = (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
					return $r;
				}($this));
				colarb.rfric = (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
					return $r;
				}($this));
			}
		}
		$r = colarb.stat_fric;
		return $r;
	}(this));
}
nape.dynamics.CollisionArbiter.prototype.rollingFriction = null;
nape.dynamics.CollisionArbiter.prototype.flibget_rollingFriction = function() {
	return (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		var colarb = $this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			{
				if(colarb.s1.material.elasticity == Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity == Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity == Math.POSITIVE_INFINITY || colarb.s2.material.elasticity == Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
				colarb.dyn_fric = (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
					return $r;
				}($this));
				colarb.stat_fric = (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
					return $r;
				}($this));
				colarb.rfric = (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
					return $r;
				}($this));
			}
		}
		$r = colarb.rfric;
		return $r;
	}(this));
}
nape.dynamics.CollisionArbiter.prototype.__class__ = nape.dynamics.CollisionArbiter;
nape.dynamics.FluidArbiter = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.dynamics.ZPP_Arbiter.internal) throw "Error: Cannot instantiate FluidArbiter derp!";
	nape.dynamics.Arbiter.call(this);
}
nape.dynamics.FluidArbiter.__name__ = ["nape","dynamics","FluidArbiter"];
nape.dynamics.FluidArbiter.__super__ = nape.dynamics.Arbiter;
for(var k in nape.dynamics.Arbiter.prototype ) nape.dynamics.FluidArbiter.prototype[k] = nape.dynamics.Arbiter.prototype[k];
nape.dynamics.FluidArbiter.prototype.position = null;
nape.dynamics.FluidArbiter.prototype.flibget_position = function() {
	return (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		if($this.zpp_inner.fluidarb.wrap_position == null) $this.zpp_inner.fluidarb.getposition();
		$r = $this.zpp_inner.fluidarb.wrap_position;
		return $r;
	}(this));
}
nape.dynamics.FluidArbiter.prototype.overlap = null;
nape.dynamics.FluidArbiter.prototype.flibget_overlap = function() {
	return (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.fluidarb.overlap;
		return $r;
	}(this));
}
nape.dynamics.FluidArbiter.prototype.buoyancyImpulse = function(body) {
	if(!!this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	var farb = this.zpp_inner.fluidarb;
	return new nape.geom.Vec3(farb.buoyx,farb.buoyy);
}
nape.dynamics.FluidArbiter.prototype.dragImpulse = function(body) {
	if(!!this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	var farb = this.zpp_inner.fluidarb;
	return new nape.geom.Vec3(farb.dampx + farb.pdampx,farb.dampy + farb.pdampy,farb.adamp + farb.padamp);
}
nape.dynamics.FluidArbiter.prototype.totalImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	if(!!this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
	if(body != null && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
		return $r;
	}(this)) && body != (function($this) {
		var $r;
		if(!!$this.zpp_inner.cleared) throw "Error: Arbiter not currently in use";
		$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
		return $r;
	}(this))) throw "Error: Arbiter does not relate to body";
	var farb = this.zpp_inner.fluidarb;
	return new nape.geom.Vec3(farb.dampx + farb.pdampx + farb.buoyx,farb.dampy + farb.pdampy + farb.buoyy,farb.adamp + farb.padamp);
}
nape.dynamics.FluidArbiter.prototype.__class__ = nape.dynamics.FluidArbiter;
jeash.events.FocusEvent = function(type,bubbles,cancelable,inObject,inShiftKey,inKeyCode) {
	if( type === $_ ) return;
	jeash.events.Event.call(this,type,bubbles,cancelable);
	this.keyCode = inKeyCode;
	this.shiftKey = inShiftKey == null?false:inShiftKey;
	this.target = inObject;
}
jeash.events.FocusEvent.__name__ = ["jeash","events","FocusEvent"];
jeash.events.FocusEvent.__super__ = jeash.events.Event;
for(var k in jeash.events.Event.prototype ) jeash.events.FocusEvent.prototype[k] = jeash.events.Event.prototype[k];
jeash.events.FocusEvent.prototype.keyCode = null;
jeash.events.FocusEvent.prototype.shiftKey = null;
jeash.events.FocusEvent.prototype.relatedObject = null;
jeash.events.FocusEvent.prototype.__class__ = jeash.events.FocusEvent;
nape.geom.AABB = function(x,y,width,height) {
	if( x === $_ ) return;
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(x != x || y != y) throw "Error: AABB position cannot be NaN";
	if(width != width || height != height) throw "Error: AABB dimensions cannot be NaN";
	this.zpp_inner = zpp_nape.geom.ZPP_AABB.get(x,y,x + width,y + height);
	this.zpp_inner.outer = this;
}
nape.geom.AABB.__name__ = ["nape","geom","AABB"];
nape.geom.AABB.prototype.zpp_inner = null;
nape.geom.AABB.prototype.copy = function() {
	return this.zpp_inner.copy().wrapper();
}
nape.geom.AABB.prototype.min = null;
nape.geom.AABB.prototype.flibget_min = function() {
	return this.zpp_inner.get_min();
}
nape.geom.AABB.prototype.flibset_min = function(min) {
	if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: AABB is immutable";
	if(min == null) throw "Error: Cannot assign null to AABB::" + "min";
	if((function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.minx;
		return $r;
	}(this)) != (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.minx;
		return $r;
	}(this)) || (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.miny;
		return $r;
	}(this)) != (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.miny;
		return $r;
	}(this))) throw "Error: AABB::" + "min" + " components cannot be NaN";
	if("min" == "min") {
		if((function($this) {
			var $r;
			if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			min.zpp_inner.validate();
			$r = min.zpp_inner.x;
			return $r;
		}(this)) > this.zpp_inner.get_max().flibget_x()) throw "Error: Assignment would cause negative width";
		if((function($this) {
			var $r;
			if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			min.zpp_inner.validate();
			$r = min.zpp_inner.y;
			return $r;
		}(this)) > this.zpp_inner.get_max().flibget_y()) throw "Error: Assignment would cause negative height";
	} else {
		if((function($this) {
			var $r;
			if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			min.zpp_inner.validate();
			$r = min.zpp_inner.x;
			return $r;
		}(this)) < (function($this) {
			var $r;
			if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			min.zpp_inner.validate();
			$r = min.zpp_inner.x;
			return $r;
		}(this))) throw "Error: Assignment would cause negative width";
		if((function($this) {
			var $r;
			if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			min.zpp_inner.validate();
			$r = min.zpp_inner.y;
			return $r;
		}(this)) < (function($this) {
			var $r;
			if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			min.zpp_inner.validate();
			$r = min.zpp_inner.y;
			return $r;
		}(this))) throw "Error: Assignment would cause negative height";
	}
	this.zpp_inner.get_min().set(min);
	return this.zpp_inner.get_min();
}
nape.geom.AABB.prototype.max = null;
nape.geom.AABB.prototype.flibget_max = function() {
	return this.zpp_inner.get_max();
}
nape.geom.AABB.prototype.flibset_max = function(max) {
	if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: AABB is immutable";
	if(max == null) throw "Error: Cannot assign null to AABB::" + "max";
	if((function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.minx;
		return $r;
	}(this)) != (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.minx;
		return $r;
	}(this)) || (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.miny;
		return $r;
	}(this)) != (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.miny;
		return $r;
	}(this))) throw "Error: AABB::" + "max" + " components cannot be NaN";
	if("max" == "min") {
		if((function($this) {
			var $r;
			if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			max.zpp_inner.validate();
			$r = max.zpp_inner.x;
			return $r;
		}(this)) > (function($this) {
			var $r;
			if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			max.zpp_inner.validate();
			$r = max.zpp_inner.x;
			return $r;
		}(this))) throw "Error: Assignment would cause negative width";
		if((function($this) {
			var $r;
			if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			max.zpp_inner.validate();
			$r = max.zpp_inner.y;
			return $r;
		}(this)) > (function($this) {
			var $r;
			if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			max.zpp_inner.validate();
			$r = max.zpp_inner.y;
			return $r;
		}(this))) throw "Error: Assignment would cause negative height";
	} else {
		if((function($this) {
			var $r;
			if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			max.zpp_inner.validate();
			$r = max.zpp_inner.x;
			return $r;
		}(this)) < this.zpp_inner.get_min().flibget_x()) throw "Error: Assignment would cause negative width";
		if((function($this) {
			var $r;
			if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			max.zpp_inner.validate();
			$r = max.zpp_inner.y;
			return $r;
		}(this)) < this.zpp_inner.get_min().flibget_y()) throw "Error: Assignment would cause negative height";
	}
	this.zpp_inner.get_max().set(max);
	return this.zpp_inner.get_max();
}
nape.geom.AABB.prototype.x = null;
nape.geom.AABB.prototype.flibget_x = function() {
	return (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.minx;
		return $r;
	}(this));
}
nape.geom.AABB.prototype.flibset_x = function(x) {
	if(this.zpp_inner.immutable) throw "Error: AABB is immutable";
	if((function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.minx;
		return $r;
	}(this)) != x) {
		if(x != x) throw "Error: AABB::" + "x" + " cannot be NaN";
		if(x > this.zpp_inner.get_max().flibget_x()) throw "Error: Assignment would cause negative " + ("x" == "x"?"width":"height");
		this.zpp_inner.maxx += x - this.zpp_inner.minx;
		this.zpp_inner.minx = x;
		this.zpp_inner.invalidate();
	}
	return (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.minx;
		return $r;
	}(this));
}
nape.geom.AABB.prototype.y = null;
nape.geom.AABB.prototype.flibget_y = function() {
	return (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.miny;
		return $r;
	}(this));
}
nape.geom.AABB.prototype.flibset_y = function(y) {
	if(this.zpp_inner.immutable) throw "Error: AABB is immutable";
	if((function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.miny;
		return $r;
	}(this)) != y) {
		if(y != y) throw "Error: AABB::" + "y" + " cannot be NaN";
		if(y > this.zpp_inner.get_max().flibget_y()) throw "Error: Assignment would cause negative " + ("y" == "x"?"width":"height");
		this.zpp_inner.maxy += y - this.zpp_inner.miny;
		this.zpp_inner.miny = y;
		this.zpp_inner.invalidate();
	}
	return (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.miny;
		return $r;
	}(this));
}
nape.geom.AABB.prototype.width = null;
nape.geom.AABB.prototype.flibget_width = function() {
	return (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.width();
		return $r;
	}(this));
}
nape.geom.AABB.prototype.flibset_width = function(width) {
	if(this.zpp_inner.immutable) throw "Error: AABB is immutable";
	if((function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.width();
		return $r;
	}(this)) != width) {
		if(width != width) throw "Error: AABB::" + "width" + " cannot be NaN";
		if(width < 0) throw "Error: AABB::" + "width" + " (" + width + ") must be >= 0";
		this.zpp_inner.maxx = (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) + width;
		this.zpp_inner.invalidate();
	}
	return (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.width();
		return $r;
	}(this));
}
nape.geom.AABB.prototype.height = null;
nape.geom.AABB.prototype.flibget_height = function() {
	return (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.height();
		return $r;
	}(this));
}
nape.geom.AABB.prototype.flibset_height = function(height) {
	if(this.zpp_inner.immutable) throw "Error: AABB is immutable";
	if((function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.height();
		return $r;
	}(this)) != height) {
		if(height != height) throw "Error: AABB::" + "height" + " cannot be NaN";
		if(height < 0) throw "Error: AABB::" + "height" + " (" + height + ") must be >= 0";
		this.zpp_inner.maxy = (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this)) + height;
		this.zpp_inner.invalidate();
	}
	return (function($this) {
		var $r;
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.height();
		return $r;
	}(this));
}
nape.geom.AABB.prototype.toString = function() {
	this.zpp_inner.validate();
	return this.zpp_inner.toString();
}
nape.geom.AABB.prototype.__class__ = nape.geom.AABB;
nape.phys.MassMode = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "MassMode" + " derp!";
}
nape.phys.MassMode.__name__ = ["nape","phys","MassMode"];
nape.phys.MassMode.DEFAULT = null;
nape.phys.MassMode.flibget_DEFAULT = function() {
	if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
}
nape.phys.MassMode.FIXED = null;
nape.phys.MassMode.flibget_FIXED = function() {
	if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.MassMode_FIXED;
}
nape.phys.MassMode.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
		return $r;
	}(this))) return "DEFAULT"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.MassMode_FIXED;
		return $r;
	}(this))) return "FIXED"; else return "";
}
nape.phys.MassMode.prototype.__class__ = nape.phys.MassMode;
nape.phys.GravMassMode = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "GravMassMode" + " derp!";
}
nape.phys.GravMassMode.__name__ = ["nape","phys","GravMassMode"];
nape.phys.GravMassMode.DEFAULT = null;
nape.phys.GravMassMode.flibget_DEFAULT = function() {
	if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
}
nape.phys.GravMassMode.FIXED = null;
nape.phys.GravMassMode.flibget_FIXED = function() {
	if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
}
nape.phys.GravMassMode.SCALED = null;
nape.phys.GravMassMode.flibget_SCALED = function() {
	if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
}
nape.phys.GravMassMode.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
		return $r;
	}(this))) return "DEFAULT"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
		return $r;
	}(this))) return "FIXED"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
		return $r;
	}(this))) return "SCALED"; else return "";
}
nape.phys.GravMassMode.prototype.__class__ = nape.phys.GravMassMode;
nape.phys.BodyType = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "BodyType" + " derp!";
}
nape.phys.BodyType.__name__ = ["nape","phys","BodyType"];
nape.phys.BodyType.STATIC = null;
nape.phys.BodyType.flibget_STATIC = function() {
	if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.BodyType_STATIC;
}
nape.phys.BodyType.DYNAMIC = null;
nape.phys.BodyType.flibget_DYNAMIC = function() {
	if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
}
nape.phys.BodyType.KINEMATIC = null;
nape.phys.BodyType.flibget_KINEMATIC = function() {
	if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
}
nape.phys.BodyType.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
		return $r;
	}(this))) return "STATIC"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this))) return "DYNAMIC"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
		return $r;
	}(this))) return "KINEMATIC"; else return "";
}
nape.phys.BodyType.prototype.__class__ = nape.phys.BodyType;
nape.phys.InertiaMode = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "InertiaMode" + " derp!";
}
nape.phys.InertiaMode.__name__ = ["nape","phys","InertiaMode"];
nape.phys.InertiaMode.DEFAULT = null;
nape.phys.InertiaMode.flibget_DEFAULT = function() {
	if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
}
nape.phys.InertiaMode.FIXED = null;
nape.phys.InertiaMode.flibget_FIXED = function() {
	if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
}
nape.phys.InertiaMode.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
		return $r;
	}(this))) return "DEFAULT"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
		return $r;
	}(this))) return "FIXED"; else return "";
}
nape.phys.InertiaMode.prototype.__class__ = nape.phys.InertiaMode;
nape.phys.BodyList = function(p) {
	if( p === $_ ) return;
	this.zpp_inner = new zpp_nape.util.ZPP_BodyList();
	this.zpp_inner.outer = this;
}
nape.phys.BodyList.__name__ = ["nape","phys","BodyList"];
nape.phys.BodyList.fromArray = function(array) {
	var ret = new nape.phys.BodyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.phys.BodyList.prototype.zpp_inner = null;
nape.phys.BodyList.prototype.length = null;
nape.phys.BodyList.prototype.flibget_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.length;
	}
	return this.zpp_inner.user_length;
}
nape.phys.BodyList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
}
nape.phys.BodyList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.flibget_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.flibget_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.outer;
}
nape.phys.BodyList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.phys.BodyList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.phys.BodyList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx = ret.outer;
	return retx;
}
nape.phys.BodyList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx = ret.outer;
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx = ret.outer;
	return retx;
}
nape.phys.BodyList.prototype.add = function(obj) {
	return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
}
nape.phys.BodyList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret = (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var x = cx_ite.elt;
				if(x == obj.zpp_inner) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
}
nape.phys.BodyList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
}
nape.phys.BodyList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
}
nape.phys.BodyList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.iterators == null) this.zpp_inner.iterators = new zpp_nape.util.ZNPList_BodyIterator();
	return nape.phys.BodyIterator.get(this);
}
nape.phys.BodyList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.phys.BodyList();
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_BodyIterator();
		$r = nape.phys.BodyIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Body" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
}
nape.phys.BodyList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var $it0 = (function($this) {
		var $r;
		xs.zpp_inner.valmod();
		if(xs.zpp_inner.iterators == null) xs.zpp_inner.iterators = new zpp_nape.util.ZNPList_BodyIterator();
		$r = nape.phys.BodyIterator.get(xs);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(!this.has(x)) if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
	}
}
nape.phys.BodyList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_BodyIterator();
		$r = nape.phys.BodyIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		if(!fst) ret += ",";
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
}
nape.phys.BodyList.prototype.__class__ = nape.phys.BodyList;
nape.phys.BodyIterator = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_BodyList.internal) throw "Error: Cannot instantiate " + "Body" + "Iterator derp!";
}
nape.phys.BodyIterator.__name__ = ["nape","phys","BodyIterator"];
nape.phys.BodyIterator.zpp_pool = null;
nape.phys.BodyIterator.get = function(list) {
	var ret = nape.phys.BodyIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_BodyList.internal = true;
		var ret = new nape.phys.BodyIterator();
		zpp_nape.util.ZPP_BodyList.internal = false;
		$r = ret;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.phys.BodyIterator.zpp_pool;
		nape.phys.BodyIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	list.zpp_inner.iterators.add(ret);
	return ret;
}
nape.phys.BodyIterator.prototype.zpp_inner = null;
nape.phys.BodyIterator.prototype.zpp_i = null;
nape.phys.BodyIterator.prototype.zpp_critical = null;
nape.phys.BodyIterator.prototype.zpp_next = null;
nape.phys.BodyIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.flibget_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.phys.BodyIterator.zpp_pool;
		nape.phys.BodyIterator.zpp_pool = this;
		this.zpp_inner.zpp_inner.iterators.remove(this);
		return false;
	}
}
nape.phys.BodyIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
}
nape.phys.BodyIterator.prototype.__class__ = nape.phys.BodyIterator;
nape.phys.Body = function(type,position) {
	if( type === $_ ) return;
	this.zpp_inner = new zpp_nape.phys.ZPP_Body();
	this.zpp_inner.outer = this;
	if(position != null) {
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.posx = (function($this) {
			var $r;
			if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			position.zpp_inner.validate();
			$r = position.zpp_inner.x;
			return $r;
		}(this));
		this.zpp_inner.posy = (function($this) {
			var $r;
			if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			position.zpp_inner.validate();
			$r = position.zpp_inner.y;
			return $r;
		}(this));
	} else {
		this.zpp_inner.posx = 0;
		this.zpp_inner.posy = 0;
	}
	this.flibset_type(type == null?(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)):type);
	if(position != null) {
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
	}
}
nape.phys.Body.__name__ = ["nape","phys","Body"];
nape.phys.Body.prototype.zpp_inner = null;
nape.phys.Body.prototype.id = null;
nape.phys.Body.prototype.flibget_id = function() {
	return this.zpp_inner.id;
}
nape.phys.Body.prototype.type = null;
nape.phys.Body.prototype.flibget_type = function() {
	return [null,(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
		return $r;
	}(this))][this.zpp_inner.type];
}
nape.phys.Body.prototype.flibset_type = function(type) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if([null,(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
		return $r;
	}(this))][this.zpp_inner.type] != type) {
		if(type == null) throw "Error: Cannot use null BodyType";
		var ntype = type == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
			return $r;
		}(this))?2:type == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
			return $r;
		}(this))?3:1;
		if(ntype == 1 && this.zpp_inner.space != null) {
			this.zpp_inner.velx = 0;
			this.zpp_inner.vely = 0;
			this.zpp_inner.angvel = 0;
		}
		this.zpp_inner.invalidate_type();
		if(this.zpp_inner.space != null) this.zpp_inner.space.transmitType(this.zpp_inner,ntype); else this.zpp_inner.type = ntype;
	}
	return [null,(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
		return $r;
	}(this))][this.zpp_inner.type];
}
nape.phys.Body.prototype.isStatic = function() {
	return this.zpp_inner.type == 1;
}
nape.phys.Body.prototype.isDynamic = function() {
	return this.zpp_inner.type == 2;
}
nape.phys.Body.prototype.isKinematic = function() {
	return this.zpp_inner.type == 3;
}
nape.phys.Body.prototype.userData = null;
nape.phys.Body.prototype.clear = function() {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	this.zpp_inner.clear();
	this.userData = null;
}
nape.phys.Body.prototype.shapes = null;
nape.phys.Body.prototype.flibget_shapes = function() {
	return this.zpp_inner.wrap_shapes;
}
nape.phys.Body.prototype.space = null;
nape.phys.Body.prototype.flibget_space = function() {
	return this.zpp_inner.space == null?null:this.zpp_inner.space.outer;
}
nape.phys.Body.prototype.flibset_space = function(space) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner.component.woken = false;
		if(this.zpp_inner.space != null) this.zpp_inner.space.removeBody(this.zpp_inner);
		if(space != null) space.zpp_inner.addBody(this.zpp_inner); else this.zpp_inner.space = null;
	}
	return this.zpp_inner.space == null?null:this.zpp_inner.space.outer;
}
nape.phys.Body.prototype.arbiters = null;
nape.phys.Body.prototype.flibget_arbiters = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this));
}
nape.phys.Body.prototype.isSleeping = null;
nape.phys.Body.prototype.flibget_isSleeping = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.space == null) throw "Error: isSleeping makes no sense if the object is not contained within a Space";
		$r = $this.zpp_inner.component.sleeping;
		return $r;
	}(this));
}
nape.phys.Body.prototype.constraints = null;
nape.phys.Body.prototype.flibget_constraints = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_constraints == null) $this.zpp_inner.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get($this.zpp_inner.constraints,true);
		$r = $this.zpp_inner.wrap_constraints;
		return $r;
	}(this));
}
nape.phys.Body.prototype.copy = function() {
	if(this.zpp_inner.world) throw "Error: Space::world cannot be copied";
	var ret = this.zpp_inner.copy();
	ret.userData = this.userData;
	return ret;
}
nape.phys.Body.prototype.position = null;
nape.phys.Body.prototype.flibget_position = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
		$r = $this.zpp_inner.wrap_pos;
		return $r;
	}(this));
}
nape.phys.Body.prototype.flibset_position = function(position) {
	if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(position == null) throw "Error: Body::" + "position" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
		$r = $this.zpp_inner.wrap_pos;
		return $r;
	}(this))).set(position);
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
		$r = $this.zpp_inner.wrap_pos;
		return $r;
	}(this));
}
nape.phys.Body.prototype.velocity = null;
nape.phys.Body.prototype.flibget_velocity = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
		$r = $this.zpp_inner.wrap_vel;
		return $r;
	}(this));
}
nape.phys.Body.prototype.flibset_velocity = function(velocity) {
	if(velocity != null && velocity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(velocity == null) throw "Error: Body::" + "velocity" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
		$r = $this.zpp_inner.wrap_vel;
		return $r;
	}(this))).set(velocity);
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
		$r = $this.zpp_inner.wrap_vel;
		return $r;
	}(this));
}
nape.phys.Body.prototype.kinematicVel = null;
nape.phys.Body.prototype.flibget_kinematicVel = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_kinvel == null) $this.zpp_inner.setupkinvel();
		$r = $this.zpp_inner.wrap_kinvel;
		return $r;
	}(this));
}
nape.phys.Body.prototype.flibset_kinematicVel = function(kinematicVel) {
	if(kinematicVel != null && kinematicVel.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(kinematicVel == null) throw "Error: Body::" + "kinematicVel" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_kinvel == null) $this.zpp_inner.setupkinvel();
		$r = $this.zpp_inner.wrap_kinvel;
		return $r;
	}(this))).set(kinematicVel);
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_kinvel == null) $this.zpp_inner.setupkinvel();
		$r = $this.zpp_inner.wrap_kinvel;
		return $r;
	}(this));
}
nape.phys.Body.prototype.surfaceVel = null;
nape.phys.Body.prototype.flibget_surfaceVel = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_svel == null) $this.zpp_inner.setupsvel();
		$r = $this.zpp_inner.wrap_svel;
		return $r;
	}(this));
}
nape.phys.Body.prototype.flibset_surfaceVel = function(surfaceVel) {
	if(surfaceVel != null && surfaceVel.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(surfaceVel == null) throw "Error: Body::" + "surfaceVel" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_svel == null) $this.zpp_inner.setupsvel();
		$r = $this.zpp_inner.wrap_svel;
		return $r;
	}(this))).set(surfaceVel);
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_svel == null) $this.zpp_inner.setupsvel();
		$r = $this.zpp_inner.wrap_svel;
		return $r;
	}(this));
}
nape.phys.Body.prototype.force = null;
nape.phys.Body.prototype.flibget_force = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_force == null) $this.zpp_inner.setupForce();
		$r = $this.zpp_inner.wrap_force;
		return $r;
	}(this));
}
nape.phys.Body.prototype.flibset_force = function(force) {
	if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(force == null) throw "Error: Body::" + "force" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_force == null) $this.zpp_inner.setupForce();
		$r = $this.zpp_inner.wrap_force;
		return $r;
	}(this))).set(force);
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_force == null) $this.zpp_inner.setupForce();
		$r = $this.zpp_inner.wrap_force;
		return $r;
	}(this));
}
nape.phys.Body.prototype.rotation = null;
nape.phys.Body.prototype.flibget_rotation = function() {
	return this.zpp_inner.rot;
}
nape.phys.Body.prototype.flibset_rotation = function(rotation) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(this.zpp_inner.type == 1 && this.zpp_inner.space != null) throw "Error: Static objects cannot be rotated once inside a Space";
	if(this.zpp_inner.rot != rotation) {
		if(rotation != rotation) throw "Error: Body::rotation cannot be NaN";
		this.zpp_inner.rot = rotation;
		this.zpp_inner.invalidate_rot();
		this.zpp_inner.wake();
	}
	return this.zpp_inner.rot;
}
nape.phys.Body.prototype.angularVel = null;
nape.phys.Body.prototype.flibget_angularVel = function() {
	return this.zpp_inner.angvel;
}
nape.phys.Body.prototype.flibset_angularVel = function(angularVel) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(this.zpp_inner.angvel != angularVel) {
		if(angularVel != angularVel) throw "Error: Body::angularVel cannot be NaN";
		if(this.zpp_inner.type == 1 && this.zpp_inner.space != null) throw "Error: A static object within a space cannot be given a velocity";
		this.zpp_inner.angvel = angularVel;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.angvel;
}
nape.phys.Body.prototype.kinAngVel = null;
nape.phys.Body.prototype.flibget_kinAngVel = function() {
	return this.zpp_inner.kinangvel;
}
nape.phys.Body.prototype.flibset_kinAngVel = function(kinAngVel) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(this.zpp_inner.kinangvel != kinAngVel) {
		if(kinAngVel != kinAngVel) throw "Error: Body::kinAngVel cannot be NaN";
		this.zpp_inner.kinangvel = kinAngVel;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.kinangvel;
}
nape.phys.Body.prototype.torque = null;
nape.phys.Body.prototype.flibget_torque = function() {
	return this.zpp_inner.torque;
}
nape.phys.Body.prototype.flibset_torque = function(torque) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(torque != torque) throw "Error: Body::torqur cannot be NaN";
	if(this.zpp_inner.torque != torque) {
		this.zpp_inner.torque = torque;
		this.zpp_inner.wake();
	}
	return this.zpp_inner.torque;
}
nape.phys.Body.prototype.bounds = null;
nape.phys.Body.prototype.flibget_bounds = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.world) throw "Error: Space::world has no bounds";
		if($this.zpp_inner.shapes.head == null) throw "Error: Body bounds only makes sense if it contains shapes";
		$r = $this.zpp_inner.aabb.wrapper();
		return $r;
	}(this));
}
nape.phys.Body.prototype.allowMovement = null;
nape.phys.Body.prototype.flibget_allowMovement = function() {
	return !this.zpp_inner.nomove;
}
nape.phys.Body.prototype.flibset_allowMovement = function(allowMovement) {
	if(!this.zpp_inner.nomove != allowMovement) {
		this.zpp_inner.nomove = !allowMovement;
		this.zpp_inner.invalidate_mass();
	}
	return !this.zpp_inner.nomove;
}
nape.phys.Body.prototype.allowRotation = null;
nape.phys.Body.prototype.flibget_allowRotation = function() {
	return !this.zpp_inner.norotate;
}
nape.phys.Body.prototype.flibset_allowRotation = function(allowRotation) {
	if(!this.zpp_inner.norotate != allowRotation) {
		this.zpp_inner.norotate = !allowRotation;
		this.zpp_inner.invalidate_inertia();
	}
	return !this.zpp_inner.norotate;
}
nape.phys.Body.prototype.massMode = null;
nape.phys.Body.prototype.flibget_massMode = function() {
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.MassMode_FIXED;
		return $r;
	}(this))][this.zpp_inner.massMode];
}
nape.phys.Body.prototype.flibset_massMode = function(massMode) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(massMode == null) throw "Error: cannot use null massMode";
	this.zpp_inner.massMode = massMode == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
		return $r;
	}(this))?0:1;
	this.zpp_inner.invalidate_mass();
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.MassMode_FIXED;
		return $r;
	}(this))][this.zpp_inner.massMode];
}
nape.phys.Body.prototype.mass = null;
nape.phys.Body.prototype.flibget_mass = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.world) throw "Error: Space::world has no mass";
		$this.zpp_inner.validate_mass();
		if($this.zpp_inner.massMode == 0 && $this.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
		$r = $this.zpp_inner.cmass;
		return $r;
	}(this));
}
nape.phys.Body.prototype.flibset_mass = function(mass) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(mass != mass) throw "Error: Mass cannot be NaN";
	if(mass <= 0) throw "Error: Mass must be strictly positive";
	if(mass == Math.POSITIVE_INFINITY) throw "Error: Mass cannot be infinite, use allowMovement = false instead";
	this.zpp_inner.massMode = 1;
	this.zpp_inner.cmass = mass;
	this.zpp_inner.invalidate_mass();
	return (function($this) {
		var $r;
		if($this.zpp_inner.world) throw "Error: Space::world has no mass";
		$this.zpp_inner.validate_mass();
		if($this.zpp_inner.massMode == 0 && $this.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
		$r = $this.zpp_inner.cmass;
		return $r;
	}(this));
}
nape.phys.Body.prototype.gravMassMode = null;
nape.phys.Body.prototype.flibget_gravMassMode = function() {
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
		return $r;
	}(this))][this.zpp_inner.massMode];
}
nape.phys.Body.prototype.flibset_gravMassMode = function(gravMassMode) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(gravMassMode == null) throw "Error: Cannot use null gravMassMode";
	this.zpp_inner.gravMassMode = gravMassMode == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
		return $r;
	}(this))?2:gravMassMode == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
		return $r;
	}(this))?0:1;
	this.zpp_inner.invalidate_gravMass();
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
		return $r;
	}(this))][this.zpp_inner.massMode];
}
nape.phys.Body.prototype.gravMass = null;
nape.phys.Body.prototype.flibget_gravMass = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.world) throw "Error: Space::world has no gravMass";
		$this.zpp_inner.validate_gravMass();
		if($this.zpp_inner.shapes.head == null) {
			if($this.zpp_inner.massMode == 0 && $this.zpp_inner.gravMassMode != 1) throw "Error: Given current mass/gravMass modes; Body::gravMass only makes sense if it contains Shapes";
		}
		$r = $this.zpp_inner.gravMass;
		return $r;
	}(this));
}
nape.phys.Body.prototype.flibset_gravMass = function(gravMass) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(gravMass != gravMass) throw "Error: gravMass cannot be NaN";
	this.zpp_inner.gravMassMode = 1;
	this.zpp_inner.gravMass = gravMass;
	this.zpp_inner.invalidate_gravMass();
	return (function($this) {
		var $r;
		if($this.zpp_inner.world) throw "Error: Space::world has no gravMass";
		$this.zpp_inner.validate_gravMass();
		if($this.zpp_inner.shapes.head == null) {
			if($this.zpp_inner.massMode == 0 && $this.zpp_inner.gravMassMode != 1) throw "Error: Given current mass/gravMass modes; Body::gravMass only makes sense if it contains Shapes";
		}
		$r = $this.zpp_inner.gravMass;
		return $r;
	}(this));
}
nape.phys.Body.prototype.gravMassScale = null;
nape.phys.Body.prototype.flibget_gravMassScale = function() {
	return (function($this) {
		var $r;
		$this.zpp_inner.validate_gravMassScale();
		if($this.zpp_inner.shapes.head == null) {
			if($this.zpp_inner.massMode == 0 && $this.zpp_inner.gravMassMode != 2) throw "Error: Given current mass/gravMass modes; Body::gravMassScale only makes sense if it contains Shapes";
		}
		$r = $this.zpp_inner.gravMassScale;
		return $r;
	}(this));
}
nape.phys.Body.prototype.flibset_gravMassScale = function(gravMassScale) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(gravMassScale != gravMassScale) throw "Error: gravMassScale cannot be NaN";
	this.zpp_inner.gravMassMode = 2;
	this.zpp_inner.gravMassScale = gravMassScale;
	this.zpp_inner.invalidate_gravMassScale();
	return (function($this) {
		var $r;
		$this.zpp_inner.validate_gravMassScale();
		if($this.zpp_inner.shapes.head == null) {
			if($this.zpp_inner.massMode == 0 && $this.zpp_inner.gravMassMode != 2) throw "Error: Given current mass/gravMass modes; Body::gravMassScale only makes sense if it contains Shapes";
		}
		$r = $this.zpp_inner.gravMassScale;
		return $r;
	}(this));
}
nape.phys.Body.prototype.inertiaMode = null;
nape.phys.Body.prototype.flibget_inertiaMode = function() {
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
		return $r;
	}(this))][this.zpp_inner.inertiaMode];
}
nape.phys.Body.prototype.flibset_inertiaMode = function(inertiaMode) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(inertiaMode == null) throw "Error: Cannot use null InertiaMode";
	this.zpp_inner.inertiaMode = inertiaMode == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
		return $r;
	}(this))?1:0;
	this.zpp_inner.invalidate_inertia();
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
		return $r;
	}(this))][this.zpp_inner.inertiaMode];
}
nape.phys.Body.prototype.inertia = null;
nape.phys.Body.prototype.flibget_inertia = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.world) throw "Error: Space::world has no inertia";
		$this.zpp_inner.validate_inertia();
		if($this.zpp_inner.inertiaMode == 0 && $this.zpp_inner.wrap_shapes.empty()) throw "Error: Given current inertia mode flag, Body::inertia only makes sense if Body contains Shapes";
		$r = $this.zpp_inner.cinertia;
		return $r;
	}(this));
}
nape.phys.Body.prototype.flibset_inertia = function(inertia) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(inertia != inertia) throw "Error: Inertia cannot be NaN";
	if(inertia <= 0) throw "Error: Inertia must be strictly positive";
	if(inertia == Math.POSITIVE_INFINITY) throw "Error: Inertia cannot be infinite, use allowRotation = false instead";
	this.zpp_inner.inertiaMode = 1;
	this.zpp_inner.cinertia = inertia;
	this.zpp_inner.invalidate_inertia();
	return (function($this) {
		var $r;
		if($this.zpp_inner.world) throw "Error: Space::world has no inertia";
		$this.zpp_inner.validate_inertia();
		if($this.zpp_inner.inertiaMode == 0 && $this.zpp_inner.wrap_shapes.empty()) throw "Error: Given current inertia mode flag, Body::inertia only makes sense if Body contains Shapes";
		$r = $this.zpp_inner.cinertia;
		return $r;
	}(this));
}
nape.phys.Body.prototype.graphic = null;
nape.phys.Body.prototype.flibget_graphic = function() {
	return this.zpp_inner.graphic;
}
nape.phys.Body.prototype.flibset_graphic = function(graphic) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(graphic != this.zpp_inner.graphic) {
		if(graphic == null) {
			this.zpp_inner.hasgraphic = false;
			this.zpp_inner.graphic = null;
		} else {
			this.zpp_inner.hasgraphic = true;
			this.zpp_inner.graphic = graphic;
			this.zpp_inner.validate_graphic();
		}
	}
	return this.zpp_inner.graphic;
}
nape.phys.Body.prototype.cbType = null;
nape.phys.Body.prototype.flibget_cbType = function() {
	return this.zpp_inner.cbType.wrapper();
}
nape.phys.Body.prototype.flibset_cbType = function(cbType) {
	if(cbType == null) throw "Error: Cannot assign null CbType to Body";
	this.zpp_inner.setCbType(cbType.zpp_inner);
	return this.zpp_inner.cbType.wrapper();
}
nape.phys.Body.prototype.localToWorld = function(v,weak) {
	if(weak == null) weak = false;
	return this.relativeToWorld(this.localToRelative(v,true),weak);
}
nape.phys.Body.prototype.worldToLocal = function(v,weak) {
	if(weak == null) weak = false;
	return this.relativeToLocal(this.worldToRelative(v,true),weak);
}
nape.phys.Body.prototype.relativeToWorld = function(v,weak) {
	if(weak == null) weak = false;
	if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(v == null) throw "Error: Cannot transform null Vec2";
	var ret = nape.geom.Vec2.get((function($this) {
		var $r;
		if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		v.zpp_inner.validate();
		$r = v.zpp_inner.x;
		return $r;
	}(this)) + this.zpp_inner.posx,(function($this) {
		var $r;
		if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		v.zpp_inner.validate();
		$r = v.zpp_inner.y;
		return $r;
	}(this)) + this.zpp_inner.posy,weak);
	if(v.zpp_inner.weak) {
		v.dispose();
		true;
	} else false;
	return ret;
}
nape.phys.Body.prototype.worldToRelative = function(v,weak) {
	if(weak == null) weak = false;
	if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(v == null) throw "Error: Cannot transform null Vec2";
	var ret = nape.geom.Vec2.get((function($this) {
		var $r;
		if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		v.zpp_inner.validate();
		$r = v.zpp_inner.x;
		return $r;
	}(this)) - this.zpp_inner.posx,(function($this) {
		var $r;
		if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		v.zpp_inner.validate();
		$r = v.zpp_inner.y;
		return $r;
	}(this)) - this.zpp_inner.posy,weak);
	if(v.zpp_inner.weak) {
		v.dispose();
		true;
	} else false;
	return ret;
}
nape.phys.Body.prototype.localToRelative = function(v,weak) {
	if(weak == null) weak = false;
	if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(v == null) throw "Error: Cannot transform null Vec2";
	this.zpp_inner.validate_axis();
	var tempx;
	var tempy;
	tempx = this.zpp_inner.axisy * (function($this) {
		var $r;
		if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		v.zpp_inner.validate();
		$r = v.zpp_inner.x;
		return $r;
	}(this)) - this.zpp_inner.axisx * (function($this) {
		var $r;
		if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		v.zpp_inner.validate();
		$r = v.zpp_inner.y;
		return $r;
	}(this));
	tempy = (function($this) {
		var $r;
		if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		v.zpp_inner.validate();
		$r = v.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.axisx + (function($this) {
		var $r;
		if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		v.zpp_inner.validate();
		$r = v.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.axisy;
	if(v.zpp_inner.weak) {
		v.dispose();
		true;
	} else false;
	return nape.geom.Vec2.get(tempx,tempy,weak);
}
nape.phys.Body.prototype.relativeToLocal = function(v,weak) {
	if(weak == null) weak = false;
	if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(v == null) throw "Error: Cannot transform null Vec2";
	this.zpp_inner.validate_axis();
	var tempx;
	var tempy;
	tempx = (function($this) {
		var $r;
		if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		v.zpp_inner.validate();
		$r = v.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.axisy + (function($this) {
		var $r;
		if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		v.zpp_inner.validate();
		$r = v.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.axisx;
	tempy = (function($this) {
		var $r;
		if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		v.zpp_inner.validate();
		$r = v.zpp_inner.y;
		return $r;
	}(this)) * this.zpp_inner.axisy - (function($this) {
		var $r;
		if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		v.zpp_inner.validate();
		$r = v.zpp_inner.x;
		return $r;
	}(this)) * this.zpp_inner.axisx;
	if(v.zpp_inner.weak) {
		v.dispose();
		true;
	} else false;
	return nape.geom.Vec2.get(tempx,tempy,weak);
}
nape.phys.Body.prototype.applyLocalForce = function(force,pos) {
	if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	var t = 1.0;
	this.zpp_inner.forcex += (function($this) {
		var $r;
		if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		force.zpp_inner.validate();
		$r = force.zpp_inner.x;
		return $r;
	}(this)) * t;
	this.zpp_inner.forcey += (function($this) {
		var $r;
		if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		force.zpp_inner.validate();
		$r = force.zpp_inner.y;
		return $r;
	}(this)) * t;
	if(pos != null) {
		this.zpp_inner.validate_axis();
		var rx;
		var ry;
		rx = this.zpp_inner.axisy * (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.axisx * (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this));
		ry = (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx + (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy;
		this.zpp_inner.torque += (function($this) {
			var $r;
			if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			force.zpp_inner.validate();
			$r = force.zpp_inner.y;
			return $r;
		}(this)) * rx - (function($this) {
			var $r;
			if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			force.zpp_inner.validate();
			$r = force.zpp_inner.x;
			return $r;
		}(this)) * ry;
		if(pos.zpp_inner.weak) {
			pos.dispose();
			true;
		} else false;
	}
	if(this.zpp_inner.type == 2) this.zpp_inner.wake();
	if(force.zpp_inner.weak) {
		force.dispose();
		true;
	} else false;
}
nape.phys.Body.prototype.applyRelativeForce = function(force,pos) {
	if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	var t = 1.0;
	this.zpp_inner.forcex += (function($this) {
		var $r;
		if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		force.zpp_inner.validate();
		$r = force.zpp_inner.x;
		return $r;
	}(this)) * t;
	this.zpp_inner.forcey += (function($this) {
		var $r;
		if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		force.zpp_inner.validate();
		$r = force.zpp_inner.y;
		return $r;
	}(this)) * t;
	if(pos != null) {
		this.zpp_inner.torque += (function($this) {
			var $r;
			if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			force.zpp_inner.validate();
			$r = force.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			force.zpp_inner.validate();
			$r = force.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this));
		if(pos.zpp_inner.weak) {
			pos.dispose();
			true;
		} else false;
	}
	if(this.zpp_inner.type == 2) this.zpp_inner.wake();
	if(force.zpp_inner.weak) {
		force.dispose();
		true;
	} else false;
}
nape.phys.Body.prototype.applyWorldForce = function(force,pos) {
	if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	var t = 1.0;
	this.zpp_inner.forcex += (function($this) {
		var $r;
		if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		force.zpp_inner.validate();
		$r = force.zpp_inner.x;
		return $r;
	}(this)) * t;
	this.zpp_inner.forcey += (function($this) {
		var $r;
		if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		force.zpp_inner.validate();
		$r = force.zpp_inner.y;
		return $r;
	}(this)) * t;
	if(pos != null) {
		var rx;
		var ry;
		rx = (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.posx;
		ry = (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this)) - this.zpp_inner.posy;
		this.zpp_inner.torque += (function($this) {
			var $r;
			if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			force.zpp_inner.validate();
			$r = force.zpp_inner.y;
			return $r;
		}(this)) * rx - (function($this) {
			var $r;
			if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			force.zpp_inner.validate();
			$r = force.zpp_inner.x;
			return $r;
		}(this)) * ry;
		if(pos.zpp_inner.weak) {
			pos.dispose();
			true;
		} else false;
	}
	if(this.zpp_inner.type == 2) this.zpp_inner.wake();
	if(force.zpp_inner.weak) {
		force.dispose();
		true;
	} else false;
}
nape.phys.Body.prototype.applyLocalImpulse = function(impulse,pos) {
	if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	this.zpp_inner.validate_mass();
	var t = this.zpp_inner.imass;
	this.zpp_inner.velx += (function($this) {
		var $r;
		if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		impulse.zpp_inner.validate();
		$r = impulse.zpp_inner.x;
		return $r;
	}(this)) * t;
	this.zpp_inner.vely += (function($this) {
		var $r;
		if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		impulse.zpp_inner.validate();
		$r = impulse.zpp_inner.y;
		return $r;
	}(this)) * t;
	if(pos != null) {
		this.zpp_inner.validate_axis();
		var rx;
		var ry;
		rx = this.zpp_inner.axisy * (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.axisx * (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this));
		ry = (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx + (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy;
		this.zpp_inner.validate_inertia();
		this.zpp_inner.angvel += ((function($this) {
			var $r;
			if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.y;
			return $r;
		}(this)) * rx - (function($this) {
			var $r;
			if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.x;
			return $r;
		}(this)) * ry) * this.zpp_inner.iinertia;
		if(pos.zpp_inner.weak) {
			pos.dispose();
			true;
		} else false;
	}
	if(this.zpp_inner.type == 2) this.zpp_inner.wake();
	if(impulse.zpp_inner.weak) {
		impulse.dispose();
		true;
	} else false;
}
nape.phys.Body.prototype.applyRelativeImpulse = function(impulse,pos) {
	if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	this.zpp_inner.validate_mass();
	var t = this.zpp_inner.imass;
	this.zpp_inner.velx += (function($this) {
		var $r;
		if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		impulse.zpp_inner.validate();
		$r = impulse.zpp_inner.x;
		return $r;
	}(this)) * t;
	this.zpp_inner.vely += (function($this) {
		var $r;
		if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		impulse.zpp_inner.validate();
		$r = impulse.zpp_inner.y;
		return $r;
	}(this)) * t;
	if(pos != null) {
		this.zpp_inner.validate_inertia();
		this.zpp_inner.angvel += ((function($this) {
			var $r;
			if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this))) * this.zpp_inner.iinertia;
		if(pos.zpp_inner.weak) {
			pos.dispose();
			true;
		} else false;
	}
	if(this.zpp_inner.type == 2) this.zpp_inner.wake();
	if(impulse.zpp_inner.weak) {
		impulse.dispose();
		true;
	} else false;
}
nape.phys.Body.prototype.applyWorldImpulse = function(impulse,pos) {
	if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	this.zpp_inner.validate_mass();
	var t = this.zpp_inner.imass;
	this.zpp_inner.velx += (function($this) {
		var $r;
		if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		impulse.zpp_inner.validate();
		$r = impulse.zpp_inner.x;
		return $r;
	}(this)) * t;
	this.zpp_inner.vely += (function($this) {
		var $r;
		if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		impulse.zpp_inner.validate();
		$r = impulse.zpp_inner.y;
		return $r;
	}(this)) * t;
	if(pos != null) {
		var rx;
		var ry;
		rx = (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.posx;
		ry = (function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this)) - this.zpp_inner.posy;
		this.zpp_inner.validate_inertia();
		this.zpp_inner.angvel += ((function($this) {
			var $r;
			if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.y;
			return $r;
		}(this)) * rx - (function($this) {
			var $r;
			if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.x;
			return $r;
		}(this)) * ry) * this.zpp_inner.iinertia;
		if(pos.zpp_inner.weak) {
			pos.dispose();
			true;
		} else false;
	}
	if(this.zpp_inner.type == 2) this.zpp_inner.wake();
	if(impulse.zpp_inner.weak) {
		impulse.dispose();
		true;
	} else false;
}
nape.phys.Body.prototype.translateShapes = function(displacement) {
	if(displacement != null && displacement.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(displacement == null) throw "Error: Cannot displace by null Vec2";
	var weak = displacement.zpp_inner.weak;
	displacement.zpp_inner.weak = false;
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.outer.translate(displacement);
		cx_ite = cx_ite.next;
	}
	displacement.zpp_inner.weak = weak;
	if(displacement.zpp_inner.weak) {
		displacement.dispose();
		true;
	} else false;
}
nape.phys.Body.prototype.rotateShapes = function(angle) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.outer.rotate(angle);
		cx_ite = cx_ite.next;
	}
}
nape.phys.Body.prototype.scaleShapes = function(scalex,scaley) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.outer.scale(scalex,scaley);
		cx_ite = cx_ite.next;
	}
}
nape.phys.Body.prototype.transformShapes = function(matrix) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.outer.transform(matrix);
		cx_ite = cx_ite.next;
	}
}
nape.phys.Body.prototype.align = function() {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	if(this.zpp_inner.shapes.head == null) throw "Error: Cannot align empty Body";
	this.zpp_inner.validate_localCOM();
	var dx = nape.geom.Vec2.get(-this.zpp_inner.localCOMx,-this.zpp_inner.localCOMy,null);
	this.translateShapes(dx);
	var dx2 = this.localToRelative(dx);
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
		$r = $this.zpp_inner.wrap_pos;
		return $r;
	}(this))).subeq(dx2);
	if(this.zpp_inner.pre_posx != Math.POSITIVE_INFINITY) {
		var t = 1.0;
		this.zpp_inner.pre_posx -= (function($this) {
			var $r;
			if(dx2 != null && dx2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			dx2.zpp_inner.validate();
			$r = dx2.zpp_inner.x;
			return $r;
		}(this)) * t;
		this.zpp_inner.pre_posy -= (function($this) {
			var $r;
			if(dx2 != null && dx2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			dx2.zpp_inner.validate();
			$r = dx2.zpp_inner.y;
			return $r;
		}(this)) * t;
	}
	dx.dispose();
	dx2.dispose();
}
nape.phys.Body.prototype.setShapeMaterials = function(material) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.outer.flibset_material(material);
		cx_ite = cx_ite.next;
	}
}
nape.phys.Body.prototype.setShapeFilters = function(filter) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.outer.flibset_filter(filter);
		cx_ite = cx_ite.next;
	}
}
nape.phys.Body.prototype.setShapeFluidProperties = function(fluidProperties) {
	if(this.zpp_inner.world) throw "Error: Space::world is immutable";
	var cx_ite = this.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.outer.flibset_fluidProperties(fluidProperties);
		cx_ite = cx_ite.next;
	}
}
nape.phys.Body.prototype.localCOM = null;
nape.phys.Body.prototype.flibget_localCOM = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.world) throw "Error: Space::world has no " + "localCOM";
		if($this.zpp_inner.wrap_localCOM == null) {
			$this.zpp_inner.wrap_localCOM = nape.geom.Vec2.get($this.zpp_inner.localCOMx,$this.zpp_inner.localCOMy,null);
			$this.zpp_inner.wrap_localCOM.zpp_inner.inuse = true;
			$this.zpp_inner.wrap_localCOM.zpp_inner.immutable = true;
			$this.zpp_inner.wrap_localCOM.zpp_inner._validate = $closure($this.zpp_inner,"getlocalCOM");
		}
		$r = $this.zpp_inner.wrap_localCOM;
		return $r;
	}(this));
}
nape.phys.Body.prototype.worldCOM = null;
nape.phys.Body.prototype.flibget_worldCOM = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.world) throw "Error: Space::world has no " + "worldCOM";
		if($this.zpp_inner.wrap_worldCOM == null) {
			$this.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get($this.zpp_inner.worldCOMx,$this.zpp_inner.worldCOMy,null);
			$this.zpp_inner.wrap_worldCOM.zpp_inner.inuse = true;
			$this.zpp_inner.wrap_worldCOM.zpp_inner.immutable = true;
			$this.zpp_inner.wrap_worldCOM.zpp_inner._validate = $closure($this.zpp_inner,"getworldCOM");
		}
		$r = $this.zpp_inner.wrap_worldCOM;
		return $r;
	}(this));
}
nape.phys.Body.prototype.normalImpulse = function(body,freshOnly,weak) {
	if(weak == null) weak = false;
	if(freshOnly == null) freshOnly = false;
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var arbs = this.zpp_inner.arbiters;
	var $it0 = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while( $it0.hasNext() ) {
		var oarb = $it0.next();
		var arb = oarb.zpp_inner;
		if(arb.type != 0) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		var imp = arb.wrapper().flibget_collisionArbiter().normalImpulse(this,freshOnly);
		var t = 1;
		var t1 = t;
		retx += imp.x * t1;
		rety += imp.y * t1;
		retz += imp.z * t;
	}
	return nape.geom.Vec2.get(retx,rety,false);
}
nape.phys.Body.prototype.tangentImpulse = function(body,freshOnly,weak) {
	if(weak == null) weak = false;
	if(freshOnly == null) freshOnly = false;
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var arbs = this.zpp_inner.arbiters;
	var $it0 = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while( $it0.hasNext() ) {
		var oarb = $it0.next();
		var arb = oarb.zpp_inner;
		if(arb.type != 0) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		var imp = arb.wrapper().flibget_collisionArbiter().tangentImpulse(this,freshOnly);
		var t = 1;
		var t1 = t;
		retx += imp.x * t1;
		rety += imp.y * t1;
		retz += imp.z * t;
	}
	return nape.geom.Vec2.get(retx,rety,weak);
}
nape.phys.Body.prototype.totalContactsImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var arbs = this.zpp_inner.arbiters;
	var $it0 = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while( $it0.hasNext() ) {
		var oarb = $it0.next();
		var arb = oarb.zpp_inner;
		if(arb.type != 0) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		var imp = arb.wrapper().flibget_collisionArbiter().totalImpulse(this,freshOnly);
		var t = 1;
		var t1 = t;
		retx += imp.x * t1;
		rety += imp.y * t1;
		retz += imp.z * t;
	}
	return new nape.geom.Vec3(retx,rety,retz);
}
nape.phys.Body.prototype.rollingImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	var ret = 0.0;
	var arbs = this.zpp_inner.arbiters;
	var $it0 = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while( $it0.hasNext() ) {
		var oarb = $it0.next();
		var arb = oarb.zpp_inner;
		if(arb.type != 0) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		ret += arb.wrapper().flibget_collisionArbiter().rollingImpulse(this,freshOnly);
	}
	return ret;
}
nape.phys.Body.prototype.buoyancyImpulse = function(body) {
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var arbs = this.zpp_inner.arbiters;
	var $it0 = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while( $it0.hasNext() ) {
		var oarb = $it0.next();
		var arb = oarb.zpp_inner;
		if(arb.type != 1) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		var imp = arb.wrapper().flibget_fluidArbiter().buoyancyImpulse(this);
		var t = 1;
		var t1 = t;
		retx += imp.x * t1;
		rety += imp.y * t1;
		retz += imp.z * t;
	}
	return new nape.geom.Vec3(retx,rety,retz);
}
nape.phys.Body.prototype.dragImpulse = function(body) {
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var arbs = this.zpp_inner.arbiters;
	var $it0 = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while( $it0.hasNext() ) {
		var oarb = $it0.next();
		var arb = oarb.zpp_inner;
		if(arb.type != 1) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		var imp = arb.wrapper().flibget_fluidArbiter().dragImpulse(this);
		var t = 1;
		var t1 = t;
		retx += imp.x * t1;
		rety += imp.y * t1;
		retz += imp.z * t;
	}
	return new nape.geom.Vec3(retx,rety,retz);
}
nape.phys.Body.prototype.totalFluidImpulse = function(body) {
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var arbs = this.zpp_inner.arbiters;
	var $it0 = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while( $it0.hasNext() ) {
		var oarb = $it0.next();
		var arb = oarb.zpp_inner;
		if(arb.type != 1) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		var imp = arb.wrapper().flibget_fluidArbiter().totalImpulse(this);
		var t = 1;
		var t1 = t;
		retx += imp.x * t1;
		rety += imp.y * t1;
		retz += imp.z * t;
	}
	return new nape.geom.Vec3(retx,rety,retz);
}
nape.phys.Body.prototype.constraintsImpulse = function() {
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var cx_ite = this.zpp_inner.constraints.head;
	while(cx_ite != null) {
		var con = cx_ite.elt;
		var imp = con.outer.bodyImpulse(this);
		var t = 1;
		var t1 = t;
		retx += imp.x * t1;
		rety += imp.y * t1;
		retz += imp.z * t;
		cx_ite = cx_ite.next;
	}
	return new nape.geom.Vec3(retx,rety,retz);
}
nape.phys.Body.prototype.totalImpulse = function(body,freshOnly) {
	if(freshOnly == null) freshOnly = false;
	var retx = 0;
	var rety = 0;
	var retz = 0;
	var arbs = this.zpp_inner.arbiters;
	var $it0 = ((function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this))).iterator();
	while( $it0.hasNext() ) {
		var oarb = $it0.next();
		var arb = oarb.zpp_inner;
		if(arb.type == 2) continue;
		if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
		var imp = arb.wrapper().totalImpulse(this,freshOnly);
		var t = 1;
		var t1 = t;
		retx += imp.x * t1;
		rety += imp.y * t1;
		retz += imp.z * t;
	}
	var cx_ite = this.zpp_inner.constraints.head;
	while(cx_ite != null) {
		var con = cx_ite.elt;
		if(con.active) {
			var imp = con.outer.bodyImpulse(this);
			var t = 1;
			var t1 = t;
			retx += imp.x * t1;
			rety += imp.y * t1;
			retz += imp.z * t;
		}
		cx_ite = cx_ite.next;
	}
	return new nape.geom.Vec3(retx,rety,retz);
}
nape.phys.Body.prototype.contains = function(point) {
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(point == null) throw "Error: Cannot check containment of null point";
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.zpp_inner.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.outer.contains(point)) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
nape.phys.Body.prototype.toString = function() {
	return (this.zpp_inner.world?"(space::world":"(" + (this.zpp_inner.type == 2?"dynamic":this.zpp_inner.type == 1?"static":"kinematic")) + ")#" + this.zpp_inner.id;
}
nape.phys.Body.prototype.__class__ = nape.phys.Body;
jeash.net.URLLoader = function(request) {
	if( request === $_ ) return;
	jeash.events.EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = jeash.net.URLLoaderDataFormat.TEXT;
	if(request != null) this.load(request);
}
jeash.net.URLLoader.__name__ = ["jeash","net","URLLoader"];
jeash.net.URLLoader.__super__ = jeash.events.EventDispatcher;
for(var k in jeash.events.EventDispatcher.prototype ) jeash.net.URLLoader.prototype[k] = jeash.events.EventDispatcher.prototype[k];
jeash.net.URLLoader.prototype.http = null;
jeash.net.URLLoader.prototype.bytesLoaded = null;
jeash.net.URLLoader.prototype.bytesTotal = null;
jeash.net.URLLoader.prototype.data = null;
jeash.net.URLLoader.prototype.dataFormat = null;
jeash.net.URLLoader.prototype.close = function() {
}
jeash.net.URLLoader.prototype.load = function(request) {
	this.http = new jeash.net._URLLoader.Http(request.url);
	this.http.onData = $closure(this,"onData");
	this.http.onError = $closure(this,"onError");
	this.http.requestUrl(jeash.net._URLLoader.HttpType.STREAM(this.dataFormat == jeash.net.URLLoaderDataFormat.TEXT?jeash.net._URLLoader.DataFormat.TEXT:jeash.net._URLLoader.DataFormat.BINARY));
}
jeash.net.URLLoader.prototype.onData = function(_) {
	var content = this.http.getData();
	switch( (this.dataFormat)[1] ) {
	case 0:
		this.data = new jeash.utils.ByteArray();
		var _g1 = 0, _g = content.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = content["cca"](i) & 255;
			this.data.writeByte(c);
		}
		this.data.position = 0;
		break;
	case 1:
		this.data = content;
		break;
	case 2:
		throw "Not complete";
		break;
	}
	var evt = new jeash.events.Event(jeash.events.Event.COMPLETE);
	this.dispatchEvent(evt);
}
jeash.net.URLLoader.prototype.onError = function(msg) {
	jeash.Lib.trace(msg);
	var evt = new jeash.events.IOErrorEvent(jeash.events.IOErrorEvent.IO_ERROR);
	this.dispatchEvent(evt);
}
jeash.net.URLLoader.prototype.__class__ = jeash.net.URLLoader;
if(!jeash.net._URLLoader) jeash.net._URLLoader = {}
jeash.net._URLLoader.HttpType = { __ename__ : ["jeash","net","_URLLoader","HttpType"], __constructs__ : ["IMAGE","VIDEO","AUDIO","STREAM"] }
jeash.net._URLLoader.HttpType.IMAGE = ["IMAGE",0];
jeash.net._URLLoader.HttpType.IMAGE.toString = $estr;
jeash.net._URLLoader.HttpType.IMAGE.__enum__ = jeash.net._URLLoader.HttpType;
jeash.net._URLLoader.HttpType.VIDEO = ["VIDEO",1];
jeash.net._URLLoader.HttpType.VIDEO.toString = $estr;
jeash.net._URLLoader.HttpType.VIDEO.__enum__ = jeash.net._URLLoader.HttpType;
jeash.net._URLLoader.HttpType.AUDIO = ["AUDIO",2];
jeash.net._URLLoader.HttpType.AUDIO.toString = $estr;
jeash.net._URLLoader.HttpType.AUDIO.__enum__ = jeash.net._URLLoader.HttpType;
jeash.net._URLLoader.HttpType.STREAM = function(format) { var $x = ["STREAM",3,format]; $x.__enum__ = jeash.net._URLLoader.HttpType; $x.toString = $estr; return $x; }
jeash.net._URLLoader.DataFormat = { __ename__ : ["jeash","net","_URLLoader","DataFormat"], __constructs__ : ["BINARY","TEXT"] }
jeash.net._URLLoader.DataFormat.BINARY = ["BINARY",0];
jeash.net._URLLoader.DataFormat.BINARY.toString = $estr;
jeash.net._URLLoader.DataFormat.BINARY.__enum__ = jeash.net._URLLoader.DataFormat;
jeash.net._URLLoader.DataFormat.TEXT = ["TEXT",1];
jeash.net._URLLoader.DataFormat.TEXT.toString = $estr;
jeash.net._URLLoader.DataFormat.TEXT.__enum__ = jeash.net._URLLoader.DataFormat;
haxe.Http = function(url) {
	if( url === $_ ) return;
	this.url = url;
	this.headers = new Hash();
	this.params = new Hash();
	this.async = true;
}
haxe.Http.__name__ = ["haxe","Http"];
haxe.Http.requestUrl = function(url) {
	var h = new haxe.Http(url);
	h.async = false;
	var r = null;
	h.onData = function(d) {
		r = d;
	};
	h.onError = function(e) {
		throw e;
	};
	h.request(false);
	return r;
}
haxe.Http.prototype.url = null;
haxe.Http.prototype.async = null;
haxe.Http.prototype.postData = null;
haxe.Http.prototype.headers = null;
haxe.Http.prototype.params = null;
haxe.Http.prototype.setHeader = function(header,value) {
	this.headers.set(header,value);
}
haxe.Http.prototype.setParameter = function(param,value) {
	this.params.set(param,value);
}
haxe.Http.prototype.setPostData = function(data) {
	this.postData = data;
}
haxe.Http.prototype.request = function(post) {
	var me = this;
	var r = new js.XMLHttpRequest();
	var onreadystatechange = function() {
		if(r.readyState != 4) return;
		var s = (function($this) {
			var $r;
			try {
				$r = r.status;
			} catch( e ) {
				$r = null;
			}
			return $r;
		}(this));
		if(s == undefined) s = null;
		if(s != null) me.onStatus(s);
		if(s != null && s >= 200 && s < 400) me.onData(r.responseText); else switch(s) {
		case null: case undefined:
			me.onError("Failed to connect or resolve host");
			break;
		case 12029:
			me.onError("Failed to connect to host");
			break;
		case 12007:
			me.onError("Unknown host");
			break;
		default:
			me.onError("Http Error #" + r.status);
		}
	};
	if(this.async) r.onreadystatechange = onreadystatechange;
	var uri = this.postData;
	if(uri != null) post = true; else {
		var $it0 = this.params.keys();
		while( $it0.hasNext() ) {
			var p = $it0.next();
			if(uri == null) uri = ""; else uri += "&";
			uri += StringTools.urlDecode(p) + "=" + StringTools.urlEncode(this.params.get(p));
		}
	}
	try {
		if(post) r.open("POST",this.url,this.async); else if(uri != null) {
			var question = this.url.split("?").length <= 1;
			r.open("GET",this.url + (question?"?":"&") + uri,this.async);
			uri = null;
		} else r.open("GET",this.url,this.async);
	} catch( e ) {
		this.onError(e.toString());
		return;
	}
	if(this.headers.get("Content-Type") == null && post && this.postData == null) r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
	var $it1 = this.headers.keys();
	while( $it1.hasNext() ) {
		var h = $it1.next();
		r.setRequestHeader(h,this.headers.get(h));
	}
	r.send(uri);
	if(!this.async) onreadystatechange();
}
haxe.Http.prototype.onData = function(data) {
}
haxe.Http.prototype.onError = function(msg) {
}
haxe.Http.prototype.onStatus = function(status) {
}
haxe.Http.prototype.__class__ = haxe.Http;
jeash.net._URLLoader.Http = function(url) {
	if( url === $_ ) return;
	haxe.Http.call(this,url);
}
jeash.net._URLLoader.Http.__name__ = ["jeash","net","_URLLoader","Http"];
jeash.net._URLLoader.Http.__super__ = haxe.Http;
for(var k in haxe.Http.prototype ) jeash.net._URLLoader.Http.prototype[k] = haxe.Http.prototype[k];
jeash.net._URLLoader.Http.prototype.registerEvents = function(subject) {
	subject.onload = $closure(this,"onData");
	subject.onerror = $closure(this,"onError");
}
jeash.net._URLLoader.Http.prototype.requestUrl = function(type) {
	var self = this;
	var $e = (type);
	switch( $e[1] ) {
	case 3:
		var dataFormat = $e[2];
		var xmlHttpRequest = new XMLHttpRequest();
		switch( (dataFormat)[1] ) {
		case 0:
			xmlHttpRequest.overrideMimeType("text/plain; charset=x-user-defined");
			break;
		default:
		}
		this.registerEvents(xmlHttpRequest);
		var uri = null;
		var $it0 = this.params.keys();
		while( $it0.hasNext() ) {
			var p = $it0.next();
			uri = StringTools.urlDecode(p) + "=" + StringTools.urlEncode(this.params.get(p));
		}
		try {
			if(uri != null) {
				var question = this.url.split("?").length <= 1;
				xmlHttpRequest.open("GET",this.url + (question?"?":"&") + uri,true);
				uri = null;
			} else xmlHttpRequest.open("GET",this.url,true);
		} catch( e ) {
			throw e.toString();
		}
		xmlHttpRequest.send(uri);
		this.getData = function() {
			return xmlHttpRequest.responseText;
		};
		break;
	case 0:
		var image = js.Lib.document.createElement("img");
		this.registerEvents(image);
		image.src = this.url;
		this.getData = function() {
			return image;
		};
		break;
	case 2:
		var audio = js.Lib.document.createElement("audio");
		this.registerEvents(audio);
		audio.src = this.url;
		this.getData = function() {
			return audio;
		};
		break;
	case 1:
		var video = js.Lib.document.createElement("video");
		this.registerEvents(video);
		video.src = this.url;
		this.getData = function() {
			return video;
		};
		break;
	}
}
jeash.net._URLLoader.Http.prototype.getData = function() {
}
jeash.net._URLLoader.Http.prototype.__class__ = jeash.net._URLLoader.Http;
Xml = function(p) {
}
Xml.__name__ = ["Xml"];
Xml.Element = null;
Xml.PCData = null;
Xml.CData = null;
Xml.Comment = null;
Xml.DocType = null;
Xml.Prolog = null;
Xml.Document = null;
Xml.parse = function(str) {
	var rules = [Xml.enode,Xml.epcdata,Xml.eend,Xml.ecdata,Xml.edoctype,Xml.ecomment,Xml.eprolog];
	var nrules = rules.length;
	var current = Xml.createDocument();
	var stack = new List();
	while(str.length > 0) {
		var i = 0;
		try {
			while(i < nrules) {
				var r = rules[i];
				if(r.match(str)) {
					switch(i) {
					case 0:
						var x = Xml.createElement(r.matched(1));
						current.addChild(x);
						str = r.matchedRight();
						while(Xml.eattribute.match(str)) {
							x.set(Xml.eattribute.matched(1),Xml.eattribute.matched(3));
							str = Xml.eattribute.matchedRight();
						}
						if(!Xml.eclose.match(str)) {
							i = nrules;
							throw "__break__";
						}
						if(Xml.eclose.matched(1) == ">") {
							stack.push(current);
							current = x;
						}
						str = Xml.eclose.matchedRight();
						break;
					case 1:
						var x = Xml.createPCData(r.matched(0));
						current.addChild(x);
						str = r.matchedRight();
						break;
					case 2:
						if(current._children != null && current._children.length == 0) {
							var e = Xml.createPCData("");
							current.addChild(e);
						}
						if(r.matched(1) != current._nodeName || stack.isEmpty()) {
							i = nrules;
							throw "__break__";
						}
						current = stack.pop();
						str = r.matchedRight();
						break;
					case 3:
						str = r.matchedRight();
						if(!Xml.ecdata_end.match(str)) throw "End of CDATA section not found";
						var x = Xml.createCData(Xml.ecdata_end.matchedLeft());
						current.addChild(x);
						str = Xml.ecdata_end.matchedRight();
						break;
					case 4:
						var pos = 0;
						var count = 0;
						var old = str;
						try {
							while(true) {
								if(!Xml.edoctype_elt.match(str)) throw "End of DOCTYPE section not found";
								var p = Xml.edoctype_elt.matchedPos();
								pos += p.pos + p.len;
								str = Xml.edoctype_elt.matchedRight();
								switch(Xml.edoctype_elt.matched(0)) {
								case "[":
									count++;
									break;
								case "]":
									count--;
									if(count < 0) throw "Invalid ] found in DOCTYPE declaration";
									break;
								default:
									if(count == 0) throw "__break__";
								}
							}
						} catch( e ) { if( e != "__break__" ) throw e; }
						var x = Xml.createDocType(old.substr(10,pos - 11));
						current.addChild(x);
						break;
					case 5:
						if(!Xml.ecomment_end.match(str)) throw "Unclosed Comment";
						var p = Xml.ecomment_end.matchedPos();
						var x = Xml.createComment(str.substr(4,p.pos + p.len - 7));
						current.addChild(x);
						str = Xml.ecomment_end.matchedRight();
						break;
					case 6:
						var prolog = r.matched(0);
						var x = Xml.createProlog(prolog.substr(2,prolog.length - 4));
						current.addChild(x);
						str = r.matchedRight();
						break;
					}
					throw "__break__";
				}
				i += 1;
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		if(i == nrules) {
			if(str.length > 10) throw "Xml parse error : Unexpected " + str.substr(0,10) + "..."; else throw "Xml parse error : Unexpected " + str;
		}
	}
	if(!stack.isEmpty()) throw "Xml parse error : Unclosed " + stack.last().getNodeName();
	return current;
}
Xml.createElement = function(name) {
	var r = new Xml();
	r.nodeType = Xml.Element;
	r._children = new Array();
	r._attributes = new Hash();
	r.setNodeName(name);
	return r;
}
Xml.createPCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.PCData;
	r.setNodeValue(data);
	return r;
}
Xml.createCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.CData;
	r.setNodeValue(data);
	return r;
}
Xml.createComment = function(data) {
	var r = new Xml();
	r.nodeType = Xml.Comment;
	r.setNodeValue(data);
	return r;
}
Xml.createDocType = function(data) {
	var r = new Xml();
	r.nodeType = Xml.DocType;
	r.setNodeValue(data);
	return r;
}
Xml.createProlog = function(data) {
	var r = new Xml();
	r.nodeType = Xml.Prolog;
	r.setNodeValue(data);
	return r;
}
Xml.createDocument = function() {
	var r = new Xml();
	r.nodeType = Xml.Document;
	r._children = new Array();
	return r;
}
Xml.prototype.nodeType = null;
Xml.prototype.nodeName = null;
Xml.prototype.nodeValue = null;
Xml.prototype.parent = null;
Xml.prototype._nodeName = null;
Xml.prototype._nodeValue = null;
Xml.prototype._attributes = null;
Xml.prototype._children = null;
Xml.prototype._parent = null;
Xml.prototype.getNodeName = function() {
	if(this.nodeType != Xml.Element) throw "bad nodeType";
	return this._nodeName;
}
Xml.prototype.setNodeName = function(n) {
	if(this.nodeType != Xml.Element) throw "bad nodeType";
	return this._nodeName = n;
}
Xml.prototype.getNodeValue = function() {
	if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
	return this._nodeValue;
}
Xml.prototype.setNodeValue = function(v) {
	if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
	return this._nodeValue = v;
}
Xml.prototype.getParent = function() {
	return this._parent;
}
Xml.prototype.get = function(att) {
	if(this.nodeType != Xml.Element) throw "bad nodeType";
	return this._attributes.get(att);
}
Xml.prototype.set = function(att,value) {
	if(this.nodeType != Xml.Element) throw "bad nodeType";
	this._attributes.set(att,value);
}
Xml.prototype.remove = function(att) {
	if(this.nodeType != Xml.Element) throw "bad nodeType";
	this._attributes.remove(att);
}
Xml.prototype.exists = function(att) {
	if(this.nodeType != Xml.Element) throw "bad nodeType";
	return this._attributes.exists(att);
}
Xml.prototype.attributes = function() {
	if(this.nodeType != Xml.Element) throw "bad nodeType";
	return this._attributes.keys();
}
Xml.prototype.iterator = function() {
	if(this._children == null) throw "bad nodetype";
	return { cur : 0, x : this._children, hasNext : function() {
		return this.cur < this.x.length;
	}, next : function() {
		return this.x[this.cur++];
	}};
}
Xml.prototype.elements = function() {
	if(this._children == null) throw "bad nodetype";
	return { cur : 0, x : this._children, hasNext : function() {
		var k = this.cur;
		var l = this.x.length;
		while(k < l) {
			if(this.x[k].nodeType == Xml.Element) break;
			k += 1;
		}
		this.cur = k;
		return k < l;
	}, next : function() {
		var k = this.cur;
		var l = this.x.length;
		while(k < l) {
			var n = this.x[k];
			k += 1;
			if(n.nodeType == Xml.Element) {
				this.cur = k;
				return n;
			}
		}
		return null;
	}};
}
Xml.prototype.elementsNamed = function(name) {
	if(this._children == null) throw "bad nodetype";
	return { cur : 0, x : this._children, hasNext : function() {
		var k = this.cur;
		var l = this.x.length;
		while(k < l) {
			var n = this.x[k];
			if(n.nodeType == Xml.Element && n._nodeName == name) break;
			k++;
		}
		this.cur = k;
		return k < l;
	}, next : function() {
		var k = this.cur;
		var l = this.x.length;
		while(k < l) {
			var n = this.x[k];
			k++;
			if(n.nodeType == Xml.Element && n._nodeName == name) {
				this.cur = k;
				return n;
			}
		}
		return null;
	}};
}
Xml.prototype.firstChild = function() {
	if(this._children == null) throw "bad nodetype";
	return this._children[0];
}
Xml.prototype.firstElement = function() {
	if(this._children == null) throw "bad nodetype";
	var cur = 0;
	var l = this._children.length;
	while(cur < l) {
		var n = this._children[cur];
		if(n.nodeType == Xml.Element) return n;
		cur++;
	}
	return null;
}
Xml.prototype.addChild = function(x) {
	if(this._children == null) throw "bad nodetype";
	if(x._parent != null) x._parent._children.remove(x);
	x._parent = this;
	this._children.push(x);
}
Xml.prototype.removeChild = function(x) {
	if(this._children == null) throw "bad nodetype";
	var b = this._children.remove(x);
	if(b) x._parent = null;
	return b;
}
Xml.prototype.insertChild = function(x,pos) {
	if(this._children == null) throw "bad nodetype";
	if(x._parent != null) x._parent._children.remove(x);
	x._parent = this;
	this._children.insert(pos,x);
}
Xml.prototype.toString = function() {
	if(this.nodeType == Xml.PCData) return this._nodeValue;
	if(this.nodeType == Xml.CData) return "<![CDATA[" + this._nodeValue + "]]>";
	if(this.nodeType == Xml.Comment) return "<!--" + this._nodeValue + "-->";
	if(this.nodeType == Xml.DocType) return "<!DOCTYPE " + this._nodeValue + ">";
	if(this.nodeType == Xml.Prolog) return "<?" + this._nodeValue + "?>";
	var s = new StringBuf();
	if(this.nodeType == Xml.Element) {
		s.b[s.b.length] = "<" == null?"null":"<";
		s.add(this._nodeName);
		var $it0 = this._attributes.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			s.b[s.b.length] = " " == null?"null":" ";
			s.b[s.b.length] = k == null?"null":k;
			s.b[s.b.length] = "=\"" == null?"null":"=\"";
			s.add(this._attributes.get(k));
			s.b[s.b.length] = "\"" == null?"null":"\"";
		}
		if(this._children.length == 0) {
			s.b[s.b.length] = "/>" == null?"null":"/>";
			return s.b.join("");
		}
		s.b[s.b.length] = ">" == null?"null":">";
	}
	var $it1 = this.iterator();
	while( $it1.hasNext() ) {
		var x = $it1.next();
		s.add(x.toString());
	}
	if(this.nodeType == Xml.Element) {
		s.b[s.b.length] = "</" == null?"null":"</";
		s.add(this._nodeName);
		s.b[s.b.length] = ">" == null?"null":">";
	}
	return s.b.join("");
}
Xml.prototype.__class__ = Xml;
jeash.display.Bitmap = function(inBitmapData,inPixelSnapping,inSmoothing) {
	if( inBitmapData === $_ ) return;
	jeash.display.DisplayObject.call(this);
	this.pixelSnapping = inPixelSnapping;
	this.smoothing = inSmoothing;
	this.name = "Bitmap " + jeash.display.DisplayObject.mNameID++;
	this.jeashGraphics = new jeash.display.Graphics();
	if(inBitmapData != null) this.jeashSetBitmapData(inBitmapData);
	this.jeashGraphics.jeashSurface.id = this.name;
}
jeash.display.Bitmap.__name__ = ["jeash","display","Bitmap"];
jeash.display.Bitmap.__super__ = jeash.display.DisplayObject;
for(var k in jeash.display.DisplayObject.prototype ) jeash.display.Bitmap.prototype[k] = jeash.display.DisplayObject.prototype[k];
jeash.display.Bitmap.prototype.bitmapData = null;
jeash.display.Bitmap.prototype.pixelSnapping = null;
jeash.display.Bitmap.prototype.smoothing = null;
jeash.display.Bitmap.prototype.jeashGraphics = null;
jeash.display.Bitmap.prototype.jeashCurrentLease = null;
jeash.display.Bitmap.prototype.jeashSetBitmapData = function(inBitmapData) {
	this.jeashInvalidateBounds();
	this.bitmapData = inBitmapData;
	return inBitmapData;
}
jeash.display.Bitmap.prototype.jeashGetGraphics = function() {
	return this.jeashGraphics;
}
jeash.display.Bitmap.prototype.BuildBounds = function() {
	jeash.display.DisplayObject.prototype.BuildBounds.call(this);
	if(this.bitmapData != null) {
		var r = new jeash.geom.Rectangle(0,0,this.bitmapData.getWidth(),this.bitmapData.getHeight());
		if(r.width != 0 || r.height != 0) {
			if(this.mBoundsRect.width == 0 && this.mBoundsRect.height == 0) this.mBoundsRect = r.clone(); else this.mBoundsRect.extendBounds(r);
		}
	}
}
jeash.display.Bitmap.prototype.jeashApplyFilters = function(surface) {
	if(this.jeashFilters != null) {
		var _g = 0, _g1 = this.jeashFilters;
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			filter.jeashApplyFilter(this.jeashGraphics.jeashSurface);
		}
	}
}
jeash.display.Bitmap.prototype.jeashRender = function(parentMatrix,inMask) {
	if(this.bitmapData == null) return;
	if(this.mMtxDirty || this.mMtxChainDirty) this.jeashValidateMatrix();
	var m = this.mFullMatrix.clone();
	var imageDataLease = this.bitmapData.jeashLease;
	if(imageDataLease != null && (this.jeashCurrentLease == null || imageDataLease.seed != this.jeashCurrentLease.seed || imageDataLease.time != this.jeashCurrentLease.time)) {
		var srcCanvas = this.bitmapData.mTextureBuffer;
		this.jeashGraphics.jeashSurface.width = srcCanvas.width;
		this.jeashGraphics.jeashSurface.height = srcCanvas.height;
		this.jeashGraphics.clear();
		jeash.Lib.jeashDrawToSurface(srcCanvas,this.jeashGraphics.jeashSurface);
		this.jeashCurrentLease = imageDataLease.clone();
		this.jeashApplyFilters(this.jeashGraphics.jeashSurface);
	} else if(inMask != null) this.jeashApplyFilters(this.jeashGraphics.jeashSurface);
	if(inMask != null) jeash.Lib.jeashDrawToSurface(this.jeashGraphics.jeashSurface,inMask,m,(this.parent != null?this.parent.alpha:1) * this.alpha); else {
		jeash.Lib.jeashSetSurfaceTransform(this.jeashGraphics.jeashSurface,m);
		jeash.Lib.jeashSetSurfaceOpacity(this.jeashGraphics.jeashSurface,(this.parent != null?this.parent.alpha:1) * this.alpha);
	}
}
jeash.display.Bitmap.prototype.jeashGetObjectUnderPoint = function(point) {
	if(!this.jeashGetVisible()) return null; else if(this.bitmapData != null) {
		var local = this.globalToLocal(point);
		if(local.x < 0 || local.y < 0 || local.x > this.jeashGetWidth() || local.y > this.jeashGetHeight()) return null; else return this;
	} else return jeash.display.DisplayObject.prototype.jeashGetObjectUnderPoint.call(this,point);
}
jeash.display.Bitmap.prototype.__class__ = jeash.display.Bitmap;
zpp_nape.geom.ZPP_Collide = function() { }
zpp_nape.geom.ZPP_Collide.__name__ = ["zpp_nape","geom","ZPP_Collide"];
zpp_nape.geom.ZPP_Collide.circleContains = function(c,p) {
	var dx;
	var dy;
	dx = p.x - c.worldCOMx;
	dy = p.y - c.worldCOMy;
	return dx * dx + dy * dy < c.radius * c.radius;
}
zpp_nape.geom.ZPP_Collide.polyContains = function(s,p) {
	return !(function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = s.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				if(!(a.gnormx * p.x + a.gnormy * p.y <= a.gprojection)) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.geom.ZPP_Collide.shapeContains = function(s,p) {
	return s.type == 0?zpp_nape.geom.ZPP_Collide.circleContains(s.circle,p):zpp_nape.geom.ZPP_Collide.polyContains(s.polygon,p);
}
zpp_nape.geom.ZPP_Collide.bodyContains = function(b,p) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = b.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.type == 0?zpp_nape.geom.ZPP_Collide.circleContains(s.circle,p):zpp_nape.geom.ZPP_Collide.polyContains(s.polygon,p)) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.geom.ZPP_Collide.containTest = function(s1,s2) {
	if(s1.aabb.contains(s2.aabb)) return s1.type == 0?s2.type == 0?(function($this) {
		var $r;
		var minDist = s1.circle.radius + -s2.circle.radius;
		var px;
		var py;
		{
			px = s1.circle.worldCOMx - s1.circle.worldCOMx;
			py = s1.circle.worldCOMy - s1.circle.worldCOMy;
		}
		var distSqr = px * px + py * py;
		$r = distSqr <= minDist * minDist;
		return $r;
	}(this)):!(function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = s2.polygon.gverts.next;
			while(cx_ite != null) {
				var p = cx_ite;
				if(!(function($this) {
					var $r;
					var minDist = s1.circle.radius;
					var px;
					var py;
					{
						px = p.x - s1.circle.worldCOMx;
						py = p.y - s1.circle.worldCOMy;
					}
					var distSqr = px * px + py * py;
					$r = distSqr <= minDist * minDist;
					return $r;
				}($this))) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this)):s2.type == 0?!(function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				if(!(a.gnormx * s2.circle.worldCOMx + a.gnormy * s2.circle.worldCOMy + s2.circle.radius <= a.gprojection)) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this)):!(function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				if(!(function($this) {
					var $r;
					var max = -1e+100;
					{
						var cx_ite1 = s2.polygon.gverts.next;
						while(cx_ite1 != null) {
							var v = cx_ite1;
							var k = a.gnormx * v.x + a.gnormy * v.y;
							if(k > max) max = k;
							cx_ite1 = cx_ite1.next;
						}
					}
					$r = max <= a.gprojection;
					return $r;
				}($this))) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this)); else return false;
}
zpp_nape.geom.ZPP_Collide.contactCollide = function(s1,s2,arb,rev) {
	if(s2.type == 1) return s1.type == 1?(function($this) {
		var $r;
		var cont = true;
		var max = -1e+100;
		var maxmin = -1e+100;
		var maxi = -1;
		var axis1 = null;
		var axis2 = null;
		{
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) min = k;
					if(min - ax.gprojection <= max) break;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min >= 0) {
					cont = false;
					break;
				}
				if(min > max) {
					max = min;
					axis1 = ax;
					maxi = 1;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = cont?(function($this) {
			var $r;
			{
				var cx_ite = s2.polygon.edges.head;
				while(cx_ite != null) {
					var ax = cx_ite.elt;
					var min = 1e100;
					var cx_ite1 = s1.polygon.gverts.next;
					while(cx_ite1 != null) {
						var v = cx_ite1;
						var k = ax.gnormx * v.x + ax.gnormy * v.y;
						if(k < min) min = k;
						if(min - ax.gprojection <= max) break;
						cx_ite1 = cx_ite1.next;
					}
					min -= ax.gprojection;
					if(min >= 0) {
						cont = false;
						break;
					}
					if(min > max) {
						max = min;
						axis2 = ax;
						maxi = 2;
					}
					cx_ite = cx_ite.next;
				}
			}
			$r = !cont?false:(function($this) {
				var $r;
				if(maxi == 1) {
					var ay = null;
					var min = 1e100;
					var cx_ite = s2.polygon.edges.head;
					while(cx_ite != null) {
						var axis = cx_ite.elt;
						var k = axis1.gnormx * axis.gnormx + axis1.gnormy * axis.gnormy;
						if(k < min) {
							min = k;
							ay = axis;
						}
						cx_ite = cx_ite.next;
					}
					var c0x;
					var c0y;
					c0x = ay.gp0.x;
					c0y = ay.gp0.y;
					var c1x;
					var c1y;
					c1x = ay.gp1.x;
					c1y = ay.gp1.y;
					var dvx;
					var dvy;
					dvx = c1x - c0x;
					dvy = c1y - c0y;
					var d0 = axis1.gnormy * c0x - axis1.gnormx * c0y;
					var d1 = axis1.gnormy * c1x - axis1.gnormx * c1y;
					var den = 1 / (d1 - d0);
					var t = (-axis1.tp1 - d0) * den;
					if(t > 1e-8) {
						var t1 = t;
						c0x += dvx * t1;
						c0y += dvy * t1;
					}
					var t1 = (-axis1.tp0 - d1) * den;
					if(t1 < -1e-008) {
						var t2 = t1;
						c1x += dvx * t2;
						c1y += dvy * t2;
					}
					var nx;
					var ny;
					var t2 = 1;
					nx = axis1.gnormx * t2;
					ny = axis1.gnormy * t2;
					arb.lnormx = axis1.lnormx;
					arb.lnormy = axis1.lnormy;
					arb.lproj = axis1.lprojection;
					arb.radius = 0;
					arb.rev = rev != false;
					arb.ptype = arb.rev?1:0;
					if(c0x * axis1.gnormx + c0y * axis1.gnormy <= axis1.gprojection) {
						var con = rev?arb.injectContact(c0x,c0y,-nx,-ny,max,arb.rev?1:0):arb.injectContact(c0x,c0y,nx,ny,max,arb.rev?1:0);
						var t2 = 1.0;
						c0x -= s2.polygon.body.posx * t2;
						c0y -= s2.polygon.body.posy * t2;
						con.inner.lr1x = c0x * s2.polygon.body.axisy + c0y * s2.polygon.body.axisx;
						con.inner.lr1y = c0y * s2.polygon.body.axisy - c0x * s2.polygon.body.axisx;
					}
					if(c1x * axis1.gnormx + c1y * axis1.gnormy <= axis1.gprojection) {
						var con = rev?arb.injectContact(c1x,c1y,-nx,-ny,max,arb.rev?0:1):arb.injectContact(c1x,c1y,nx,ny,max,arb.rev?0:1);
						var t2 = 1.0;
						c1x -= s2.polygon.body.posx * t2;
						c1y -= s2.polygon.body.posy * t2;
						con.inner.lr1x = c1x * s2.polygon.body.axisy + c1y * s2.polygon.body.axisx;
						con.inner.lr1y = c1y * s2.polygon.body.axisy - c1x * s2.polygon.body.axisx;
					}
				} else {
					var ay = null;
					var min = 1e100;
					var cx_ite = s1.polygon.edges.head;
					while(cx_ite != null) {
						var axis = cx_ite.elt;
						var k = axis2.gnormx * axis.gnormx + axis2.gnormy * axis.gnormy;
						if(k < min) {
							min = k;
							ay = axis;
						}
						cx_ite = cx_ite.next;
					}
					var c0x;
					var c0y;
					c0x = ay.gp0.x;
					c0y = ay.gp0.y;
					var c1x;
					var c1y;
					c1x = ay.gp1.x;
					c1y = ay.gp1.y;
					var dvx;
					var dvy;
					dvx = c1x - c0x;
					dvy = c1y - c0y;
					var d0 = axis2.gnormy * c0x - axis2.gnormx * c0y;
					var d1 = axis2.gnormy * c1x - axis2.gnormx * c1y;
					var den = 1 / (d1 - d0);
					var t = (-axis2.tp1 - d0) * den;
					if(t > 1e-8) {
						var t1 = t;
						c0x += dvx * t1;
						c0y += dvy * t1;
					}
					var t1 = (-axis2.tp0 - d1) * den;
					if(t1 < -1e-008) {
						var t2 = t1;
						c1x += dvx * t2;
						c1y += dvy * t2;
					}
					var nx;
					var ny;
					var t2 = -1;
					nx = axis2.gnormx * t2;
					ny = axis2.gnormy * t2;
					arb.lnormx = axis2.lnormx;
					arb.lnormy = axis2.lnormy;
					arb.lproj = axis2.lprojection;
					arb.radius = 0;
					arb.rev = rev != true;
					arb.ptype = arb.rev?1:0;
					if(c0x * axis2.gnormx + c0y * axis2.gnormy <= axis2.gprojection) {
						var con = rev?arb.injectContact(c0x,c0y,-nx,-ny,max,arb.rev?1:0):arb.injectContact(c0x,c0y,nx,ny,max,arb.rev?1:0);
						var t2 = 1.0;
						c0x -= s1.polygon.body.posx * t2;
						c0y -= s1.polygon.body.posy * t2;
						con.inner.lr1x = c0x * s1.polygon.body.axisy + c0y * s1.polygon.body.axisx;
						con.inner.lr1y = c0y * s1.polygon.body.axisy - c0x * s1.polygon.body.axisx;
					}
					if(c1x * axis2.gnormx + c1y * axis2.gnormy <= axis2.gprojection) {
						var con = rev?arb.injectContact(c1x,c1y,-nx,-ny,max,arb.rev?0:1):arb.injectContact(c1x,c1y,nx,ny,max,arb.rev?0:1);
						var t2 = 1.0;
						c1x -= s1.polygon.body.posx * t2;
						c1y -= s1.polygon.body.posy * t2;
						con.inner.lr1x = c1x * s1.polygon.body.axisy + c1y * s1.polygon.body.axisx;
						con.inner.lr1y = c1y * s1.polygon.body.axisy - c1x * s1.polygon.body.axisx;
					}
				}
				$r = true;
				return $r;
			}($this));
			return $r;
		}($this)):false;
		return $r;
	}(this)):(function($this) {
		var $r;
		var max = -1e+100;
		var minmax = -1e+100;
		var cont = true;
		var a0 = null, vi = null;
		var vite = s2.polygon.gverts.next;
		{
			var cx_ite = s2.polygon.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont = false;
					break;
				}
				if(dist > max) {
					max = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite = cx_ite.next;
			}
		}
		$r = cont?(function($this) {
			var $r;
			var v0 = vi;
			var v1 = vi.next == null?s2.polygon.gverts.next:vi.next;
			var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
			if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
				var co = (function($this) {
					var $r;
					var minDist = s1.circle.radius;
					var px;
					var py;
					{
						px = v0.x - s1.circle.worldCOMx;
						py = v0.y - s1.circle.worldCOMy;
					}
					var distSqr = px * px + py * py;
					$r = distSqr > minDist * minDist?null:distSqr < 1e-8 * 1e-8?arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist,0):(function($this) {
						var $r;
						var invDist = (function($this) {
							var $r;
							{
							}
							$r = 1.0 / (function($this) {
								var $r;
								{
								}
								$r = Math.sqrt(distSqr);
								return $r;
							}($this));
							return $r;
						}($this));
						var dist = invDist < 1e-8?1e100:1.0 / invDist;
						var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
						$r = rev?arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,-px * invDist,-py * invDist,dist - minDist,0):arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,px * invDist,py * invDist,dist - minDist,0);
						return $r;
					}($this));
					return $r;
				}($this));
				if(co != null) {
					var con = co.inner;
					arb.ptype = 2;
					var vx;
					var vy;
					vx = v0.x - s2.polygon.body.posx;
					vy = v0.y - s2.polygon.body.posy;
					if(rev) {
						con.lr1x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
						con.lr1y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
						con.lr2x = s1.circle.localCOMx;
						con.lr2y = s1.circle.localCOMy;
					} else {
						con.lr2x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
						con.lr2y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
						con.lr1x = s1.circle.localCOMx;
						con.lr1y = s1.circle.localCOMy;
					}
					arb.radius = s1.circle.radius;
				}
			} else if(dt >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
				var co = (function($this) {
					var $r;
					var minDist = s1.circle.radius;
					var px;
					var py;
					{
						px = v1.x - s1.circle.worldCOMx;
						py = v1.y - s1.circle.worldCOMy;
					}
					var distSqr = px * px + py * py;
					$r = distSqr > minDist * minDist?null:distSqr < 1e-8 * 1e-8?arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist,0):(function($this) {
						var $r;
						var invDist = (function($this) {
							var $r;
							{
							}
							$r = 1.0 / (function($this) {
								var $r;
								{
								}
								$r = Math.sqrt(distSqr);
								return $r;
							}($this));
							return $r;
						}($this));
						var dist = invDist < 1e-8?1e100:1.0 / invDist;
						var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
						$r = rev?arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,-px * invDist,-py * invDist,dist - minDist,0):arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,px * invDist,py * invDist,dist - minDist,0);
						return $r;
					}($this));
					return $r;
				}($this));
				if(co != null) {
					var con = co.inner;
					arb.ptype = 2;
					var vx;
					var vy;
					vx = v1.x - s2.polygon.body.posx;
					vy = v1.y - s2.polygon.body.posy;
					if(rev) {
						con.lr1x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
						con.lr1y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
						con.lr2x = s1.circle.localCOMx;
						con.lr2y = s1.circle.localCOMy;
					} else {
						con.lr2x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
						con.lr2y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
						con.lr1x = s1.circle.localCOMx;
						con.lr1y = s1.circle.localCOMy;
					}
					arb.radius = s1.circle.radius;
				}
			} else {
				var nx;
				var ny;
				var t = s1.circle.radius + max * 0.5;
				nx = a0.gnormx * t;
				ny = a0.gnormy * t;
				var px;
				var py;
				px = s1.circle.worldCOMx - nx;
				py = s1.circle.worldCOMy - ny;
				var con = rev?arb.injectContact(px,py,a0.gnormx,a0.gnormy,max,0):arb.injectContact(px,py,-a0.gnormx,-a0.gnormy,max,0);
				arb.ptype = rev?0:1;
				arb.lnormx = a0.lnormx;
				arb.lnormy = a0.lnormy;
				arb.rev = !rev;
				arb.lproj = a0.lprojection;
				arb.radius = -s1.circle.radius;
				con.inner.lr1x = s1.circle.localCOMx;
				con.inner.lr1y = s1.circle.localCOMy;
			}
			$r = true;
			return $r;
		}($this)):false;
		return $r;
	}(this)); else return (function($this) {
		var $r;
		var co = (function($this) {
			var $r;
			var minDist = s1.circle.radius + s2.circle.radius;
			var px;
			var py;
			{
				px = s2.circle.worldCOMx - s1.circle.worldCOMx;
				py = s2.circle.worldCOMy - s1.circle.worldCOMy;
			}
			var distSqr = px * px + py * py;
			$r = distSqr > minDist * minDist?null:distSqr < 1e-8 * 1e-8?arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist,0):(function($this) {
				var $r;
				var invDist = (function($this) {
					var $r;
					{
					}
					$r = 1.0 / (function($this) {
						var $r;
						{
						}
						$r = Math.sqrt(distSqr);
						return $r;
					}($this));
					return $r;
				}($this));
				var dist = invDist < 1e-8?1e100:1.0 / invDist;
				var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
				$r = rev?arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,-px * invDist,-py * invDist,dist - minDist,0):arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,px * invDist,py * invDist,dist - minDist,0);
				return $r;
			}($this));
			return $r;
		}($this));
		$r = co != null?(function($this) {
			var $r;
			var con = co.inner;
			if(rev) {
				con.lr1x = s2.circle.localCOMx;
				con.lr1y = s2.circle.localCOMy;
				con.lr2x = s1.circle.localCOMx;
				con.lr2y = s1.circle.localCOMy;
			} else {
				con.lr1x = s1.circle.localCOMx;
				con.lr1y = s1.circle.localCOMy;
				con.lr2x = s2.circle.localCOMx;
				con.lr2y = s2.circle.localCOMy;
			}
			arb.radius = s1.circle.radius + s2.circle.radius;
			arb.ptype = 2;
			$r = true;
			return $r;
		}($this)):false;
		return $r;
	}(this));
}
zpp_nape.geom.ZPP_Collide.testCollide_safe = function(s1,s2) {
	if(s2.type == 0) {
		var t = s1;
		s1 = s2;
		s2 = t;
	}
	return zpp_nape.geom.ZPP_Collide.testCollide(s1,s2);
}
zpp_nape.geom.ZPP_Collide.testCollide = function(s1,s2) {
	if(s2.type == 1) return s1.type == 1?(function($this) {
		var $r;
		var cont = true;
		{
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) min = k;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min > 0) {
					cont = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = cont?(function($this) {
			var $r;
			{
				var cx_ite = s2.polygon.edges.head;
				while(cx_ite != null) {
					var ax = cx_ite.elt;
					var min = 1e100;
					var cx_ite1 = s1.polygon.gverts.next;
					while(cx_ite1 != null) {
						var v = cx_ite1;
						var k = ax.gnormx * v.x + ax.gnormy * v.y;
						if(k < min) min = k;
						cx_ite1 = cx_ite1.next;
					}
					min -= ax.gprojection;
					if(min > 0) {
						cont = false;
						break;
					}
					cx_ite = cx_ite.next;
				}
			}
			$r = cont;
			return $r;
		}($this)):false;
		return $r;
	}(this)):(function($this) {
		var $r;
		var a0 = null, vi = null;
		var cont = true;
		var max = -1e+100;
		var vite = s2.polygon.gverts.next;
		{
			var cx_ite = s2.polygon.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont = false;
					break;
				}
				if(dist > max) {
					max = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite = cx_ite.next;
			}
		}
		$r = cont?(function($this) {
			var $r;
			var v0 = vi;
			var v1 = vi.next == null?s2.polygon.gverts.next:vi.next;
			var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
			$r = dt <= v0.y * a0.gnormx - v0.x * a0.gnormy?(function($this) {
				var $r;
				var minDist = s1.circle.radius;
				var px;
				var py;
				{
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
				}
				var distSqr = px * px + py * py;
				$r = distSqr <= minDist * minDist;
				return $r;
			}($this)):dt >= v1.y * a0.gnormx - v1.x * a0.gnormy?(function($this) {
				var $r;
				var minDist = s1.circle.radius;
				var px;
				var py;
				{
					px = v1.x - s1.circle.worldCOMx;
					py = v1.y - s1.circle.worldCOMy;
				}
				var distSqr = px * px + py * py;
				$r = distSqr <= minDist * minDist;
				return $r;
			}($this)):true;
			return $r;
		}($this)):false;
		return $r;
	}(this)); else return (function($this) {
		var $r;
		var minDist = s1.circle.radius + s2.circle.radius;
		var px;
		var py;
		{
			px = s2.circle.worldCOMx - s1.circle.worldCOMx;
			py = s2.circle.worldCOMy - s1.circle.worldCOMy;
		}
		var distSqr = px * px + py * py;
		$r = distSqr <= minDist * minDist;
		return $r;
	}(this));
}
zpp_nape.geom.ZPP_Collide.flowCollide = function(s1,s2,arb) {
	if(s2.type == 1) return s1.type == 1?(function($this) {
		var $r;
		var out1 = new Array();
		var out2 = new Array();
		var cont = true;
		var total = true;
		{
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var ind = 0;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) min = k;
					if(k >= ax.gprojection + 1e-8) {
						out2[ind] = true;
						total = false;
					}
					ind++;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min > 0) {
					cont = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = total?(function($this) {
			var $r;
			s2.polygon.validate_worldCOM();
			{
				arb.overlap = s2.polygon.area;
				arb.centroidx = s2.polygon.worldCOMx;
				arb.centroidy = s2.polygon.worldCOMy;
				null;
			}
			$r = true;
			return $r;
		}($this)):cont?(function($this) {
			var $r;
			total = true;
			{
				var cx_ite = s2.polygon.edges.head;
				while(cx_ite != null) {
					var ax = cx_ite.elt;
					var min = 1e100;
					var ind = 0;
					var cx_ite1 = s1.polygon.gverts.next;
					while(cx_ite1 != null) {
						var v = cx_ite1;
						var k = ax.gnormx * v.x + ax.gnormy * v.y;
						if(k < min) min = k;
						if(k >= ax.gprojection + 1e-8) {
							out1[ind] = true;
							total = false;
						}
						ind++;
						cx_ite1 = cx_ite1.next;
					}
					min -= ax.gprojection;
					if(min > 0) {
						cont = false;
						break;
					}
					cx_ite = cx_ite.next;
				}
			}
			$r = total?(function($this) {
				var $r;
				s1.polygon.validate_worldCOM();
				{
					arb.overlap = s1.polygon.area;
					arb.centroidx = s1.polygon.worldCOMx;
					arb.centroidy = s1.polygon.worldCOMy;
					null;
				}
				$r = true;
				return $r;
			}($this)):cont?(function($this) {
				var $r;
				while(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
					var p = zpp_nape.geom.ZPP_Collide.flowpoly.pop_unsafe();
					if(!p.inuse) {
						var o = p;
						{
							if(o.outer != null) o.outer.zpp_inner = null;
							o.outer = null;
							o._immutable = null;
							o._validate = null;
							o._invalidate = null;
							o.weak = false;
						}
						o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
						zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
					}
				}
				var fst_vert = null;
				var poly1 = false;
				var ite1 = s1.polygon.gverts.next;
				var ind1 = 0;
				var ite2 = s2.polygon.gverts.next;
				var ind2 = 0;
				{
					var _g1 = 0, _g = s2.polygon.edgeCnt;
					while(_g1 < _g) {
						var i = _g1++;
						if(!out2[i]) {
							ind2 = i;
							break;
						} else ite2 = ite2.next;
					}
				}
				if(ite2 == null) {
					ite2 = s2.polygon.gverts.next;
					poly1 = true;
					var _g1 = 0, _g = s1.polygon.edgeCnt;
					while(_g1 < _g) {
						var i = _g1++;
						if(!out1[i]) {
							ind1 = i;
							break;
						} else ite1 = ite1.next;
					}
					if(ite1 == null) ite1 = s1.polygon.gverts.next; else {
						zpp_nape.geom.ZPP_Collide.flowpoly.add(ite1);
						fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
					}
				} else {
					zpp_nape.geom.ZPP_Collide.flowpoly.add(ite2);
					fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
				}
				var cnt = 1;
				if(zpp_nape.geom.ZPP_Collide.flowpoly.head == null) {
					var cx_cont = true;
					var cx_itei = s1.polygon.gverts.next;
					var u = cx_itei;
					var cx_itej = cx_itei.next;
					while(cx_itej != null) {
						var v = cx_itej;
						var min = 2.0;
						var cx_cont1 = true;
						var cx_itei1 = s2.polygon.gverts.next;
						var a = cx_itei1;
						var cx_itej1 = cx_itei1.next;
						while(cx_itej1 != null) {
							var b = cx_itej1;
							var t = 0.;
							if((function($this) {
								var $r;
								var _sx;
								var _sy;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx;
								var _vy;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx;
								var _qy;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > 1e-8?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > 1e-8 && txx < 1 - 1e-8?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > 1e-8 && sxx < 1 - 1e-8?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t < min) {
									min = t;
									ite2 = cx_itei1;
								}
							}
							cx_itei1 = cx_itej1;
							a = b;
							cx_itej1 = cx_itej1.next;
						}
						if(cx_cont1) do {
							cx_itej1 = s2.polygon.gverts.next;
							var b = cx_itej1;
							var t = 0.;
							if((function($this) {
								var $r;
								var _sx;
								var _sy;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx;
								var _vy;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx;
								var _qy;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > 1e-8?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > 1e-8 && txx < 1 - 1e-8?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > 1e-8 && sxx < 1 - 1e-8?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t < min) {
									min = t;
									ite2 = cx_itei1;
								}
							}
						} while(false);
						if(min != 2.0) {
							var cx;
							var cy;
							var T = min;
							cx = u.x + (v.x - u.x) * T;
							cy = u.y + (v.y - u.y) * T;
							fst_vert = zpp_nape.geom.ZPP_Vec2.get(cx,cy,null);
							zpp_nape.geom.ZPP_Collide.flowpoly.add(fst_vert);
							poly1 = true;
							ite1 = cx_itei;
							cx_cont = false;
							break;
						}
						cx_itei = cx_itej;
						u = v;
						cx_itej = cx_itej.next;
					}
					if(cx_cont) do {
						cx_itej = s1.polygon.gverts.next;
						var v = cx_itej;
						var min = 2.0;
						var cx_cont1 = true;
						var cx_itei1 = s2.polygon.gverts.next;
						var a = cx_itei1;
						var cx_itej1 = cx_itei1.next;
						while(cx_itej1 != null) {
							var b = cx_itej1;
							var t = 0.;
							if((function($this) {
								var $r;
								var _sx;
								var _sy;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx;
								var _vy;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx;
								var _qy;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > 1e-8?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > 1e-8 && txx < 1 - 1e-8?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > 1e-8 && sxx < 1 - 1e-8?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t < min) {
									min = t;
									ite2 = cx_itei1;
								}
							}
							cx_itei1 = cx_itej1;
							a = b;
							cx_itej1 = cx_itej1.next;
						}
						if(cx_cont1) do {
							cx_itej1 = s2.polygon.gverts.next;
							var b = cx_itej1;
							var t = 0.;
							if((function($this) {
								var $r;
								var _sx;
								var _sy;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx;
								var _vy;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx;
								var _qy;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > 1e-8?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > 1e-8 && txx < 1 - 1e-8?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > 1e-8 && sxx < 1 - 1e-8?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t < min) {
									min = t;
									ite2 = cx_itei1;
								}
							}
						} while(false);
						if(min != 2.0) {
							var cx;
							var cy;
							var T = min;
							cx = u.x + (v.x - u.x) * T;
							cy = u.y + (v.y - u.y) * T;
							fst_vert = zpp_nape.geom.ZPP_Vec2.get(cx,cy,null);
							zpp_nape.geom.ZPP_Collide.flowpoly.add(fst_vert);
							poly1 = true;
							ite1 = cx_itei;
							break;
						}
					} while(false);
					cnt = 2;
				}
				while(true) if(poly1) {
					ite1 = ite1.next;
					ind1++;
					if(ite1 == null) {
						ite1 = s1.polygon.gverts.next;
						ind1 = 0;
					}
					if(!out1[ind1]) {
						var ex = ite1;
						if(fst_vert != null && (function($this) {
							var $r;
							var dx;
							var dy;
							{
								dx = ex.x - fst_vert.x;
								dy = ex.y - fst_vert.y;
							}
							$r = dx * dx + dy * dy;
							return $r;
						}($this)) < 1e-8) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(ex);
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						cnt = 1;
					} else {
						var a = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						var b = ite1;
						var u = ite2;
						var itm = ite2.next;
						if(itm == null) itm = s2.polygon.gverts.next;
						var max = -1.0;
						var itmo = null;
						var indo = 0;
						var icnt = 0;
						var beg_ite = itm;
						var cx_ite = itm;
						do {
							var v = cx_ite;
							var t = 0.;
							if((function($this) {
								var $r;
								var _sx;
								var _sy;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx;
								var _vy;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx;
								var _qy;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > 1e-8?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > 1e-8 && txx < 1 - 1e-8?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > 1e-8 && sxx < 1 - 1e-8?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t >= max) {
									itmo = ite2;
									indo = ind2;
									if(++icnt == cnt) {
										max = t;
										cx_ite = beg_ite;
										break;
									} else max = t;
								}
							}
							u = v;
							ite2 = cx_ite;
							ind2++;
							if(ind2 >= s2.polygon.edgeCnt) ind2 = 0;
							cx_ite = cx_ite.next;
							if(cx_ite == null) cx_ite = s2.polygon.gverts.next;
						} while(false);
						while(cx_ite != beg_ite) {
							var v = cx_ite;
							var t = 0.;
							if((function($this) {
								var $r;
								var _sx;
								var _sy;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx;
								var _vy;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx;
								var _qy;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > 1e-8?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > 1e-8 && txx < 1 - 1e-8?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > 1e-8 && sxx < 1 - 1e-8?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t >= max) {
									itmo = ite2;
									indo = ind2;
									if(++icnt == cnt) {
										max = t;
										cx_ite = beg_ite;
										break;
									} else max = t;
								}
							}
							u = v;
							ite2 = cx_ite;
							ind2++;
							if(ind2 >= s2.polygon.edgeCnt) ind2 = 0;
							cx_ite = cx_ite.next;
							if(cx_ite == null) cx_ite = s2.polygon.gverts.next;
						}
						if(itmo == null) break;
						var u1 = itmo;
						var itm2 = itmo.next;
						if(itm2 == null) itm2 = s2.polygon.gverts.next;
						var v = itm2;
						var cx;
						var cy;
						var T = max;
						cx = u1.x + (v.x - u1.x) * T;
						cy = u1.y + (v.y - u1.y) * T;
						if(fst_vert != null && (function($this) {
							var $r;
							var dx;
							var dy;
							{
								dx = cx - fst_vert.x;
								dy = cy - fst_vert.y;
							}
							$r = dx * dx + dy * dy;
							return $r;
						}($this)) < 1e-8) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx,cy,null));
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						ite2 = itmo;
						ind2 = indo;
						poly1 = !poly1;
						cnt = 2;
					}
				} else {
					ite2 = ite2.next;
					ind2++;
					if(ite2 == null) {
						ite2 = s2.polygon.gverts.next;
						ind2 = 0;
					}
					if(!out2[ind2]) {
						var ex = ite2;
						if(fst_vert != null && (function($this) {
							var $r;
							var dx;
							var dy;
							{
								dx = ex.x - fst_vert.x;
								dy = ex.y - fst_vert.y;
							}
							$r = dx * dx + dy * dy;
							return $r;
						}($this)) < 1e-8) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(ex);
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						cnt = 1;
					} else {
						var a = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						var b = ite2;
						var u = ite1;
						var itm = ite1.next;
						if(itm == null) itm = s1.polygon.gverts.next;
						var max = -1.0;
						var itmo = null;
						var indo = 0;
						var icnt = 0;
						var beg_ite = itm;
						var cx_ite = itm;
						do {
							var v = cx_ite;
							var t = 0.;
							if((function($this) {
								var $r;
								var _sx;
								var _sy;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx;
								var _vy;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx;
								var _qy;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > 1e-8?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > 1e-8 && txx < 1 - 1e-8?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > 1e-8 && sxx < 1 - 1e-8?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t >= max) {
									itmo = ite1;
									indo = ind1;
									if(++icnt == cnt) {
										max = t;
										cx_ite = beg_ite;
										break;
									} else max = t;
								}
							}
							u = v;
							ite1 = cx_ite;
							ind1++;
							if(ind1 >= s1.polygon.edgeCnt) ind1 = 0;
							cx_ite = cx_ite.next;
							if(cx_ite == null) cx_ite = s1.polygon.gverts.next;
						} while(false);
						while(cx_ite != beg_ite) {
							var v = cx_ite;
							var t = 0.;
							if((function($this) {
								var $r;
								var _sx;
								var _sy;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx;
								var _vy;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx;
								var _qy;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > 1e-8?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > 1e-8 && txx < 1 - 1e-8?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > 1e-8 && sxx < 1 - 1e-8?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t >= max) {
									itmo = ite1;
									indo = ind1;
									if(++icnt == cnt) {
										max = t;
										cx_ite = beg_ite;
										break;
									} else max = t;
								}
							}
							u = v;
							ite1 = cx_ite;
							ind1++;
							if(ind1 >= s1.polygon.edgeCnt) ind1 = 0;
							cx_ite = cx_ite.next;
							if(cx_ite == null) cx_ite = s1.polygon.gverts.next;
						}
						if(itmo == null) break;
						var u1 = itmo;
						var itm2 = itmo.next;
						if(itm2 == null) itm2 = s1.polygon.gverts.next;
						var v = itm2;
						var cx;
						var cy;
						var T = max;
						cx = u1.x + (v.x - u1.x) * T;
						cy = u1.y + (v.y - u1.y) * T;
						if(fst_vert != null && (function($this) {
							var $r;
							var dx;
							var dy;
							{
								dx = cx - fst_vert.x;
								dy = cy - fst_vert.y;
							}
							$r = dx * dx + dy * dy;
							return $r;
						}($this)) < 1e-8) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx,cy,null));
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						ite1 = itmo;
						ind1 = indo;
						poly1 = !poly1;
						cnt = 2;
					}
				}
				$r = zpp_nape.geom.ZPP_Collide.flowpoly.head != null && zpp_nape.geom.ZPP_Collide.flowpoly.head.next != null && zpp_nape.geom.ZPP_Collide.flowpoly.head.next.next != null?(function($this) {
					var $r;
					var area = 0.;
					var COMx;
					var COMy;
					{
						COMx = 0;
						COMy = 0;
						area = 0.;
						var cx_ite = zpp_nape.geom.ZPP_Collide.flowpoly.head;
						var u = cx_ite.elt;
						cx_ite = cx_ite.next;
						var v = cx_ite.elt;
						cx_ite = cx_ite.next;
						while(cx_ite != null) {
							var w = cx_ite.elt;
							area += v.x * (w.y - u.y);
							var cf = w.y * v.x - w.x * v.y;
							COMx += (v.x + w.x) * cf;
							COMy += (v.y + w.y) * cf;
							u = v;
							v = w;
							cx_ite = cx_ite.next;
						}
						cx_ite = zpp_nape.geom.ZPP_Collide.flowpoly.head;
						var w = cx_ite.elt;
						area += v.x * (w.y - u.y);
						var cf = w.y * v.x - w.x * v.y;
						COMx += (v.x + w.x) * cf;
						COMy += (v.y + w.y) * cf;
						u = v;
						v = w;
						cx_ite = cx_ite.next;
						var w1 = cx_ite.elt;
						area += v.x * (w1.y - u.y);
						var cf = w1.y * v.x - w1.x * v.y;
						COMx += (v.x + w1.x) * cf;
						COMy += (v.y + w1.y) * cf;
						area *= 0.5;
						var ia = 1 / (6 * area);
						var t = ia;
						COMx *= t;
						COMy *= t;
					}
					{
						arb.overlap = -area;
						arb.centroidx = COMx;
						arb.centroidy = COMy;
						null;
					}
					$r = true;
					return $r;
				}($this)):false;
				return $r;
			}($this)):false;
			return $r;
		}($this)):false;
		return $r;
	}(this)):(function($this) {
		var $r;
		var inte = new Array();
		var total = true;
		var a0 = null, vi = null;
		var max = -1e+100;
		var cont = true;
		var vite = s2.polygon.gverts.next;
		var ind = 0;
		{
			var cx_ite = s2.polygon.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy;
				if(dist > a.gprojection + s1.circle.radius) {
					cont = false;
					break;
				} else if(dist + s1.circle.radius > a.gprojection + 1e-8) {
					total = false;
					inte[ind] = true;
				}
				dist -= a.gprojection + s1.circle.radius;
				if(dist > max) {
					max = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				ind++;
				cx_ite = cx_ite.next;
			}
		}
		$r = cont?total?(function($this) {
			var $r;
			{
				arb.overlap = s1.circle.area;
				arb.centroidx = s1.circle.worldCOMx;
				arb.centroidy = s1.circle.worldCOMy;
				null;
			}
			$r = true;
			return $r;
		}($this)):(function($this) {
			var $r;
			var v0 = vi;
			var v1 = vi.next == null?s2.polygon.gverts.next:vi.next;
			var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
			$r = dt <= v0.y * a0.gnormx - v0.x * a0.gnormy?(function($this) {
				var $r;
				var minDist = s1.circle.radius;
				var px;
				var py;
				{
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
				}
				var distSqr = px * px + py * py;
				$r = distSqr <= minDist * minDist;
				return $r;
			}($this)):dt >= v1.y * a0.gnormx - v1.x * a0.gnormy?(function($this) {
				var $r;
				var minDist = s1.circle.radius;
				var px;
				var py;
				{
					px = v1.x - s1.circle.worldCOMx;
					py = v1.y - s1.circle.worldCOMy;
				}
				var distSqr = px * px + py * py;
				$r = distSqr <= minDist * minDist;
				return $r;
			}($this)):true?(function($this) {
				var $r;
				var ins = new Array();
				var ind1 = 0;
				var total1 = true;
				var vi1 = null;
				var vind = 0;
				{
					var cx_ite = s2.polygon.gverts.next;
					while(cx_ite != null) {
						var v = cx_ite;
						var dist = (function($this) {
							var $r;
							var dx;
							var dy;
							{
								dx = v.x - s1.circle.worldCOMx;
								dy = v.y - s1.circle.worldCOMy;
							}
							$r = dx * dx + dy * dy;
							return $r;
						}($this));
						if(!(ins[ind1] = dist <= s1.circle.radius * s1.circle.radius)) total1 = false; else {
							vind = ind1;
							vi1 = cx_ite;
						}
						ind1++;
						cx_ite = cx_ite.next;
					}
				}
				$r = total1?(function($this) {
					var $r;
					s2.polygon.validate_worldCOM();
					{
						arb.overlap = s2.polygon.area;
						arb.centroidx = s2.polygon.worldCOMx;
						arb.centroidy = s2.polygon.worldCOMy;
						null;
					}
					$r = true;
					return $r;
				}($this)):(function($this) {
					var $r;
					while(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
						var p = zpp_nape.geom.ZPP_Collide.flowpoly.pop_unsafe();
						if(!p.inuse) {
							var o = p;
							{
								if(o.outer != null) o.outer.zpp_inner = null;
								o.outer = null;
								o._immutable = null;
								o._validate = null;
								o._invalidate = null;
								o.weak = false;
							}
							o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
							zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
						}
					}
					zpp_nape.geom.ZPP_Collide.flowsegs.clear();
					var fst_vert = null;
					var state = 1;
					if(vi1 == null) {
						vi1 = s2.polygon.gverts.next;
						state = 2;
					} else zpp_nape.geom.ZPP_Collide.flowpoly.add(fst_vert = vi1);
					while(state != 0) if(state == 1) {
						vi1 = vi1.next;
						if(vi1 == null) vi1 = s2.polygon.gverts.next;
						vind++;
						if(vind >= s2.polygon.edgeCnt) vind = 0;
						if(ins[vind]) {
							if((function($this) {
								var $r;
								var dx;
								var dy;
								{
									dx = fst_vert.x - vi1.x;
									dy = fst_vert.y - vi1.y;
								}
								$r = dx * dx + dy * dy;
								return $r;
							}($this)) < 1e-8) break;
							zpp_nape.geom.ZPP_Collide.flowpoly.add(vi1);
						} else {
							var u = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
							var v = vi1;
							var tval = (function($this) {
								var $r;
								var vx;
								var vy;
								{
									vx = v.x - u.x;
									vy = v.y - u.y;
								}
								var qx;
								var qy;
								{
									qx = u.x - s1.circle.worldCOMx;
									qy = u.y - s1.circle.worldCOMy;
								}
								var A = vx * vx + vy * vy;
								var B = 2 * (qx * vx + qy * vy);
								var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
								var D = Math.sqrt(B * B - 4 * A * C);
								A = 1 / (2 * A);
								var t = (-B - D) * A;
								$r = t < 1e-8?(-B + D) * A:t;
								return $r;
							}($this));
							var cx;
							var cy;
							var T = tval;
							cx = u.x + (v.x - u.x) * T;
							cy = u.y + (v.y - u.y) * T;
							if((function($this) {
								var $r;
								var dx;
								var dy;
								{
									dx = fst_vert.x - cx;
									dy = fst_vert.y - cy;
								}
								$r = dx * dx + dy * dy;
								return $r;
							}($this)) < 1e-8) break;
							zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx,cy,null));
							state = 2;
						}
					} else if(state == 2) {
						var vi2 = vi1.next;
						if(vi2 == null) vi2 = s2.polygon.gverts.next;
						var u = vi1;
						state = 0;
						var beg_ite = vi2;
						var cx_ite = vi2;
						do {
							var v = cx_ite;
							var vind2 = vind + 1;
							if(vind2 == s2.polygon.edgeCnt) vind2 = 0;
							if(inte[vind]) {
								if(ins[vind2]) {
									var tval = (function($this) {
										var $r;
										var vx;
										var vy;
										{
											vx = v.x - u.x;
											vy = v.y - u.y;
										}
										var qx;
										var qy;
										{
											qx = u.x - s1.circle.worldCOMx;
											qy = u.y - s1.circle.worldCOMy;
										}
										var A = vx * vx + vy * vy;
										var B = 2 * (qx * vx + qy * vy);
										var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
										var D = Math.sqrt(B * B - 4 * A * C);
										A = 1 / (2 * A);
										var t = (-B - D) * A;
										$r = t < 1e-8?(-B + D) * A:t;
										return $r;
									}($this));
									var cx;
									var cy;
									var T = tval;
									cx = u.x + (v.x - u.x) * T;
									cy = u.y + (v.y - u.y) * T;
									if((function($this) {
										var $r;
										var dx;
										var dy;
										{
											dx = fst_vert.x - cx;
											dy = fst_vert.y - cy;
										}
										$r = dx * dx + dy * dy;
										return $r;
									}($this)) < 1e-8) {
										state = 0;
										cx_ite = beg_ite;
										break;
									}
									var cp = zpp_nape.geom.ZPP_Vec2.get(cx,cy,null);
									zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
									zpp_nape.geom.ZPP_Collide.flowsegs.add(cp);
									zpp_nape.geom.ZPP_Collide.flowpoly.add(cp);
									state = 1;
									cx_ite = beg_ite;
									break;
								} else {
									var t0 = 0.;
									var t1 = 0.;
									var two = (function($this) {
										var $r;
										var vx;
										var vy;
										{
											vx = v.x - u.x;
											vy = v.y - u.y;
										}
										var qx;
										var qy;
										{
											qx = u.x - s1.circle.worldCOMx;
											qy = u.y - s1.circle.worldCOMy;
										}
										var A = vx * vx + vy * vy;
										var B = 2 * (qx * vx + qy * vy);
										var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
										var D = B * B - 4 * A * C;
										$r = D * D < 1e-8?(function($this) {
											var $r;
											if(D < 0) t0 = 10.0; else t0 = t1 = -B / (2 * A);
											$r = false;
											return $r;
										}($this)):(function($this) {
											var $r;
											D = Math.sqrt(D);
											A = 1 / (2 * A);
											t0 = (-B - D) * A;
											t1 = (-B + D) * A;
											$r = true;
											return $r;
										}($this));
										return $r;
									}($this));
									if(t0 < 1 - 1e-8 && t1 > 1e-8) {
										var cx;
										var cy;
										var T = t0;
										cx = u.x + (v.x - u.x) * T;
										cy = u.y + (v.y - u.y) * T;
										if(fst_vert != null && (function($this) {
											var $r;
											var dx;
											var dy;
											{
												dx = fst_vert.x - cx;
												dy = fst_vert.y - cy;
											}
											$r = dx * dx + dy * dy;
											return $r;
										}($this)) < 1e-8) {
											state = 0;
											cx_ite = beg_ite;
											break;
										}
										var cp = zpp_nape.geom.ZPP_Vec2.get(cx,cy,null);
										if(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
											zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
											zpp_nape.geom.ZPP_Collide.flowsegs.add(cp);
										}
										zpp_nape.geom.ZPP_Collide.flowpoly.add(cp);
										if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
										if(two) {
											var cx1;
											var cy1;
											var T = t1;
											cx1 = u.x + (v.x - u.x) * T;
											cy1 = u.y + (v.y - u.y) * T;
											zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx1,cy1,null));
										}
									}
								}
							}
							u = v;
							vi1 = cx_ite;
							vind = vind2;
							cx_ite = cx_ite.next;
							if(cx_ite == null) cx_ite = s2.polygon.gverts.next;
						} while(false);
						while(cx_ite != beg_ite) {
							var v = cx_ite;
							var vind2 = vind + 1;
							if(vind2 == s2.polygon.edgeCnt) vind2 = 0;
							if(inte[vind]) {
								if(ins[vind2]) {
									var tval = (function($this) {
										var $r;
										var vx;
										var vy;
										{
											vx = v.x - u.x;
											vy = v.y - u.y;
										}
										var qx;
										var qy;
										{
											qx = u.x - s1.circle.worldCOMx;
											qy = u.y - s1.circle.worldCOMy;
										}
										var A = vx * vx + vy * vy;
										var B = 2 * (qx * vx + qy * vy);
										var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
										var D = Math.sqrt(B * B - 4 * A * C);
										A = 1 / (2 * A);
										var t = (-B - D) * A;
										$r = t < 1e-8?(-B + D) * A:t;
										return $r;
									}($this));
									var cx;
									var cy;
									var T = tval;
									cx = u.x + (v.x - u.x) * T;
									cy = u.y + (v.y - u.y) * T;
									if((function($this) {
										var $r;
										var dx;
										var dy;
										{
											dx = fst_vert.x - cx;
											dy = fst_vert.y - cy;
										}
										$r = dx * dx + dy * dy;
										return $r;
									}($this)) < 1e-8) {
										state = 0;
										cx_ite = beg_ite;
										break;
									}
									var cp = zpp_nape.geom.ZPP_Vec2.get(cx,cy,null);
									zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
									zpp_nape.geom.ZPP_Collide.flowsegs.add(cp);
									zpp_nape.geom.ZPP_Collide.flowpoly.add(cp);
									state = 1;
									cx_ite = beg_ite;
									break;
								} else {
									var t0 = 0.;
									var t1 = 0.;
									var two = (function($this) {
										var $r;
										var vx;
										var vy;
										{
											vx = v.x - u.x;
											vy = v.y - u.y;
										}
										var qx;
										var qy;
										{
											qx = u.x - s1.circle.worldCOMx;
											qy = u.y - s1.circle.worldCOMy;
										}
										var A = vx * vx + vy * vy;
										var B = 2 * (qx * vx + qy * vy);
										var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
										var D = B * B - 4 * A * C;
										$r = D * D < 1e-8?(function($this) {
											var $r;
											if(D < 0) t0 = 10.0; else t0 = t1 = -B / (2 * A);
											$r = false;
											return $r;
										}($this)):(function($this) {
											var $r;
											D = Math.sqrt(D);
											A = 1 / (2 * A);
											t0 = (-B - D) * A;
											t1 = (-B + D) * A;
											$r = true;
											return $r;
										}($this));
										return $r;
									}($this));
									if(t0 < 1 - 1e-8 && t1 > 1e-8) {
										var cx;
										var cy;
										var T = t0;
										cx = u.x + (v.x - u.x) * T;
										cy = u.y + (v.y - u.y) * T;
										if(fst_vert != null && (function($this) {
											var $r;
											var dx;
											var dy;
											{
												dx = fst_vert.x - cx;
												dy = fst_vert.y - cy;
											}
											$r = dx * dx + dy * dy;
											return $r;
										}($this)) < 1e-8) {
											state = 0;
											cx_ite = beg_ite;
											break;
										}
										var cp = zpp_nape.geom.ZPP_Vec2.get(cx,cy,null);
										if(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
											zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
											zpp_nape.geom.ZPP_Collide.flowsegs.add(cp);
										}
										zpp_nape.geom.ZPP_Collide.flowpoly.add(cp);
										if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
										if(two) {
											var cx1;
											var cy1;
											var T = t1;
											cx1 = u.x + (v.x - u.x) * T;
											cy1 = u.y + (v.y - u.y) * T;
											zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx1,cy1,null));
										}
									}
								}
							}
							u = v;
							vi1 = cx_ite;
							vind = vind2;
							cx_ite = cx_ite.next;
							if(cx_ite == null) cx_ite = s2.polygon.gverts.next;
						}
					}
					$r = zpp_nape.geom.ZPP_Collide.flowpoly.head == null?false:zpp_nape.geom.ZPP_Collide.flowpoly.head.next == null?(function($this) {
						var $r;
						var all = true;
						{
							var cx_ite = s2.polygon.edges.head;
							while(cx_ite != null) {
								var e = cx_ite.elt;
								var dist = e.gnormx * s1.circle.worldCOMx + e.gnormy * s1.circle.worldCOMy;
								if(dist > e.gprojection) {
									all = false;
									break;
								}
								cx_ite = cx_ite.next;
							}
						}
						$r = all?(function($this) {
							var $r;
							{
								arb.overlap = s1.circle.area;
								arb.centroidx = s1.circle.worldCOMx;
								arb.centroidy = s1.circle.worldCOMy;
								null;
							}
							$r = true;
							return $r;
						}($this)):false;
						return $r;
					}($this)):(function($this) {
						var $r;
						var COMx = 0;
						var COMy = 0;
						{
						}
						{
						}
						var area = 0.;
						if(zpp_nape.geom.ZPP_Collide.flowpoly.head.next.next != null) {
							var parea = 0.;
							var pCOMx;
							var pCOMy;
							pCOMx = 0;
							pCOMy = 0;
							parea = 0.;
							var cx_ite = zpp_nape.geom.ZPP_Collide.flowpoly.head;
							var u = cx_ite.elt;
							cx_ite = cx_ite.next;
							var v = cx_ite.elt;
							cx_ite = cx_ite.next;
							while(cx_ite != null) {
								var w = cx_ite.elt;
								parea += v.x * (w.y - u.y);
								var cf = w.y * v.x - w.x * v.y;
								pCOMx += (v.x + w.x) * cf;
								pCOMy += (v.y + w.y) * cf;
								u = v;
								v = w;
								cx_ite = cx_ite.next;
							}
							cx_ite = zpp_nape.geom.ZPP_Collide.flowpoly.head;
							var w = cx_ite.elt;
							parea += v.x * (w.y - u.y);
							var cf = w.y * v.x - w.x * v.y;
							pCOMx += (v.x + w.x) * cf;
							pCOMy += (v.y + w.y) * cf;
							u = v;
							v = w;
							cx_ite = cx_ite.next;
							var w1 = cx_ite.elt;
							parea += v.x * (w1.y - u.y);
							var cf = w1.y * v.x - w1.x * v.y;
							pCOMx += (v.x + w1.x) * cf;
							pCOMy += (v.y + w1.y) * cf;
							parea *= 0.5;
							var ia = 1 / (6 * parea);
							var t = ia;
							pCOMx *= t;
							pCOMy *= t;
							var t = -parea;
							COMx += pCOMx * t;
							COMy += pCOMy * t;
							area -= parea;
						} else {
							zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
							zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.next.elt);
						}
						while(!(zpp_nape.geom.ZPP_Collide.flowsegs.head == null)) {
							var u = zpp_nape.geom.ZPP_Collide.flowsegs.pop_unsafe();
							var v = zpp_nape.geom.ZPP_Collide.flowsegs.pop_unsafe();
							var dx;
							var dy;
							dx = v.x - u.x;
							dy = v.y - u.y;
							var nx;
							var ny;
							nx = dx;
							ny = dy;
							var d = nx * nx + ny * ny;
							var imag = (function($this) {
								var $r;
								{
								}
								$r = 1.0 / (function($this) {
									var $r;
									{
									}
									$r = Math.sqrt(d);
									return $r;
								}($this));
								return $r;
							}($this));
							var t = imag;
							nx *= t;
							ny *= t;
							var t = nx;
							nx = -ny;
							ny = t;
							var cx;
							var cy;
							cx = u.x + v.x;
							cy = u.y + v.y;
							var t = 1.0 / 2;
							cx *= t;
							cy *= t;
							var t = 1.0;
							cx -= s1.circle.worldCOMx * t;
							cy -= s1.circle.worldCOMy * t;
							var xd = nx * cx + ny * cy;
							var carea = 0.;
							var ccom = 0.;
							var X = xd;
							var cos = X / s1.circle.radius;
							var sin = Math.sqrt(1 - cos * cos);
							var theta = Math.acos(cos);
							carea = s1.circle.radius * (s1.circle.radius * theta - X * sin);
							ccom = 2 / 3 * s1.circle.radius * sin * sin * sin / (theta - cos * sin);
							cx = s1.circle.worldCOMx;
							cy = s1.circle.worldCOMy;
							var t = ccom;
							cx += nx * t;
							cy += ny * t;
							var t = carea;
							COMx += cx * t;
							COMy += cy * t;
							area += carea;
						}
						{
							var t = 1.0 / area;
							COMx *= t;
							COMy *= t;
						}
						{
							arb.overlap = area;
							arb.centroidx = COMx;
							arb.centroidy = COMy;
							null;
						}
						$r = true;
						return $r;
					}($this));
					return $r;
				}($this));
				return $r;
			}($this)):false;
			return $r;
		}($this)):false;
		return $r;
	}(this)); else return (function($this) {
		var $r;
		var c1 = s1.circle;
		var c2 = s2.circle;
		var deltax;
		var deltay;
		{
			deltax = c2.worldCOMx - c1.worldCOMx;
			deltay = c2.worldCOMy - c1.worldCOMy;
		}
		var cr = c1.radius + c2.radius;
		var ds = deltax * deltax + deltay * deltay;
		$r = ds > cr * cr?false:ds < 1e-8?(function($this) {
			var $r;
			if(c1.radius < c2.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
				null;
			} else {
				arb.overlap = c2.area;
				arb.centroidx = c2.worldCOMx;
				arb.centroidy = c2.worldCOMy;
				null;
			}
			$r = true;
			return $r;
		}($this)):(function($this) {
			var $r;
			var d = Math.sqrt(ds);
			var id = 1 / d;
			var x1 = 0.5 * (d - (c2.radius * c2.radius - c1.radius * c1.radius) * id);
			if(x1 <= -c1.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
				null;
			} else {
				var x2 = d - x1;
				if(x2 <= -c2.radius) {
					arb.overlap = c2.area;
					arb.centroidx = c2.worldCOMx;
					arb.centroidy = c2.worldCOMy;
					null;
				} else {
					var area1 = 0.;
					var y1 = 0.;
					var area2 = 0.;
					var y2 = 0.;
					var X = x1;
					var cos = X / c1.radius;
					var sin = Math.sqrt(1 - cos * cos);
					var theta = Math.acos(cos);
					area1 = c1.radius * (c1.radius * theta - X * sin);
					y1 = 2 / 3 * c1.radius * sin * sin * sin / (theta - cos * sin);
					var X = x2;
					var cos = X / c2.radius;
					var sin = Math.sqrt(1 - cos * cos);
					var theta = Math.acos(cos);
					area2 = c2.radius * (c2.radius * theta - X * sin);
					y2 = 2 / 3 * c2.radius * sin * sin * sin / (theta - cos * sin);
					var tarea = area1 + area2;
					var ya = (y1 * area1 + (d - y2) * area2) / tarea * id;
					{
						arb.overlap = tarea;
						arb.centroidx = c1.worldCOMx + deltax * ya;
						arb.centroidy = c1.worldCOMy + deltay * ya;
						null;
					}
				}
			}
			$r = true;
			return $r;
		}($this));
		return $r;
	}(this));
}
zpp_nape.geom.ZPP_Collide.prototype.__class__ = zpp_nape.geom.ZPP_Collide;
nape.constraint.MotorJoint = function(body1,body2,rate,ratio) {
	if( body1 === $_ ) return;
	if(ratio == null) ratio = 1.0;
	if(rate == null) rate = 0.0;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_MotorJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	if(body1 == null) throw "Error: Constraint::" + "body1" + " cannot be null";
	if(body1.zpp_inner != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = body1.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != body1.zpp_inner) body1.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body1.zpp_inner.wake();
	}
	if(this.zpp_inner_zn.b1 == null) null; else this.zpp_inner_zn.b1.outer;
	if(body2 == null) throw "Error: Constraint::" + "body2" + " cannot be null";
	if(body2.zpp_inner != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = body2.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != body2.zpp_inner) body2.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body2.zpp_inner.wake();
	}
	if(this.zpp_inner_zn.b2 == null) null; else this.zpp_inner_zn.b2.outer;
	if(rate != rate) throw "Error: MotorJoint::rate cannot be NaN";
	if(this.zpp_inner_zn.rate != rate) {
		this.zpp_inner_zn.rate = rate;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.rate;
	if(ratio != ratio) throw "Error: MotorJoint::ratio cannot be NaN";
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
}
nape.constraint.MotorJoint.__name__ = ["nape","constraint","MotorJoint"];
nape.constraint.MotorJoint.__super__ = nape.constraint.Constraint;
for(var k in nape.constraint.Constraint.prototype ) nape.constraint.MotorJoint.prototype[k] = nape.constraint.Constraint.prototype[k];
nape.constraint.MotorJoint.prototype.zpp_inner_zn = null;
nape.constraint.MotorJoint.prototype.body1 = null;
nape.constraint.MotorJoint.prototype.flibget_body1 = function() {
	return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
}
nape.constraint.MotorJoint.prototype.flibset_body1 = function(body1) {
	if(body1 == null) throw "Error: Constraint::" + "body1" + " cannot be null";
	if(body1.zpp_inner != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = body1.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != body1.zpp_inner) body1.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body1.zpp_inner.wake();
	}
	return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
}
nape.constraint.MotorJoint.prototype.body2 = null;
nape.constraint.MotorJoint.prototype.flibget_body2 = function() {
	return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
}
nape.constraint.MotorJoint.prototype.flibset_body2 = function(body2) {
	if(body2 == null) throw "Error: Constraint::" + "body2" + " cannot be null";
	if(body2.zpp_inner != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = body2.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != body2.zpp_inner) body2.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body2.zpp_inner.wake();
	}
	return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
}
nape.constraint.MotorJoint.prototype.ratio = null;
nape.constraint.MotorJoint.prototype.flibget_ratio = function() {
	return this.zpp_inner_zn.ratio;
}
nape.constraint.MotorJoint.prototype.flibset_ratio = function(ratio) {
	if(ratio != ratio) throw "Error: MotorJoint::ratio cannot be NaN";
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.ratio;
}
nape.constraint.MotorJoint.prototype.rate = null;
nape.constraint.MotorJoint.prototype.flibget_rate = function() {
	return this.zpp_inner_zn.rate;
}
nape.constraint.MotorJoint.prototype.flibset_rate = function(rate) {
	if(rate != rate) throw "Error: MotorJoint::rate cannot be NaN";
	if(this.zpp_inner_zn.rate != rate) {
		this.zpp_inner_zn.rate = rate;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.rate;
}
nape.constraint.MotorJoint.prototype.impulse = function() {
	var ret = new nape.geom.MatMN(1,1);
	{
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc + this.zpp_inner_zn.pjAcc;
	}
	return ret;
}
nape.constraint.MotorJoint.prototype.bodyImpulse = function(body) {
	if(body == null) throw "Error: Cannot evaluate impulse on null body";
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
	if(!this.zpp_inner.active) return new nape.geom.Vec3(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
}
nape.constraint.MotorJoint.prototype.__class__ = nape.constraint.MotorJoint;
ApplicationMain = function() { }
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.completed = null;
ApplicationMain.preloader = null;
ApplicationMain.total = null;
ApplicationMain.loaders = null;
ApplicationMain.urlLoaders = null;
ApplicationMain.main = function() {
	ApplicationMain.completed = 0;
	ApplicationMain.loaders = new Hash();
	ApplicationMain.urlLoaders = new Hash();
	ApplicationMain.total = 0;
	ApplicationMain.preloader = new NMEPreloader();
	jeash.Lib.jeashGetCurrent().addChild(ApplicationMain.preloader);
	ApplicationMain.preloader.onInit();
	if(ApplicationMain.total == 0) ApplicationMain.begin(); else {
		var $it0 = ApplicationMain.loaders.keys();
		while( $it0.hasNext() ) {
			var path = $it0.next();
			var loader = ApplicationMain.loaders.get(path);
			loader.contentLoaderInfo.addEventListener("complete",ApplicationMain.loader_onComplete);
			loader.load(new jeash.net.URLRequest(path));
		}
		var $it1 = ApplicationMain.urlLoaders.keys();
		while( $it1.hasNext() ) {
			var path = $it1.next();
			var urlLoader = ApplicationMain.urlLoaders.get(path);
			urlLoader.addEventListener("complete",ApplicationMain.loader_onComplete);
			urlLoader.load(new jeash.net.URLRequest(path));
		}
	}
}
ApplicationMain.begin = function() {
	ApplicationMain.preloader.onLoaded();
	jeash.Lib.jeashGetCurrent().removeChild(ApplicationMain.preloader);
	ApplicationMain.preloader = null;
	Main.main();
}
ApplicationMain.getAsset = function(inName) {
	return null;
}
ApplicationMain.loader_onComplete = function(event) {
	ApplicationMain.completed++;
	ApplicationMain.preloader.onUpdate(ApplicationMain.completed,ApplicationMain.total);
	if(ApplicationMain.completed == ApplicationMain.total) ApplicationMain.begin();
}
ApplicationMain.prototype.__class__ = ApplicationMain;
haxe.StackItem = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","Lambda"] }
haxe.StackItem.CFunction = ["CFunction",0];
haxe.StackItem.CFunction.toString = $estr;
haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
haxe.StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; }
haxe.StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; }
haxe.StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; }
haxe.StackItem.Lambda = function(v) { var $x = ["Lambda",4,v]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; }
haxe.Stack = function() { }
haxe.Stack.__name__ = ["haxe","Stack"];
haxe.Stack.callStack = function() {
	return haxe.Stack.makeStack("$s");
}
haxe.Stack.exceptionStack = function() {
	return haxe.Stack.makeStack("$e");
}
haxe.Stack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b[b.b.length] = "\nCalled from " == null?"null":"\nCalled from ";
		haxe.Stack.itemToString(b,s);
	}
	return b.b.join("");
}
haxe.Stack.itemToString = function(b,s) {
	var $e = (s);
	switch( $e[1] ) {
	case 0:
		b.b[b.b.length] = "a C function" == null?"null":"a C function";
		break;
	case 1:
		var m = $e[2];
		b.b[b.b.length] = "module " == null?"null":"module ";
		b.b[b.b.length] = m == null?"null":m;
		break;
	case 2:
		var line = $e[4], file = $e[3], s1 = $e[2];
		if(s1 != null) {
			haxe.Stack.itemToString(b,s1);
			b.b[b.b.length] = " (" == null?"null":" (";
		}
		b.b[b.b.length] = file == null?"null":file;
		b.b[b.b.length] = " line " == null?"null":" line ";
		b.b[b.b.length] = line == null?"null":line;
		if(s1 != null) b.b[b.b.length] = ")" == null?"null":")";
		break;
	case 3:
		var meth = $e[3], cname = $e[2];
		b.b[b.b.length] = cname == null?"null":cname;
		b.b[b.b.length] = "." == null?"null":".";
		b.b[b.b.length] = meth == null?"null":meth;
		break;
	case 4:
		var n = $e[2];
		b.b[b.b.length] = "local function #" == null?"null":"local function #";
		b.b[b.b.length] = n == null?"null":n;
		break;
	}
}
haxe.Stack.makeStack = function(s) {
	var a = (function($this) {
		var $r;
		try {
			$r = eval(s);
		} catch( e ) {
			$r = [];
		}
		return $r;
	}(this));
	var m = new Array();
	var _g1 = 0, _g = a.length - (s == "$s"?2:0);
	while(_g1 < _g) {
		var i = _g1++;
		var d = a[i].split("::");
		m.unshift(haxe.StackItem.Method(d[0],d[1]));
	}
	return m;
}
haxe.Stack.prototype.__class__ = haxe.Stack;
zpp_nape.dynamics.ZPP_Arbiter = function(p) {
}
zpp_nape.dynamics.ZPP_Arbiter.__name__ = ["zpp_nape","dynamics","ZPP_Arbiter"];
zpp_nape.dynamics.ZPP_Arbiter.prototype.outer = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.wrapper = function() {
	if(this.outer == null) {
		zpp_nape.dynamics.ZPP_Arbiter.internal = true;
		if(this.type == 0) {
			this.colarb.outer_zn = new nape.dynamics.CollisionArbiter();
			this.outer = this.colarb.outer_zn;
		} else if(this.type == 1) {
			this.fluidarb.outer_zn = new nape.dynamics.FluidArbiter();
			this.outer = this.fluidarb.outer_zn;
		} else this.outer = new nape.dynamics.Arbiter();
		this.outer.zpp_inner = this;
		zpp_nape.dynamics.ZPP_Arbiter.internal = false;
	}
	return this.outer;
}
zpp_nape.dynamics.ZPP_Arbiter.prototype.hnext = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.id = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.di = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.stamp = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.up_stamp = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.sleep_stamp = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.active = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.cleared = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.sleeping = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.invalidated = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.b1 = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.b2 = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.ws1 = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.ws2 = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.pair = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.swap_features = function() {
	var t = this.b1;
	this.b1 = this.b2;
	this.b2 = t;
	var t = this.ws1;
	this.ws1 = this.ws2;
	this.ws2 = t;
	var t = this.colarb.s1;
	this.colarb.s1 = this.colarb.s2;
	this.colarb.s2 = t;
}
zpp_nape.dynamics.ZPP_Arbiter.prototype.type = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.colarb = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.fluidarb = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.sensorarb = null;
zpp_nape.dynamics.ZPP_Arbiter.prototype.lazyRetire = function(s,b) {
	this.cleared = true;
	if(b == null) {
		this.b1.arbiters.remove(this);
		this.b2.arbiters.remove(this);
	} else if(this.b1 == b) this.b2.arbiters.remove(this); else this.b1.arbiters.remove(this);
	s.map_arb.remove(this);
	if(this.pair != null) {
		this.pair.arb = null;
		this.pair = null;
	}
	this.active = false;
	s.f_arbiters.modified = true;
}
zpp_nape.dynamics.ZPP_Arbiter.prototype.sup_assign = function(s1,s2,id,di) {
	this.b1 = s1.body;
	this.ws1 = s1;
	this.b2 = s2.body;
	this.ws2 = s2;
	this.id = id;
	this.di = di;
	this.b1.arbiters.add(this);
	this.b2.arbiters.add(this);
	this.active = true;
	this.cleared = false;
	this.sleeping = false;
}
zpp_nape.dynamics.ZPP_Arbiter.prototype.sup_retire = function() {
	if(!this.cleared) {
		this.b1.arbiters.remove(this);
		this.b2.arbiters.remove(this);
		if(this.pair != null) {
			this.pair.arb = null;
			this.pair = null;
		}
	}
	this.b1 = this.b2 = null;
	this.active = false;
}
zpp_nape.dynamics.ZPP_Arbiter.prototype.__class__ = zpp_nape.dynamics.ZPP_Arbiter;
zpp_nape.dynamics.ZPP_SensorArbiter = function(p) {
	if( p === $_ ) return;
	zpp_nape.dynamics.ZPP_Arbiter.call(this);
	this.type = 2;
	this.sensorarb = this;
}
zpp_nape.dynamics.ZPP_SensorArbiter.__name__ = ["zpp_nape","dynamics","ZPP_SensorArbiter"];
zpp_nape.dynamics.ZPP_SensorArbiter.__super__ = zpp_nape.dynamics.ZPP_Arbiter;
for(var k in zpp_nape.dynamics.ZPP_Arbiter.prototype ) zpp_nape.dynamics.ZPP_SensorArbiter.prototype[k] = zpp_nape.dynamics.ZPP_Arbiter.prototype[k];
zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = null;
zpp_nape.dynamics.ZPP_SensorArbiter.prototype.next = null;
zpp_nape.dynamics.ZPP_SensorArbiter.prototype.alloc = function() {
}
zpp_nape.dynamics.ZPP_SensorArbiter.prototype.free = function() {
}
zpp_nape.dynamics.ZPP_SensorArbiter.prototype.assign = function(s1,s2,id,di) {
	{
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.add(this);
		this.b2.arbiters.add(this);
		this.active = true;
		this.cleared = false;
		this.sleeping = false;
	}
}
zpp_nape.dynamics.ZPP_SensorArbiter.prototype.retire = function() {
	{
		if(!this.cleared) {
			this.b1.arbiters.remove(this);
			this.b2.arbiters.remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
	}
	var o = this;
	null;
	o.next = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
	zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = o;
}
zpp_nape.dynamics.ZPP_SensorArbiter.prototype.__class__ = zpp_nape.dynamics.ZPP_SensorArbiter;
zpp_nape.dynamics.ZPP_FluidArbiter = function(p) {
	if( p === $_ ) return;
	zpp_nape.dynamics.ZPP_Arbiter.call(this);
	this.type = 1;
	this.fluidarb = this;
	this.buoyx = 0;
	this.buoyy = 0;
	this.pre_dt = -1.0;
}
zpp_nape.dynamics.ZPP_FluidArbiter.__name__ = ["zpp_nape","dynamics","ZPP_FluidArbiter"];
zpp_nape.dynamics.ZPP_FluidArbiter.__super__ = zpp_nape.dynamics.ZPP_Arbiter;
for(var k in zpp_nape.dynamics.ZPP_Arbiter.prototype ) zpp_nape.dynamics.ZPP_FluidArbiter.prototype[k] = zpp_nape.dynamics.ZPP_Arbiter.prototype[k];
zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.outer_zn = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.next = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.alloc = function() {
	this.pdampx = 0;
	this.pdampy = 0;
	this.padamp = 0;
}
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.free = function() {
}
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.centroidx = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.centroidy = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.overlap = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.r1x = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.r1y = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.r2x = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.r2y = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.nodrag = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.wMass = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.adamp = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.agamma = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.vMassa = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.vMassb = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.vMassc = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.dampx = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.dampy = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.lgamma = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.nx = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.ny = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.buoyx = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.buoyy = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.pdampx = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.pdampy = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.padamp = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.wrap_position = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.getposition = function() {
	var me = this;
	this.wrap_position = nape.geom.Vec2.get(null,null,null);
	this.wrap_position.zpp_inner.inuse = true;
	this.wrap_position.zpp_inner.immutable = true;
	this.wrap_position.zpp_inner._validate = function() {
		if(me.cleared) throw "Error: Arbiter not currently in use";
		me.wrap_position.zpp_inner.x = me.centroidx;
		me.wrap_position.zpp_inner.y = me.centroidy;
	};
}
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.assign = function(s1,s2,id,di) {
	{
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.add(this);
		this.b2.arbiters.add(this);
		this.active = true;
		this.cleared = false;
		this.sleeping = false;
	}
	this.nx = 0;
	this.ny = 1;
	this.dampx = 0;
	this.dampy = 0;
	this.adamp = 0.0;
}
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.retire = function() {
	{
		if(!this.cleared) {
			this.b1.arbiters.remove(this);
			this.b2.arbiters.remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
	}
	var o = this;
	null;
	o.next = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
	zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = o;
	this.pre_dt = -1.0;
}
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.inject = function(area,cx,cy) {
	this.overlap = area;
	this.centroidx = cx;
	this.centroidy = cy;
}
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.pre_dt = null;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.preStep = function(s,dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.r1x = this.centroidx - this.b1.posx;
	this.r1y = this.centroidy - this.b1.posy;
	this.r2x = this.centroidx - this.b2.posx;
	this.r2y = this.centroidy - this.b2.posy;
	var g1x;
	var g1y;
	if(this.ws1.fluidEnabled && this.ws1.fluidProperties.wrap_gravity != null) {
		g1x = this.ws1.fluidProperties.gravityx;
		g1y = this.ws1.fluidProperties.gravityy;
	} else {
		g1x = s.gravityx;
		g1y = s.gravityy;
	}
	var g2x;
	var g2y;
	if(this.ws2.fluidEnabled && this.ws2.fluidProperties.wrap_gravity != null) {
		g2x = this.ws2.fluidProperties.gravityx;
		g2y = this.ws2.fluidProperties.gravityy;
	} else {
		g2x = s.gravityx;
		g2y = s.gravityy;
	}
	var buoyx = 0;
	var buoyy = 0;
	if(this.ws1.fluidEnabled && this.ws2.fluidEnabled) {
		var mass1 = this.overlap * this.ws1.fluidProperties.density;
		var mass2 = this.overlap * this.ws2.fluidProperties.density;
		if(mass1 > mass2) {
			var t = mass1 + mass2;
			buoyx -= g1x * t;
			buoyy -= g1y * t;
		} else if(mass1 < mass2) {
			var t = mass1 + mass2;
			buoyx += g2x * t;
			buoyy += g2y * t;
		} else {
			var gx;
			var gy;
			gx = g1x + g2x;
			gy = g1y + g2y;
			var t = 0.5;
			gx *= t;
			gy *= t;
			if(this.ws1.worldCOMx * gx + this.ws1.worldCOMy * gy > this.ws2.worldCOMx * gx + this.ws2.worldCOMy * gy) {
				var t = mass1 + mass2;
				buoyx -= gx * t;
				buoyy -= gy * t;
			} else {
				var t = mass1 + mass2;
				buoyx += gx * t;
				buoyy += gy * t;
			}
		}
	} else if(this.ws1.fluidEnabled) {
		var mass = this.overlap * this.ws1.fluidProperties.density;
		var t = mass;
		buoyx -= g1x * t;
		buoyy -= g1y * t;
	} else if(this.ws2.fluidEnabled) {
		var mass = this.overlap * this.ws2.fluidProperties.density;
		var t = mass;
		buoyx += g2x * t;
		buoyy += g2y * t;
	}
	var t = dt;
	buoyx *= t;
	buoyy *= t;
	this.buoyx = buoyx;
	this.buoyy = buoyy;
	if(this.b1.type == 2) {
		var t = 1 / dt;
		this.b1.forcex -= buoyx * t;
		this.b1.forcey -= buoyy * t;
		this.b1.torque -= (buoyy * this.r1x - buoyx * this.r1y) / dt;
	}
	if(this.b2.type == 2) {
		var t = 1 / dt;
		this.b2.forcex += buoyx * t;
		this.b2.forcey += buoyy * t;
		this.b2.torque += (buoyy * this.r2x - buoyx * this.r2y) / dt;
	}
	if((!this.ws1.fluidEnabled || this.ws1.fluidProperties.viscosity == 0) && (!this.ws2.fluidEnabled || this.ws2.fluidProperties.viscosity == 0)) {
		this.nodrag = true;
		this.dampx = 0;
		this.dampy = 0;
		this.adamp = 0;
	} else {
		this.nodrag = false;
		var tViscosity = 0.0;
		if(this.ws1.fluidEnabled) {
			this.ws2.validate_angDrag();
			tViscosity += this.ws1.fluidProperties.viscosity * this.ws2.angDrag * this.overlap / this.ws2.area;
		}
		if(this.ws2.fluidEnabled) {
			this.ws1.validate_angDrag();
			tViscosity += this.ws2.fluidProperties.viscosity * this.ws1.angDrag * this.overlap / this.ws1.area;
		}
		if(tViscosity != 0) {
			var iSum = this.b1.sinertia + this.b2.sinertia;
			if(iSum != 0) this.wMass = 1 / iSum; else this.wMass = 0.0;
			var biasCoef;
			tViscosity *= 0.0004;
			this.wMass *= (function($this) {
				var $r;
				var omega = 2 * Math.PI * tViscosity;
				$this.agamma = 1 / (omega * dt * (2 + omega * dt));
				var ig = 1 / (1 + $this.agamma);
				biasCoef = omega * omega * $this.agamma;
				$this.agamma *= ig;
				$r = ig;
				return $r;
			}(this));
		} else {
			this.wMass = 0.0;
			this.agamma = 0.0;
		}
		var vrnx = this.b2.velx + this.b2.kinvelx - this.r2y * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.r1y * (this.b2.angvel + this.b2.kinangvel));
		var vrny = this.b2.vely + this.b2.kinvely + this.r2x * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.r1x * (this.b1.angvel + this.b1.kinangvel));
		if(vrnx * vrnx + vrny * vrny < 1e-8) {
		} else {
			var d = vrnx * vrnx + vrny * vrny;
			var imag = (function($this) {
				var $r;
				{
				}
				$r = 1.0 / (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(d);
					return $r;
				}($this));
				return $r;
			}(this));
			var t = imag;
			vrnx *= t;
			vrny *= t;
			this.nx = vrnx;
			this.ny = vrny;
		}
		var tViscosity1 = 0.0;
		if(this.ws1.fluidEnabled) {
			var f = -this.ws1.fluidProperties.viscosity * this.overlap / this.ws2.area;
			if(this.ws2.type == 0) tViscosity1 -= f * this.ws2.circle.radius * 0.5 / (2 * this.ws2.circle.radius * Math.PI); else {
				var poly = this.ws2.polygon;
				var bord = 0.0;
				var acc = 0.0;
				var cx_ite = poly.edges.head;
				while(cx_ite != null) {
					var ex = cx_ite.elt;
					bord += ex.length;
					var fact = f * ex.length * (ex.gnormx * this.nx + ex.gnormy * this.ny);
					if(fact > 0) fact = fact *= -0.5;
					acc -= fact * 0.5 * 0.5;
					cx_ite = cx_ite.next;
				}
				tViscosity1 += acc / bord;
			}
		}
		if(this.ws2.fluidEnabled) {
			var f = -this.ws2.fluidProperties.viscosity * this.overlap / this.ws1.area;
			if(this.ws1.type == 0) tViscosity1 -= f * this.ws1.circle.radius * 0.5 / (2 * this.ws1.circle.radius * Math.PI); else {
				var poly = this.ws1.polygon;
				var bord = 0.0;
				var acc = 0.0;
				var cx_ite = poly.edges.head;
				while(cx_ite != null) {
					var ex = cx_ite.elt;
					bord += ex.length;
					var fact = f * ex.length * (ex.gnormx * this.nx + ex.gnormy * this.ny);
					if(fact > 0) fact = fact *= -0.5;
					acc -= fact * 0.5 * 0.5;
					cx_ite = cx_ite.next;
				}
				tViscosity1 += acc / bord;
			}
		}
		if(tViscosity1 != 0) {
			var m = this.b1.smass + this.b2.smass;
			var Ka;
			var Kb;
			var Kc;
			Ka = m;
			Kb = 0;
			Kc = m;
			if(this.b1.sinertia != 0) {
				var X = this.r1x * this.b1.sinertia;
				var Y = this.r1y * this.b1.sinertia;
				Ka += Y * this.r1y;
				Kb += -Y * this.r1x;
				Kc += X * this.r1x;
			}
			if(this.b2.sinertia != 0) {
				var X = this.r2x * this.b2.sinertia;
				var Y = this.r2y * this.b2.sinertia;
				Ka += Y * this.r2y;
				Kb += -Y * this.r2x;
				Kc += X * this.r2x;
			}
			var det = Ka * Kc - Kb * Kb;
			if(det != det) {
				Ka = Kb = Kc = 0;
				3;
			} else if(det < 1e-8) {
				var flag = 0;
				if(Ka * Ka > 1e-8) Ka = 1 / Ka; else {
					Ka = 0;
					flag |= 1;
				}
				if(Kc * Kc > 1e-8) Kc = 1 / Kc; else {
					Kc = 0;
					flag |= 2;
				}
				Kb = 0;
				flag;
			} else {
				det = 1 / det;
				var t = Kc * det;
				Kc = Ka * det;
				Ka = t;
				Kb *= -det;
				0;
			}
			this.vMassa = Ka;
			this.vMassb = Kb;
			this.vMassc = Kc;
			var biasCoef;
			var X = (function($this) {
				var $r;
				var omega = 2 * Math.PI * tViscosity1;
				$this.lgamma = 1 / (omega * dt * (2 + omega * dt));
				var ig = 1 / (1 + $this.lgamma);
				biasCoef = omega * omega * $this.lgamma;
				$this.lgamma *= ig;
				$r = ig;
				return $r;
			}(this));
			this.vMassa *= X;
			this.vMassb *= X;
			this.vMassc *= X;
		} else {
			this.vMassa = 0;
			this.vMassb = 0;
			this.vMassc = 0;
			this.lgamma = 0.0;
		}
	}
	var t = dtratio;
	this.dampx *= t;
	this.dampy *= t;
	this.adamp *= dtratio;
}
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.warmStart = function() {
	var t = this.b1.imass;
	this.b1.velx -= this.dampx * t;
	this.b1.vely -= this.dampy * t;
	var t = this.b2.imass;
	this.b2.velx += this.dampx * t;
	this.b2.vely += this.dampy * t;
	this.b1.angvel -= this.b1.iinertia * (this.dampy * this.r1x - this.dampx * this.r1y);
	this.b2.angvel += this.b2.iinertia * (this.dampy * this.r2x - this.dampx * this.r2y);
	this.b1.angvel -= this.adamp * this.b1.iinertia;
	this.b2.angvel += this.adamp * this.b2.iinertia;
	this.pdampx = this.dampx;
	this.pdampy = this.dampy;
	this.padamp = this.adamp;
}
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.applyImpulseVel = function() {
	if(!this.nodrag) {
		var w1 = this.b1.angvel + this.b1.kinangvel;
		var w2 = this.b2.angvel + this.b2.kinangvel;
		var jx = this.b1.velx + this.b1.kinvelx - this.r1y * w1 - (this.b2.velx + this.b2.kinvelx - this.r2y * w2);
		var jy = this.b1.vely + this.b1.kinvely + this.r1x * w1 - (this.b2.vely + this.b2.kinvely + this.r2x * w2);
		var t = this.vMassa * jx + this.vMassb * jy;
		jy = this.vMassb * jx + this.vMassc * jy;
		jx = t;
		var t = this.lgamma;
		jx -= this.dampx * t;
		jy -= this.dampy * t;
		var t = 1.0;
		this.dampx += jx * t;
		this.dampy += jy * t;
		var t = this.b1.imass;
		this.b1.velx -= jx * t;
		this.b1.vely -= jy * t;
		var t = this.b2.imass;
		this.b2.velx += jx * t;
		this.b2.vely += jy * t;
		this.b1.angvel -= this.b1.iinertia * (jy * this.r1x - jx * this.r1y);
		this.b2.angvel += this.b2.iinertia * (jy * this.r2x - jx * this.r2y);
		var j_damp = (w1 - w2) * this.wMass - this.adamp * this.agamma;
		this.adamp += j_damp;
		this.b1.angvel -= j_damp * this.b1.iinertia;
		this.b2.angvel += j_damp * this.b2.iinertia;
	}
}
zpp_nape.dynamics.ZPP_FluidArbiter.prototype.__class__ = zpp_nape.dynamics.ZPP_FluidArbiter;
zpp_nape.dynamics.ZPP_ColArbiter = function(p) {
	if( p === $_ ) return;
	this.pre_dt = -1.0;
	zpp_nape.dynamics.ZPP_Arbiter.call(this);
	this.contacts = new zpp_nape.dynamics.ZPP_Contact();
	this.innards = new zpp_nape.dynamics.ZPP_IContact();
	this.type = 0;
	this.colarb = this;
}
zpp_nape.dynamics.ZPP_ColArbiter.__name__ = ["zpp_nape","dynamics","ZPP_ColArbiter"];
zpp_nape.dynamics.ZPP_ColArbiter.__super__ = zpp_nape.dynamics.ZPP_Arbiter;
for(var k in zpp_nape.dynamics.ZPP_Arbiter.prototype ) zpp_nape.dynamics.ZPP_ColArbiter.prototype[k] = zpp_nape.dynamics.ZPP_Arbiter.prototype[k];
zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.outer_zn = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.dyn_fric = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.stat_fric = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.restitution = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rfric = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.s1 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.s2 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.contacts = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.wrap_contacts = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.innards = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.nx = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.ny = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.wrap_normal = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.getnormal = function() {
	var me = this;
	this.wrap_normal = nape.geom.Vec2.get(0,0,null);
	this.wrap_normal.zpp_inner.immutable = true;
	this.wrap_normal.zpp_inner.inuse = true;
	this.wrap_normal.zpp_inner._validate = function() {
		if(me.cleared) throw "Error: Arbiter not currently in use";
		me.wrap_normal.zpp_inner.x = me.nx;
		me.wrap_normal.zpp_inner.y = me.ny;
	};
}
zpp_nape.dynamics.ZPP_ColArbiter.prototype.kMassa = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.kMassb = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.kMassc = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.Ka = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.Kb = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.Kc = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rMass = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.jrAcc = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.pjrAcc = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rn1a = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rt1a = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rn1b = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rt1b = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rn2a = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rt2a = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rn2b = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rt2b = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.k1x = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.k1y = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.k2x = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.k2y = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.surfacex = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.surfacey = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.ptype = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.lnormx = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.lnormy = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.lproj = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.radius = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.rev = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.c1 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.oc1 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.c2 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.oc2 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.hc2 = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.next = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.alloc = function() {
	this.pjrAcc = 0.0;
}
zpp_nape.dynamics.ZPP_ColArbiter.prototype.free = function() {
}
zpp_nape.dynamics.ZPP_ColArbiter.prototype.stat = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.injectContact = function(px,py,nx,ny,dist,hash) {
	var c = null;
	var cx_ite = this.contacts.next;
	while(cx_ite != null) {
		var cur = cx_ite;
		if(hash == cur.hash) {
			c = cur;
			break;
		}
		cx_ite = cx_ite.next;
	}
	if(c == null) {
		c = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.dynamics.ZPP_Contact.zpp_pool == null) ret = new zpp_nape.dynamics.ZPP_Contact(); else {
				ret = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
				zpp_nape.dynamics.ZPP_Contact.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.pjnAcc = ret.pjtAcc = 0.0;
			$r = ret;
			return $r;
		}(this));
		var ci = c.inner;
		ci.jnAcc = ci.jtAcc = 0;
		c.sBias = -1;
		c.hash = hash;
		c.fresh = true;
		c.arbiter = this;
		this.jrAcc = 0;
		this.contacts.add(c);
		this.innards.add(ci);
	} else c.fresh = false;
	c.px = px;
	c.py = py;
	this.nx = nx;
	this.ny = ny;
	c.dist = dist;
	c.stamp = this.stamp;
	return c;
}
zpp_nape.dynamics.ZPP_ColArbiter.prototype.assign = function(s1,s2,id,di) {
	{
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.add(this);
		this.b2.arbiters.add(this);
		this.active = true;
		this.cleared = false;
		this.sleeping = false;
	}
	this.s1 = s1;
	this.s2 = s2;
	{
		if(this.s1.material.elasticity == Math.NEGATIVE_INFINITY || this.s2.material.elasticity == Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity == Math.POSITIVE_INFINITY || this.s2.material.elasticity == Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
		if(this.restitution < 0) this.restitution = 0;
		if(this.restitution > 1) this.restitution = 1;
		this.dyn_fric = (function($this) {
			var $r;
			{
			}
			$r = Math.sqrt($this.s1.material.dynamicFriction * $this.s2.material.dynamicFriction);
			return $r;
		}(this));
		this.stat_fric = (function($this) {
			var $r;
			{
			}
			$r = Math.sqrt($this.s1.material.staticFriction * $this.s2.material.staticFriction);
			return $r;
		}(this));
		this.rfric = (function($this) {
			var $r;
			{
			}
			$r = Math.sqrt($this.s1.material.rollingFriction * $this.s2.material.rollingFriction);
			return $r;
		}(this));
	}
}
zpp_nape.dynamics.ZPP_ColArbiter.prototype.calcProperties = function() {
	if(this.s1.material.elasticity == Math.NEGATIVE_INFINITY || this.s2.material.elasticity == Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity == Math.POSITIVE_INFINITY || this.s2.material.elasticity == Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
	if(this.restitution < 0) this.restitution = 0;
	if(this.restitution > 1) this.restitution = 1;
	this.dyn_fric = (function($this) {
		var $r;
		{
		}
		$r = Math.sqrt($this.s1.material.dynamicFriction * $this.s2.material.dynamicFriction);
		return $r;
	}(this));
	this.stat_fric = (function($this) {
		var $r;
		{
		}
		$r = Math.sqrt($this.s1.material.staticFriction * $this.s2.material.staticFriction);
		return $r;
	}(this));
	this.rfric = (function($this) {
		var $r;
		{
		}
		$r = Math.sqrt($this.s1.material.rollingFriction * $this.s2.material.rollingFriction);
		return $r;
	}(this));
}
zpp_nape.dynamics.ZPP_ColArbiter.prototype.validate_props = function() {
	if(this.invalidated) {
		this.invalidated = false;
		{
			if(this.s1.material.elasticity == Math.NEGATIVE_INFINITY || this.s2.material.elasticity == Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity == Math.POSITIVE_INFINITY || this.s2.material.elasticity == Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			if(this.restitution < 0) this.restitution = 0;
			if(this.restitution > 1) this.restitution = 1;
			this.dyn_fric = (function($this) {
				var $r;
				{
				}
				$r = Math.sqrt($this.s1.material.dynamicFriction * $this.s2.material.dynamicFriction);
				return $r;
			}(this));
			this.stat_fric = (function($this) {
				var $r;
				{
				}
				$r = Math.sqrt($this.s1.material.staticFriction * $this.s2.material.staticFriction);
				return $r;
			}(this));
			this.rfric = (function($this) {
				var $r;
				{
				}
				$r = Math.sqrt($this.s1.material.rollingFriction * $this.s2.material.rollingFriction);
				return $r;
			}(this));
		}
	}
}
zpp_nape.dynamics.ZPP_ColArbiter.prototype.retire = function() {
	{
		if(!this.cleared) {
			this.b1.arbiters.remove(this);
			this.b2.arbiters.remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
	}
	while(!(this.contacts.next == null)) {
		var o = this.contacts.pop_unsafe();
		o.arbiter = null;
		o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
		zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
		this.innards.pop();
	}
	var o = this;
	null;
	o.next = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
	zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = o;
	this.pre_dt = -1.0;
}
zpp_nape.dynamics.ZPP_ColArbiter.prototype.pre_dt = null;
zpp_nape.dynamics.ZPP_ColArbiter.prototype.preStep = function(dt) {
	if(this.invalidated) {
		this.invalidated = false;
		{
			if(this.s1.material.elasticity == Math.NEGATIVE_INFINITY || this.s2.material.elasticity == Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity == Math.POSITIVE_INFINITY || this.s2.material.elasticity == Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			if(this.restitution < 0) this.restitution = 0;
			if(this.restitution > 1) this.restitution = 1;
			this.dyn_fric = (function($this) {
				var $r;
				{
				}
				$r = Math.sqrt($this.s1.material.dynamicFriction * $this.s2.material.dynamicFriction);
				return $r;
			}(this));
			this.stat_fric = (function($this) {
				var $r;
				{
				}
				$r = Math.sqrt($this.s1.material.staticFriction * $this.s2.material.staticFriction);
				return $r;
			}(this));
			this.rfric = (function($this) {
				var $r;
				{
				}
				$r = Math.sqrt($this.s1.material.rollingFriction * $this.s2.material.rollingFriction);
				return $r;
			}(this));
		}
	}
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	var mass_sum = this.b1.smass + this.b2.smass;
	this.hc2 = false;
	var fst = true;
	var pre = null;
	var prei = null;
	var cx_itei = this.innards.next;
	var cx_ite = this.contacts.next;
	while(cx_ite != null) {
		var c = cx_ite;
		if(c.stamp + 6 < this.stamp) {
			cx_ite = this.contacts.erase(pre);
			cx_itei = this.innards.erase(prei);
			var o = c;
			o.arbiter = null;
			o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
			zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
			continue;
		}
		var ci = c.inner;
		var pact = c.active;
		c.active = c.stamp == this.stamp;
		if(pact != c.active) this.contacts.modified = true;
		if(c.active) {
			if(fst) {
				fst = false;
				this.c1 = ci;
				this.oc1 = c;
			} else {
				this.hc2 = true;
				this.c2 = ci;
				this.oc2 = c;
			}
			ci.r2x = c.px - this.b2.posx;
			ci.r2y = c.py - this.b2.posy;
			ci.r1x = c.px - this.b1.posx;
			ci.r1y = c.py - this.b1.posy;
			var kt = mass_sum + this.b2.sinertia * zpp_nape.util.ZPP_Math.sqr(ci.r2x * this.nx + ci.r2y * this.ny);
			kt += this.b1.sinertia * zpp_nape.util.ZPP_Math.sqr(ci.r1x * this.nx + ci.r1y * this.ny);
			ci.tMass = kt < 1e-8?0:1.0 / kt;
			var nt = mass_sum + this.b2.sinertia * zpp_nape.util.ZPP_Math.sqr(this.ny * ci.r2x - this.nx * ci.r2y);
			nt += this.b1.sinertia * zpp_nape.util.ZPP_Math.sqr(this.ny * ci.r1x - this.nx * ci.r1y);
			ci.nMass = nt < 1e-8?0:1.0 / nt;
			var vrx;
			var vry;
			var ang = this.b2.angvel + this.b2.kinangvel;
			vrx = this.b2.velx + this.b2.kinvelx - ci.r2y * ang;
			vry = this.b2.vely + this.b2.kinvely + ci.r2x * ang;
			ang = this.b1.angvel + this.b1.kinangvel;
			vrx -= this.b1.velx + this.b1.kinvelx - ci.r1y * ang;
			vry -= this.b1.vely + this.b1.kinvely + ci.r1x * ang;
			var vdot = this.nx * vrx + this.ny * vry;
			var nb = 0.1;
			var delta = 1 - 0.9 * vdot * vdot;
			if(delta < 0) delta = 0;
			delta -= c.dist * 0.01;
			if(delta < 0) delta = 0;
			if(delta > 1) delta = 1;
			nb += (0.8 - 0.1) * delta;
			if(nb > 1) nb = 1;
			if(c.sBias == -1) c.sBias = nb; else c.sBias = 0.85 * c.sBias + (1.0 - 0.85) * nb;
			ci.biasCoef = c.sBias;
			if(this.stat) {
				ci.biasCoef *= 2;
				if(ci.biasCoef > 1) ci.biasCoef = 1;
			}
			c.elasticity = this.restitution;
			ci.bounce = vdot * c.elasticity;
			vdot = vry * this.nx - vrx * this.ny;
			if(vdot * vdot > 4) ci.friction = this.dyn_fric; else ci.friction = this.stat_fric;
			ci.jnAcc *= dtratio;
			ci.jtAcc *= dtratio;
		}
		pre = cx_ite;
		prei = cx_itei;
		cx_itei = cx_itei.next;
		cx_ite = cx_ite.next;
	}
	this.jrAcc *= dtratio;
	if(!fst) {
		this.rn1a = this.ny * this.c1.r1x - this.nx * this.c1.r1y;
		this.rt1a = this.c1.r1x * this.nx + this.c1.r1y * this.ny;
		this.rn1b = this.ny * this.c1.r2x - this.nx * this.c1.r2y;
		this.rt1b = this.c1.r2x * this.nx + this.c1.r2y * this.ny;
		this.k1x = this.b2.kinvelx - this.c1.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c1.r1y * this.b1.kinangvel);
		this.k1y = this.b2.kinvely + this.c1.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c1.r1x * this.b1.kinangvel);
	}
	if(this.hc2) {
		this.rn2a = this.ny * this.c2.r1x - this.nx * this.c2.r1y;
		this.rt2a = this.c2.r1x * this.nx + this.c2.r1y * this.ny;
		this.rn2b = this.ny * this.c2.r2x - this.nx * this.c2.r2y;
		this.rt2b = this.c2.r2x * this.nx + this.c2.r2y * this.ny;
		this.k2x = this.b2.kinvelx - this.c2.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c2.r1y * this.b1.kinangvel);
		this.k2y = this.b2.kinvely + this.c2.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c2.r1x * this.b1.kinangvel);
		this.kMassa = mass_sum + this.b1.sinertia * this.rn1a * this.rn1a + this.b2.sinertia * this.rn1b * this.rn1b;
		this.kMassb = mass_sum + this.b1.sinertia * this.rn1a * this.rn2a + this.b2.sinertia * this.rn1b * this.rn2b;
		this.kMassc = mass_sum + this.b1.sinertia * this.rn2a * this.rn2a + this.b2.sinertia * this.rn2b * this.rn2b;
		if(this.kMassa * this.kMassa < 4e5 * (this.kMassa * this.kMassc - this.kMassb * this.kMassb)) {
			this.Ka = this.kMassa;
			this.Kb = this.kMassb;
			this.Kc = this.kMassc;
			var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
			if(det != det) {
				this.kMassa = this.kMassb = this.kMassc = 0;
				3;
			} else if(det < 1e-8) {
				var flag = 0;
				if(this.kMassa * this.kMassa > 1e-8) this.kMassa = 1 / this.kMassa; else {
					this.kMassa = 0;
					flag |= 1;
				}
				if(this.kMassc * this.kMassc > 1e-8) this.kMassc = 1 / this.kMassc; else {
					this.kMassc = 0;
					flag |= 2;
				}
				this.kMassb = 0;
				flag;
			} else {
				det = 1 / det;
				var t = this.kMassc * det;
				this.kMassc = this.kMassa * det;
				this.kMassa = t;
				this.kMassb *= -det;
				0;
			}
		} else {
			this.hc2 = false;
			if(this.oc2.dist < this.oc1.dist) {
				var t = this.c1;
				this.c1 = this.c2;
				this.c2 = t;
			}
			this.oc2.active = false;
			this.contacts.modified = true;
		}
	}
	this.surfacex = this.b2.svelx;
	this.surfacey = this.b2.svely;
	var t = 1.0;
	this.surfacex += this.b1.svelx * t;
	this.surfacey += this.b1.svely * t;
	this.surfacex = -this.surfacex;
	this.surfacey = -this.surfacey;
	this.rMass = this.b1.smass + this.b2.smass;
	if(this.rMass != 0) this.rMass = 1 / this.rMass;
	return !fst;
}
zpp_nape.dynamics.ZPP_ColArbiter.prototype.warmStart = function() {
	var jx = this.nx * this.c1.jnAcc - this.ny * this.c1.jtAcc;
	var jy = this.ny * this.c1.jnAcc + this.nx * this.c1.jtAcc;
	var t = this.b1.imass;
	this.b1.velx -= jx * t;
	this.b1.vely -= jy * t;
	this.b1.angvel -= this.b1.iinertia * (jy * this.c1.r1x - jx * this.c1.r1y);
	var t = this.b2.imass;
	this.b2.velx += jx * t;
	this.b2.vely += jy * t;
	this.b2.angvel += this.b2.iinertia * (jy * this.c1.r2x - jx * this.c1.r2y);
	if(this.hc2) {
		var jx = this.nx * this.c2.jnAcc - this.ny * this.c2.jtAcc;
		var jy = this.ny * this.c2.jnAcc + this.nx * this.c2.jtAcc;
		var t = this.b1.imass;
		this.b1.velx -= jx * t;
		this.b1.vely -= jy * t;
		this.b1.angvel -= this.b1.iinertia * (jy * this.c2.r1x - jx * this.c2.r1y);
		var t = this.b2.imass;
		this.b2.velx += jx * t;
		this.b2.vely += jy * t;
		this.b2.angvel += this.b2.iinertia * (jy * this.c2.r2x - jx * this.c2.r2y);
	}
	this.b2.angvel += this.jrAcc * this.b2.iinertia;
	this.b1.angvel -= this.jrAcc * this.b1.iinertia;
	this.oc1.pjnAcc = this.c1.jnAcc;
	this.oc1.pjtAcc = this.c1.jtAcc;
	if(this.hc2) {
		this.oc2.pjnAcc = this.c2.jnAcc;
		this.oc2.pjtAcc = this.c2.jtAcc;
	}
	this.pjrAcc = this.jrAcc;
}
zpp_nape.dynamics.ZPP_ColArbiter.prototype.applyImpulseVel = function(bouncy) {
	if(this.hc2) {
		var dv1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
		var dv1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
		var dv2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
		var dv2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
		var ax = this.c1.jnAcc;
		var ay = this.c2.jnAcc;
		var jnx = dv1x * this.nx + dv1y * this.ny + this.surfacey + (bouncy?this.c1.bounce:0.0) - (this.Ka * ax + this.Kb * ay);
		var jny = dv2x * this.nx + dv2y * this.ny + this.surfacey + (bouncy?this.c2.bounce:0.0) - (this.Kb * ax + this.Kc * ay);
		var xx = -(this.kMassa * jnx + this.kMassb * jny);
		var xy = -(this.kMassb * jnx + this.kMassc * jny);
		if(xx >= 0 && xy >= 0) {
			jnx = xx - ax;
			jny = xy - ay;
			this.c1.jnAcc = xx;
			this.c2.jnAcc = xy;
		} else {
			xx = -this.c1.nMass * jnx;
			if(xx >= 0 && this.Kb * xx + jny >= 0) {
				jnx = xx - ax;
				jny = -ay;
				this.c1.jnAcc = xx;
				this.c2.jnAcc = xy = 0;
			} else {
				xy = -this.c2.nMass * jny;
				if(xy >= 0 && this.Kb * xy + jnx >= 0) {
					jnx = -ax;
					jny = xy - ay;
					this.c1.jnAcc = xx = 0;
					this.c2.jnAcc = xy;
				} else if(jnx >= 0 && jny >= 0) {
					jnx = -ax;
					jny = -ay;
					this.c1.jnAcc = this.c2.jnAcc = xx = xy = 0;
				}
			}
		}
		var jn = jnx + jny;
		var jx = this.nx * jn;
		var jy = this.ny * jn;
		var t = this.b2.imass;
		this.b2.velx += jx * t;
		this.b2.vely += jy * t;
		this.b2.angvel += this.b2.iinertia * (this.rn1b * jnx + this.rn2b * jny);
		var t = this.b1.imass;
		this.b1.velx -= jx * t;
		this.b1.vely -= jy * t;
		this.b1.angvel -= this.b1.iinertia * (this.rn1a * jnx + this.rn2a * jny);
		dv1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
		dv1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
		var jt = (dv1y * this.nx - dv1x * this.ny + this.surfacex) * this.c1.tMass;
		var jtMax = this.c1.friction * xx;
		var jtOld = this.c1.jtAcc;
		var cjtAcc = jtOld - jt;
		if(cjtAcc > jtMax) cjtAcc = jtMax; else if(cjtAcc < -jtMax) cjtAcc = -jtMax;
		jt = cjtAcc - jtOld;
		this.c1.jtAcc = cjtAcc;
		jx = -this.ny * jt;
		jy = this.nx * jt;
		var t = this.b2.imass;
		this.b2.velx += jx * t;
		this.b2.vely += jy * t;
		this.b2.angvel += this.b2.iinertia * this.rt1b * jt;
		var t = this.b1.imass;
		this.b1.velx -= jx * t;
		this.b1.vely -= jy * t;
		this.b1.angvel -= this.b1.iinertia * this.rt1a * jt;
		dv2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
		dv2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
		var jt = (dv2y * this.nx - dv2x * this.ny + this.surfacex) * this.c2.tMass;
		var jtMax = this.c2.friction * xy;
		var jtOld = this.c2.jtAcc;
		var cjtAcc = jtOld - jt;
		if(cjtAcc > jtMax) cjtAcc = jtMax; else if(cjtAcc < -jtMax) cjtAcc = -jtMax;
		jt = cjtAcc - jtOld;
		this.c2.jtAcc = cjtAcc;
		jx = -this.ny * jt;
		jy = this.nx * jt;
		var t = this.b2.imass;
		this.b2.velx += jx * t;
		this.b2.vely += jy * t;
		this.b2.angvel += this.b2.iinertia * this.rt2b * jt;
		var t = this.b1.imass;
		this.b1.velx -= jx * t;
		this.b1.vely -= jy * t;
		this.b1.angvel -= this.b1.iinertia * this.rt2a * jt;
	} else {
		var dv1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
		var dv1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
		var jn = ((bouncy?this.c1.bounce:0) + (this.nx * dv1x + this.ny * dv1y) + this.surfacey) * this.c1.nMass;
		var jnOld = this.c1.jnAcc;
		var cjnAcc = jnOld - jn;
		if(cjnAcc < 0) cjnAcc = 0;
		jn = cjnAcc - jnOld;
		this.c1.jnAcc = cjnAcc;
		var jx = this.nx * jn;
		var jy = this.ny * jn;
		var t = this.b2.imass;
		this.b2.velx += jx * t;
		this.b2.vely += jy * t;
		this.b2.angvel += this.b2.iinertia * this.rn1b * jn;
		var t = this.b1.imass;
		this.b1.velx -= jx * t;
		this.b1.vely -= jy * t;
		this.b1.angvel -= this.b1.iinertia * this.rn1a * jn;
		dv1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
		dv1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
		var jt = (dv1y * this.nx - dv1x * this.ny + this.surfacex) * this.c1.tMass;
		var jtMax = this.c1.friction * cjnAcc;
		var jtOld = this.c1.jtAcc;
		var cjtAcc = jtOld - jt;
		if(cjtAcc > jtMax) cjtAcc = jtMax; else if(cjtAcc < -jtMax) cjtAcc = -jtMax;
		jt = cjtAcc - jtOld;
		this.c1.jtAcc = cjtAcc;
		jx = -this.ny * jt;
		jy = this.nx * jt;
		var t = this.b2.imass;
		this.b2.velx += jx * t;
		this.b2.vely += jy * t;
		this.b2.angvel += this.b2.iinertia * this.rt1b * jt;
		var t = this.b1.imass;
		this.b1.velx -= jx * t;
		this.b1.vely -= jy * t;
		this.b1.angvel -= this.b1.iinertia * this.rt1a * jt;
		if(this.radius != 0) {
			var dw = this.b2.angvel - this.b1.angvel;
			var jr = dw * this.rMass;
			var jMax = this.rfric * cjnAcc;
			var jOld = this.jrAcc;
			this.jrAcc -= jr;
			if(this.jrAcc > jMax) this.jrAcc = jMax;
			if(this.jrAcc < -jMax) this.jrAcc = -jMax;
			jr = this.jrAcc - jOld;
			this.b2.angvel += jr * this.b2.iinertia;
			this.b1.angvel -= jr * this.b1.iinertia;
		}
	}
}
zpp_nape.dynamics.ZPP_ColArbiter.prototype.applyImpulsePos = function() {
	if(this.ptype == 2) {
		var c = this.c1;
		var dx;
		var dy;
		var r2x;
		var r2y;
		r2x = this.b2.axisy * c.lr2x - this.b2.axisx * c.lr2y;
		r2y = c.lr2x * this.b2.axisx + c.lr2y * this.b2.axisy;
		var t = 1.0;
		r2x += this.b2.posx * t;
		r2y += this.b2.posy * t;
		var r1x;
		var r1y;
		r1x = this.b1.axisy * c.lr1x - this.b1.axisx * c.lr1y;
		r1y = c.lr1x * this.b1.axisx + c.lr1y * this.b1.axisy;
		var t = 1.0;
		r1x += this.b1.posx * t;
		r1y += this.b1.posy * t;
		var dx1;
		var dy1;
		dx1 = r2x - r1x;
		dy1 = r2y - r1y;
		var dl = dx1 * dx1 + dy1 * dy1;
		var r = this.radius - 0.25;
		if(dl < r * r) {
			if(dl < 1e-8 * 1e-8) {
				if(this.b1.smass != 0.0) this.b1.posx += 1e-8 * 10; else this.b2.posx += 1e-8 * 10;
			} else {
				dl = (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(dl);
					return $r;
				}(this));
				var t = 1.0 / dl;
				dx1 *= t;
				dy1 *= t;
				var px = 0.5 * (r1x + r2x);
				var py = 0.5 * (r1y + r2y);
				var pen = dl - r;
				r1x = px - this.b1.posx;
				r1y = py - this.b1.posy;
				r2x = px - this.b2.posx;
				r2y = py - this.b2.posy;
				var rn1 = dy1 * r1x - dx1 * r1y;
				var rn2 = dy1 * r2x - dx1 * r2y;
				var K = this.b2.smass + rn2 * rn2 * this.b2.sinertia + this.b1.smass + rn1 * rn1 * this.b1.sinertia;
				if(K != 0) {
					var jn = -this.c1.biasCoef * pen / K;
					var Jx;
					var Jy;
					var t = jn;
					Jx = dx1 * t;
					Jy = dy1 * t;
					var t = this.b1.imass;
					this.b1.posx -= Jx * t;
					this.b1.posy -= Jy * t;
					this.b1.delta_rot(-rn1 * this.b1.iinertia * jn);
					var t = this.b2.imass;
					this.b2.posx += Jx * t;
					this.b2.posy += Jy * t;
					this.b2.delta_rot(rn2 * this.b2.iinertia * jn);
				}
			}
		}
	} else {
		var gnormx;
		var gnormy;
		var gproj;
		var clip1x;
		var clip1y;
		var clip2x = 0;
		var clip2y = 0;
		if(this.ptype == 0) {
			gnormx = this.b1.axisy * this.lnormx - this.b1.axisx * this.lnormy;
			gnormy = this.lnormx * this.b1.axisx + this.lnormy * this.b1.axisy;
			gproj = this.lproj + (gnormx * this.b1.posx + gnormy * this.b1.posy);
			clip1x = this.b2.axisy * this.c1.lr1x - this.b2.axisx * this.c1.lr1y;
			clip1y = this.c1.lr1x * this.b2.axisx + this.c1.lr1y * this.b2.axisy;
			var t = 1.0;
			clip1x += this.b2.posx * t;
			clip1y += this.b2.posy * t;
			if(this.hc2) {
				clip2x = this.b2.axisy * this.c2.lr1x - this.b2.axisx * this.c2.lr1y;
				clip2y = this.c2.lr1x * this.b2.axisx + this.c2.lr1y * this.b2.axisy;
				var t = 1.0;
				clip2x += this.b2.posx * t;
				clip2y += this.b2.posy * t;
			}
		} else {
			gnormx = this.b2.axisy * this.lnormx - this.b2.axisx * this.lnormy;
			gnormy = this.lnormx * this.b2.axisx + this.lnormy * this.b2.axisy;
			gproj = this.lproj + (gnormx * this.b2.posx + gnormy * this.b2.posy);
			clip1x = this.b1.axisy * this.c1.lr1x - this.b1.axisx * this.c1.lr1y;
			clip1y = this.c1.lr1x * this.b1.axisx + this.c1.lr1y * this.b1.axisy;
			var t = 1.0;
			clip1x += this.b1.posx * t;
			clip1y += this.b1.posy * t;
			if(this.hc2) {
				clip2x = this.b1.axisy * this.c2.lr1x - this.b1.axisx * this.c2.lr1y;
				clip2y = this.c2.lr1x * this.b1.axisx + this.c2.lr1y * this.b1.axisy;
				var t = 1.0;
				clip2x += this.b1.posx * t;
				clip2y += this.b1.posy * t;
			}
		}
		var err1 = clip1x * gnormx + clip1y * gnormy - gproj + this.radius;
		err1 += 0.25;
		var err2 = 0.0;
		if(this.hc2) {
			err2 = clip2x * gnormx + clip2y * gnormy - gproj;
			err2 += 0.25;
		}
		if(err1 < 0 || err2 < 0) {
			if(this.rev) {
				gnormx = -gnormx;
				gnormy = -gnormy;
			}
			var c1r1x;
			var c1r1y;
			c1r1x = clip1x - this.b1.posx;
			c1r1y = clip1y - this.b1.posy;
			var c1r2x;
			var c1r2y;
			c1r2x = clip1x - this.b2.posx;
			c1r2y = clip1y - this.b2.posy;
			var c2r1x = 0;
			var c2r1y = 0;
			var c2r2x = 0;
			var c2r2y = 0;
			if(this.hc2) {
				c2r1x = clip2x - this.b1.posx;
				c2r1y = clip2y - this.b1.posy;
				c2r2x = clip2x - this.b2.posx;
				c2r2y = clip2y - this.b2.posy;
				var rn1a = gnormy * c1r1x - gnormx * c1r1y;
				var rn1b = gnormy * c1r2x - gnormx * c1r2y;
				var rn2a = gnormy * c2r1x - gnormx * c2r1y;
				var rn2b = gnormy * c2r2x - gnormx * c2r2y;
				var mass_sum = this.b1.smass + this.b2.smass;
				this.kMassa = mass_sum + this.b1.sinertia * rn1a * rn1a + this.b2.sinertia * rn1b * rn1b;
				this.kMassb = mass_sum + this.b1.sinertia * rn1a * rn2a + this.b2.sinertia * rn1b * rn2b;
				this.kMassc = mass_sum + this.b1.sinertia * rn2a * rn2a + this.b2.sinertia * rn2b * rn2b;
				var Ka;
				var Kb;
				var Kc;
				Ka = this.kMassa;
				Kb = this.kMassb;
				Kc = this.kMassc;
				var bc = (this.c1.biasCoef + this.c2.biasCoef) * 0.5;
				var bx = err1 * bc;
				var by = err2 * bc;
				do {
					var xx;
					var xy;
					xx = bx;
					xy = by;
					xx = -xx;
					xy = -xy;
					var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
					if(det != det) xx = xy = 0; else if(det < 1e-8) {
						if(this.kMassa * this.kMassa > 1e-8) xx /= this.kMassa; else xx = 0;
						if(this.kMassc * this.kMassc > 1e-8) xy /= this.kMassc; else xy = 0;
					} else {
						det = 1 / det;
						var t = det * (this.kMassc * xx - this.kMassb * xy);
						xy = det * (this.kMassa * xy - this.kMassb * xx);
						xx = t;
					}
					if(xx >= 0 && xy >= 0) {
						var t = (xx + xy) * this.b1.imass;
						this.b1.posx -= gnormx * t;
						this.b1.posy -= gnormy * t;
						this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
						var t = (xx + xy) * this.b2.imass;
						this.b2.posx += gnormx * t;
						this.b2.posy += gnormy * t;
						this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
						break;
					}
					xx = -bx / Ka;
					xy = 0;
					var vn2 = Kb * xx + by;
					if(xx >= 0 && vn2 >= 0) {
						var t = (xx + xy) * this.b1.imass;
						this.b1.posx -= gnormx * t;
						this.b1.posy -= gnormy * t;
						this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
						var t = (xx + xy) * this.b2.imass;
						this.b2.posx += gnormx * t;
						this.b2.posy += gnormy * t;
						this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
						break;
					}
					xx = 0;
					xy = -by / Kc;
					var vn1 = Kb * xy + bx;
					if(xy >= 0 && vn1 >= 0) {
						var t = (xx + xy) * this.b1.imass;
						this.b1.posx -= gnormx * t;
						this.b1.posy -= gnormy * t;
						this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
						var t = (xx + xy) * this.b2.imass;
						this.b2.posx += gnormx * t;
						this.b2.posy += gnormy * t;
						this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
						break;
					}
				} while(false);
			} else {
				var rn1 = gnormy * c1r1x - gnormx * c1r1y;
				var rn2 = gnormy * c1r2x - gnormx * c1r2y;
				var K = this.b2.smass + rn2 * rn2 * this.b2.sinertia + this.b1.smass + rn1 * rn1 * this.b1.sinertia;
				if(K != 0) {
					var jn = -this.c1.biasCoef * err1 / K;
					var Jx;
					var Jy;
					var t = jn;
					Jx = gnormx * t;
					Jy = gnormy * t;
					var t = this.b1.imass;
					this.b1.posx -= Jx * t;
					this.b1.posy -= Jy * t;
					this.b1.delta_rot(-rn1 * this.b1.iinertia * jn);
					var t = this.b2.imass;
					this.b2.posx += Jx * t;
					this.b2.posy += Jy * t;
					this.b2.delta_rot(rn2 * this.b2.iinertia * jn);
				}
			}
		}
	}
}
zpp_nape.dynamics.ZPP_ColArbiter.prototype.__class__ = zpp_nape.dynamics.ZPP_ColArbiter;
jeash.events.MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if( type === $_ ) return;
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	jeash.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
}
jeash.events.MouseEvent.__name__ = ["jeash","events","MouseEvent"];
jeash.events.MouseEvent.__super__ = jeash.events.Event;
for(var k in jeash.events.Event.prototype ) jeash.events.MouseEvent.prototype[k] = jeash.events.Event.prototype[k];
jeash.events.MouseEvent.prototype.altKey = null;
jeash.events.MouseEvent.prototype.buttonDown = null;
jeash.events.MouseEvent.prototype.ctrlKey = null;
jeash.events.MouseEvent.prototype.delta = null;
jeash.events.MouseEvent.prototype.localX = null;
jeash.events.MouseEvent.prototype.localY = null;
jeash.events.MouseEvent.prototype.relatedObject = null;
jeash.events.MouseEvent.prototype.shiftKey = null;
jeash.events.MouseEvent.prototype.stageX = null;
jeash.events.MouseEvent.prototype.stageY = null;
jeash.events.MouseEvent.prototype.commandKey = null;
jeash.events.MouseEvent.prototype.clickCount = null;
jeash.events.MouseEvent.prototype.jeashCreateSimilar = function(type,related,targ) {
	var result = new jeash.events.MouseEvent(type,this.bubbles,this.cancelable,this.localX,this.localY,related == null?this.relatedObject:related,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
	if(targ != null) result.target = targ;
	return result;
}
jeash.events.MouseEvent.prototype.updateAfterEvent = function() {
}
jeash.events.MouseEvent.prototype.__class__ = jeash.events.MouseEvent;
nape.geom.Geom = function() { }
nape.geom.Geom.__name__ = ["nape","geom","Geom"];
nape.geom.Geom.distance = function(shape1,shape2,out1,out2) {
	if(out1 != null && out1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(out2 != null && out2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(out1.zpp_inner.immutable || out2.zpp_inner.immutable) throw "Error: Supplied Vec2 are immutable";
	if(out1.zpp_inner._immutable != null) out1.zpp_inner._immutable();
	if(out2.zpp_inner._immutable != null) out2.zpp_inner._immutable();
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw "Error: Shape must be part of a Body to calculate distances";
	var rev = false;
	if(shape1.zpp_inner.type == 1 && shape2.zpp_inner.type == 0) {
		rev = true;
		var t = shape1;
		shape1 = shape2;
		shape2 = t;
	}
	zpp_nape.geom.ZPP_Geom.validateShape(shape1.zpp_inner);
	zpp_nape.geom.ZPP_Geom.validateShape(shape2.zpp_inner);
	var ret = zpp_nape.geom.ZPP_Distance.distance(out1.zpp_inner,out2.zpp_inner,shape1.zpp_inner,shape2.zpp_inner,null);
	if(rev) {
		var t = (function($this) {
			var $r;
			if(out1 != null && out1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			out1.zpp_inner.validate();
			$r = out1.zpp_inner.x;
			return $r;
		}(this));
		out1.flibset_x((function($this) {
			var $r;
			if(out2 != null && out2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			out2.zpp_inner.validate();
			$r = out2.zpp_inner.x;
			return $r;
		}(this)));
		if(out2 != null && out2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(out2.zpp_inner.immutable) throw "Error: Vec2 is immutable";
		if(out2.zpp_inner._immutable != null) out2.zpp_inner._immutable();
		if((function($this) {
			var $r;
			if(out2 != null && out2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			out2.zpp_inner.validate();
			$r = out2.zpp_inner.x;
			return $r;
		}(this)) != t) {
			if(t != t) throw "Error: Vec2::" + "x" + " cannot be NaN";
			out2.zpp_inner.x = t;
			out2.zpp_inner.invalidate();
		}
		{
			if(out2 != null && out2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			out2.zpp_inner.validate();
			out2.zpp_inner.x;
		}
		var t = (function($this) {
			var $r;
			if(out1 != null && out1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			out1.zpp_inner.validate();
			$r = out1.zpp_inner.y;
			return $r;
		}(this));
		out1.flibset_y((function($this) {
			var $r;
			if(out2 != null && out2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			out2.zpp_inner.validate();
			$r = out2.zpp_inner.y;
			return $r;
		}(this)));
		if(out2 != null && out2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(out2.zpp_inner.immutable) throw "Error: Vec2 is immutable";
		if(out2.zpp_inner._immutable != null) out2.zpp_inner._immutable();
		if((function($this) {
			var $r;
			if(out2 != null && out2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			out2.zpp_inner.validate();
			$r = out2.zpp_inner.y;
			return $r;
		}(this)) != t) {
			if(t != t) throw "Error: Vec2::" + "y" + " cannot be NaN";
			out2.zpp_inner.y = t;
			out2.zpp_inner.invalidate();
		}
		{
			if(out2 != null && out2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			out2.zpp_inner.validate();
			out2.zpp_inner.y;
		}
	}
	return ret;
}
nape.geom.Geom.intersects = function(shape1,shape2) {
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw "Error: Shape must be part of a Body to calculate intersection";
	zpp_nape.geom.ZPP_Geom.validateShape(shape1.zpp_inner);
	zpp_nape.geom.ZPP_Geom.validateShape(shape2.zpp_inner);
	return shape1.zpp_inner.aabb.intersect(shape2.zpp_inner.aabb) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape1.zpp_inner,shape2.zpp_inner);
}
nape.geom.Geom.contains = function(shape1,shape2) {
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw "Error: Shape must be part of a Body to calculate containment";
	zpp_nape.geom.ZPP_Geom.validateShape(shape1.zpp_inner);
	zpp_nape.geom.ZPP_Geom.validateShape(shape2.zpp_inner);
	return zpp_nape.geom.ZPP_Collide.containTest(shape1.zpp_inner,shape2.zpp_inner);
}
nape.geom.Geom.prototype.__class__ = nape.geom.Geom;
jeash.events.EventPhase = function() { }
jeash.events.EventPhase.__name__ = ["jeash","events","EventPhase"];
jeash.events.EventPhase.prototype.__class__ = jeash.events.EventPhase;
if(!nape.util) nape.util = {}
nape.util.Debug = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_Debug.internal) throw "Error: Cannot instantiate Debug derp!";
	this.drawCollisionArbiters = false;
	this.drawFluidArbiters = false;
	this.drawSensorArbiters = false;
	this.drawBodies = true;
	this.drawShapeAngleIndicators = true;
	this.drawBodyDetail = false;
	this.drawShapeDetail = false;
	this.drawConstraints = false;
	this.drawConstraintSprings = true;
	this.drawConstraintErrors = false;
	this.cullingEnabled = false;
}
nape.util.Debug.__name__ = ["nape","util","Debug"];
nape.util.Debug.version = function() {
	return "\"unknown version\"";
}
nape.util.Debug.clearObjectPools = function() {
	while(zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ConstraintIterator.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ConstraintIterator.zpp_pool.next;
		zpp_nape.util.ZNPNode_ConstraintIterator.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ConstraintIterator.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ListenerIterator.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ListenerIterator.zpp_pool.next;
		zpp_nape.util.ZNPNode_ListenerIterator.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ListenerIterator.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_RayResult.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_RayResult.zpp_pool.next;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_RayResultIterator.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_RayResultIterator.zpp_pool.next;
		zpp_nape.util.ZNPNode_RayResultIterator.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_RayResultIterator.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_Vec2Iterator.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_Vec2Iterator.zpp_pool.next;
		zpp_nape.util.ZNPNode_Vec2Iterator.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_Vec2Iterator.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_GeomPolyIterator.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_GeomPolyIterator.zpp_pool.next;
		zpp_nape.util.ZNPNode_GeomPolyIterator.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_GeomPolyIterator.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_BodyIterator.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_BodyIterator.zpp_pool.next;
		zpp_nape.util.ZNPNode_BodyIterator.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_BodyIterator.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_EdgeIterator.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_EdgeIterator.zpp_pool.next;
		zpp_nape.util.ZNPNode_EdgeIterator.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_EdgeIterator.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ShapeIterator.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ShapeIterator.zpp_pool.next;
		zpp_nape.util.ZNPNode_ShapeIterator.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ShapeIterator.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ContactIterator.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ContactIterator.zpp_pool.next;
		zpp_nape.util.ZNPNode_ContactIterator.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ContactIterator.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ArbiterIterator.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ArbiterIterator.zpp_pool.next;
		zpp_nape.util.ZNPNode_ArbiterIterator.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ArbiterIterator.zpp_pool = nxt;
	}
	while(zpp_nape.callbacks.ZPP_Callback.zpp_pool != null) {
		var nxt = zpp_nape.callbacks.ZPP_Callback.zpp_pool.next;
		zpp_nape.callbacks.ZPP_Callback.zpp_pool.next = null;
		zpp_nape.callbacks.ZPP_Callback.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool != null) {
		var nxt = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_Mat23.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_Mat23.zpp_pool.next;
		zpp_nape.geom.ZPP_Mat23.zpp_pool.next = null;
		zpp_nape.geom.ZPP_Mat23.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_AABB.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_AABB.zpp_pool.next;
		zpp_nape.geom.ZPP_AABB.zpp_pool.next = null;
		zpp_nape.geom.ZPP_AABB.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_GeomVert.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_GeomVert.zpp_pool.next;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool.next = null;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool.next;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool.next = null;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool != null) {
		var nxt = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_SimpleVert.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_SimpleVert.zpp_pool.next;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_SimpleSeg.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool.next;
		zpp_nape.geom.ZPP_SimpleSeg.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool != null) {
		var nxt = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool != null) {
		var nxt = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_SimpleEvent.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool.next;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = nxt;
	}
	while(zpp_nape.util.Hashable2_Bool.zpp_pool != null) {
		var nxt = zpp_nape.util.Hashable2_Bool.zpp_pool.next;
		zpp_nape.util.Hashable2_Bool.zpp_pool.next = null;
		zpp_nape.util.Hashable2_Bool.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_PartitionVertex.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool.next;
		zpp_nape.geom.ZPP_PartitionVertex.zpp_pool.next = null;
		zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_SimplifyV.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_SimplifyV.zpp_pool.next;
		zpp_nape.geom.ZPP_SimplifyV.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimplifyV.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_SimplifyP.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_SimplifyP.zpp_pool.next;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_MarchSpan.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_MarchSpan.zpp_pool.next;
		zpp_nape.geom.ZPP_MarchSpan.zpp_pool.next = null;
		zpp_nape.geom.ZPP_MarchSpan.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_MarchPair.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_MarchPair.zpp_pool.next;
		zpp_nape.geom.ZPP_MarchPair.zpp_pool.next = null;
		zpp_nape.geom.ZPP_MarchPair.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_Vec2.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_Vec2.zpp_pool.next;
		zpp_nape.geom.ZPP_Vec2.zpp_pool.next = null;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = nxt;
	}
	while(zpp_nape.space.ZPP_AABBNode.zpp_pool != null) {
		var nxt = zpp_nape.space.ZPP_AABBNode.zpp_pool.next;
		zpp_nape.space.ZPP_AABBNode.zpp_pool.next = null;
		zpp_nape.space.ZPP_AABBNode.zpp_pool = nxt;
	}
	while(zpp_nape.space.ZPP_AABBPair.zpp_pool != null) {
		var nxt = zpp_nape.space.ZPP_AABBPair.zpp_pool.next;
		zpp_nape.space.ZPP_AABBPair.zpp_pool.next = null;
		zpp_nape.space.ZPP_AABBPair.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = nxt;
	}
	while(zpp_nape.space.ZPP_SweepData.zpp_pool != null) {
		var nxt = zpp_nape.space.ZPP_SweepData.zpp_pool.next;
		zpp_nape.space.ZPP_SweepData.zpp_pool.next = null;
		zpp_nape.space.ZPP_SweepData.zpp_pool = nxt;
	}
	while(zpp_nape.phys.ZPP_FluidProperties.zpp_pool != null) {
		var nxt = zpp_nape.phys.ZPP_FluidProperties.zpp_pool.next;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool.next = null;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool = nxt;
	}
	while(zpp_nape.phys.ZPP_Material.zpp_pool != null) {
		var nxt = zpp_nape.phys.ZPP_Material.zpp_pool.next;
		zpp_nape.phys.ZPP_Material.zpp_pool.next = null;
		zpp_nape.phys.ZPP_Material.zpp_pool = nxt;
	}
	while(zpp_nape.space.ZPP_Island.zpp_pool != null) {
		var nxt = zpp_nape.space.ZPP_Island.zpp_pool.next;
		zpp_nape.space.ZPP_Island.zpp_pool.next = null;
		zpp_nape.space.ZPP_Island.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = nxt;
	}
	while(zpp_nape.space.ZPP_Component.zpp_pool != null) {
		var nxt = zpp_nape.space.ZPP_Component.zpp_pool.next;
		zpp_nape.space.ZPP_Component.zpp_pool.next = null;
		zpp_nape.space.ZPP_Component.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = nxt;
	}
	while(zpp_nape.shape.ZPP_Edge.zpp_pool != null) {
		var nxt = zpp_nape.shape.ZPP_Edge.zpp_pool.next;
		zpp_nape.shape.ZPP_Edge.zpp_pool.next = null;
		zpp_nape.shape.ZPP_Edge.zpp_pool = nxt;
	}
	while(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool != null) {
		var nxt = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = nxt;
	}
	while(zpp_nape.dynamics.ZPP_Contact.zpp_pool != null) {
		var nxt = zpp_nape.dynamics.ZPP_Contact.zpp_pool.next;
		zpp_nape.dynamics.ZPP_Contact.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_Contact.zpp_pool = nxt;
	}
	while(zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool != null) {
		var nxt = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = nxt;
	}
	while(zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool != null) {
		var nxt = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = nxt;
	}
	while(zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool != null) {
		var nxt = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZPP_PubPool.poolVec2 != null) {
		var nxt = zpp_nape.util.ZPP_PubPool.poolVec2.zpp_pool;
		zpp_nape.util.ZPP_PubPool.poolVec2.zpp_pool = null;
		zpp_nape.util.ZPP_PubPool.poolVec2 = nxt;
	}
}
nape.util.Debug.createGraphic = function(body) {
	if(body == null) throw "Error: Cannot create debug graphic for null Body";
	var ret = new jeash.display.Shape();
	var graphics = ret.jeashGetGraphics();
	var idc = Std["int"](16777215 * Math.exp(-body.zpp_inner.id / 1500));
	var _r = ((idc & 16711680) >> 16) * 0.7;
	var _g = ((idc & 65280) >> 8) * 0.7;
	var _b = (idc & 255) * 0.7;
	var col = Std["int"](_r) << 16 | Std["int"](_g) << 8 | Std["int"](_b);
	graphics.lineStyle(0.1,col,1);
	var $it0 = body.zpp_inner.wrap_shapes.iterator();
	while( $it0.hasNext() ) {
		var s = $it0.next();
		if(s.zpp_inner.type == 0) {
			var c = s.zpp_inner.type == 0?s.zpp_inner.circle.outer_zn:null;
			graphics.drawCircle(((function($this) {
				var $r;
				if(c.zpp_inner.wrap_localCOM == null) {
					if(c.zpp_inner.type == 0) c.zpp_inner.circle.setupLocalCOM(); else c.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).flibget_x(),((function($this) {
				var $r;
				if(c.zpp_inner.wrap_localCOM == null) {
					if(c.zpp_inner.type == 0) c.zpp_inner.circle.setupLocalCOM(); else c.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).flibget_y(),c.zpp_inner_zn.radius);
		} else {
			graphics.moveTo(((function($this) {
				var $r;
				if(s.zpp_inner.wrap_localCOM == null) {
					if(s.zpp_inner.type == 0) s.zpp_inner.circle.setupLocalCOM(); else s.zpp_inner.polygon.setupLocalCOM();
				}
				$r = s.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).flibget_x(),((function($this) {
				var $r;
				if(s.zpp_inner.wrap_localCOM == null) {
					if(s.zpp_inner.type == 0) s.zpp_inner.circle.setupLocalCOM(); else s.zpp_inner.polygon.setupLocalCOM();
				}
				$r = s.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).flibget_y());
			var _g2 = 0, _g1 = (s.zpp_inner.type == 1?s.zpp_inner.polygon.outer_zn:null).flibget_worldVerts().zpp_gl();
			while(_g2 < _g1) {
				var i = _g2++;
				var p = (s.zpp_inner.type == 1?s.zpp_inner.polygon.outer_zn:null).flibget_localVerts().at(i);
				graphics.lineTo((function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.y;
					return $r;
				}(this)));
			}
			var p = (s.zpp_inner.type == 1?s.zpp_inner.polygon.outer_zn:null).flibget_localVerts().at(0);
			graphics.lineTo((function($this) {
				var $r;
				if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				p.zpp_inner.validate();
				$r = p.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				p.zpp_inner.validate();
				$r = p.zpp_inner.y;
				return $r;
			}(this)));
		}
		if(s.zpp_inner.type == 0) {
			var c = s.zpp_inner.type == 0?s.zpp_inner.circle.outer_zn:null;
			graphics.moveTo(((function($this) {
				var $r;
				if(c.zpp_inner.wrap_localCOM == null) {
					if(c.zpp_inner.type == 0) c.zpp_inner.circle.setupLocalCOM(); else c.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).flibget_x() + c.zpp_inner_zn.radius * 0.3,((function($this) {
				var $r;
				if(c.zpp_inner.wrap_localCOM == null) {
					if(c.zpp_inner.type == 0) c.zpp_inner.circle.setupLocalCOM(); else c.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).flibget_y());
			graphics.lineTo(((function($this) {
				var $r;
				if(c.zpp_inner.wrap_localCOM == null) {
					if(c.zpp_inner.type == 0) c.zpp_inner.circle.setupLocalCOM(); else c.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).flibget_x() + c.zpp_inner_zn.radius,((function($this) {
				var $r;
				if(c.zpp_inner.wrap_localCOM == null) {
					if(c.zpp_inner.type == 0) c.zpp_inner.circle.setupLocalCOM(); else c.zpp_inner.polygon.setupLocalCOM();
				}
				$r = c.zpp_inner.wrap_localCOM;
				return $r;
			}(this))).flibget_y());
		}
	}
	return ret;
}
nape.util.Debug.prototype.zpp_inner = null;
nape.util.Debug.prototype.drawCollisionArbiters = null;
nape.util.Debug.prototype.drawFluidArbiters = null;
nape.util.Debug.prototype.drawSensorArbiters = null;
nape.util.Debug.prototype.drawBodies = null;
nape.util.Debug.prototype.drawBodyDetail = null;
nape.util.Debug.prototype.drawShapeDetail = null;
nape.util.Debug.prototype.drawShapeAngleIndicators = null;
nape.util.Debug.prototype.drawConstraints = null;
nape.util.Debug.prototype.drawConstraintSprings = null;
nape.util.Debug.prototype.drawConstraintErrors = null;
nape.util.Debug.prototype.bgColor = null;
nape.util.Debug.prototype.flibget_bgColor = function() {
	return this.zpp_inner.bg_col;
}
nape.util.Debug.prototype.flibset_bgColor = function(bgColor) {
	this.zpp_inner.d_shape.setbg(bgColor);
	return this.zpp_inner.bg_col;
}
nape.util.Debug.prototype.display = null;
nape.util.Debug.prototype.flibget_display = function() {
	return this.zpp_inner.d_shape.shape;
}
nape.util.Debug.prototype.cullingEnabled = null;
nape.util.Debug.prototype.transform = null;
nape.util.Debug.prototype.flibget_transform = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.xform == null) $this.zpp_inner.setform();
		$r = $this.zpp_inner.xform.outer;
		return $r;
	}(this));
}
nape.util.Debug.prototype.flibset_transform = function(transform) {
	if(transform == null) throw "Error: Cannot set Debug::transform to null";
	((function($this) {
		var $r;
		if($this.zpp_inner.xform == null) $this.zpp_inner.setform();
		$r = $this.zpp_inner.xform.outer;
		return $r;
	}(this))).set(transform);
	return (function($this) {
		var $r;
		if($this.zpp_inner.xform == null) $this.zpp_inner.setform();
		$r = $this.zpp_inner.xform.outer;
		return $r;
	}(this));
}
nape.util.Debug.prototype.clear = function() {
}
nape.util.Debug.prototype.flush = function() {
}
nape.util.Debug.prototype.draw = function(object) {
}
nape.util.Debug.prototype.drawLine = function(start,end,colour) {
}
nape.util.Debug.prototype.drawCircle = function(position,radius,colour) {
}
nape.util.Debug.prototype.drawAABB = function(aabb,colour) {
}
nape.util.Debug.prototype.drawFilledTriangle = function(p0,p1,p2,colour) {
}
nape.util.Debug.prototype.drawFilledCircle = function(position,radius,colour) {
}
nape.util.Debug.prototype.drawPolygon = function(polygon,colour) {
}
nape.util.Debug.prototype.drawFilledPolygon = function(polygon,colour) {
}
nape.util.Debug.prototype.__class__ = nape.util.Debug;
nape.util.ShapeDebug = function(width,height,bgColor) {
	if( width === $_ ) return;
	if(bgColor == null) bgColor = 3355443;
	if(width <= 0) throw "Error: Debug width must be > 0";
	if(height <= 0) throw "Error: Debug height must be > 0";
	zpp_nape.util.ZPP_Debug.internal = true;
	nape.util.Debug.call(this);
	zpp_nape.util.ZPP_Debug.internal = false;
	this.zpp_inner_zn = new zpp_nape.util.ZPP_ShapeDebug(width,height);
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner.d_shape.setbg(bgColor);
	this.zpp_inner.bg_col;
}
nape.util.ShapeDebug.__name__ = ["nape","util","ShapeDebug"];
nape.util.ShapeDebug.__super__ = nape.util.Debug;
for(var k in nape.util.Debug.prototype ) nape.util.ShapeDebug.prototype[k] = nape.util.Debug.prototype[k];
nape.util.ShapeDebug.prototype.zpp_inner_zn = null;
nape.util.ShapeDebug.prototype.clear = function() {
	this.zpp_inner_zn.graphics.clear();
}
nape.util.ShapeDebug.prototype.drawLine = function(start,end,colour) {
	if(this.zpp_inner.xform != null && !this.zpp_inner.xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";
	if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(start == null) throw "Error: drawLine::start cannot be null";
	if(end == null) throw "Error: drawLine::end cannot be null";
	var g = this.zpp_inner_zn.graphics;
	g.lineStyle(0.1,colour & 16777215,1);
	if(this.zpp_inner.xnull) {
		g.moveTo((function($this) {
			var $r;
			if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			start.zpp_inner.validate();
			$r = start.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			start.zpp_inner.validate();
			$r = start.zpp_inner.y;
			return $r;
		}(this)));
		g.lineTo((function($this) {
			var $r;
			if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			end.zpp_inner.validate();
			$r = end.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			end.zpp_inner.validate();
			$r = end.zpp_inner.y;
			return $r;
		}(this)));
	} else {
		var v = this.zpp_inner.xform.outer.transform(start,null,null);
		g.moveTo((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
		v = this.zpp_inner.xform.outer.transform(end,null,null);
		g.lineTo((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
	}
	if(start.zpp_inner.weak) {
		start.dispose();
		true;
	} else false;
	if(end.zpp_inner.weak) {
		end.dispose();
		true;
	} else false;
}
nape.util.ShapeDebug.prototype.drawCircle = function(position,radius,colour) {
	if(this.zpp_inner.xform != null && !this.zpp_inner.xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";
	if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(position == null) throw "Error: drawCircle::position cannot be null";
	if(radius != radius || radius < 0) throw "Error: drawCircle::radius must be >=0";
	var g = this.zpp_inner_zn.graphics;
	g.lineStyle(0.1,colour & 16777215,1);
	if(this.zpp_inner.xnull) g.drawCircle((function($this) {
		var $r;
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		position.zpp_inner.validate();
		$r = position.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		position.zpp_inner.validate();
		$r = position.zpp_inner.y;
		return $r;
	}(this)),radius); else {
		var v = this.zpp_inner.xform.outer.transform(position,null,null);
		g.drawCircle((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)),radius * this.zpp_inner.xdet);
		v.dispose();
	}
	if(position.zpp_inner.weak) {
		position.dispose();
		true;
	} else false;
}
nape.util.ShapeDebug.prototype.drawAABB = function(aabb,colour) {
	if(this.zpp_inner.xform != null && !this.zpp_inner.xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";
	if(aabb == null) throw "Error: drawAABB::aabb cannot be null";
	var g = this.zpp_inner_zn.graphics;
	g.lineStyle(0.1,colour & 16777215,1);
	if(this.zpp_inner.xnull) g.drawRect((function($this) {
		var $r;
		aabb.zpp_inner.validate();
		$r = aabb.zpp_inner.minx;
		return $r;
	}(this)),(function($this) {
		var $r;
		aabb.zpp_inner.validate();
		$r = aabb.zpp_inner.miny;
		return $r;
	}(this)),(function($this) {
		var $r;
		aabb.zpp_inner.validate();
		$r = aabb.zpp_inner.width();
		return $r;
	}(this)),(function($this) {
		var $r;
		aabb.zpp_inner.validate();
		$r = aabb.zpp_inner.height();
		return $r;
	}(this))); else {
		var v = this.zpp_inner.xform.outer.transform(aabb.zpp_inner.get_min(),null,null);
		var w = nape.geom.Vec2.get((function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.width();
			return $r;
		}(this)),0,null);
		var w2 = this.zpp_inner.xform.outer.transform(w,true,null);
		var h = nape.geom.Vec2.get((function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.height();
			return $r;
		}(this)),0,null);
		var h2 = this.zpp_inner.xform.outer.transform(h,true,null);
		g.moveTo((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		g.lineTo((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(w2 != null && w2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			w2.zpp_inner.validate();
			$r = w2.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(w2 != null && w2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			w2.zpp_inner.validate();
			$r = w2.zpp_inner.y;
			return $r;
		}(this)));
		g.lineTo((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(w2 != null && w2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			w2.zpp_inner.validate();
			$r = w2.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(h2 != null && h2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			h2.zpp_inner.validate();
			$r = h2.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(w2 != null && w2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			w2.zpp_inner.validate();
			$r = w2.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(h2 != null && h2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			h2.zpp_inner.validate();
			$r = h2.zpp_inner.y;
			return $r;
		}(this)));
		g.lineTo((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(h2 != null && h2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			h2.zpp_inner.validate();
			$r = h2.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(h2 != null && h2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			h2.zpp_inner.validate();
			$r = h2.zpp_inner.y;
			return $r;
		}(this)));
		g.lineTo((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
		w.dispose();
		w2.dispose();
		h.dispose();
		h2.dispose();
	}
}
nape.util.ShapeDebug.prototype.drawFilledTriangle = function(p0,p1,p2,colour) {
	if(this.zpp_inner.xform != null && !this.zpp_inner.xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";
	if(p0 != null && p0.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(p1 != null && p1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(p2 != null && p2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(p0 == null || p1 == null || p2 == null) throw "Error: drawFilledTriangle can't use null points";
	var g = this.zpp_inner_zn.graphics;
	g.lineStyle(0,0,0);
	g.beginFill(colour & 16777215,1);
	if(this.zpp_inner.xnull) {
		g.moveTo((function($this) {
			var $r;
			if(p0 != null && p0.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			p0.zpp_inner.validate();
			$r = p0.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(p0 != null && p0.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			p0.zpp_inner.validate();
			$r = p0.zpp_inner.y;
			return $r;
		}(this)));
		g.lineTo((function($this) {
			var $r;
			if(p1 != null && p1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			p1.zpp_inner.validate();
			$r = p1.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(p1 != null && p1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			p1.zpp_inner.validate();
			$r = p1.zpp_inner.y;
			return $r;
		}(this)));
		g.lineTo((function($this) {
			var $r;
			if(p2 != null && p2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			p2.zpp_inner.validate();
			$r = p2.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(p2 != null && p2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			p2.zpp_inner.validate();
			$r = p2.zpp_inner.y;
			return $r;
		}(this)));
	} else {
		var v = this.zpp_inner.xform.outer.transform(p0,null,null);
		g.moveTo((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
		v = this.zpp_inner.xform.outer.transform(p1,null,null);
		g.lineTo((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
		v = this.zpp_inner.xform.outer.transform(p2,null,null);
		g.lineTo((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
	}
	g.endFill();
	if(p0.zpp_inner.weak) {
		p0.dispose();
		true;
	} else false;
	if(p1.zpp_inner.weak) {
		p1.dispose();
		true;
	} else false;
	if(p2.zpp_inner.weak) {
		p2.dispose();
		true;
	} else false;
}
nape.util.ShapeDebug.prototype.drawFilledCircle = function(position,radius,colour) {
	if(this.zpp_inner.xform != null && !this.zpp_inner.xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";
	if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(position == null) throw "Error: drawFilledCircle::position cannot be null";
	if(radius != radius || radius < 0) throw "Error: drawFilledCircle::radius must be >=0";
	var g = this.zpp_inner_zn.graphics;
	g.lineStyle(0,0,0);
	g.beginFill(colour & 16777215,1);
	if(this.zpp_inner.xnull) g.drawCircle((function($this) {
		var $r;
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		position.zpp_inner.validate();
		$r = position.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		position.zpp_inner.validate();
		$r = position.zpp_inner.y;
		return $r;
	}(this)),radius); else {
		var v = this.zpp_inner.xform.outer.transform(position,null,null);
		g.drawCircle((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)),radius * this.zpp_inner.xdet);
		v.dispose();
	}
	g.endFill();
	if(position.zpp_inner.weak) {
		position.dispose();
		true;
	} else false;
}
nape.util.ShapeDebug.prototype.drawPolygon = function(polygon,colour) {
	if(this.zpp_inner.xform != null && !this.zpp_inner.xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";
	if(polygon == null) throw "Error: Cannot draw null polygon";
	var g = this.zpp_inner_zn.graphics;
	g.lineStyle(0.1,colour & 16777215,1.0);
	var fst = Std["is"](polygon,Array)?(function($this) {
		var $r;
		var lv = polygon;
		if(lv.length == 0) throw "Error: Array<Vec2> is empty";
		if(lv[0] == null) throw "Error: Array<Vec2> contains null objects";
		if(!Std["is"](lv[0],nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
		var ret = lv[0];
		if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$r = (function($this) {
			var $r;
			if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = nape.geom.Vec2.get((function($this) {
				var $r;
				if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				ret.zpp_inner.validate();
				$r = ret.zpp_inner.x;
				return $r;
			}($this)),(function($this) {
				var $r;
				if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				ret.zpp_inner.validate();
				$r = ret.zpp_inner.y;
				return $r;
			}($this)),false);
			return $r;
		}($this));
		return $r;
	}(this)):Std["is"](polygon,nape.geom.Vec2List)?(function($this) {
		var $r;
		var lv = polygon;
		if(lv.empty()) throw "Error: Vec2List is empty";
		var v = lv.at(0);
		if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$r = (function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = nape.geom.Vec2.get((function($this) {
				var $r;
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}($this)),(function($this) {
				var $r;
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}($this)),false);
			return $r;
		}($this));
		return $r;
	}(this)):Std["is"](polygon,nape.geom.GeomPoly)?(function($this) {
		var $r;
		var lv = polygon;
		if(lv.zpp_inner.vertices == null) throw "Error: GeomPoly is empty";
		var v = lv.zpp_inner.vertices;
		$r = nape.geom.Vec2.get(v.x,v.y,null);
		return $r;
	}(this)):(function($this) {
		var $r;
		throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash9+ flash.Vector<Vec2>";
		return $r;
	}(this));
	var fsttime = true;
	if(this.zpp_inner.xnull) {
		if(Std["is"](polygon,Array)) {
			var lv = polygon;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) throw "Error: Array<Vec2> contains null objects";
				if(!Std["is"](vite,nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
				var p = vite;
				if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				if(fsttime) g.moveTo((function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.y;
					return $r;
				}(this))); else g.lineTo((function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.y;
					return $r;
				}(this)));
				fsttime = false;
			}
		} else if(Std["is"](polygon,nape.geom.Vec2List)) {
			var lv = polygon;
			var $it0 = lv.iterator();
			while( $it0.hasNext() ) {
				var p = $it0.next();
				if(p == null) throw "Error: Vec2List contains null objects";
				if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				if(fsttime) g.moveTo((function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.y;
					return $r;
				}(this))); else g.lineTo((function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.y;
					return $r;
				}(this)));
				fsttime = false;
			}
		} else if(Std["is"](polygon,nape.geom.GeomPoly)) {
			var lv = polygon;
			var verts = lv.zpp_inner.vertices;
			if(verts != null) {
				var vite = verts;
				do {
					var p = nape.geom.Vec2.get(vite.x,vite.y,null);
					vite = vite.next;
					if(fsttime) g.moveTo((function($this) {
						var $r;
						if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						p.zpp_inner.validate();
						$r = p.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						p.zpp_inner.validate();
						$r = p.zpp_inner.y;
						return $r;
					}(this))); else g.lineTo((function($this) {
						var $r;
						if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						p.zpp_inner.validate();
						$r = p.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						p.zpp_inner.validate();
						$r = p.zpp_inner.y;
						return $r;
					}(this)));
					fsttime = false;
					p.dispose();
				} while(vite != verts);
			}
		} else throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash9+ flash.Vector<Vec2>";
		g.lineTo((function($this) {
			var $r;
			if(fst != null && fst.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			fst.zpp_inner.validate();
			$r = fst.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(fst != null && fst.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			fst.zpp_inner.validate();
			$r = fst.zpp_inner.y;
			return $r;
		}(this)));
	} else {
		if(Std["is"](polygon,Array)) {
			var lv = polygon;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) throw "Error: Array<Vec2> contains null objects";
				if(!Std["is"](vite,nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
				var p = vite;
				if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				var v = this.zpp_inner.xform.outer.transform(p,null,null);
				if(fsttime) g.moveTo((function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this))); else g.lineTo((function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this)));
				fsttime = false;
				v.dispose();
			}
		} else if(Std["is"](polygon,nape.geom.Vec2List)) {
			var lv = polygon;
			var $it1 = lv.iterator();
			while( $it1.hasNext() ) {
				var p = $it1.next();
				if(p == null) throw "Error: Vec2List contains null objects";
				if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				var v = this.zpp_inner.xform.outer.transform(p,null,null);
				if(fsttime) g.moveTo((function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this))); else g.lineTo((function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this)));
				fsttime = false;
				v.dispose();
			}
		} else if(Std["is"](polygon,nape.geom.GeomPoly)) {
			var lv = polygon;
			var verts = lv.zpp_inner.vertices;
			if(verts != null) {
				var vite = verts;
				do {
					var p = nape.geom.Vec2.get(vite.x,vite.y,null);
					vite = vite.next;
					var v = this.zpp_inner.xform.outer.transform(p,null,null);
					if(fsttime) g.moveTo((function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.y;
						return $r;
					}(this))); else g.lineTo((function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.y;
						return $r;
					}(this)));
					fsttime = false;
					v.dispose();
					p.dispose();
				} while(vite != verts);
			}
		} else throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash9+ flash.Vector<Vec2>";
		var v = this.zpp_inner.xform.outer.transform(fst,null,null);
		g.lineTo((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
	}
	fst.dispose();
	if(Std["is"](polygon,Array)) {
		var lv = polygon;
		var i = 0;
		while(i < lv.length) {
			var cur = lv[i];
			if(cur.zpp_inner.weak?(function($this) {
				var $r;
				cur.dispose();
				$r = true;
				return $r;
			}(this)):false) {
				lv.splice(i,1);
				continue;
			}
			i++;
		}
	} else if(Std["is"](polygon,nape.geom.Vec2List)) {
		var lv = polygon;
		var ins = lv.zpp_inner.inner;
		var pre = null;
		var cur = ins.head;
		while(cur != null) {
			var x = cur.elt;
			if(x.outer.zpp_inner.weak) {
				cur = ins.erase(pre);
				if(x.outer.zpp_inner.weak) {
					x.outer.dispose();
					true;
				} else false;
			} else {
				pre = cur;
				cur = cur.next;
			}
		}
	}
}
nape.util.ShapeDebug.prototype.drawFilledPolygon = function(polygon,colour) {
	if(this.zpp_inner.xform != null && !this.zpp_inner.xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";
	if(polygon == null) throw "Error: Cannot draw null polygon!";
	var g = this.zpp_inner_zn.graphics;
	g.beginFill(colour & 16777215,1.0);
	g.lineStyle(0,0,0);
	var fst = Std["is"](polygon,Array)?(function($this) {
		var $r;
		var lv = polygon;
		if(lv.length == 0) throw "Error: Array<Vec2> is empty";
		if(lv[0] == null) throw "Error: Array<Vec2> contains null objects";
		if(!Std["is"](lv[0],nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
		var ret = lv[0];
		if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$r = (function($this) {
			var $r;
			if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = nape.geom.Vec2.get((function($this) {
				var $r;
				if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				ret.zpp_inner.validate();
				$r = ret.zpp_inner.x;
				return $r;
			}($this)),(function($this) {
				var $r;
				if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				ret.zpp_inner.validate();
				$r = ret.zpp_inner.y;
				return $r;
			}($this)),false);
			return $r;
		}($this));
		return $r;
	}(this)):Std["is"](polygon,nape.geom.Vec2List)?(function($this) {
		var $r;
		var lv = polygon;
		if(lv.empty()) throw "Error: Vec2List is empty";
		var v = lv.at(0);
		if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$r = (function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = nape.geom.Vec2.get((function($this) {
				var $r;
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				v.zpp_inner.validate();
				$r = v.zpp_inner.x;
				return $r;
			}($this)),(function($this) {
				var $r;
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				v.zpp_inner.validate();
				$r = v.zpp_inner.y;
				return $r;
			}($this)),false);
			return $r;
		}($this));
		return $r;
	}(this)):Std["is"](polygon,nape.geom.GeomPoly)?(function($this) {
		var $r;
		var lv = polygon;
		if(lv.zpp_inner.vertices == null) throw "Error: GeomPoly is empty";
		var v = lv.zpp_inner.vertices;
		$r = nape.geom.Vec2.get(v.x,v.y,null);
		return $r;
	}(this)):(function($this) {
		var $r;
		throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash9+ flash.Vector<Vec2>";
		return $r;
	}(this));
	var fsttime = true;
	if(this.zpp_inner.xnull) {
		if(Std["is"](polygon,Array)) {
			var lv = polygon;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) throw "Error: Array<Vec2> contains null objects";
				if(!Std["is"](vite,nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
				var p = vite;
				if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				if(fsttime) g.moveTo((function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.y;
					return $r;
				}(this))); else g.lineTo((function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.y;
					return $r;
				}(this)));
				fsttime = false;
			}
		} else if(Std["is"](polygon,nape.geom.Vec2List)) {
			var lv = polygon;
			var $it0 = lv.iterator();
			while( $it0.hasNext() ) {
				var p = $it0.next();
				if(p == null) throw "Error: Vec2List contains null objects";
				if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				if(fsttime) g.moveTo((function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.y;
					return $r;
				}(this))); else g.lineTo((function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					p.zpp_inner.validate();
					$r = p.zpp_inner.y;
					return $r;
				}(this)));
				fsttime = false;
			}
		} else if(Std["is"](polygon,nape.geom.GeomPoly)) {
			var lv = polygon;
			var verts = lv.zpp_inner.vertices;
			if(verts != null) {
				var vite = verts;
				do {
					var p = nape.geom.Vec2.get(vite.x,vite.y,null);
					vite = vite.next;
					if(fsttime) g.moveTo((function($this) {
						var $r;
						if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						p.zpp_inner.validate();
						$r = p.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						p.zpp_inner.validate();
						$r = p.zpp_inner.y;
						return $r;
					}(this))); else g.lineTo((function($this) {
						var $r;
						if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						p.zpp_inner.validate();
						$r = p.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						p.zpp_inner.validate();
						$r = p.zpp_inner.y;
						return $r;
					}(this)));
					fsttime = false;
					p.dispose();
				} while(vite != verts);
			}
		} else throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash9+ flash.Vector<Vec2>";
		g.lineTo((function($this) {
			var $r;
			if(fst != null && fst.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			fst.zpp_inner.validate();
			$r = fst.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(fst != null && fst.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			fst.zpp_inner.validate();
			$r = fst.zpp_inner.y;
			return $r;
		}(this)));
	} else {
		if(Std["is"](polygon,Array)) {
			var lv = polygon;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) throw "Error: Array<Vec2> contains null objects";
				if(!Std["is"](vite,nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
				var p = vite;
				if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				var v = this.zpp_inner.xform.outer.transform(p,null,null);
				if(fsttime) g.moveTo((function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this))); else g.lineTo((function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this)));
				fsttime = false;
				v.dispose();
			}
		} else if(Std["is"](polygon,nape.geom.Vec2List)) {
			var lv = polygon;
			var $it1 = lv.iterator();
			while( $it1.hasNext() ) {
				var p = $it1.next();
				if(p == null) throw "Error: Vec2List contains null objects";
				if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				var v = this.zpp_inner.xform.outer.transform(p,null,null);
				if(fsttime) g.moveTo((function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this))); else g.lineTo((function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.x;
					return $r;
				}(this)),(function($this) {
					var $r;
					if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					v.zpp_inner.validate();
					$r = v.zpp_inner.y;
					return $r;
				}(this)));
				fsttime = false;
				v.dispose();
			}
		} else if(Std["is"](polygon,nape.geom.GeomPoly)) {
			var lv = polygon;
			var verts = lv.zpp_inner.vertices;
			if(verts != null) {
				var vite = verts;
				do {
					var p = nape.geom.Vec2.get(vite.x,vite.y,null);
					vite = vite.next;
					var v = this.zpp_inner.xform.outer.transform(p,null,null);
					if(fsttime) g.moveTo((function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.y;
						return $r;
					}(this))); else g.lineTo((function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.y;
						return $r;
					}(this)));
					fsttime = false;
					v.dispose();
					p.dispose();
				} while(vite != verts);
			}
		} else throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash9+ flash.Vector<Vec2>";
		var v = this.zpp_inner.xform.outer.transform(fst,null,null);
		g.lineTo((function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			v.zpp_inner.validate();
			$r = v.zpp_inner.y;
			return $r;
		}(this)));
		v.dispose();
	}
	g.endFill();
	fst.dispose();
	if(Std["is"](polygon,Array)) {
		var lv = polygon;
		var i = 0;
		while(i < lv.length) {
			var cur = lv[i];
			if(cur.zpp_inner.weak?(function($this) {
				var $r;
				cur.dispose();
				$r = true;
				return $r;
			}(this)):false) {
				lv.splice(i,1);
				continue;
			}
			i++;
		}
	} else if(Std["is"](polygon,nape.geom.Vec2List)) {
		var lv = polygon;
		var ins = lv.zpp_inner.inner;
		var pre = null;
		var cur = ins.head;
		while(cur != null) {
			var x = cur.elt;
			if(x.outer.zpp_inner.weak) {
				cur = ins.erase(pre);
				if(x.outer.zpp_inner.weak) {
					x.outer.dispose();
					true;
				} else false;
			} else {
				pre = cur;
				cur = cur.next;
			}
		}
	}
}
nape.util.ShapeDebug.prototype.draw = function(object) {
	if(this.zpp_inner.xform != null && !this.zpp_inner.xform.outer.equiorthogonal()) throw "Error: Debug draw can only operate with an equiorthogonal transform!";
	if(this.zpp_inner.xnull) {
		if(Std["is"](object,nape.space.Space)) this.zpp_inner_zn.draw_space(((function($this) {
			var $r;
			var $t = object;
			if(Std["is"]($t,nape.space.Space)) $t; else throw "Class cast error";
			$r = $t;
			return $r;
		}(this))).zpp_inner,null,1.0,true); else if(Std["is"](object,nape.phys.Body)) this.zpp_inner_zn.draw_body(((function($this) {
			var $r;
			var $t = object;
			if(Std["is"]($t,nape.phys.Body)) $t; else throw "Class cast error";
			$r = $t;
			return $r;
		}(this))).zpp_inner,null,1.0,true); else if(Std["is"](object,nape.shape.Shape)) this.zpp_inner_zn.draw_shape(((function($this) {
			var $r;
			var $t = object;
			if(Std["is"]($t,nape.shape.Shape)) $t; else throw "Class cast error";
			$r = $t;
			return $r;
		}(this))).zpp_inner,null,1.0,true); else if(Std["is"](object,nape.constraint.Constraint)) this.zpp_inner_zn.draw_con(((function($this) {
			var $r;
			var $t = object;
			if(Std["is"]($t,nape.constraint.Constraint)) $t; else throw "Class cast error";
			$r = $t;
			return $r;
		}(this))).zpp_inner,null,1.0,true); else throw "Error: Unhandled object type for Debug draw";
	} else if(Std["is"](object,nape.space.Space)) this.zpp_inner_zn.draw_space(((function($this) {
		var $r;
		var $t = object;
		if(Std["is"]($t,nape.space.Space)) $t; else throw "Class cast error";
		$r = $t;
		return $r;
	}(this))).zpp_inner,this.zpp_inner.xform,this.zpp_inner.xdet,false); else if(Std["is"](object,nape.phys.Body)) this.zpp_inner_zn.draw_body(((function($this) {
		var $r;
		var $t = object;
		if(Std["is"]($t,nape.phys.Body)) $t; else throw "Class cast error";
		$r = $t;
		return $r;
	}(this))).zpp_inner,this.zpp_inner.xform,this.zpp_inner.xdet,false); else if(Std["is"](object,nape.shape.Shape)) this.zpp_inner_zn.draw_shape(((function($this) {
		var $r;
		var $t = object;
		if(Std["is"]($t,nape.shape.Shape)) $t; else throw "Class cast error";
		$r = $t;
		return $r;
	}(this))).zpp_inner,this.zpp_inner.xform,this.zpp_inner.xdet,false); else if(Std["is"](object,nape.constraint.Constraint)) this.zpp_inner_zn.draw_con(((function($this) {
		var $r;
		var $t = object;
		if(Std["is"]($t,nape.constraint.Constraint)) $t; else throw "Class cast error";
		$r = $t;
		return $r;
	}(this))).zpp_inner,this.zpp_inner.xform,this.zpp_inner.xdet,false); else throw "Error: Unhandled object type for Debug draw";
}
nape.util.ShapeDebug.prototype.__class__ = nape.util.ShapeDebug;
jeash.display.SpreadMethod = { __ename__ : ["jeash","display","SpreadMethod"], __constructs__ : ["REPEAT","REFLECT","PAD"] }
jeash.display.SpreadMethod.REPEAT = ["REPEAT",0];
jeash.display.SpreadMethod.REPEAT.toString = $estr;
jeash.display.SpreadMethod.REPEAT.__enum__ = jeash.display.SpreadMethod;
jeash.display.SpreadMethod.REFLECT = ["REFLECT",1];
jeash.display.SpreadMethod.REFLECT.toString = $estr;
jeash.display.SpreadMethod.REFLECT.__enum__ = jeash.display.SpreadMethod;
jeash.display.SpreadMethod.PAD = ["PAD",2];
jeash.display.SpreadMethod.PAD.toString = $estr;
jeash.display.SpreadMethod.PAD.__enum__ = jeash.display.SpreadMethod;
nape.geom.MarchingSquares = function() { }
nape.geom.MarchingSquares.__name__ = ["nape","geom","MarchingSquares"];
nape.geom.MarchingSquares.run = function(iso,bounds,cellsize,quality,subgrid,combine) {
	if(combine == null) combine = true;
	if(quality == null) quality = 2;
	if(iso == null) throw "Error: MarchingSquares requires an iso function to define the iso-surface";
	if(bounds == null) throw "Error: MarchingSquares requires an AABB to define the bounds of the surface extraction";
	if(cellsize != null && cellsize.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if((function($this) {
		var $r;
		if(cellsize != null && cellsize.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cellsize.zpp_inner.validate();
		$r = cellsize.zpp_inner.x;
		return $r;
	}(this)) <= 0 || (function($this) {
		var $r;
		if(cellsize != null && cellsize.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cellsize.zpp_inner.validate();
		$r = cellsize.zpp_inner.y;
		return $r;
	}(this)) <= 0) throw "Error: MarchingSquares cannot operate with non-postitive cell dimensions";
	if(quality < 0) throw "Error: MarchingSquares cannot use a negative quality value";
	if(subgrid != null) {
		if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	}
	if(subgrid != null && ((function($this) {
		var $r;
		if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		subgrid.zpp_inner.validate();
		$r = subgrid.zpp_inner.x;
		return $r;
	}(this)) <= 0 || (function($this) {
		var $r;
		if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		subgrid.zpp_inner.validate();
		$r = subgrid.zpp_inner.y;
		return $r;
	}(this)) <= 0)) throw "Error: MarchingSquares cannot operate with non-positive subgrid dimensions";
	var ret = new nape.geom.GeomPolyList();
	if(subgrid == null) zpp_nape.geom.ZPP_MarchingSquares.run(iso,(function($this) {
		var $r;
		bounds.zpp_inner.validate();
		$r = bounds.zpp_inner.minx;
		return $r;
	}(this)),(function($this) {
		var $r;
		bounds.zpp_inner.validate();
		$r = bounds.zpp_inner.miny;
		return $r;
	}(this)),bounds.zpp_inner.get_max().flibget_x(),bounds.zpp_inner.get_max().flibget_y(),cellsize,quality,combine,ret); else {
		var xp = (function($this) {
			var $r;
			bounds.zpp_inner.validate();
			$r = bounds.zpp_inner.width();
			return $r;
		}(this)) / (function($this) {
			var $r;
			if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			subgrid.zpp_inner.validate();
			$r = subgrid.zpp_inner.x;
			return $r;
		}(this));
		var xn = Std["int"](xp);
		var yp = (function($this) {
			var $r;
			bounds.zpp_inner.validate();
			$r = bounds.zpp_inner.height();
			return $r;
		}(this)) / (function($this) {
			var $r;
			if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			subgrid.zpp_inner.validate();
			$r = subgrid.zpp_inner.y;
			return $r;
		}(this));
		var yn = Std["int"](yp);
		if(xn != xp) xn++;
		if(yn != yp) yn++;
		var _g = 0;
		while(_g < xn) {
			var x = _g++;
			var x0 = (function($this) {
				var $r;
				bounds.zpp_inner.validate();
				$r = bounds.zpp_inner.minx;
				return $r;
			}(this)) + (function($this) {
				var $r;
				if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				subgrid.zpp_inner.validate();
				$r = subgrid.zpp_inner.x;
				return $r;
			}(this)) * x;
			var x1 = x == xn - 1?bounds.zpp_inner.get_max().flibget_x():x0 + (function($this) {
				var $r;
				if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				subgrid.zpp_inner.validate();
				$r = subgrid.zpp_inner.x;
				return $r;
			}(this));
			var _g1 = 0;
			while(_g1 < yn) {
				var y = _g1++;
				var y0 = (function($this) {
					var $r;
					bounds.zpp_inner.validate();
					$r = bounds.zpp_inner.miny;
					return $r;
				}(this)) + (function($this) {
					var $r;
					if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					subgrid.zpp_inner.validate();
					$r = subgrid.zpp_inner.y;
					return $r;
				}(this)) * y;
				var y1 = y == yn - 1?bounds.zpp_inner.get_max().flibget_y():y0 + (function($this) {
					var $r;
					if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					subgrid.zpp_inner.validate();
					$r = subgrid.zpp_inner.y;
					return $r;
				}(this));
				zpp_nape.geom.ZPP_MarchingSquares.run(iso,x0,y0,x1,y1,cellsize,quality,combine,ret);
			}
		}
	}
	if(cellsize.zpp_inner.weak) {
		cellsize.dispose();
		true;
	} else false;
	if(subgrid != null) {
		if(subgrid.zpp_inner.weak) {
			subgrid.dispose();
			true;
		} else false;
	}
	return ret;
}
nape.geom.MarchingSquares.prototype.__class__ = nape.geom.MarchingSquares;
zpp_nape.callbacks.ZPP_Listener = function() { }
zpp_nape.callbacks.ZPP_Listener.__name__ = ["zpp_nape","callbacks","ZPP_Listener"];
zpp_nape.callbacks.ZPP_Listener.prototype.outer = null;
zpp_nape.callbacks.ZPP_Listener.prototype.type = null;
zpp_nape.callbacks.ZPP_Listener.prototype.event = null;
zpp_nape.callbacks.ZPP_Listener.prototype.body = null;
zpp_nape.callbacks.ZPP_Listener.prototype.constraint = null;
zpp_nape.callbacks.ZPP_Listener.prototype.interaction = null;
zpp_nape.callbacks.ZPP_Listener.prototype.imm = null;
zpp_nape.callbacks.ZPP_Listener.prototype.space = null;
zpp_nape.callbacks.ZPP_Listener.prototype.__class__ = zpp_nape.callbacks.ZPP_Listener;
zpp_nape.callbacks.ZPP_BodyListener = function(event,handler) {
	if( event === $_ ) return;
	this.event = event;
	this.handler = handler;
	this.body = this;
	this.type = 0;
}
zpp_nape.callbacks.ZPP_BodyListener.__name__ = ["zpp_nape","callbacks","ZPP_BodyListener"];
zpp_nape.callbacks.ZPP_BodyListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
for(var k in zpp_nape.callbacks.ZPP_Listener.prototype ) zpp_nape.callbacks.ZPP_BodyListener.prototype[k] = zpp_nape.callbacks.ZPP_Listener.prototype[k];
zpp_nape.callbacks.ZPP_BodyListener.prototype.outer_zn = null;
zpp_nape.callbacks.ZPP_BodyListener.prototype.cbType = null;
zpp_nape.callbacks.ZPP_BodyListener.prototype.handler = null;
zpp_nape.callbacks.ZPP_BodyListener.prototype.addedToSpace = function() {
	this.cbType.listeners.add(this);
	if(this.event == 3) this.cbType._bodywake = this; else this.cbType._bodysleep = this;
}
zpp_nape.callbacks.ZPP_BodyListener.prototype.removedFromSpace = function() {
	this.cbType.listeners.remove(this);
	if(this.event == 3) this.cbType._bodywake = null; else this.cbType._bodysleep = null;
}
zpp_nape.callbacks.ZPP_BodyListener.prototype.swapCbType = function(newcb) {
	if(this.space != null) {
		if(this.cbType != null) {
			this.cbType.listeners.remove(this);
			if(this.event == 3) this.cbType._bodywake = null; else this.cbType._bodysleep = null;
		}
		this.cbType = newcb;
		{
			this.cbType.listeners.add(this);
			if(this.event == 3) this.cbType._bodywake = this; else this.cbType._bodysleep = this;
		}
	} else this.cbType = newcb;
}
zpp_nape.callbacks.ZPP_BodyListener.prototype.swapEvent = function(newev) {
	if(newev != 3 && newev != 4) throw "Error: BodyListener event must be either WAKE or SLEEP only";
	{
		this.cbType.listeners.remove(this);
		if(this.event == 3) this.cbType._bodywake = null; else this.cbType._bodysleep = null;
	}
	this.event = newev;
	{
		this.cbType.listeners.add(this);
		if(this.event == 3) this.cbType._bodywake = this; else this.cbType._bodysleep = this;
	}
}
zpp_nape.callbacks.ZPP_BodyListener.prototype.__class__ = zpp_nape.callbacks.ZPP_BodyListener;
zpp_nape.callbacks.ZPP_ConstraintListener = function(event,handler) {
	if( event === $_ ) return;
	this.event = event;
	this.handler = handler;
	this.constraint = this;
	this.type = 1;
}
zpp_nape.callbacks.ZPP_ConstraintListener.__name__ = ["zpp_nape","callbacks","ZPP_ConstraintListener"];
zpp_nape.callbacks.ZPP_ConstraintListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
for(var k in zpp_nape.callbacks.ZPP_Listener.prototype ) zpp_nape.callbacks.ZPP_ConstraintListener.prototype[k] = zpp_nape.callbacks.ZPP_Listener.prototype[k];
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.outer_zn = null;
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.cbType = null;
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.handler = null;
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.addedToSpace = function() {
	this.cbType.listeners.add(this);
	if(this.event == 3) this.cbType._conwake = this; else if(this.event == 4) this.cbType._consleep = this; else this.cbType._break = this;
}
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.removedFromSpace = function() {
	this.cbType.listeners.remove(this);
	if(this.event == 3) this.cbType._conwake = this; else if(this.event == 4) this.cbType._consleep = this; else this.cbType._break = this;
}
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.swapCbType = function(newcb) {
	if(this.space != null) {
		if(this.cbType != null) {
			this.cbType.listeners.remove(this);
			if(this.event == 3) this.cbType._conwake = this; else if(this.event == 4) this.cbType._consleep = this; else this.cbType._break = this;
		}
		this.cbType = newcb;
		{
			this.cbType.listeners.add(this);
			if(this.event == 3) this.cbType._conwake = this; else if(this.event == 4) this.cbType._consleep = this; else this.cbType._break = this;
		}
	} else this.cbType = newcb;
}
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.swapEvent = function(newev) {
	if(newev != 3 && newev != 4 && newev != 5) throw "Error: ConstraintListener event must be either WAKE or SLEEP only";
	{
		this.cbType.listeners.remove(this);
		if(this.event == 3) this.cbType._conwake = this; else if(this.event == 4) this.cbType._consleep = this; else this.cbType._break = this;
	}
	this.event = newev;
	{
		this.cbType.listeners.add(this);
		if(this.event == 3) this.cbType._conwake = this; else if(this.event == 4) this.cbType._consleep = this; else this.cbType._break = this;
	}
}
zpp_nape.callbacks.ZPP_ConstraintListener.prototype.__class__ = zpp_nape.callbacks.ZPP_ConstraintListener;
zpp_nape.callbacks.ZPP_InteractionListener = function() { }
zpp_nape.callbacks.ZPP_InteractionListener.__name__ = ["zpp_nape","callbacks","ZPP_InteractionListener"];
zpp_nape.callbacks.ZPP_InteractionListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
for(var k in zpp_nape.callbacks.ZPP_Listener.prototype ) zpp_nape.callbacks.ZPP_InteractionListener.prototype[k] = zpp_nape.callbacks.ZPP_Listener.prototype[k];
zpp_nape.callbacks.ZPP_InteractionListener.prototype.cb1 = null;
zpp_nape.callbacks.ZPP_InteractionListener.prototype.cb2 = null;
zpp_nape.callbacks.ZPP_InteractionListener.prototype.handler = null;
zpp_nape.callbacks.ZPP_InteractionListener.prototype.__class__ = zpp_nape.callbacks.ZPP_InteractionListener;
zpp_nape.callbacks.ZPP_ImmListener = function() { }
zpp_nape.callbacks.ZPP_ImmListener.__name__ = ["zpp_nape","callbacks","ZPP_ImmListener"];
zpp_nape.callbacks.ZPP_ImmListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
for(var k in zpp_nape.callbacks.ZPP_Listener.prototype ) zpp_nape.callbacks.ZPP_ImmListener.prototype[k] = zpp_nape.callbacks.ZPP_Listener.prototype[k];
zpp_nape.callbacks.ZPP_ImmListener.prototype.cb1 = null;
zpp_nape.callbacks.ZPP_ImmListener.prototype.cb2 = null;
zpp_nape.callbacks.ZPP_ImmListener.prototype.handler = null;
zpp_nape.callbacks.ZPP_ImmListener.prototype.__class__ = zpp_nape.callbacks.ZPP_ImmListener;
jeash.display.GraphicsSolidFill = function(color,alpha) {
	if( color === $_ ) return;
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	this.alpha = alpha;
	this.color = color;
	this.jeashGraphicsDataType = jeash.display.GraphicsDataType.SOLID;
	this.jeashGraphicsFillType = jeash.display.GraphicsFillType.SOLID_FILL;
}
jeash.display.GraphicsSolidFill.__name__ = ["jeash","display","GraphicsSolidFill"];
jeash.display.GraphicsSolidFill.prototype.alpha = null;
jeash.display.GraphicsSolidFill.prototype.color = null;
jeash.display.GraphicsSolidFill.prototype.jeashGraphicsDataType = null;
jeash.display.GraphicsSolidFill.prototype.jeashGraphicsFillType = null;
jeash.display.GraphicsSolidFill.prototype.__class__ = jeash.display.GraphicsSolidFill;
jeash.display.GraphicsSolidFill.__interfaces__ = [jeash.display.IGraphicsFill,jeash.display.IGraphicsData];
jeash.geom.Rectangle = function(inX,inY,inWidth,inHeight) {
	if( inX === $_ ) return;
	this.x = inX == null?0:inX;
	this.y = inY == null?0:inY;
	this.width = inWidth == null?0:inWidth;
	this.height = inHeight == null?0:inHeight;
}
jeash.geom.Rectangle.__name__ = ["jeash","geom","Rectangle"];
jeash.geom.Rectangle.prototype.x = null;
jeash.geom.Rectangle.prototype.y = null;
jeash.geom.Rectangle.prototype.width = null;
jeash.geom.Rectangle.prototype.height = null;
jeash.geom.Rectangle.prototype.left = null;
jeash.geom.Rectangle.prototype.get_left = function() {
	return this.x;
}
jeash.geom.Rectangle.prototype.set_left = function(l) {
	this.width -= l - this.x;
	this.x = l;
	return l;
}
jeash.geom.Rectangle.prototype.right = null;
jeash.geom.Rectangle.prototype.get_right = function() {
	return this.x + this.width;
}
jeash.geom.Rectangle.prototype.set_right = function(r) {
	this.width = r - this.x;
	return r;
}
jeash.geom.Rectangle.prototype.top = null;
jeash.geom.Rectangle.prototype.get_top = function() {
	return this.y;
}
jeash.geom.Rectangle.prototype.set_top = function(t) {
	this.height -= t - this.y;
	this.y = t;
	return t;
}
jeash.geom.Rectangle.prototype.bottom = null;
jeash.geom.Rectangle.prototype.get_bottom = function() {
	return this.y + this.height;
}
jeash.geom.Rectangle.prototype.set_bottom = function(b) {
	this.height = b - this.y;
	return b;
}
jeash.geom.Rectangle.prototype.topLeft = null;
jeash.geom.Rectangle.prototype.get_topLeft = function() {
	return new jeash.geom.Point(this.x,this.y);
}
jeash.geom.Rectangle.prototype.set_topLeft = function(p) {
	this.x = p.x;
	this.y = p.y;
	return p.clone();
}
jeash.geom.Rectangle.prototype.size = null;
jeash.geom.Rectangle.prototype.get_size = function() {
	return new jeash.geom.Point(this.width,this.height);
}
jeash.geom.Rectangle.prototype.set_size = function(p) {
	this.width = p.x;
	this.height = p.y;
	return p.clone();
}
jeash.geom.Rectangle.prototype.bottomRight = null;
jeash.geom.Rectangle.prototype.get_bottomRight = function() {
	return new jeash.geom.Point(this.x + this.width,this.y + this.height);
}
jeash.geom.Rectangle.prototype.set_bottomRight = function(p) {
	this.width = p.x - this.x;
	this.height = p.y - this.y;
	return p.clone();
}
jeash.geom.Rectangle.prototype.clone = function() {
	return new jeash.geom.Rectangle(this.x,this.y,this.width,this.height);
}
jeash.geom.Rectangle.prototype.contains = function(inX,inY) {
	return inX >= this.x && inY >= this.y && inX < this.get_right() && inY < this.get_bottom();
}
jeash.geom.Rectangle.prototype.containsPoint = function(point) {
	return this.contains(point.x,point.y);
}
jeash.geom.Rectangle.prototype.containsRect = function(rect) {
	return this.contains(rect.x,rect.y) && this.containsPoint(rect.get_bottomRight());
}
jeash.geom.Rectangle.prototype.equals = function(toCompare) {
	return this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
}
jeash.geom.Rectangle.prototype.inflate = function(dx,dy) {
	this.x -= dx;
	this.width += dx * 2;
	this.y -= dy;
	this.height += dy * 2;
}
jeash.geom.Rectangle.prototype.inflatePoint = function(point) {
	this.inflate(point.x,point.y);
}
jeash.geom.Rectangle.prototype.intersection = function(toIntersect) {
	var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
	var x1 = this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right();
	if(x1 <= x0) return new jeash.geom.Rectangle();
	var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
	var y1 = this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom();
	if(y1 <= y0) return new jeash.geom.Rectangle();
	return new jeash.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
}
jeash.geom.Rectangle.prototype.intersects = function(toIntersect) {
	var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
	var x1 = this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right();
	if(x1 <= x0) return false;
	var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
	var y1 = this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom();
	return y1 > y0;
}
jeash.geom.Rectangle.prototype.union = function(toUnion) {
	var x0 = this.x > toUnion.x?toUnion.x:this.x;
	var x1 = this.get_right() < toUnion.get_right()?toUnion.get_right():this.get_right();
	var y0 = this.y > toUnion.y?toUnion.y:this.y;
	var y1 = this.get_bottom() < toUnion.get_bottom()?toUnion.get_bottom():this.get_bottom();
	return new jeash.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
}
jeash.geom.Rectangle.prototype.isEmpty = function() {
	return this.width == 0 && this.height == 0;
}
jeash.geom.Rectangle.prototype.offset = function(dx,dy) {
	this.x += dx;
	this.y += dy;
}
jeash.geom.Rectangle.prototype.offsetPoint = function(point) {
	this.x += point.x;
	this.y += point.y;
}
jeash.geom.Rectangle.prototype.setEmpty = function() {
	this.x = this.y = this.width = this.height = 0;
}
jeash.geom.Rectangle.prototype.transform = function(m) {
	var tx0 = m.a * this.x + m.c * this.y;
	var tx1 = tx0;
	var ty0 = m.b * this.x + m.d * this.y;
	var ty1 = tx0;
	var tx = m.a * (this.x + this.width) + m.c * this.y;
	var ty = m.b * (this.x + this.width) + m.d * this.y;
	if(tx < tx0) tx0 = tx;
	if(ty < ty0) ty0 = ty;
	if(tx > tx1) tx1 = tx;
	if(ty > ty1) ty1 = ty;
	tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
	ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
	if(tx < tx0) tx0 = tx;
	if(ty < ty0) ty0 = ty;
	if(tx > tx1) tx1 = tx;
	if(ty > ty1) ty1 = ty;
	tx = m.a * this.x + m.c * (this.y + this.height);
	ty = m.b * this.x + m.d * (this.y + this.height);
	if(tx < tx0) tx0 = tx;
	if(ty < ty0) ty0 = ty;
	if(tx > tx1) tx1 = tx;
	if(ty > ty1) ty1 = ty;
	return new jeash.geom.Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
}
jeash.geom.Rectangle.prototype.extendBounds = function(r) {
	var dx = this.x - r.x;
	if(dx > 0) {
		this.x -= dx;
		this.width += dx;
	}
	var dy = this.y - r.y;
	if(dy > 0) {
		this.y -= dy;
		this.height += dy;
	}
	if(r.get_right() > this.get_right()) this.set_right(r.get_right());
	if(r.get_bottom() > this.get_bottom()) this.set_bottom(r.get_bottom());
}
jeash.geom.Rectangle.prototype.__class__ = jeash.geom.Rectangle;
jeash.display.MovieClip = function(p) {
	if( p === $_ ) return;
	jeash.display.Sprite.call(this);
	this.enabled = true;
	this.mCurrentFrame = 0;
	this.mTotalFrames = 0;
	this.name = "MovieClip " + jeash.display.DisplayObject.mNameID++;
}
jeash.display.MovieClip.__name__ = ["jeash","display","MovieClip"];
jeash.display.MovieClip.__super__ = jeash.display.Sprite;
for(var k in jeash.display.Sprite.prototype ) jeash.display.MovieClip.prototype[k] = jeash.display.Sprite.prototype[k];
jeash.display.MovieClip.prototype.enabled = null;
jeash.display.MovieClip.prototype.currentFrame = null;
jeash.display.MovieClip.prototype.framesLoaded = null;
jeash.display.MovieClip.prototype.totalFrames = null;
jeash.display.MovieClip.prototype.mCurrentFrame = null;
jeash.display.MovieClip.prototype.mTotalFrames = null;
jeash.display.MovieClip.prototype.GetTotalFrames = function() {
	return this.mTotalFrames;
}
jeash.display.MovieClip.prototype.GetCurrentFrame = function() {
	return this.mCurrentFrame;
}
jeash.display.MovieClip.prototype.gotoAndPlay = function(frame,scene) {
}
jeash.display.MovieClip.prototype.gotoAndStop = function(frame,scene) {
}
jeash.display.MovieClip.prototype.play = function() {
}
jeash.display.MovieClip.prototype.stop = function() {
}
jeash.display.MovieClip.prototype.__class__ = jeash.display.MovieClip;
if(!jeash.filters) jeash.filters = {}
jeash.filters.BitmapFilter = function(inType) {
	if( inType === $_ ) return;
	this.mType = inType;
}
jeash.filters.BitmapFilter.__name__ = ["jeash","filters","BitmapFilter"];
jeash.filters.BitmapFilter.prototype.mType = null;
jeash.filters.BitmapFilter.prototype.clone = function() {
	throw "Implement in subclass. BitmapFilter::clone";
	return null;
}
jeash.filters.BitmapFilter.prototype.jeashPreFilter = function(surface) {
}
jeash.filters.BitmapFilter.prototype.jeashApplyFilter = function(surface) {
}
jeash.filters.BitmapFilter.prototype.__class__ = jeash.filters.BitmapFilter;
nape.shape.Circle = function(radius,localCOM,material,filter,cbType) {
	if( radius === $_ ) return;
	try {
		nape.shape.Shape.call(this);
	} catch( e ) {
	}
	this.zpp_inner_zn = new zpp_nape.shape.ZPP_Circle();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	if(this.zpp_inner.body != null && this.zpp_inner.body.type == 1 && this.zpp_inner.body.space != null) throw "Error: Cannot modifiy radius of Circle contained in static object once added to space";
	if(radius != this.zpp_inner_zn.radius) {
		if(radius != radius) throw "Error: Circle::radius cannot be NaN";
		if(radius < 1e-8) throw "Error: Circle::radius (" + radius + ") must be > PR(Const).EPSILON";
		if(radius > 1e100) throw "Error: Circle::radius (" + radius + ") must be < PR(Const).FMAX";
		this.zpp_inner_zn.radius = radius;
		this.zpp_inner_zn.invalidate_radius();
	}
	this.zpp_inner_zn.radius;
	if(localCOM == null) {
		this.zpp_inner.localCOMx = 0;
		this.zpp_inner.localCOMy = 0;
	} else {
		if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.localCOMx = (function($this) {
			var $r;
			if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			localCOM.zpp_inner.validate();
			$r = localCOM.zpp_inner.x;
			return $r;
		}(this));
		this.zpp_inner.localCOMy = (function($this) {
			var $r;
			if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			localCOM.zpp_inner.validate();
			$r = localCOM.zpp_inner.y;
			return $r;
		}(this));
		if(localCOM.zpp_inner.weak) {
			localCOM.dispose();
			true;
		} else false;
	}
	if(material == null) this.zpp_inner.material = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.phys.ZPP_Material.zpp_pool == null) ret = new zpp_nape.phys.ZPP_Material(); else {
			ret = zpp_nape.phys.ZPP_Material.zpp_pool;
			zpp_nape.phys.ZPP_Material.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this)); else {
		if(material == null) throw "Error: Cannot assign null as Shape material";
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) this.zpp_inner.filter = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) ret = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
			ret = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this)); else {
		if(filter == null) throw "Error: Cannot assign null as Shape filter";
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	if(cbType == null) this.zpp_inner.cbType = zpp_nape.callbacks.ZPP_CbType.DEFAULT; else {
		if(cbType == null) throw "Error: Cannot assign null CbType to Shape";
		this.zpp_inner.setCbType(cbType.zpp_inner);
		this.zpp_inner.cbType.wrapper();
	}
}
nape.shape.Circle.__name__ = ["nape","shape","Circle"];
nape.shape.Circle.__super__ = nape.shape.Shape;
for(var k in nape.shape.Shape.prototype ) nape.shape.Circle.prototype[k] = nape.shape.Shape.prototype[k];
nape.shape.Circle.copy = function(circle) {
	if(circle == null) throw "Error: Cannot copy null circle";
	return circle.zpp_inner.copy().flibget_circle();
}
nape.shape.Circle.prototype.zpp_inner_zn = null;
nape.shape.Circle.prototype.radius = null;
nape.shape.Circle.prototype.flibget_radius = function() {
	return this.zpp_inner_zn.radius;
}
nape.shape.Circle.prototype.flibset_radius = function(radius) {
	if(this.zpp_inner.body != null && this.zpp_inner.body.type == 1 && this.zpp_inner.body.space != null) throw "Error: Cannot modifiy radius of Circle contained in static object once added to space";
	if(radius != this.zpp_inner_zn.radius) {
		if(radius != radius) throw "Error: Circle::radius cannot be NaN";
		if(radius < 1e-8) throw "Error: Circle::radius (" + radius + ") must be > PR(Const).EPSILON";
		if(radius > 1e100) throw "Error: Circle::radius (" + radius + ") must be < PR(Const).FMAX";
		this.zpp_inner_zn.radius = radius;
		this.zpp_inner_zn.invalidate_radius();
	}
	return this.zpp_inner_zn.radius;
}
nape.shape.Circle.prototype.__class__ = nape.shape.Circle;
jeash.text.FontInstanceMode = { __ename__ : ["jeash","text","FontInstanceMode"], __constructs__ : ["fimSolid"] }
jeash.text.FontInstanceMode.fimSolid = ["fimSolid",0];
jeash.text.FontInstanceMode.fimSolid.toString = $estr;
jeash.text.FontInstanceMode.fimSolid.__enum__ = jeash.text.FontInstanceMode;
jeash.text.FontInstance = function(inFont,inHeight) {
	if( inFont === $_ ) return;
	this.mFont = inFont;
	this.mHeight = inHeight;
	this.mTryFreeType = true;
	this.mGlyphs = [];
	this.mCacheAsBitmap = false;
}
jeash.text.FontInstance.__name__ = ["jeash","text","FontInstance"];
jeash.text.FontInstance.CreateSolid = function(inFace,inHeight,inColour,inAlpha) {
	var id = "SOLID:" + inFace + ":" + inHeight + ":" + inColour + ":" + inAlpha;
	var f = jeash.text.FontInstance.mSolidFonts.get(id);
	if(f != null) return f;
	var font = new jeash.text.Font();
	font.jeashSetScale(inHeight);
	font.jeashSetFontName(inFace);
	if(font == null) return null;
	f = new jeash.text.FontInstance(font,inHeight);
	f.SetSolid(inColour,inAlpha);
	jeash.text.FontInstance.mSolidFonts.set(id,f);
	return f;
}
jeash.text.FontInstance.prototype.mMode = null;
jeash.text.FontInstance.prototype.mColour = null;
jeash.text.FontInstance.prototype.mAlpha = null;
jeash.text.FontInstance.prototype.mFont = null;
jeash.text.FontInstance.prototype.mHeight = null;
jeash.text.FontInstance.prototype.mGlyphs = null;
jeash.text.FontInstance.prototype.mCacheAsBitmap = null;
jeash.text.FontInstance.prototype.mTryFreeType = null;
jeash.text.FontInstance.prototype.height = null;
jeash.text.FontInstance.prototype.toString = function() {
	return "FontInstance:" + this.mFont + ":" + this.mColour + "(" + this.mGlyphs.length + ")";
}
jeash.text.FontInstance.prototype.GetFace = function() {
	return this.mFont.fontName;
}
jeash.text.FontInstance.prototype.jeashGetHeight = function() {
	return this.mHeight;
}
jeash.text.FontInstance.prototype.SetSolid = function(inCol,inAlpha) {
	this.mColour = inCol;
	this.mAlpha = inAlpha;
	this.mMode = jeash.text.FontInstanceMode.fimSolid;
}
jeash.text.FontInstance.prototype.RenderChar = function(inGraphics,inGlyph,inX,inY) {
	inGraphics.jeashClearLine();
	inGraphics.beginFill(this.mColour,this.mAlpha);
	this.mFont.jeashRender(inGraphics,inGlyph,inX,inY,this.mTryFreeType);
	inGraphics.endFill();
}
jeash.text.FontInstance.prototype.jeashGetAdvance = function(inChar) {
	if(this.mFont == null) return 0;
	return this.mFont.jeashGetAdvance(inChar,this.mHeight);
}
jeash.text.FontInstance.prototype.__class__ = jeash.text.FontInstance;
jeash.display.ImageDataLease = function(p) {
}
jeash.display.ImageDataLease.__name__ = ["jeash","display","ImageDataLease"];
jeash.display.ImageDataLease.prototype.seed = null;
jeash.display.ImageDataLease.prototype.time = null;
jeash.display.ImageDataLease.prototype.set = function(s,t) {
	this.seed = s;
	this.time = t;
}
jeash.display.ImageDataLease.prototype.clone = function() {
	var leaseClone = new jeash.display.ImageDataLease();
	leaseClone.seed = this.seed;
	leaseClone.time = this.time;
	return leaseClone;
}
jeash.display.ImageDataLease.prototype.__class__ = jeash.display.ImageDataLease;
jeash.display.BitmapData = function(inWidth,inHeight,inTransparent,inFillColor) {
	if( inWidth === $_ ) return;
	if(inTransparent == null) inTransparent = true;
	this.jeashLocked = false;
	this.jeashLeaseNum = 0;
	this.jeashLease = new jeash.display.ImageDataLease();
	this.jeashLease.set(this.jeashLeaseNum++,Date.now().getTime());
	this.mTextureBuffer = js.Lib.document.createElement("canvas");
	this.mTextureBuffer.width = inWidth;
	this.mTextureBuffer.height = inHeight;
	this.jeashTransparent = inTransparent;
	this.rect = new jeash.geom.Rectangle(0,0,inWidth,inHeight);
	if(inFillColor != null) {
		if(!this.jeashTransparent) inFillColor |= -16777216;
		this.jeashInitColor = inFillColor;
		this.jeashFillRect(this.rect,inFillColor);
	}
}
jeash.display.BitmapData.__name__ = ["jeash","display","BitmapData"];
jeash.display.BitmapData.jeashCreateFromHandle = function(inHandle) {
	var result = new jeash.display.BitmapData(0,0);
	result.mTextureBuffer = inHandle;
	return result;
}
jeash.display.BitmapData.prototype.mTextureBuffer = null;
jeash.display.BitmapData.prototype.jeashTransparent = null;
jeash.display.BitmapData.prototype.width = null;
jeash.display.BitmapData.prototype.height = null;
jeash.display.BitmapData.prototype.rect = null;
jeash.display.BitmapData.prototype.jeashImageData = null;
jeash.display.BitmapData.prototype.jeashImageDataChanged = null;
jeash.display.BitmapData.prototype.jeashCopyPixelList = null;
jeash.display.BitmapData.prototype.jeashLocked = null;
jeash.display.BitmapData.prototype.jeashLease = null;
jeash.display.BitmapData.prototype.jeashLeaseNum = null;
jeash.display.BitmapData.prototype.jeashAssignedBitmaps = null;
jeash.display.BitmapData.prototype.jeashInitColor = null;
jeash.display.BitmapData.prototype.applyFilter = function(sourceBitmapData,sourceRect,destPoint,filter) {
	throw "BitmapData.applyFilter not implemented in Jeash";
}
jeash.display.BitmapData.prototype.draw = function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
	if(smoothing == null) smoothing = false;
	this.jeashLease.set(this.jeashLeaseNum++,Date.now().getTime());
	source.drawToSurface(this.mTextureBuffer,matrix,colorTransform,blendMode,clipRect,smoothing);
}
jeash.display.BitmapData.prototype.getColorBoundsRect = function(mask,color,findColor) {
	if(findColor == null) findColor = true;
	var me = this;
	var doGetColorBoundsRect = function(data) {
		var minX = me.mTextureBuffer != null?me.mTextureBuffer.width:0, maxX = 0, minY = me.mTextureBuffer != null?me.mTextureBuffer.height:0, maxY = 0, i = 0;
		while(i < data.length) {
			var value = me.getInt32(i,data);
			if(findColor) {
				if((value & mask) == color) {
					var x = Math.round(i % ((me.mTextureBuffer != null?me.mTextureBuffer.width:0) * 4) / 4);
					var y = Math.round(i / ((me.mTextureBuffer != null?me.mTextureBuffer.width:0) * 4));
					if(x < minX) minX = x;
					if(x > maxX) maxX = x;
					if(y < minY) minY = y;
					if(y > maxY) maxY = y;
				}
			} else if((value & mask) != color) {
				var x = Math.round(i % ((me.mTextureBuffer != null?me.mTextureBuffer.width:0) * 4) / 4);
				var y = Math.round(i / ((me.mTextureBuffer != null?me.mTextureBuffer.width:0) * 4));
				if(x < minX) minX = x;
				if(x > maxX) maxX = x;
				if(y < minY) minY = y;
				if(y > maxY) maxY = y;
			}
			i += 4;
		}
		if(minX < maxX && minY < maxY) return new jeash.geom.Rectangle(minX,minY,maxX - minX + 1,maxY - minY); else return new jeash.geom.Rectangle(0,0,me.mTextureBuffer != null?me.mTextureBuffer.width:0,me.mTextureBuffer != null?me.mTextureBuffer.height:0);
	};
	if(!this.jeashLocked) {
		var ctx = this.mTextureBuffer.getContext("2d");
		var imageData = ctx.getImageData(0,0,this.mTextureBuffer != null?this.mTextureBuffer.width:0,this.mTextureBuffer != null?this.mTextureBuffer.height:0);
		return doGetColorBoundsRect(imageData.data);
	} else return doGetColorBoundsRect(this.jeashImageData.data);
}
jeash.display.BitmapData.prototype.dispose = function() {
}
jeash.display.BitmapData.prototype.compare = function(inBitmapTexture) {
	throw "Not implemented. compare";
	return 0;
}
jeash.display.BitmapData.prototype.copyPixels = function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(sourceBitmapData.mTextureBuffer == null || this.mTextureBuffer == null || sourceBitmapData.mTextureBuffer.width == 0 || sourceBitmapData.mTextureBuffer.height == 0 || sourceRect.width <= 0 || sourceRect.height <= 0) return;
	if(sourceRect.x + sourceRect.width > sourceBitmapData.mTextureBuffer.width) sourceRect.width = sourceBitmapData.mTextureBuffer.width - sourceRect.x;
	if(sourceRect.y + sourceRect.height > sourceBitmapData.mTextureBuffer.height) sourceRect.height = sourceBitmapData.mTextureBuffer.height - sourceRect.y;
	if(!this.jeashLocked) {
		this.jeashLease.set(this.jeashLeaseNum++,Date.now().getTime());
		var ctx = this.mTextureBuffer.getContext("2d");
		ctx.drawImage(sourceBitmapData.mTextureBuffer,sourceRect.x,sourceRect.y,sourceRect.width,sourceRect.height,destPoint.x,destPoint.y,sourceRect.width,sourceRect.height);
	} else this.jeashCopyPixelList[this.jeashCopyPixelList.length] = { handle : sourceBitmapData.mTextureBuffer, sourceX : sourceRect.x, sourceY : sourceRect.y, sourceWidth : sourceRect.width, sourceHeight : sourceRect.height, destX : destPoint.x, destY : destPoint.y};
}
jeash.display.BitmapData.prototype.clipRect = function(r) {
	if(r.x < 0) {
		r.width -= -r.x;
		r.x = 0;
		if(r.x + r.width <= 0) return null;
	}
	if(r.y < 0) {
		r.height -= -r.y;
		r.y = 0;
		if(r.y + r.height <= 0) return null;
	}
	if(r.x + r.width >= (this.mTextureBuffer != null?this.mTextureBuffer.width:0)) {
		r.width -= r.x + r.width - (this.mTextureBuffer != null?this.mTextureBuffer.width:0);
		if(r.width <= 0) return null;
	}
	if(r.y + r.height >= (this.mTextureBuffer != null?this.mTextureBuffer.height:0)) {
		r.height -= r.y + r.height - (this.mTextureBuffer != null?this.mTextureBuffer.height:0);
		if(r.height <= 0) return null;
	}
	return r;
}
jeash.display.BitmapData.prototype.jeashClearCanvas = function() {
	this.mTextureBuffer.width = this.mTextureBuffer.width;
}
jeash.display.BitmapData.prototype.jeashFillRect = function(rect,color) {
	this.jeashLease.set(this.jeashLeaseNum++,Date.now().getTime());
	var ctx = this.mTextureBuffer.getContext("2d");
	var r = (color & 16711680) >>> 16;
	var g = (color & 65280) >>> 8;
	var b = color & 255;
	var a = this.jeashTransparent?color >>> 24:255;
	if(!this.jeashLocked) {
		var style = "rgba(";
		style += r;
		style += ", ";
		style += g;
		style += ", ";
		style += b;
		style += ", ";
		style += a / 256;
		style += ")";
		ctx.fillStyle = style;
		ctx.fillRect(rect.x,rect.y,rect.width,rect.height);
	} else {
		var s = 4 * (Math.round(rect.x) + Math.round(rect.y) * this.jeashImageData.width);
		var offsetY;
		var offsetX;
		var _g1 = 0, _g = Math.round(rect.height);
		while(_g1 < _g) {
			var i = _g1++;
			offsetY = i * this.jeashImageData.width;
			var _g3 = 0, _g2 = Math.round(rect.width);
			while(_g3 < _g2) {
				var j = _g3++;
				offsetX = 4 * (j + offsetY);
				this.jeashImageData.data[s + offsetX] = r;
				this.jeashImageData.data[s + offsetX + 1] = g;
				this.jeashImageData.data[s + offsetX + 2] = b;
				this.jeashImageData.data[s + offsetX + 3] = a;
			}
		}
		this.jeashImageDataChanged = true;
		ctx.putImageData(this.jeashImageData,0,0,rect.x,rect.y,rect.width,rect.height);
	}
}
jeash.display.BitmapData.prototype.fillRect = function(rect,color) {
	if(rect == null) return;
	if(rect.width <= 0 || rect.height <= 0) return;
	if(rect.x == 0 && rect.y == 0 && rect.width == this.mTextureBuffer.width && rect.height == this.mTextureBuffer.height) {
		if(this.jeashTransparent) {
			if(color >>> 24 == 0 || color == this.jeashInitColor) return this.mTextureBuffer.width = this.mTextureBuffer.width;
		} else if((color | -16777216) == (this.jeashInitColor | -16777216)) return this.mTextureBuffer.width = this.mTextureBuffer.width;
	}
	return this.jeashFillRect(rect,color);
}
jeash.display.BitmapData.prototype.getPixels = function(rect) {
	var byteArray = new jeash.utils.ByteArray();
	rect = this.clipRect(rect);
	if(rect == null) return byteArray;
	var len = Math.round(4 * rect.width * rect.height);
	if(!this.jeashLocked) {
		var ctx = this.mTextureBuffer.getContext("2d");
		var imagedata = ctx.getImageData(rect.x,rect.y,rect.width,rect.height);
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			byteArray.writeByte(imagedata.data[i]);
		}
	} else {
		var offset = Math.round(4 * this.jeashImageData.width * rect.y + rect.x * 4);
		var pos = offset;
		var boundR = Math.round(4 * (rect.x + rect.width));
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			if(pos % (this.jeashImageData.width * 4) > boundR - 1) pos += this.jeashImageData.width * 4 - boundR;
			byteArray.writeByte(this.jeashImageData.data[pos]);
			pos++;
		}
	}
	byteArray.position = 0;
	return byteArray;
}
jeash.display.BitmapData.prototype.getPixel = function(x,y) {
	if(x < 0 || y < 0 || x >= (this.mTextureBuffer != null?this.mTextureBuffer.width:0) || y >= (this.mTextureBuffer != null?this.mTextureBuffer.height:0)) return 0;
	if(!this.jeashLocked) {
		var ctx = this.mTextureBuffer.getContext("2d");
		var imagedata = ctx.getImageData(x,y,1,1);
		return imagedata.data[0] << 16 | imagedata.data[1] << 8 | imagedata.data[2];
	} else {
		var offset = 4 * y * (this.mTextureBuffer != null?this.mTextureBuffer.width:0) + x * 4;
		return this.jeashImageData.data[offset] << 16 | this.jeashImageData.data[offset + 1] << 8 | this.jeashImageData.data[offset + 2];
	}
}
jeash.display.BitmapData.prototype.getInt32 = function(offset,data) {
	var b5, b6, b7, b8, pow = Math.pow;
	b5 = data[offset + 3] & 255;
	b6 = data[offset] & 255;
	b7 = data[offset + 1] & 255;
	b8 = data[offset + 2] & 255;
	return parseInt(((b5 >> 7) * pow(2,31)).toString(2),2) + parseInt(((b5 & 127) << 24 | b6 << 16 | b7 << 8 | b8).toString(2),2);
}
jeash.display.BitmapData.prototype.getPixel32 = function(x,y) {
	if(x < 0 || y < 0 || x >= (this.mTextureBuffer != null?this.mTextureBuffer.width:0) || y >= (this.mTextureBuffer != null?this.mTextureBuffer.height:0)) return 0;
	if(!this.jeashLocked) {
		var ctx = this.mTextureBuffer.getContext("2d");
		return this.getInt32(0,ctx.getImageData(x,y,1,1).data);
	} else return this.getInt32(4 * y * this.mTextureBuffer.width + x * 4,this.jeashImageData.data);
}
jeash.display.BitmapData.prototype.setPixel = function(x,y,color) {
	if(x < 0 || y < 0 || x >= (this.mTextureBuffer != null?this.mTextureBuffer.width:0) || y >= (this.mTextureBuffer != null?this.mTextureBuffer.height:0)) return;
	if(!this.jeashLocked) {
		this.jeashLease.set(this.jeashLeaseNum++,Date.now().getTime());
		var ctx = this.mTextureBuffer.getContext("2d");
		var imageData = ctx.createImageData(1,1);
		imageData.data[0] = (color & 16711680) >>> 16;
		imageData.data[1] = (color & 65280) >>> 8;
		imageData.data[2] = color & 255;
		if(this.jeashTransparent) imageData.data[3] = 255;
		ctx.putImageData(imageData,x,y);
	} else {
		var offset = 4 * y * this.jeashImageData.width + x * 4;
		this.jeashImageData.data[offset] = (color & 16711680) >>> 16;
		this.jeashImageData.data[offset + 1] = (color & 65280) >>> 8;
		this.jeashImageData.data[offset + 2] = color & 255;
		if(this.jeashTransparent) this.jeashImageData.data[offset + 3] = 255;
		this.jeashImageDataChanged = true;
	}
}
jeash.display.BitmapData.prototype.setPixel32 = function(x,y,color) {
	if(x < 0 || y < 0 || x >= (this.mTextureBuffer != null?this.mTextureBuffer.width:0) || y >= (this.mTextureBuffer != null?this.mTextureBuffer.height:0)) return;
	if(!this.jeashLocked) {
		this.jeashLease.set(this.jeashLeaseNum++,Date.now().getTime());
		var ctx = this.mTextureBuffer.getContext("2d");
		var imageData = ctx.createImageData(1,1);
		imageData.data[0] = (color & 16711680) >>> 16;
		imageData.data[1] = (color & 65280) >>> 8;
		imageData.data[2] = color & 255;
		if(this.jeashTransparent) imageData.data[3] = (color & -16777216) >>> 24; else imageData.data[3] = 255;
		ctx.putImageData(imageData,x,y);
	} else {
		var offset = 4 * y * this.jeashImageData.width + x * 4;
		this.jeashImageData.data[offset] = (color & 16711680) >>> 16;
		this.jeashImageData.data[offset + 1] = (color & 65280) >>> 8;
		this.jeashImageData.data[offset + 2] = color & 255;
		if(this.jeashTransparent) this.jeashImageData.data[offset + 3] = (color & -16777216) >>> 24; else this.jeashImageData.data[offset + 3] = 255;
		this.jeashImageDataChanged = true;
	}
}
jeash.display.BitmapData.prototype.setPixels = function(rect,byteArray) {
	rect = this.clipRect(rect);
	if(rect == null) return;
	var len = Math.round(4 * rect.width * rect.height);
	if(!this.jeashLocked) {
		var ctx = this.mTextureBuffer.getContext("2d");
		var imageData = ctx.createImageData(rect.width,rect.height);
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			imageData.data[i] = byteArray.readByte();
		}
		ctx.putImageData(imageData,rect.x,rect.y);
	} else {
		var offset = Math.round(4 * this.jeashImageData.width * rect.y + rect.x * 4);
		var pos = offset;
		var boundR = Math.round(4 * (rect.x + rect.width));
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			if(pos % (this.jeashImageData.width * 4) > boundR - 1) pos += this.jeashImageData.width * 4 - boundR;
			this.jeashImageData.data[pos] = byteArray.readByte();
			pos++;
		}
		this.jeashImageDataChanged = true;
	}
}
jeash.display.BitmapData.prototype.clone = function() {
	var bitmapData = new jeash.display.BitmapData(this.mTextureBuffer != null?this.mTextureBuffer.width:0,this.mTextureBuffer != null?this.mTextureBuffer.height:0,this.jeashTransparent);
	var rect = new jeash.geom.Rectangle(0,0,this.mTextureBuffer != null?this.mTextureBuffer.width:0,this.mTextureBuffer != null?this.mTextureBuffer.height:0);
	bitmapData.setPixels(rect,this.getPixels(rect));
	bitmapData.jeashLease.set(bitmapData.jeashLeaseNum++,Date.now().getTime());
	return bitmapData;
}
jeash.display.BitmapData.prototype.handle = function() {
	return this.mTextureBuffer;
}
jeash.display.BitmapData.prototype.getWidth = function() {
	if(this.mTextureBuffer != null) return this.mTextureBuffer.width; else return 0;
}
jeash.display.BitmapData.prototype.getHeight = function() {
	if(this.mTextureBuffer != null) return this.mTextureBuffer.height; else return 0;
}
jeash.display.BitmapData.prototype.destroy = function() {
	this.mTextureBuffer = null;
}
jeash.display.BitmapData.prototype.jeashOnLoad = function(data,e) {
	var canvas = data.texture;
	var width = data.image.width;
	var height = data.image.height;
	canvas.width = width;
	canvas.height = height;
	var ctx = canvas.getContext("2d");
	ctx.drawImage(data.image,0,0,width,height);
	data.bitmapData.width = width;
	data.bitmapData.height = height;
	data.bitmapData.rect = new jeash.geom.Rectangle(0,0,width,height);
	data.bitmapData.jeashBuildLease();
	if(data.inLoader != null) {
		var e1 = new jeash.events.Event(jeash.events.Event.COMPLETE);
		e1.target = data.inLoader;
		data.inLoader.dispatchEvent(e1);
	}
}
jeash.display.BitmapData.prototype.jeashLoadFromFile = function(inFilename,inLoader) {
	var me = this;
	var image = js.Lib.document.createElement("img");
	if(inLoader != null) {
		var data = { image : image, texture : this.mTextureBuffer, inLoader : inLoader, bitmapData : this};
		image.addEventListener("load",(function(f,a1) {
			return function(a2) {
				return f(a1,a2);
			};
		})($closure(this,"jeashOnLoad"),data),false);
		image.addEventListener("error",function(e) {
			if(!image.complete) me.jeashOnLoad(data,e);
		},false);
	}
	image.src = inFilename;
}
jeash.display.BitmapData.prototype.lock = function() {
	this.jeashLocked = true;
	var ctx = this.mTextureBuffer.getContext("2d");
	this.jeashImageData = ctx.getImageData(0,0,this.mTextureBuffer != null?this.mTextureBuffer.width:0,this.mTextureBuffer != null?this.mTextureBuffer.height:0);
	this.jeashImageDataChanged = false;
	this.jeashCopyPixelList = [];
}
jeash.display.BitmapData.prototype.unlock = function(changeRect) {
	this.jeashLocked = false;
	var ctx = this.mTextureBuffer.getContext("2d");
	if(this.jeashImageDataChanged) {
		if(changeRect != null) ctx.putImageData(this.jeashImageData,0,0,changeRect.x,changeRect.y,changeRect.width,changeRect.height); else ctx.putImageData(this.jeashImageData,0,0);
	}
	var _g = 0, _g1 = this.jeashCopyPixelList;
	while(_g < _g1.length) {
		var copyCache = _g1[_g];
		++_g;
		ctx.drawImage(copyCache.handle,copyCache.sourceX,copyCache.sourceY,copyCache.sourceWidth,copyCache.sourceHeight,copyCache.destX,copyCache.destY,copyCache.sourceWidth,copyCache.sourceHeight);
	}
	this.jeashLease.set(this.jeashLeaseNum++,Date.now().getTime());
}
jeash.display.BitmapData.prototype.drawToSurface = function(inSurface,matrix,colorTransform,blendMode,clipRect,smothing) {
	var ctx = inSurface.getContext("2d");
	ctx.save();
	if(matrix != null) {
		ctx.save();
		if(matrix.a == 1 && matrix.b == 0 && matrix.c == 0 && matrix.d == 1) ctx.translate(matrix.tx,matrix.ty); else ctx.setTransform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
		ctx.restore();
	}
	this.jeashLease.set(this.jeashLeaseNum++,Date.now().getTime());
	ctx.drawImage(this.mTextureBuffer,0,0);
	ctx.restore();
}
jeash.display.BitmapData.prototype.colorTransform = function(rect,colorTransform) {
	rect = this.clipRect(rect);
	if(rect == null) return;
	if(!this.jeashLocked) {
		this.jeashLease.set(this.jeashLeaseNum++,Date.now().getTime());
		var ctx = this.mTextureBuffer.getContext("2d");
		var imagedata = ctx.getImageData(rect.x,rect.y,rect.width,rect.height);
		var offsetX;
		var _g1 = 0, _g = imagedata.data.length >> 2;
		while(_g1 < _g) {
			var i = _g1++;
			offsetX = i * 4;
			imagedata.data[offsetX] = Std["int"](imagedata.data[offsetX] * colorTransform.redMultiplier + colorTransform.redOffset);
			imagedata.data[offsetX + 1] = Std["int"](imagedata.data[offsetX + 1] * colorTransform.greenMultiplier + colorTransform.greenOffset);
			imagedata.data[offsetX + 2] = Std["int"](imagedata.data[offsetX + 2] * colorTransform.blueMultiplier + colorTransform.blueOffset);
			imagedata.data[offsetX + 3] = Std["int"](imagedata.data[offsetX + 3] * colorTransform.alphaMultiplier + colorTransform.alphaOffset);
		}
		ctx.putImageData(imagedata,rect.x,rect.y);
	} else {
		var s = 4 * (Math.round(rect.x) + Math.round(rect.y) * this.jeashImageData.width);
		var offsetY;
		var offsetX;
		var _g1 = 0, _g = Math.round(rect.height);
		while(_g1 < _g) {
			var i = _g1++;
			offsetY = i * this.jeashImageData.width;
			var _g3 = 0, _g2 = Math.round(rect.width);
			while(_g3 < _g2) {
				var j = _g3++;
				offsetX = 4 * (j + offsetY);
				this.jeashImageData.data[s + offsetX] = Std["int"](this.jeashImageData.data[s + offsetX] * colorTransform.redMultiplier + colorTransform.redOffset);
				this.jeashImageData.data[s + offsetX + 1] = Std["int"](this.jeashImageData.data[s + offsetX + 1] * colorTransform.greenMultiplier + colorTransform.greenOffset);
				this.jeashImageData.data[s + offsetX + 2] = Std["int"](this.jeashImageData.data[s + offsetX + 2] * colorTransform.blueMultiplier + colorTransform.blueOffset);
				this.jeashImageData.data[s + offsetX + 3] = Std["int"](this.jeashImageData.data[s + offsetX + 3] * colorTransform.alphaMultiplier + colorTransform.alphaOffset);
			}
		}
		this.jeashImageDataChanged = true;
	}
}
jeash.display.BitmapData.prototype.copyChannel = function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
	this.rect = this.clipRect(this.rect);
	if(this.rect == null) return;
	if(sourceBitmapData.mTextureBuffer == null || this.mTextureBuffer == null || sourceRect.width <= 0 || sourceRect.height <= 0) return;
	if(sourceRect.x + sourceRect.width > sourceBitmapData.mTextureBuffer.width) sourceRect.width = sourceBitmapData.mTextureBuffer.width - sourceRect.x;
	if(sourceRect.y + sourceRect.height > sourceBitmapData.mTextureBuffer.height) sourceRect.height = sourceBitmapData.mTextureBuffer.height - sourceRect.y;
	var doChannelCopy = function(imageData) {
		var srcCtx = sourceBitmapData.mTextureBuffer.getContext("2d");
		var srcImageData = srcCtx.getImageData(sourceRect.x,sourceRect.y,sourceRect.width,sourceRect.height);
		var destIdx = destChannel == 8?3:destChannel == 4?2:destChannel == 2?1:destChannel == 1?0:(function($this) {
			var $r;
			throw "Invalid destination BitmapDataChannel passed to BitmapData::copyChannel.";
			return $r;
		}(this));
		var pos = 4 * (Math.round(destPoint.x) + Math.round(destPoint.y) * imageData.width) + destIdx;
		var boundR = Math.round(4 * (destPoint.x + sourceRect.width));
		var setPos = function(val) {
			if(pos % (imageData.width * 4) > boundR - 1) pos += imageData.width * 4 - boundR;
			imageData.data[pos] = val;
			pos += 4;
		};
		var srcIdx = sourceChannel == 8?3:sourceChannel == 4?2:sourceChannel == 2?1:sourceChannel == 1?0:(function($this) {
			var $r;
			throw "Invalid source BitmapDataChannel passed to BitmapData::copyChannel.";
			return $r;
		}(this));
		while(srcIdx < srcImageData.data.length) {
			setPos(srcImageData.data[srcIdx]);
			srcIdx += 4;
		}
	};
	if(!this.jeashLocked) {
		this.jeashLease.set(this.jeashLeaseNum++,Date.now().getTime());
		var ctx = this.mTextureBuffer.getContext("2d");
		var imageData = ctx.getImageData(0,0,this.mTextureBuffer != null?this.mTextureBuffer.width:0,this.mTextureBuffer != null?this.mTextureBuffer.height:0);
		doChannelCopy(imageData);
		ctx.putImageData(imageData,0,0);
	} else {
		doChannelCopy(this.jeashImageData);
		this.jeashImageDataChanged = true;
	}
}
jeash.display.BitmapData.prototype.hitTest = function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
	if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
	var type = Type.getClassName(Type.getClass(secondObject));
	firstAlphaThreshold = firstAlphaThreshold & -1;
	var me = this;
	var doHitTest = function(imageData) {
		if(secondObject.__proto__ == null || secondObject.__proto__.__class__ == null || secondObject.__proto__.__class__.__name__ == null) return false;
		switch(secondObject.__proto__.__class__.__name__[2]) {
		case "Rectangle":
			var rect = secondObject;
			rect.x -= firstPoint.x;
			rect.y -= firstPoint.y;
			rect = me.clipRect(me.rect);
			if(me.rect == null) return false;
			var boundingBox = new jeash.geom.Rectangle(0,0,me.mTextureBuffer != null?me.mTextureBuffer.width:0,me.mTextureBuffer != null?me.mTextureBuffer.height:0);
			if(!rect.intersects(boundingBox)) return false;
			var diff = rect.intersection(boundingBox);
			var offset = 4 * (Math.round(diff.x) + Math.round(diff.y) * imageData.width) + 3;
			var pos = offset;
			var boundR = Math.round(4 * (diff.x + diff.width));
			while(pos < offset + Math.round(4 * (diff.width + imageData.width * diff.height))) {
				if(pos % (imageData.width * 4) > boundR - 1) pos += imageData.width * 4 - boundR;
				if(imageData.data[pos] - firstAlphaThreshold >= 0) return true;
				pos += 4;
			}
			return false;
		case "Point":
			var point = secondObject;
			var x = point.x - firstPoint.x, y = point.y - firstPoint.y;
			if(x < 0 || y < 0 || x >= (me.mTextureBuffer != null?me.mTextureBuffer.width:0) || y >= (me.mTextureBuffer != null?me.mTextureBuffer.height:0)) return false;
			if(imageData.data[Math.round(4 * (y * (me.mTextureBuffer != null?me.mTextureBuffer.width:0) + x)) + 3] - firstAlphaThreshold > 0) return true;
			return false;
		case "Bitmap":
			throw "BitmapData::hitTest secondObject argument as BitmapData is not (yet) supported.";
			return false;
		case "BitmapData":
			throw "BitmapData::hitTest secondObject argument as BitmapData is not (yet) supported.";
			return false;
		default:
			throw "BitmapData::hitTest secondObject argument must be either a Rectangle, a Point, a Bitmap or a BitmapData object.";
			return false;
		}
	};
	if(!this.jeashLocked) {
		this.jeashLease.set(this.jeashLeaseNum++,Date.now().getTime());
		var ctx = this.mTextureBuffer.getContext("2d");
		var imageData = ctx.getImageData(0,0,this.mTextureBuffer != null?this.mTextureBuffer.width:0,this.mTextureBuffer != null?this.mTextureBuffer.height:0);
		return doHitTest(imageData);
		ctx.putImageData(imageData,0,0);
	} else {
		return doHitTest(this.jeashImageData);
		this.jeashImageDataChanged = true;
	}
}
jeash.display.BitmapData.prototype.scroll = function(x,y) {
	throw "Not implemented yet, patches welcome. BitmapData::scroll.";
}
jeash.display.BitmapData.prototype.jeashGetLease = function() {
	return this.jeashLease;
}
jeash.display.BitmapData.prototype.jeashGetNumRefBitmaps = function() {
	return this.jeashAssignedBitmaps;
}
jeash.display.BitmapData.prototype.jeashIncrNumRefBitmaps = function() {
	this.jeashAssignedBitmaps++;
}
jeash.display.BitmapData.prototype.jeashDecrNumRefBitmaps = function() {
	this.jeashAssignedBitmaps--;
}
jeash.display.BitmapData.prototype.jeashBuildLease = function() {
	this.jeashLease.set(this.jeashLeaseNum++,Date.now().getTime());
}
jeash.display.BitmapData.prototype.__class__ = jeash.display.BitmapData;
jeash.display.BitmapData.__interfaces__ = [jeash.display.IBitmapDrawable];
jeash.display.PixelSnapping = { __ename__ : ["jeash","display","PixelSnapping"], __constructs__ : ["NEVER","AUTO","ALWAYS"] }
jeash.display.PixelSnapping.NEVER = ["NEVER",0];
jeash.display.PixelSnapping.NEVER.toString = $estr;
jeash.display.PixelSnapping.NEVER.__enum__ = jeash.display.PixelSnapping;
jeash.display.PixelSnapping.AUTO = ["AUTO",1];
jeash.display.PixelSnapping.AUTO.toString = $estr;
jeash.display.PixelSnapping.AUTO.__enum__ = jeash.display.PixelSnapping;
jeash.display.PixelSnapping.ALWAYS = ["ALWAYS",2];
jeash.display.PixelSnapping.ALWAYS.toString = $estr;
jeash.display.PixelSnapping.ALWAYS.__enum__ = jeash.display.PixelSnapping;
nape.shape.EdgeList = function(p) {
	if( p === $_ ) return;
	this.zpp_inner = new zpp_nape.util.ZPP_EdgeList();
	this.zpp_inner.outer = this;
}
nape.shape.EdgeList.__name__ = ["nape","shape","EdgeList"];
nape.shape.EdgeList.fromArray = function(array) {
	var ret = new nape.shape.EdgeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.shape.EdgeList.prototype.zpp_inner = null;
nape.shape.EdgeList.prototype.length = null;
nape.shape.EdgeList.prototype.flibget_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = this.zpp_inner.length;
	}
	return this.zpp_inner.user_length;
}
nape.shape.EdgeList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
}
nape.shape.EdgeList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.flibget_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = index == this.flibget_length() - 1?index:this.flibget_length() - 2 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = index;
		this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
	} else while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
	}
	return this.zpp_inner.at_ite.elt.wrapper();
}
nape.shape.EdgeList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.shape.EdgeList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.shape.EdgeList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.head.elt;
		var retx = (function($this) {
			var $r;
			if(ret.outer == null) {
				zpp_nape.shape.ZPP_Edge.internal = true;
				ret.outer = new nape.shape.Edge();
				zpp_nape.shape.ZPP_Edge.internal = false;
				ret.outer.zpp_inner = ret;
			}
			$r = ret.outer;
			return $r;
		}(this));
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = (function($this) {
			var $r;
			if(ret.outer == null) {
				zpp_nape.shape.ZPP_Edge.internal = true;
				ret.outer = new nape.shape.Edge();
				zpp_nape.shape.ZPP_Edge.internal = false;
				ret.outer.zpp_inner = ret;
			}
			$r = ret.outer;
			return $r;
		}(this));
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx = (function($this) {
		var $r;
		if(ret.outer == null) {
			zpp_nape.shape.ZPP_Edge.internal = true;
			ret.outer = new nape.shape.Edge();
			zpp_nape.shape.ZPP_Edge.internal = false;
			ret.outer.zpp_inner = ret;
		}
		$r = ret.outer;
		return $r;
	}(this));
	return retx;
}
nape.shape.EdgeList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
		var retx = (function($this) {
			var $r;
			if(ret.outer == null) {
				zpp_nape.shape.ZPP_Edge.internal = true;
				ret.outer = new nape.shape.Edge();
				zpp_nape.shape.ZPP_Edge.internal = false;
				ret.outer.zpp_inner = ret;
			}
			$r = ret.outer;
			return $r;
		}(this));
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.head.elt;
		var retx = (function($this) {
			var $r;
			if(ret.outer == null) {
				zpp_nape.shape.ZPP_Edge.internal = true;
				ret.outer = new nape.shape.Edge();
				zpp_nape.shape.ZPP_Edge.internal = false;
				ret.outer.zpp_inner = ret;
			}
			$r = ret.outer;
			return $r;
		}(this));
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx = (function($this) {
		var $r;
		if(ret.outer == null) {
			zpp_nape.shape.ZPP_Edge.internal = true;
			ret.outer = new nape.shape.Edge();
			zpp_nape.shape.ZPP_Edge.internal = false;
			ret.outer.zpp_inner = ret;
		}
		$r = ret.outer;
		return $r;
	}(this));
	return retx;
}
nape.shape.EdgeList.prototype.add = function(obj) {
	return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
}
nape.shape.EdgeList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret = (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var x = cx_ite.elt;
				if(x == obj.zpp_inner) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
}
nape.shape.EdgeList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
}
nape.shape.EdgeList.prototype.empty = function() {
	return this.zpp_inner.inner.head == null;
}
nape.shape.EdgeList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.iterators == null) this.zpp_inner.iterators = new zpp_nape.util.ZNPList_EdgeIterator();
	return nape.shape.EdgeIterator.get(this);
}
nape.shape.EdgeList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.shape.EdgeList();
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_EdgeIterator();
		$r = nape.shape.EdgeIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Edge" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
}
nape.shape.EdgeList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var $it0 = (function($this) {
		var $r;
		xs.zpp_inner.valmod();
		if(xs.zpp_inner.iterators == null) xs.zpp_inner.iterators = new zpp_nape.util.ZNPList_EdgeIterator();
		$r = nape.shape.EdgeIterator.get(xs);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(!this.has(x)) if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
	}
}
nape.shape.EdgeList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_EdgeIterator();
		$r = nape.shape.EdgeIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		if(!fst) ret += ",";
		ret += i == null?"NULL":i.zpp_inner.polygon == null?"Edge(object-pooled)":i.zpp_inner.polygon.body == null?(function($this) {
			var $r;
			i.zpp_inner.polygon.validate_laxi();
			$r = "{ localNormal : " + ("{ x: " + i.zpp_inner.lnormx + " y: " + i.zpp_inner.lnormy + " }") + " }";
			return $r;
		}(this)):(function($this) {
			var $r;
			i.zpp_inner.polygon.validate_gaxi();
			$r = "{ localNormal : " + ("{ x: " + i.zpp_inner.lnormx + " y: " + i.zpp_inner.lnormy + " }") + " worldNormal : " + ("{ x: " + i.zpp_inner.gnormx + " y: " + i.zpp_inner.gnormy + " }") + " }";
			return $r;
		}(this));
		fst = false;
	}
	return ret + "]";
}
nape.shape.EdgeList.prototype.__class__ = nape.shape.EdgeList;
nape.shape.EdgeIterator = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_EdgeList.internal) throw "Error: Cannot instantiate " + "Edge" + "Iterator derp!";
}
nape.shape.EdgeIterator.__name__ = ["nape","shape","EdgeIterator"];
nape.shape.EdgeIterator.zpp_pool = null;
nape.shape.EdgeIterator.get = function(list) {
	var ret = nape.shape.EdgeIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_EdgeList.internal = true;
		var ret = new nape.shape.EdgeIterator();
		zpp_nape.util.ZPP_EdgeList.internal = false;
		$r = ret;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.shape.EdgeIterator.zpp_pool;
		nape.shape.EdgeIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	list.zpp_inner.iterators.add(ret);
	return ret;
}
nape.shape.EdgeIterator.prototype.zpp_inner = null;
nape.shape.EdgeIterator.prototype.zpp_i = null;
nape.shape.EdgeIterator.prototype.zpp_critical = null;
nape.shape.EdgeIterator.prototype.zpp_next = null;
nape.shape.EdgeIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.flibget_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.shape.EdgeIterator.zpp_pool;
		nape.shape.EdgeIterator.zpp_pool = this;
		this.zpp_inner.zpp_inner.iterators.remove(this);
		return false;
	}
}
nape.shape.EdgeIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
}
nape.shape.EdgeIterator.prototype.__class__ = nape.shape.EdgeIterator;
nape.shape.Edge = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.shape.ZPP_Edge.internal) throw "Error: Cannot instantiate an Edge derp!";
}
nape.shape.Edge.__name__ = ["nape","shape","Edge"];
nape.shape.Edge.prototype.zpp_inner = null;
nape.shape.Edge.prototype.localNormal = null;
nape.shape.Edge.prototype.flibget_localNormal = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		if($this.zpp_inner.wrap_lnorm == null) $this.zpp_inner.get_lnorm();
		$r = $this.zpp_inner.wrap_lnorm;
		return $r;
	}(this));
}
nape.shape.Edge.prototype.worldNormal = null;
nape.shape.Edge.prototype.flibget_worldNormal = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		if($this.zpp_inner.wrap_gnorm == null) $this.zpp_inner.get_gnorm();
		$r = $this.zpp_inner.wrap_gnorm;
		return $r;
	}(this));
}
nape.shape.Edge.prototype.length = null;
nape.shape.Edge.prototype.flibget_length = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		$this.zpp_inner.polygon.validate_laxi();
		$r = $this.zpp_inner.length;
		return $r;
	}(this));
}
nape.shape.Edge.prototype.localProjection = null;
nape.shape.Edge.prototype.flibget_localProjection = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		$this.zpp_inner.polygon.validate_laxi();
		$r = $this.zpp_inner.lprojection;
		return $r;
	}(this));
}
nape.shape.Edge.prototype.worldProjection = null;
nape.shape.Edge.prototype.flibget_worldProjection = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		if($this.zpp_inner.polygon.body == null) throw "Error: Edge world projection only makes sense for Polygons contained within a rigid body";
		$this.zpp_inner.polygon.validate_gaxi();
		$r = $this.zpp_inner.gprojection;
		return $r;
	}(this));
}
nape.shape.Edge.prototype.toString = function() {
	if(this.zpp_inner.polygon == null) return "Edge(object-pooled)"; else if(this.zpp_inner.polygon.body == null) {
		this.zpp_inner.polygon.validate_laxi();
		return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " }";
	} else {
		this.zpp_inner.polygon.validate_gaxi();
		return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " worldNormal : " + ("{ x: " + this.zpp_inner.gnormx + " y: " + this.zpp_inner.gnormy + " }") + " }";
	}
}
nape.shape.Edge.prototype.__class__ = nape.shape.Edge;
NMEPreloader = function(p) {
	if( p === $_ ) return;
	jeash.display.Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 9;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 3;
	this.outline = new jeash.display.Sprite();
	this.outline.jeashGetGraphics().lineStyle(1,color,0.15,true);
	this.outline.jeashGetGraphics().drawRoundRect(0,0,width,height,padding * 2,padding * 2);
	this.outline.jeashSetX(x);
	this.outline.jeashSetY(y);
	this.addChild(this.outline);
	this.progress = new jeash.display.Sprite();
	this.progress.jeashGetGraphics().beginFill(color,0.35);
	this.progress.jeashGetGraphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.jeashSetX(x + padding);
	this.progress.jeashSetY(y + padding);
	this.progress.jeashSetScaleX(0);
	this.addChild(this.progress);
}
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = jeash.display.Sprite;
for(var k in jeash.display.Sprite.prototype ) NMEPreloader.prototype[k] = jeash.display.Sprite.prototype[k];
NMEPreloader.prototype.outline = null;
NMEPreloader.prototype.progress = null;
NMEPreloader.prototype.getBackgroundColor = function() {
	return 16777215;
}
NMEPreloader.prototype.getHeight = function() {
	return 600;
}
NMEPreloader.prototype.getWidth = function() {
	return 800;
}
NMEPreloader.prototype.onInit = function() {
}
NMEPreloader.prototype.onLoaded = function() {
}
NMEPreloader.prototype.onUpdate = function(bytesLoaded,bytesTotal) {
	var percentLoaded = bytesLoaded / bytesTotal;
	if(percentLoaded > 1) percentLoaded == 1;
	this.progress.jeashSetScaleX(percentLoaded);
}
NMEPreloader.prototype.__class__ = NMEPreloader;
nape.callbacks.CallbackQueue = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.callbacks.ZPP_Callback.internal) throw "Error: Cannot instantiate a CallbackQueue derp!";
}
nape.callbacks.CallbackQueue.__name__ = ["nape","callbacks","CallbackQueue"];
nape.callbacks.CallbackQueue.prototype.zpp_inner = null;
nape.callbacks.CallbackQueue.prototype.empty = function() {
	return this.zpp_inner.next == null;
}
nape.callbacks.CallbackQueue.prototype.pop = function() {
	if(this.zpp_inner.next == null) throw "Error: CallbackQueue is empty";
	var ret = this.zpp_inner.pop();
	var o = ret;
	null;
	o.next = zpp_nape.callbacks.ZPP_Callback.zpp_pool;
	zpp_nape.callbacks.ZPP_Callback.zpp_pool = o;
	return (function($this) {
		var $r;
		if(ret.outer == null) {
			zpp_nape.callbacks.ZPP_Callback.internal = true;
			ret.outer = new nape.callbacks.Callback();
			zpp_nape.callbacks.ZPP_Callback.internal = false;
			ret.outer.zpp_inner = ret;
		}
		$r = ret.outer;
		return $r;
	}(this));
}
nape.callbacks.CallbackQueue.prototype.clear = function() {
	while(!(this.zpp_inner.next == null)) this.pop();
}
nape.callbacks.CallbackQueue.prototype.size = null;
nape.callbacks.CallbackQueue.prototype.flibget_size = function() {
	return this.zpp_inner.length;
}
nape.callbacks.CallbackQueue.prototype.__class__ = nape.callbacks.CallbackQueue;
nape.callbacks.CbEvent = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "CbEvent" + " derp!";
}
nape.callbacks.CbEvent.__name__ = ["nape","callbacks","CbEvent"];
nape.callbacks.CbEvent.BEGIN = null;
nape.callbacks.CbEvent.flibget_BEGIN = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
}
nape.callbacks.CbEvent.ONGOING = null;
nape.callbacks.CbEvent.flibget_ONGOING = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
}
nape.callbacks.CbEvent.END = null;
nape.callbacks.CbEvent.flibget_END = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_END;
}
nape.callbacks.CbEvent.WAKE = null;
nape.callbacks.CbEvent.flibget_WAKE = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
}
nape.callbacks.CbEvent.SLEEP = null;
nape.callbacks.CbEvent.flibget_SLEEP = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
}
nape.callbacks.CbEvent.BREAK = null;
nape.callbacks.CbEvent.flibget_BREAK = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
}
nape.callbacks.CbEvent.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
		return $r;
	}(this))) return "BEGIN"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
		return $r;
	}(this))) return "ONGOING"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
		return $r;
	}(this))) return "END"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this))) return "WAKE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this))) return "SLEEP"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
		return $r;
	}(this))) return "BREAK"; else return "";
}
nape.callbacks.CbEvent.prototype.__class__ = nape.callbacks.CbEvent;
nape.callbacks.Callback = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.callbacks.ZPP_Callback.internal) throw "Error: Callback cannot be instantiated derp!";
}
nape.callbacks.Callback.__name__ = ["nape","callbacks","Callback"];
nape.callbacks.Callback.prototype.zpp_inner = null;
nape.callbacks.Callback.prototype.event = null;
nape.callbacks.Callback.prototype.flibget_event = function() {
	return [(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
		return $r;
	}(this))][this.zpp_inner.event];
}
nape.callbacks.Callback.prototype.arbiter = null;
nape.callbacks.Callback.prototype.flibget_arbiter = function() {
	return this.zpp_inner.arbiter == null?null:this.zpp_inner.arbiter.wrapper();
}
nape.callbacks.Callback.prototype.body = null;
nape.callbacks.Callback.prototype.flibget_body = function() {
	return this.zpp_inner.body == null?null:this.zpp_inner.body.outer;
}
nape.callbacks.Callback.prototype.constraint = null;
nape.callbacks.Callback.prototype.flibget_constraint = function() {
	return this.zpp_inner.constraint == null?null:this.zpp_inner.constraint.outer;
}
nape.callbacks.Callback.prototype.listener = null;
nape.callbacks.Callback.prototype.flibget_listener = function() {
	return this.zpp_inner.listener.outer;
}
nape.callbacks.Callback.prototype.toString = function() {
	var ret = "Cb:";
	ret += ["BEGIN","ONGOING","END","WAKE","SLEEP","BREAK"][this.zpp_inner.event];
	if(this.zpp_inner.event == 3 || this.zpp_inner.event == 4) ret += ":" + ((this.zpp_inner.body == null?null:this.zpp_inner.body.outer) != null?(this.zpp_inner.body == null?null:this.zpp_inner.body.outer).toString():"{Constraint}");
	ret += " : listener: " + this.zpp_inner.listener.outer;
	return ret;
}
nape.callbacks.Callback.prototype.__class__ = nape.callbacks.Callback;
nape.constraint.AngleJoint = function(body1,body2,jointMin,jointMax) {
	if( body1 === $_ ) return;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_AngleJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	if(body1 == null) throw "Error: Constraint::" + "body1" + " cannot be null";
	if(body1.zpp_inner != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = body1.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != body1.zpp_inner) body1.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body1.zpp_inner.wake();
	}
	if(this.zpp_inner_zn.b1 == null) null; else this.zpp_inner_zn.b1.outer;
	if(body2 == null) throw "Error: Constraint::" + "body2" + " cannot be null";
	if(body2.zpp_inner != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = body2.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != body2.zpp_inner) body2.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body2.zpp_inner.wake();
	}
	if(this.zpp_inner_zn.b2 == null) null; else this.zpp_inner_zn.b2.outer;
	if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
}
nape.constraint.AngleJoint.__name__ = ["nape","constraint","AngleJoint"];
nape.constraint.AngleJoint.__super__ = nape.constraint.Constraint;
for(var k in nape.constraint.Constraint.prototype ) nape.constraint.AngleJoint.prototype[k] = nape.constraint.Constraint.prototype[k];
nape.constraint.AngleJoint.prototype.zpp_inner_zn = null;
nape.constraint.AngleJoint.prototype.body1 = null;
nape.constraint.AngleJoint.prototype.flibget_body1 = function() {
	return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
}
nape.constraint.AngleJoint.prototype.flibset_body1 = function(body1) {
	if(body1 == null) throw "Error: Constraint::" + "body1" + " cannot be null";
	if(body1.zpp_inner != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = body1.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != body1.zpp_inner) body1.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body1.zpp_inner.wake();
	}
	return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
}
nape.constraint.AngleJoint.prototype.body2 = null;
nape.constraint.AngleJoint.prototype.flibget_body2 = function() {
	return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
}
nape.constraint.AngleJoint.prototype.flibset_body2 = function(body2) {
	if(body2 == null) throw "Error: Constraint::" + "body2" + " cannot be null";
	if(body2.zpp_inner != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = body2.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != body2.zpp_inner) body2.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body2.zpp_inner.wake();
	}
	return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
}
nape.constraint.AngleJoint.prototype.jointMin = null;
nape.constraint.AngleJoint.prototype.flibget_jointMin = function() {
	return this.zpp_inner_zn.jointMin;
}
nape.constraint.AngleJoint.prototype.flibset_jointMin = function(jointMin) {
	if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMin;
}
nape.constraint.AngleJoint.prototype.jointMax = null;
nape.constraint.AngleJoint.prototype.flibget_jointMax = function() {
	return this.zpp_inner_zn.jointMax;
}
nape.constraint.AngleJoint.prototype.flibset_jointMax = function(jointMax) {
	if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMax;
}
nape.constraint.AngleJoint.prototype.ratio = null;
nape.constraint.AngleJoint.prototype.flibget_ratio = function() {
	return this.zpp_inner_zn.ratio;
}
nape.constraint.AngleJoint.prototype.flibset_ratio = function(ratio) {
	if(ratio != ratio) throw "Error: AngleJoint::ratio cannot be NaN";
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.ratio;
}
nape.constraint.AngleJoint.prototype.slack = null;
nape.constraint.AngleJoint.prototype.flibget_slack = function() {
	return this.zpp_inner_zn.slack;
}
nape.constraint.AngleJoint.prototype.impulse = function() {
	var ret = new nape.geom.MatMN(1,1);
	{
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc + this.zpp_inner_zn.pjAcc;
	}
	return ret;
}
nape.constraint.AngleJoint.prototype.bodyImpulse = function(body) {
	if(body == null) throw "Error: Cannot evaluate impulse on null body";
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
	if(!this.zpp_inner.active) return new nape.geom.Vec3(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
}
nape.constraint.AngleJoint.prototype.__class__ = nape.constraint.AngleJoint;
jeash.display.GraphicsPathCommand = function() { }
jeash.display.GraphicsPathCommand.__name__ = ["jeash","display","GraphicsPathCommand"];
jeash.display.GraphicsPathCommand.prototype.__class__ = jeash.display.GraphicsPathCommand;
zpp_nape.constraint.ZPP_AngleJoint = function(p) {
	if( p === $_ ) return;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.ratio = 1;
	this.jAcc = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
}
zpp_nape.constraint.ZPP_AngleJoint.__name__ = ["zpp_nape","constraint","ZPP_AngleJoint"];
zpp_nape.constraint.ZPP_AngleJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
for(var k in zpp_nape.constraint.ZPP_Constraint.prototype ) zpp_nape.constraint.ZPP_AngleJoint.prototype[k] = zpp_nape.constraint.ZPP_Constraint.prototype[k];
zpp_nape.constraint.ZPP_AngleJoint.prototype.outer_zn = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.ratio = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.jointMin = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.jointMax = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.slack = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.equal = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.scale = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		if(b == this.b1) return new nape.geom.Vec3(0,0,-this.scale * (this.jAcc + this.pjAcc)); else return new nape.geom.Vec3(0,0,this.ratio * this.scale * (this.jAcc + this.pjAcc));
	} else return new nape.geom.Vec3(0,0,0);
}
zpp_nape.constraint.ZPP_AngleJoint.prototype.activeBodies = function() {
	this.b1.constraints.add(this);
	if(this.b2 != this.b1) this.b2.constraints.add(this);
}
zpp_nape.constraint.ZPP_AngleJoint.prototype.inactiveBodies = function() {
	this.b1.constraints.remove(this);
	if(this.b2 != this.b1) this.b2.constraints.remove(this);
}
zpp_nape.constraint.ZPP_AngleJoint.prototype.b1 = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.b2 = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.kMass = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.jAcc = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.pjAcc = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.jMax = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.gamma = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.bias = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.stepped = null;
zpp_nape.constraint.ZPP_AngleJoint.prototype.validate = function() {
	if(this.b1 == this.b2) throw "Error: AngleJoint cannot be simulated with body1 == body2";
	if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
	if(this.jointMin > this.jointMax) throw "Error: AngleJoint must have jointMin <= jointMax";
	if(!(this.b1.type == 2) && !(this.b2.type == 2)) throw "Error: Constraints cannot have both bodies non-dynamic";
}
zpp_nape.constraint.ZPP_AngleJoint.prototype.wake_connected = function() {
	if(this.b1.type == 2) this.b1.wake();
	if(this.b2.type == 2) this.b2.wake();
}
zpp_nape.constraint.ZPP_AngleJoint.prototype.forest = function() {
	if(this.b1.type == 2) {
		var xr = this.b1.component == this.b1.component.parent?this.b1.component:(function($this) {
			var $r;
			var obj = $this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		var yr = this.component == this.component.parent?this.component:(function($this) {
			var $r;
			var obj = $this.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == 2) {
		var xr = this.b2.component == this.b2.component.parent?this.b2.component:(function($this) {
			var $r;
			var obj = $this.b2.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		var yr = this.component == this.component.parent?this.component:(function($this) {
			var $r;
			var obj = $this.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
}
zpp_nape.constraint.ZPP_AngleJoint.prototype.pair_exists = function(id,di) {
	return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
}
zpp_nape.constraint.ZPP_AngleJoint.prototype.destroy = function() {
	this.b1.constraints.remove(this);
	if(this.b2 != this.b1) this.b2.constraints.remove(this);
}
zpp_nape.constraint.ZPP_AngleJoint.prototype.clearcache = function() {
	this.jAcc = 0;
	this.pjAcc = 0;
	this.pre_dt = -1.0;
}
zpp_nape.constraint.ZPP_AngleJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.equal = this.jointMin == this.jointMax;
	var C = (function($this) {
		var $r;
		var C = $this.ratio * $this.b2.rot - $this.b1.rot;
		if($this.equal) {
			C -= $this.jointMax;
			$this.slack = false;
			$this.scale = 1.0;
		} else if(C < $this.jointMin) {
			C = $this.jointMin - C;
			$this.scale = -1.0;
			$this.slack = false;
		} else if(C > $this.jointMax) {
			C -= $this.jointMax;
			$this.scale = 1.0;
			$this.slack = false;
		} else {
			$this.scale = 0.0;
			C = 0;
			$this.slack = true;
		}
		$r = C;
		return $r;
	}(this));
	if(!this.slack) {
		this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
		if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
		if(!this.stiff) {
			if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
			var biasCoef;
			this.kMass *= (function($this) {
				var $r;
				var omega = 2 * Math.PI * $this.frequency;
				$this.gamma = 1 / (omega * dt * (2 * $this.damping + omega * dt));
				var ig = 1 / (1 + $this.gamma);
				biasCoef = omega * omega * $this.gamma;
				$this.gamma *= ig;
				$r = ig;
				return $r;
			}(this));
			this.bias = -C * dt * biasCoef;
			if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
		} else {
			this.bias = 0;
			this.gamma = 0;
		}
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
	}
	return false;
}
zpp_nape.constraint.ZPP_AngleJoint.prototype.warmStart = function() {
	if(!this.slack) {
		this.b1.angvel -= this.scale * this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * this.jAcc;
	}
	this.pjAcc = this.jAcc;
}
zpp_nape.constraint.ZPP_AngleJoint.prototype.applyImpulseVel = function() {
	if(this.slack) return false;
	var E = this.scale * (this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel);
	var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
	var jOld = this.jAcc;
	this.jAcc += j;
	if(this.breakUnderForce) {
		if(this.jAcc > this.jMax || this.jAcc < -this.jMax) return true; else if(!this.equal && this.jAcc > 0) this.jAcc = 0;
	} else if(!this.stiff) {
		if(this.equal) {
			if(this.jAcc < -this.jMax) this.jAcc = -this.jMax; else if(this.jAcc > this.jMax) this.jAcc = this.jMax;
		} else if(this.jAcc > 0) this.jAcc = 0; else if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
	} else if(!this.equal && this.jAcc > 0) this.jAcc = 0;
	j = this.jAcc - jOld;
	this.b1.angvel -= this.scale * this.b1.iinertia * j;
	this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * j;
	return false;
}
zpp_nape.constraint.ZPP_AngleJoint.prototype.applyImpulsePos = function() {
	var E;
	var j;
	var slack;
	E = (function($this) {
		var $r;
		var C = $this.ratio * $this.b2.rot - $this.b1.rot;
		if($this.equal) {
			C -= $this.jointMax;
			slack = false;
			$this.scale = 1.0;
		} else if(C < $this.jointMin) {
			C = $this.jointMin - C;
			$this.scale = -1.0;
			slack = false;
		} else if(C > $this.jointMax) {
			C -= $this.jointMax;
			$this.scale = 1.0;
			slack = false;
		} else {
			$this.scale = 0.0;
			C = 0;
			slack = true;
		}
		$r = C;
		return $r;
	}(this));
	if(!slack) {
		if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
		E *= 0.5;
		j = -E * this.kMass;
		if(this.equal || j < 0) {
			this.b1.delta_rot(-this.scale * j * this.b1.iinertia);
			this.b2.delta_rot(this.ratio * this.scale * j * this.b2.iinertia);
		}
	}
	return false;
}
zpp_nape.constraint.ZPP_AngleJoint.prototype.__class__ = zpp_nape.constraint.ZPP_AngleJoint;
Type = function() { }
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null;
	if(o.__enum__ != null) return null;
	return o.__class__;
}
Type.getEnum = function(o) {
	if(o == null) return null;
	return o.__enum__;
}
Type.getSuperClass = function(c) {
	return c.__super__;
}
Type.getClassName = function(c) {
	var a = c.__name__;
	return a.join(".");
}
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
}
Type.resolveClass = function(name) {
	var cl;
	try {
		cl = eval(name);
	} catch( e ) {
		cl = null;
	}
	if(cl == null || cl.__name__ == null) return null;
	return cl;
}
Type.resolveEnum = function(name) {
	var e;
	try {
		e = eval(name);
	} catch( err ) {
		e = null;
	}
	if(e == null || e.__ename__ == null) return null;
	return e;
}
Type.createInstance = function(cl,args) {
	if(args.length <= 3) return new cl(args[0],args[1],args[2]);
	if(args.length > 8) throw "Too many arguments";
	return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
}
Type.createEmptyInstance = function(cl) {
	return new cl($_);
}
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw "No such constructor " + constr;
	if(Reflect.isFunction(f)) {
		if(params == null) throw "Constructor " + constr + " need parameters";
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) throw "Constructor " + constr + " does not need parameters";
	return f;
}
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) throw index + " is not a valid enum constructor index";
	return Type.createEnum(e,c,params);
}
Type.getInstanceFields = function(c) {
	var a = Reflect.fields(c.prototype);
	a.remove("__class__");
	return a;
}
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	a.remove("__name__");
	a.remove("__interfaces__");
	a.remove("__super__");
	a.remove("prototype");
	return a;
}
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.copy();
}
Type["typeof"] = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "string":
		return ValueType.TClass(String);
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
		return ValueType.TFloat;
	case "object":
		if(v == null) return ValueType.TNull;
		var e = v.__enum__;
		if(e != null) return ValueType.TEnum(e);
		var c = v.__class__;
		if(c != null) return ValueType.TClass(c);
		return ValueType.TObject;
	case "function":
		if(v.__name__ != null) return ValueType.TObject;
		return ValueType.TFunction;
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
}
Type.enumEq = function(a,b) {
	if(a == b) return true;
	try {
		if(a[0] != b[0]) return false;
		var _g1 = 2, _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) return false;
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) return false;
	} catch( e ) {
		return false;
	}
	return true;
}
Type.enumConstructor = function(e) {
	return e[0];
}
Type.enumParameters = function(e) {
	return e.slice(2);
}
Type.enumIndex = function(e) {
	return e[1];
}
Type.prototype.__class__ = Type;
haxe.Unserializer = function(buf) {
	if( buf === $_ ) return;
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = new Array();
	this.cache = new Array();
	var r = haxe.Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = Type;
		haxe.Unserializer.DEFAULT_RESOLVER = r;
	}
	this.setResolver(r);
}
haxe.Unserializer.__name__ = ["haxe","Unserializer"];
haxe.Unserializer.initCodes = function() {
	var codes = new Array();
	var _g1 = 0, _g = haxe.Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe.Unserializer.BASE64.cca(i)] = i;
	}
	return codes;
}
haxe.Unserializer.run = function(v) {
	return new haxe.Unserializer(v).unserialize();
}
haxe.Unserializer.prototype.buf = null;
haxe.Unserializer.prototype.pos = null;
haxe.Unserializer.prototype.length = null;
haxe.Unserializer.prototype.cache = null;
haxe.Unserializer.prototype.scache = null;
haxe.Unserializer.prototype.resolver = null;
haxe.Unserializer.prototype.setResolver = function(r) {
	if(r == null) this.resolver = { resolveClass : function(_) {
		return null;
	}, resolveEnum : function(_) {
		return null;
	}}; else this.resolver = r;
}
haxe.Unserializer.prototype.getResolver = function() {
	return this.resolver;
}
haxe.Unserializer.prototype.get = function(p) {
	return this.buf.cca(p);
}
haxe.Unserializer.prototype.readDigits = function() {
	var k = 0;
	var s = false;
	var fpos = this.pos;
	while(true) {
		var c = this.buf.cca(this.pos);
		if(c != c) break;
		if(c == 45) {
			if(this.pos != fpos) break;
			s = true;
			this.pos++;
			continue;
		}
		if(c < 48 || c > 57) break;
		k = k * 10 + (c - 48);
		this.pos++;
	}
	if(s) k *= -1;
	return k;
}
haxe.Unserializer.prototype.unserializeObject = function(o) {
	while(true) {
		if(this.pos >= this.length) throw "Invalid object";
		if(this.buf.cca(this.pos) == 103) break;
		var k = this.unserialize();
		if(!Std["is"](k,String)) throw "Invalid object key";
		var v = this.unserialize();
		Reflect.setField(o,k,v);
	}
	this.pos++;
}
haxe.Unserializer.prototype.unserializeEnum = function(edecl,tag) {
	var constr = Reflect.field(edecl,tag);
	if(constr == null) throw "Unknown enum tag " + Type.getEnumName(edecl) + "." + tag;
	if(this.buf.cca(this.pos++) != 58) throw "Invalid enum format";
	var nargs = this.readDigits();
	if(nargs == 0) {
		this.cache.push(constr);
		return constr;
	}
	var args = new Array();
	while(nargs > 0) {
		args.push(this.unserialize());
		nargs -= 1;
	}
	var e = constr.apply(edecl,args);
	this.cache.push(e);
	return e;
}
haxe.Unserializer.prototype.unserialize = function() {
	switch(this.buf.cca(this.pos++)) {
	case 110:
		return null;
	case 116:
		return true;
	case 102:
		return false;
	case 122:
		return 0;
	case 105:
		return this.readDigits();
	case 100:
		var p1 = this.pos;
		while(true) {
			var c = this.buf.cca(this.pos);
			if(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
		}
		return Std.parseFloat(this.buf.substr(p1,this.pos - p1));
	case 121:
		var len = this.readDigits();
		if(this.buf.cca(this.pos++) != 58 || this.length - this.pos < len) throw "Invalid string length";
		var s = this.buf.substr(this.pos,len);
		this.pos += len;
		s = StringTools.urlDecode(s);
		this.scache.push(s);
		return s;
	case 107:
		return Math.NaN;
	case 109:
		return Math.NEGATIVE_INFINITY;
	case 112:
		return Math.POSITIVE_INFINITY;
	case 97:
		var buf = this.buf;
		var a = new Array();
		this.cache.push(a);
		while(true) {
			var c = this.buf.cca(this.pos);
			if(c == 104) {
				this.pos++;
				break;
			}
			if(c == 117) {
				this.pos++;
				var n = this.readDigits();
				a[a.length + n - 1] = null;
			} else a.push(this.unserialize());
		}
		return a;
	case 111:
		var o = { };
		this.cache.push(o);
		this.unserializeObject(o);
		return o;
	case 114:
		var n = this.readDigits();
		if(n < 0 || n >= this.cache.length) throw "Invalid reference";
		return this.cache[n];
	case 82:
		var n = this.readDigits();
		if(n < 0 || n >= this.scache.length) throw "Invalid string reference";
		return this.scache[n];
	case 120:
		throw this.unserialize();
		break;
	case 99:
		var name = this.unserialize();
		var cl = this.resolver.resolveClass(name);
		if(cl == null) throw "Class not found " + name;
		var o = Type.createEmptyInstance(cl);
		this.cache.push(o);
		this.unserializeObject(o);
		return o;
	case 119:
		var name = this.unserialize();
		var edecl = this.resolver.resolveEnum(name);
		if(edecl == null) throw "Enum not found " + name;
		return this.unserializeEnum(edecl,this.unserialize());
	case 106:
		var name = this.unserialize();
		var edecl = this.resolver.resolveEnum(name);
		if(edecl == null) throw "Enum not found " + name;
		this.pos++;
		var index = this.readDigits();
		var tag = Type.getEnumConstructs(edecl)[index];
		if(tag == null) throw "Unknown enum index " + name + "@" + index;
		return this.unserializeEnum(edecl,tag);
	case 108:
		var l = new List();
		this.cache.push(l);
		var buf = this.buf;
		while(this.buf.cca(this.pos) != 104) l.add(this.unserialize());
		this.pos++;
		return l;
	case 98:
		var h = new Hash();
		this.cache.push(h);
		var buf = this.buf;
		while(this.buf.cca(this.pos) != 104) {
			var s = this.unserialize();
			h.set(s,this.unserialize());
		}
		this.pos++;
		return h;
	case 113:
		var h = new IntHash();
		this.cache.push(h);
		var buf = this.buf;
		var c = this.buf.cca(this.pos++);
		while(c == 58) {
			var i = this.readDigits();
			h.set(i,this.unserialize());
			c = this.buf.cca(this.pos++);
		}
		if(c != 104) throw "Invalid IntHash format";
		return h;
	case 118:
		var d = Date.fromString(this.buf.substr(this.pos,19));
		this.cache.push(d);
		this.pos += 19;
		return d;
	case 115:
		var len = this.readDigits();
		var buf = this.buf;
		if(this.buf.cca(this.pos++) != 58 || this.length - this.pos < len) throw "Invalid bytes length";
		var codes = haxe.Unserializer.CODES;
		if(codes == null) {
			codes = haxe.Unserializer.initCodes();
			haxe.Unserializer.CODES = codes;
		}
		var i = this.pos;
		var rest = len & 3;
		var size = (len >> 2) * 3 + (rest >= 2?rest - 1:0);
		var max = i + (len - rest);
		var bytes = haxe.io.Bytes.alloc(size);
		var bpos = 0;
		while(i < max) {
			var c1 = codes[buf.cca(i++)];
			var c2 = codes[buf.cca(i++)];
			bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
			var c3 = codes[buf.cca(i++)];
			bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
			var c4 = codes[buf.cca(i++)];
			bytes.b[bpos++] = (c3 << 6 | c4) & 255;
		}
		if(rest >= 2) {
			var c1 = codes[buf.cca(i++)];
			var c2 = codes[buf.cca(i++)];
			bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
			if(rest == 3) {
				var c3 = codes[buf.cca(i++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
			}
		}
		this.pos += len;
		this.cache.push(bytes);
		return bytes;
	case 67:
		var name = this.unserialize();
		var cl = this.resolver.resolveClass(name);
		if(cl == null) throw "Class not found " + name;
		var o = Type.createEmptyInstance(cl);
		this.cache.push(o);
		o.hxUnserialize(this);
		if(this.buf.cca(this.pos++) != 103) throw "Invalid custom data";
		return o;
	default:
	}
	this.pos--;
	throw "Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos;
}
haxe.Unserializer.prototype.__class__ = haxe.Unserializer;
jeash.media.SoundTransform = function(vol,panning) {
}
jeash.media.SoundTransform.__name__ = ["jeash","media","SoundTransform"];
jeash.media.SoundTransform.prototype.leftToLeft = null;
jeash.media.SoundTransform.prototype.leftToRight = null;
jeash.media.SoundTransform.prototype.pan = null;
jeash.media.SoundTransform.prototype.rightToLeft = null;
jeash.media.SoundTransform.prototype.rightToRight = null;
jeash.media.SoundTransform.prototype.volume = null;
jeash.media.SoundTransform.prototype.__class__ = jeash.media.SoundTransform;
haxe.io.Input = function() { }
haxe.io.Input.__name__ = ["haxe","io","Input"];
haxe.io.Input.prototype.bigEndian = null;
haxe.io.Input.prototype.readByte = function() {
	return (function($this) {
		var $r;
		throw "Not implemented";
		return $r;
	}(this));
}
haxe.io.Input.prototype.readBytes = function(s,pos,len) {
	var k = len;
	var b = s.b;
	if(pos < 0 || len < 0 || pos + len > s.length) throw haxe.io.Error.OutsideBounds;
	while(k > 0) {
		b[pos] = this.readByte();
		pos++;
		k--;
	}
	return len;
}
haxe.io.Input.prototype.close = function() {
}
haxe.io.Input.prototype.setEndian = function(b) {
	this.bigEndian = b;
	return b;
}
haxe.io.Input.prototype.readAll = function(bufsize) {
	if(bufsize == null) bufsize = 16384;
	var buf = haxe.io.Bytes.alloc(bufsize);
	var total = new haxe.io.BytesBuffer();
	try {
		while(true) {
			var len = this.readBytes(buf,0,bufsize);
			if(len == 0) throw haxe.io.Error.Blocked;
			total.addBytes(buf,0,len);
		}
	} catch( e ) {
		if( js.Boot.__instanceof(e,haxe.io.Eof) ) {
		} else throw(e);
	}
	return total.getBytes();
}
haxe.io.Input.prototype.readFullBytes = function(s,pos,len) {
	while(len > 0) {
		var k = this.readBytes(s,pos,len);
		pos += k;
		len -= k;
	}
}
haxe.io.Input.prototype.read = function(nbytes) {
	var s = haxe.io.Bytes.alloc(nbytes);
	var p = 0;
	while(nbytes > 0) {
		var k = this.readBytes(s,p,nbytes);
		if(k == 0) throw haxe.io.Error.Blocked;
		p += k;
		nbytes -= k;
	}
	return s;
}
haxe.io.Input.prototype.readUntil = function(end) {
	var buf = new StringBuf();
	var last;
	while((last = this.readByte()) != end) buf.b[buf.b.length] = String.fromCharCode(last);
	return buf.b.join("");
}
haxe.io.Input.prototype.readLine = function() {
	var buf = new StringBuf();
	var last;
	var s;
	try {
		while((last = this.readByte()) != 10) buf.b[buf.b.length] = String.fromCharCode(last);
		s = buf.b.join("");
		if(s.charCodeAt(s.length - 1) == 13) s = s.substr(0,-1);
	} catch( e ) {
		if( js.Boot.__instanceof(e,haxe.io.Eof) ) {
			s = buf.b.join("");
			if(s.length == 0) throw e;
		} else throw(e);
	}
	return s;
}
haxe.io.Input.prototype.readFloat = function() {
	throw "Not implemented";
	return 0;
}
haxe.io.Input.prototype.readDouble = function() {
	throw "Not implemented";
	return 0;
}
haxe.io.Input.prototype.readInt8 = function() {
	var n = this.readByte();
	if(n >= 128) return n - 256;
	return n;
}
haxe.io.Input.prototype.readInt16 = function() {
	var ch1 = this.readByte();
	var ch2 = this.readByte();
	var n = this.bigEndian?ch2 | ch1 << 8:ch1 | ch2 << 8;
	if((n & 32768) != 0) return n - 65536;
	return n;
}
haxe.io.Input.prototype.readUInt16 = function() {
	var ch1 = this.readByte();
	var ch2 = this.readByte();
	return this.bigEndian?ch2 | ch1 << 8:ch1 | ch2 << 8;
}
haxe.io.Input.prototype.readInt24 = function() {
	var ch1 = this.readByte();
	var ch2 = this.readByte();
	var ch3 = this.readByte();
	var n = this.bigEndian?ch3 | ch2 << 8 | ch1 << 16:ch1 | ch2 << 8 | ch3 << 16;
	if((n & 8388608) != 0) return n - 16777216;
	return n;
}
haxe.io.Input.prototype.readUInt24 = function() {
	var ch1 = this.readByte();
	var ch2 = this.readByte();
	var ch3 = this.readByte();
	return this.bigEndian?ch3 | ch2 << 8 | ch1 << 16:ch1 | ch2 << 8 | ch3 << 16;
}
haxe.io.Input.prototype.readInt31 = function() {
	var ch1, ch2, ch3, ch4;
	if(this.bigEndian) {
		ch4 = this.readByte();
		ch3 = this.readByte();
		ch2 = this.readByte();
		ch1 = this.readByte();
	} else {
		ch1 = this.readByte();
		ch2 = this.readByte();
		ch3 = this.readByte();
		ch4 = this.readByte();
	}
	if((ch4 & 128) == 0 != ((ch4 & 64) == 0)) throw haxe.io.Error.Overflow;
	return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
}
haxe.io.Input.prototype.readUInt30 = function() {
	var ch1 = this.readByte();
	var ch2 = this.readByte();
	var ch3 = this.readByte();
	var ch4 = this.readByte();
	if((this.bigEndian?ch1:ch4) >= 64) throw haxe.io.Error.Overflow;
	return this.bigEndian?ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24:ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
}
haxe.io.Input.prototype.readInt32 = function() {
	var ch1 = this.readByte();
	var ch2 = this.readByte();
	var ch3 = this.readByte();
	var ch4 = this.readByte();
	return this.bigEndian?(ch1 << 8 | ch2) << 16 | (ch3 << 8 | ch4):(ch4 << 8 | ch3) << 16 | (ch2 << 8 | ch1);
}
haxe.io.Input.prototype.readString = function(len) {
	var b = haxe.io.Bytes.alloc(len);
	this.readFullBytes(b,0,len);
	return b.toString();
}
haxe.io.Input.prototype.__class__ = haxe.io.Input;
zpp_nape.space.ZPP_AABBNode = function(p) {
	if( p === $_ ) return;
	this.height = -1;
}
zpp_nape.space.ZPP_AABBNode.__name__ = ["zpp_nape","space","ZPP_AABBNode"];
zpp_nape.space.ZPP_AABBNode.zpp_pool = null;
zpp_nape.space.ZPP_AABBNode.prototype.aabb = null;
zpp_nape.space.ZPP_AABBNode.prototype.shape = null;
zpp_nape.space.ZPP_AABBNode.prototype.dyn = null;
zpp_nape.space.ZPP_AABBNode.prototype.parent = null;
zpp_nape.space.ZPP_AABBNode.prototype.child1 = null;
zpp_nape.space.ZPP_AABBNode.prototype.child2 = null;
zpp_nape.space.ZPP_AABBNode.prototype.height = null;
zpp_nape.space.ZPP_AABBNode.prototype.rayt = null;
zpp_nape.space.ZPP_AABBNode.prototype.next = null;
zpp_nape.space.ZPP_AABBNode.prototype.alloc = function() {
	this.aabb = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) ret = new zpp_nape.geom.ZPP_AABB(); else {
			ret = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	this.moved = false;
	this.synced = false;
	this.first_sync = false;
}
zpp_nape.space.ZPP_AABBNode.prototype.free = function() {
	this.height = -1;
	var o = this.aabb;
	{
		if(o.outer != null) o.outer.zpp_inner = null;
		o.outer = null;
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
	}
	o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
	zpp_nape.geom.ZPP_AABB.zpp_pool = o;
	this.child1 = this.child2 = this.parent = null;
	this.next = null;
	this.snext = null;
	this.mnext = null;
}
zpp_nape.space.ZPP_AABBNode.prototype.mnext = null;
zpp_nape.space.ZPP_AABBNode.prototype.moved = null;
zpp_nape.space.ZPP_AABBNode.prototype.snext = null;
zpp_nape.space.ZPP_AABBNode.prototype.synced = null;
zpp_nape.space.ZPP_AABBNode.prototype.first_sync = null;
zpp_nape.space.ZPP_AABBNode.prototype.isLeaf = function() {
	return this.child1 == null;
}
zpp_nape.space.ZPP_AABBNode.prototype.__class__ = zpp_nape.space.ZPP_AABBNode;
zpp_nape.space.ZPP_AABBPair = function(p) {
}
zpp_nape.space.ZPP_AABBPair.__name__ = ["zpp_nape","space","ZPP_AABBPair"];
zpp_nape.space.ZPP_AABBPair.zpp_pool = null;
zpp_nape.space.ZPP_AABBPair.prototype.n1 = null;
zpp_nape.space.ZPP_AABBPair.prototype.n2 = null;
zpp_nape.space.ZPP_AABBPair.prototype.first = null;
zpp_nape.space.ZPP_AABBPair.prototype.sleeping = null;
zpp_nape.space.ZPP_AABBPair.prototype.id = null;
zpp_nape.space.ZPP_AABBPair.prototype.di = null;
zpp_nape.space.ZPP_AABBPair.prototype.hnext = null;
zpp_nape.space.ZPP_AABBPair.prototype.arb = null;
zpp_nape.space.ZPP_AABBPair.prototype.next = null;
zpp_nape.space.ZPP_AABBPair.prototype.alloc = function() {
}
zpp_nape.space.ZPP_AABBPair.prototype.free = function() {
	this.n1 = this.n2 = null;
	this.hnext = null;
}
zpp_nape.space.ZPP_AABBPair.prototype.__class__ = zpp_nape.space.ZPP_AABBPair;
zpp_nape.space.ZPP_AABBTree = function(p) {
}
zpp_nape.space.ZPP_AABBTree.__name__ = ["zpp_nape","space","ZPP_AABBTree"];
zpp_nape.space.ZPP_AABBTree.prototype.root = null;
zpp_nape.space.ZPP_AABBTree.prototype.clear = function() {
	if(this.root == null) return;
	var stack = null;
	this.root.next = stack;
	stack = this.root;
	while(stack != null) {
		var node = (function($this) {
			var $r;
			{
			}
			var ret = stack;
			stack = ret.next;
			ret.next = null;
			$r = ret;
			return $r;
		}(this));
		if(node.child1 == null) {
			node.shape.node = null;
			node.shape.removedFromSpace();
			node.shape = null;
		} else {
			if(node.child1 != null) {
				node.child1.next = stack;
				stack = node.child1;
			}
			if(node.child2 != null) {
				node.child2.next = stack;
				stack = node.child2;
			}
		}
		var o = node;
		o.free();
		o.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
		zpp_nape.space.ZPP_AABBNode.zpp_pool = o;
	}
	this.root = null;
}
zpp_nape.space.ZPP_AABBTree.prototype.insertLeaf = function(leaf) {
	if(this.root == null) {
		this.root = leaf;
		this.root.parent = null;
	} else {
		var leafaabb = leaf.aabb;
		var node = this.root;
		while(!(node.child1 == null)) {
			var child1 = node.child1;
			var child2 = node.child2;
			var area = node.aabb.perimeter();
			zpp_nape.space.ZPP_AABBTree.tmpaabb.set_combine(node.aabb,leafaabb);
			var carea = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter();
			var cost = 2 * carea;
			var icost = 2 * (carea - area);
			var cost1 = (function($this) {
				var $r;
				zpp_nape.space.ZPP_AABBTree.tmpaabb.set_combine(leafaabb,child1.aabb);
				$r = child1.child1 == null?zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter() + icost:(function($this) {
					var $r;
					var oarea = child1.aabb.perimeter();
					var narea = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter();
					$r = narea - oarea + icost;
					return $r;
				}($this));
				return $r;
			}(this));
			var cost2 = (function($this) {
				var $r;
				zpp_nape.space.ZPP_AABBTree.tmpaabb.set_combine(leafaabb,child2.aabb);
				$r = child2.child1 == null?zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter() + icost:(function($this) {
					var $r;
					var oarea = child2.aabb.perimeter();
					var narea = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter();
					$r = narea - oarea + icost;
					return $r;
				}($this));
				return $r;
			}(this));
			if(cost < cost1 && cost < cost2) break; else node = cost1 < cost2?child1:child2;
		}
		var sibling = node;
		var oparent = sibling.parent;
		var nparent = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.space.ZPP_AABBNode.zpp_pool == null) ret = new zpp_nape.space.ZPP_AABBNode(); else {
				ret = zpp_nape.space.ZPP_AABBNode.zpp_pool;
				zpp_nape.space.ZPP_AABBNode.zpp_pool = ret.next;
				ret.next = null;
			}
			ret.alloc();
			$r = ret;
			return $r;
		}(this));
		nparent.parent = oparent;
		nparent.aabb.set_combine(leafaabb,sibling.aabb);
		nparent.height = sibling.height + 1;
		if(oparent != null) {
			if(oparent.child1 == sibling) oparent.child1 = nparent; else oparent.child2 = nparent;
			nparent.child1 = sibling;
			nparent.child2 = leaf;
			sibling.parent = nparent;
			leaf.parent = nparent;
		} else {
			nparent.child1 = sibling;
			nparent.child2 = leaf;
			sibling.parent = nparent;
			leaf.parent = nparent;
			this.root = nparent;
		}
		node = leaf.parent;
		while(node != null) {
			node = this.balance(node);
			var child1 = node.child1;
			var child2 = node.child2;
			node.height = 1 + (function($this) {
				var $r;
				var x = child1.height;
				var y = child2.height;
				$r = x > y?x:y;
				return $r;
			}(this));
			node.aabb.set_combine(child1.aabb,child2.aabb);
			node = node.parent;
		}
	}
}
zpp_nape.space.ZPP_AABBTree.prototype.removeLeaf = function(leaf) {
	if(leaf == this.root) {
		this.root = null;
		return;
	} else {
		var parent = leaf.parent;
		var gparent = parent.parent;
		var sibling = parent.child1 == leaf?parent.child2:parent.child1;
		if(gparent != null) {
			if(gparent.child1 == parent) gparent.child1 = sibling; else gparent.child2 = sibling;
			sibling.parent = gparent;
			var o = parent;
			o.free();
			o.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
			zpp_nape.space.ZPP_AABBNode.zpp_pool = o;
			var node = gparent;
			while(node != null) {
				node = this.balance(node);
				var child1 = node.child1;
				var child2 = node.child2;
				node.aabb.set_combine(child1.aabb,child2.aabb);
				node.height = 1 + (function($this) {
					var $r;
					var x = child1.height;
					var y = child2.height;
					$r = x > y?x:y;
					return $r;
				}(this));
				node = node.parent;
			}
		} else {
			this.root = sibling;
			sibling.parent = null;
			var o = parent;
			o.free();
			o.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
			zpp_nape.space.ZPP_AABBNode.zpp_pool = o;
		}
	}
}
zpp_nape.space.ZPP_AABBTree.prototype.balance = function(a) {
	if(a.child1 == null || a.height < 2) return a; else {
		var b = a.child1;
		var c = a.child2;
		var balance = c.height - b.height;
		if(balance > 1) {
			var f = c.child1;
			var g = c.child2;
			c.child1 = a;
			c.parent = a.parent;
			a.parent = c;
			if(c.parent != null) {
				if(c.parent.child1 == a) c.parent.child1 = c; else c.parent.child2 = c;
			} else this.root = c;
			if(f.height > g.height) {
				c.child2 = f;
				a.child2 = g;
				g.parent = a;
				a.aabb.set_combine(b.aabb,g.aabb);
				c.aabb.set_combine(a.aabb,f.aabb);
				a.height = 1 + (function($this) {
					var $r;
					var x = b.height;
					var y = g.height;
					$r = x > y?x:y;
					return $r;
				}(this));
				c.height = 1 + (function($this) {
					var $r;
					var x = a.height;
					var y = f.height;
					$r = x > y?x:y;
					return $r;
				}(this));
			} else {
				c.child2 = g;
				a.child2 = f;
				f.parent = a;
				a.aabb.set_combine(b.aabb,f.aabb);
				c.aabb.set_combine(a.aabb,g.aabb);
				a.height = 1 + (function($this) {
					var $r;
					var x = b.height;
					var y = f.height;
					$r = x > y?x:y;
					return $r;
				}(this));
				c.height = 1 + (function($this) {
					var $r;
					var x = a.height;
					var y = g.height;
					$r = x > y?x:y;
					return $r;
				}(this));
			}
			return c;
		} else if(balance < -1) {
			var f = b.child1;
			var g = b.child2;
			b.child1 = a;
			b.parent = a.parent;
			a.parent = b;
			if(b.parent != null) {
				if(b.parent.child1 == a) b.parent.child1 = b; else b.parent.child2 = b;
			} else this.root = b;
			if(f.height > g.height) {
				b.child2 = f;
				a.child1 = g;
				g.parent = a;
				a.aabb.set_combine(c.aabb,g.aabb);
				b.aabb.set_combine(a.aabb,f.aabb);
				a.height = 1 + (function($this) {
					var $r;
					var x = c.height;
					var y = g.height;
					$r = x > y?x:y;
					return $r;
				}(this));
				b.height = 1 + (function($this) {
					var $r;
					var x = a.height;
					var y = f.height;
					$r = x > y?x:y;
					return $r;
				}(this));
			} else {
				b.child2 = g;
				a.child1 = f;
				f.parent = a;
				a.aabb.set_combine(c.aabb,f.aabb);
				b.aabb.set_combine(a.aabb,g.aabb);
				a.height = 1 + (function($this) {
					var $r;
					var x = c.height;
					var y = f.height;
					$r = x > y?x:y;
					return $r;
				}(this));
				b.height = 1 + (function($this) {
					var $r;
					var x = a.height;
					var y = g.height;
					$r = x > y?x:y;
					return $r;
				}(this));
			}
			return b;
		} else return a;
	}
}
zpp_nape.space.ZPP_AABBTree.prototype.__class__ = zpp_nape.space.ZPP_AABBTree;
zpp_nape.space.ZPP_Broadphase = function() { }
zpp_nape.space.ZPP_Broadphase.__name__ = ["zpp_nape","space","ZPP_Broadphase"];
zpp_nape.space.ZPP_Broadphase.prototype.space = null;
zpp_nape.space.ZPP_Broadphase.prototype.is_sweep = null;
zpp_nape.space.ZPP_Broadphase.prototype.sweep = null;
zpp_nape.space.ZPP_Broadphase.prototype.dynab = null;
zpp_nape.space.ZPP_Broadphase.prototype.insert = function(shape) {
	if(this.is_sweep) this.sweep.__insert(shape); else this.dynab.__insert(shape);
}
zpp_nape.space.ZPP_Broadphase.prototype.remove = function(shape) {
	if(this.is_sweep) this.sweep.__remove(shape); else this.dynab.__remove(shape);
}
zpp_nape.space.ZPP_Broadphase.prototype.sync = function(shape) {
	if(!this.is_sweep) this.dynab.__sync(shape);
}
zpp_nape.space.ZPP_Broadphase.prototype.broadphase = function() {
}
zpp_nape.space.ZPP_Broadphase.prototype.clear = function() {
}
zpp_nape.space.ZPP_Broadphase.prototype.shapesUnderPoint = function(x,y,filter) {
	return null;
}
zpp_nape.space.ZPP_Broadphase.prototype.bodiesUnderPoint = function(x,y,filter) {
	return null;
}
zpp_nape.space.ZPP_Broadphase.prototype.aabbShape = null;
zpp_nape.space.ZPP_Broadphase.prototype.updateAABBShape = function(aabb) {
	if(this.aabbShape == null) {
		var body = new nape.phys.Body((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)));
		body.zpp_inner.wrap_shapes.add(this.aabbShape = new nape.shape.Polygon(nape.shape.Polygon.rect(aabb.minx,aabb.miny,aabb.maxx - aabb.minx,aabb.maxy - aabb.miny,null)));
	} else {
		var ab = this.aabbShape.zpp_inner.aabb;
		var sx = (aabb.maxx - aabb.minx) / (ab.maxx - ab.minx);
		var sy = (aabb.maxy - aabb.miny) / (ab.maxy - ab.miny);
		this.aabbShape.transform(new nape.geom.Mat23(sx,0,0,sy,aabb.minx - sx * ab.minx,aabb.miny - sy * ab.miny));
	}
	this.aabbShape.zpp_inner.validate_aabb();
	this.aabbShape.zpp_inner.polygon.validate_gaxi();
}
zpp_nape.space.ZPP_Broadphase.prototype.shapesInAABB = function(aabb,strict,containment,filter) {
	return null;
}
zpp_nape.space.ZPP_Broadphase.prototype.bodiesInAABB = function(aabb,strict,containment,filter) {
	return null;
}
zpp_nape.space.ZPP_Broadphase.prototype.circShape = null;
zpp_nape.space.ZPP_Broadphase.prototype.updateCircShape = function(x,y,r) {
	if(this.circShape == null) {
		var body = new nape.phys.Body((function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this)));
		body.zpp_inner.wrap_shapes.add(this.circShape = new nape.shape.Circle(r,nape.geom.Vec2.get(x,y,null)));
	} else {
		var ci = this.circShape.zpp_inner.circle;
		var ss = r / ci.radius;
		this.circShape.transform(new nape.geom.Mat23(ss,0,0,ss,x - ss * ci.localCOMx,y - ss * ci.localCOMy));
	}
	this.circShape.zpp_inner.validate_aabb();
}
zpp_nape.space.ZPP_Broadphase.prototype.shapesInCircle = function(x,y,r,containment,filter) {
	return null;
}
zpp_nape.space.ZPP_Broadphase.prototype.bodiesInCircle = function(x,y,r,containment,filter) {
	return null;
}
zpp_nape.space.ZPP_Broadphase.prototype.validateShape = function(s) {
	if(s.type == 1) s.polygon.validate_gaxi();
	if(s.zip_aabb) {
		if(s.body != null) {
			s.zip_aabb = false;
			if(s.type == 0) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
		}
	}
	if(s.zip_worldCOM) {
		if(s.body != null) {
			s.zip_worldCOM = false;
			if(s.zip_localCOM) {
				s.zip_localCOM = false;
				if(s.type == 1) s.polygon.__validate_localCOM();
				if(s.wrap_localCOM != null) {
					s.wrap_localCOM.zpp_inner.x = s.localCOMx;
					s.wrap_localCOM.zpp_inner.y = s.localCOMy;
				}
			}
			s.body.validate_axis();
			s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
			s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
			if(s.wrap_worldCOM != null) {
				s.wrap_worldCOM.zpp_inner.x = s.worldCOMx;
				s.wrap_worldCOM.zpp_inner.y = s.worldCOMy;
			}
		}
	}
}
zpp_nape.space.ZPP_Broadphase.prototype.shapesInShape = function(shape,containment,filter) {
	return null;
}
zpp_nape.space.ZPP_Broadphase.prototype.bodiesInShape = function(shape,containment,filter) {
	return null;
}
zpp_nape.space.ZPP_Broadphase.prototype.rayCast = function(ray,inner,filter) {
	return null;
}
zpp_nape.space.ZPP_Broadphase.prototype.rayMultiCast = function(ray,inner,filter) {
	return null;
}
zpp_nape.space.ZPP_Broadphase.prototype.__class__ = zpp_nape.space.ZPP_Broadphase;
zpp_nape.space.ZPP_DynAABBPhase = function(space) {
	if( space === $_ ) return;
	this.space = space;
	this.is_sweep = false;
	this.dynab = this;
	this.stree = new zpp_nape.space.ZPP_AABBTree();
	this.dtree = new zpp_nape.space.ZPP_AABBTree();
	this.pairhash = new zpp_nape.util.FastHash2_ZPP_AABBPair();
}
zpp_nape.space.ZPP_DynAABBPhase.__name__ = ["zpp_nape","space","ZPP_DynAABBPhase"];
zpp_nape.space.ZPP_DynAABBPhase.__super__ = zpp_nape.space.ZPP_Broadphase;
for(var k in zpp_nape.space.ZPP_Broadphase.prototype ) zpp_nape.space.ZPP_DynAABBPhase.prototype[k] = zpp_nape.space.ZPP_Broadphase.prototype[k];
zpp_nape.space.ZPP_DynAABBPhase.prototype.stree = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.dtree = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.pairs = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.pairhash = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.syncs = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.moves = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.dyn = function(shape) {
	if(shape.body.type == 1) return false; else return !shape.body.component.sleeping;
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.__insert = function(shape) {
	var node = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.space.ZPP_AABBNode.zpp_pool == null) ret = new zpp_nape.space.ZPP_AABBNode(); else {
			ret = zpp_nape.space.ZPP_AABBNode.zpp_pool;
			zpp_nape.space.ZPP_AABBNode.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		$r = ret;
		return $r;
	}(this));
	node.shape = shape;
	shape.node = node;
	node.synced = true;
	node.first_sync = true;
	node.snext = this.syncs;
	this.syncs = node;
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.__remove = function(shape) {
	var node = shape.node;
	if(!node.first_sync) {
		if(node.dyn) this.dtree.removeLeaf(node); else this.stree.removeLeaf(node);
	}
	shape.node = null;
	if(node.synced) {
		var pre = null;
		var cur = this.syncs;
		while(cur != null) {
			if(cur == node) break;
			pre = cur;
			cur = cur.snext;
		}
		if(pre == null) this.syncs = cur.snext; else pre.snext = cur.snext;
		cur.snext = null;
	}
	if(node.moved) {
		var pre = null;
		var cur = this.moves;
		while(cur != null) {
			if(cur == node) break;
			pre = cur;
			cur = cur.mnext;
		}
		if(pre == null) this.moves = cur.mnext; else pre.mnext = cur.mnext;
		cur.mnext = null;
	}
	var pre = null;
	var cur = this.pairs;
	while(cur != null) {
		var nxt = cur.next;
		if(cur.n1 == node || cur.n2 == node) {
			if(pre == null) this.pairs = nxt; else pre.next = nxt;
			this.pairhash.remove(cur);
			if(cur.arb != null) cur.arb.pair = null;
			cur.arb = null;
			var o = cur;
			{
				o.n1 = o.n2 = null;
				o.hnext = null;
			}
			o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
			zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
			cur = nxt;
			continue;
		}
		pre = cur;
		cur = nxt;
	}
	var o = node;
	o.free();
	o.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
	zpp_nape.space.ZPP_AABBNode.zpp_pool = o;
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.__sync = function(shape) {
	var node = shape.node;
	if(!node.synced) {
		if(shape.zip_aabb) {
			if(shape.body != null) {
				shape.zip_aabb = false;
				if(shape.type == 0) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
			}
		}
		var sync = node.dyn != (shape.body.type == 1?false:!shape.body.component.sleeping) || !node.aabb.contains(shape.aabb);
		if(sync) {
			node.synced = true;
			node.snext = this.syncs;
			this.syncs = node;
		}
	}
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.sync_broadphase = function() {
	if(this.syncs != null) {
		if(this.moves == null) {
			var node = this.syncs;
			while(node != null) {
				var shape = node.shape;
				if(!node.first_sync) {
					if(node.dyn) this.dtree.removeLeaf(node); else this.stree.removeLeaf(node);
				} else node.first_sync = false;
				var aabb = node.aabb;
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == 0) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
				aabb.set_expand(shape.aabb,3.0);
				var velx = shape.body.velx;
				var vely = shape.body.vely;
				var ang = shape.body.angvel;
				velx -= (shape.worldCOMy - shape.body.posy) * ang;
				vely += (shape.worldCOMx - shape.body.posx) * ang;
				var t = this.space.pre_dt * 2.0;
				velx *= t;
				vely *= t;
				if(velx < 0) aabb.minx += velx; else aabb.maxx += velx;
				if(vely < 0) aabb.miny += vely; else aabb.maxy += vely;
				if(node.dyn = shape.body.type == 1?false:!shape.body.component.sleeping) this.dtree.insertLeaf(node); else this.stree.insertLeaf(node);
				node.synced = false;
				node.moved = true;
				node.mnext = node.snext;
				node.snext = null;
				node = node.mnext;
			}
			var t = this.syncs;
			this.syncs = this.moves;
			this.moves = t;
		} else while(this.syncs != null) {
			var node = (function($this) {
				var $r;
				{
				}
				var ret = $this.syncs;
				$this.syncs = ret.snext;
				ret.snext = null;
				$r = ret;
				return $r;
			}(this));
			var shape = node.shape;
			if(!node.first_sync) {
				if(node.dyn) this.dtree.removeLeaf(node); else this.stree.removeLeaf(node);
			} else node.first_sync = false;
			var aabb = node.aabb;
			if(shape.zip_aabb) {
				if(shape.body != null) {
					shape.zip_aabb = false;
					if(shape.type == 0) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
				}
			}
			aabb.set_expand(shape.aabb,3.0);
			var velx = shape.body.velx;
			var vely = shape.body.vely;
			var ang = shape.body.angvel;
			velx -= (shape.worldCOMy - shape.body.posy) * ang;
			vely += (shape.worldCOMx - shape.body.posx) * ang;
			var t = this.space.pre_dt * 2.0;
			velx *= t;
			vely *= t;
			if(velx < 0) aabb.minx += velx; else aabb.maxx += velx;
			if(vely < 0) aabb.miny += vely; else aabb.maxy += vely;
			if(node.dyn = shape.body.type == 1?false:!shape.body.component.sleeping) this.dtree.insertLeaf(node); else this.stree.insertLeaf(node);
			node.synced = false;
			if(!node.moved) {
				node.moved = true;
				node.mnext = this.moves;
				this.moves = node;
			}
		}
	}
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.broadphase = function() {
	var node = this.syncs;
	while(node != null) {
		var shape = node.shape;
		if(!node.first_sync) {
			if(node.dyn) this.dtree.removeLeaf(node); else this.stree.removeLeaf(node);
		} else node.first_sync = false;
		var aabb = node.aabb;
		if(shape.zip_aabb) {
			if(shape.body != null) {
				shape.zip_aabb = false;
				if(shape.type == 0) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
			}
		}
		aabb.set_expand(shape.aabb,3.0);
		var velx = shape.body.velx;
		var vely = shape.body.vely;
		var ang = shape.body.angvel;
		velx -= (shape.worldCOMy - shape.body.posy) * ang;
		vely += (shape.worldCOMx - shape.body.posx) * ang;
		var t = this.space.pre_dt * 2.0;
		velx *= t;
		vely *= t;
		if(velx < 0) aabb.minx += velx; else aabb.maxx += velx;
		if(vely < 0) aabb.miny += vely; else aabb.maxy += vely;
		if(node.dyn = shape.body.type == 1?false:!shape.body.component.sleeping) this.dtree.insertLeaf(node); else this.stree.insertLeaf(node);
		node.synced = false;
		node = node.snext;
	}
	while(this.syncs != null) {
		var leaf = (function($this) {
			var $r;
			{
			}
			var ret = $this.syncs;
			$this.syncs = ret.snext;
			ret.snext = null;
			$r = ret;
			return $r;
		}(this));
		if("syncs" == "moves") leaf.moved = false; else {
		}
		var lshape = leaf.shape;
		var lbody = lshape.body;
		if(lbody.component.sleeping) continue;
		var ab = leaf.aabb;
		var stack = null;
		if(this.dtree.root != null) {
			this.dtree.root.next = stack;
			stack = this.dtree.root;
		}
		while(stack != null) {
			var node1 = (function($this) {
				var $r;
				{
				}
				var ret = stack;
				stack = ret.next;
				ret.next = null;
				$r = ret;
				return $r;
			}(this));
			if(node1 == leaf) continue;
			if(node1.child1 == null) {
				var shape = node1.shape;
				if(shape.body != lshape.body) {
					if(ab.intersect(node1.aabb)) {
						var p = lshape.id < shape.id?this.pairhash.get(lshape.id,shape.id):this.pairhash.get(shape.id,lshape.id);
						if(p != null) {
							if(p.sleeping) {
								p.sleeping = false;
								p.next = this.pairs;
								this.pairs = p;
								p.first = true;
							}
							continue;
						}
						p = (function($this) {
							var $r;
							var ret;
							if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) ret = new zpp_nape.space.ZPP_AABBPair(); else {
								ret = zpp_nape.space.ZPP_AABBPair.zpp_pool;
								zpp_nape.space.ZPP_AABBPair.zpp_pool = ret.next;
								ret.next = null;
							}
							null;
							$r = ret;
							return $r;
						}(this));
						p.n1 = leaf;
						p.n2 = node1;
						if(lshape.id < shape.id) {
							p.id = lshape.id;
							p.di = shape.id;
						} else {
							p.id = shape.id;
							p.di = lshape.id;
						}
						p.next = this.pairs;
						this.pairs = p;
						this.pairhash.add(p);
						p.first = true;
					}
				}
			} else if(ab.intersect(node1.aabb)) {
				if(node1.child1 != null) {
					node1.child1.next = stack;
					stack = node1.child1;
				}
				if(node1.child2 != null) {
					node1.child2.next = stack;
					stack = node1.child2;
				}
			}
		}
		if(!(lbody.type == 1)) {
			if(this.stree.root != null) {
				this.stree.root.next = stack;
				stack = this.stree.root;
			}
			while(stack != null) {
				var node1 = (function($this) {
					var $r;
					{
					}
					var ret = stack;
					stack = ret.next;
					ret.next = null;
					$r = ret;
					return $r;
				}(this));
				if(node1 == leaf) continue;
				if(node1.child1 == null) {
					var shape = node1.shape;
					if(shape.body != lshape.body) {
						if(ab.intersect(node1.aabb)) {
							var p = lshape.id < shape.id?this.pairhash.get(lshape.id,shape.id):this.pairhash.get(shape.id,lshape.id);
							if(p != null) {
								if(p.sleeping) {
									p.sleeping = false;
									p.next = this.pairs;
									this.pairs = p;
									p.first = true;
								}
								continue;
							}
							p = (function($this) {
								var $r;
								var ret;
								if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) ret = new zpp_nape.space.ZPP_AABBPair(); else {
									ret = zpp_nape.space.ZPP_AABBPair.zpp_pool;
									zpp_nape.space.ZPP_AABBPair.zpp_pool = ret.next;
									ret.next = null;
								}
								null;
								$r = ret;
								return $r;
							}(this));
							p.n1 = leaf;
							p.n2 = node1;
							if(lshape.id < shape.id) {
								p.id = lshape.id;
								p.di = shape.id;
							} else {
								p.id = shape.id;
								p.di = lshape.id;
							}
							p.next = this.pairs;
							this.pairs = p;
							this.pairhash.add(p);
							p.first = true;
						}
					}
				} else if(ab.intersect(node1.aabb)) {
					if(node1.child1 != null) {
						node1.child1.next = stack;
						stack = node1.child1;
					}
					if(node1.child2 != null) {
						node1.child2.next = stack;
						stack = node1.child2;
					}
				}
			}
		}
	}
	while(this.moves != null) {
		var leaf = (function($this) {
			var $r;
			{
			}
			var ret = $this.moves;
			$this.moves = ret.mnext;
			ret.mnext = null;
			$r = ret;
			return $r;
		}(this));
		if("moves" == "moves") leaf.moved = false; else {
		}
		var lshape = leaf.shape;
		var lbody = lshape.body;
		if(lbody.component.sleeping) continue;
		var ab = leaf.aabb;
		var stack = null;
		if(this.dtree.root != null) {
			this.dtree.root.next = stack;
			stack = this.dtree.root;
		}
		while(stack != null) {
			var node1 = (function($this) {
				var $r;
				{
				}
				var ret = stack;
				stack = ret.next;
				ret.next = null;
				$r = ret;
				return $r;
			}(this));
			if(node1 == leaf) continue;
			if(node1.child1 == null) {
				var shape = node1.shape;
				if(shape.body != lshape.body) {
					if(ab.intersect(node1.aabb)) {
						var p = lshape.id < shape.id?this.pairhash.get(lshape.id,shape.id):this.pairhash.get(shape.id,lshape.id);
						if(p != null) {
							if(p.sleeping) {
								p.sleeping = false;
								p.next = this.pairs;
								this.pairs = p;
								p.first = true;
							}
							continue;
						}
						p = (function($this) {
							var $r;
							var ret;
							if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) ret = new zpp_nape.space.ZPP_AABBPair(); else {
								ret = zpp_nape.space.ZPP_AABBPair.zpp_pool;
								zpp_nape.space.ZPP_AABBPair.zpp_pool = ret.next;
								ret.next = null;
							}
							null;
							$r = ret;
							return $r;
						}(this));
						p.n1 = leaf;
						p.n2 = node1;
						if(lshape.id < shape.id) {
							p.id = lshape.id;
							p.di = shape.id;
						} else {
							p.id = shape.id;
							p.di = lshape.id;
						}
						p.next = this.pairs;
						this.pairs = p;
						this.pairhash.add(p);
						p.first = true;
					}
				}
			} else if(ab.intersect(node1.aabb)) {
				if(node1.child1 != null) {
					node1.child1.next = stack;
					stack = node1.child1;
				}
				if(node1.child2 != null) {
					node1.child2.next = stack;
					stack = node1.child2;
				}
			}
		}
		if(!(lbody.type == 1)) {
			if(this.stree.root != null) {
				this.stree.root.next = stack;
				stack = this.stree.root;
			}
			while(stack != null) {
				var node1 = (function($this) {
					var $r;
					{
					}
					var ret = stack;
					stack = ret.next;
					ret.next = null;
					$r = ret;
					return $r;
				}(this));
				if(node1 == leaf) continue;
				if(node1.child1 == null) {
					var shape = node1.shape;
					if(shape.body != lshape.body) {
						if(ab.intersect(node1.aabb)) {
							var p = lshape.id < shape.id?this.pairhash.get(lshape.id,shape.id):this.pairhash.get(shape.id,lshape.id);
							if(p != null) {
								if(p.sleeping) {
									p.sleeping = false;
									p.next = this.pairs;
									this.pairs = p;
									p.first = true;
								}
								continue;
							}
							p = (function($this) {
								var $r;
								var ret;
								if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) ret = new zpp_nape.space.ZPP_AABBPair(); else {
									ret = zpp_nape.space.ZPP_AABBPair.zpp_pool;
									zpp_nape.space.ZPP_AABBPair.zpp_pool = ret.next;
									ret.next = null;
								}
								null;
								$r = ret;
								return $r;
							}(this));
							p.n1 = leaf;
							p.n2 = node1;
							if(lshape.id < shape.id) {
								p.id = lshape.id;
								p.di = shape.id;
							} else {
								p.id = shape.id;
								p.di = lshape.id;
							}
							p.next = this.pairs;
							this.pairs = p;
							this.pairhash.add(p);
							p.first = true;
						}
					}
				} else if(ab.intersect(node1.aabb)) {
					if(node1.child1 != null) {
						node1.child1.next = stack;
						stack = node1.child1;
					}
					if(node1.child2 != null) {
						node1.child2.next = stack;
						stack = node1.child2;
					}
				}
			}
		}
	}
	var pre = null;
	var cur = this.pairs;
	while(cur != null) {
		if(!cur.first && !cur.n1.aabb.intersect(cur.n2.aabb)) {
			if(pre == null) this.pairs = cur.next; else pre.next = cur.next;
			this.pairhash.remove(cur);
			var nxt = cur.next;
			if(cur.arb != null) cur.arb.pair = null;
			cur.arb = null;
			var o = cur;
			{
				o.n1 = o.n2 = null;
				o.hnext = null;
			}
			o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
			zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
			cur = nxt;
			continue;
		}
		var s1 = cur.n1.shape;
		var b1 = s1.body;
		var s2 = cur.n2.shape;
		var b2 = s2.body;
		if((b1.component.sleeping || b1.type == 1) && (b2.component.sleeping || b2.type == 1)) {
			cur.sleeping = true;
			if(pre == null) this.pairs = cur.next; else pre.next = cur.next;
			cur = cur.next;
			continue;
		}
		cur.first = false;
		if(s1.aabb.intersect(s2.aabb)) {
			var oarb = cur.arb;
			cur.arb = this.space.narrowPhase(s1,s2,!(b1.type == 2) || !(b2.type == 2),cur.arb);
			if(cur.arb == null) {
				if(oarb != null) oarb.pair = null;
			} else cur.arb.pair = cur;
		}
		pre = cur;
		cur = cur.next;
	}
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.clear = function() {
	while(this.syncs != null) {
		var next = this.syncs.snext;
		this.syncs.snext = null;
		if(this.syncs.first_sync) {
			this.syncs.shape.node = null;
			this.syncs.shape.removedFromSpace();
			this.syncs.shape = null;
		}
		this.syncs = next;
	}
	while(this.moves != null) {
		var next = this.moves.mnext;
		this.moves.mnext = null;
		if(this.moves.first_sync) {
			this.moves.shape.node = null;
			this.moves.shape.removedFromSpace();
			this.moves.shape = null;
		}
		this.moves = next;
	}
	this.pairhash.clear();
	while(this.pairs != null) {
		var nxt = this.pairs.next;
		if(this.pairs.arb != null) this.pairs.arb.pair = null;
		this.pairs.arb = null;
		var o = this.pairs;
		{
			o.n1 = o.n2 = null;
			o.hnext = null;
		}
		o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
		zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
		this.pairs = nxt;
	}
	this.dtree.clear();
	this.stree.clear();
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.shapesUnderPoint = function(x,y,filter) {
	this.sync_broadphase();
	var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
	var ret = new nape.shape.ShapeList();
	if(this.stree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.stree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(node.aabb.containsPoint(v)) {
				if(node.child1 == null) {
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						if(node.shape.type == 0) {
							if(zpp_nape.geom.ZPP_Collide.circleContains(node.shape.circle,v)) ret.push(node.shape.outer);
						} else if(zpp_nape.geom.ZPP_Collide.polyContains(node.shape.polygon,v)) ret.push(node.shape.outer);
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.dtree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(node.aabb.containsPoint(v)) {
				if(node.child1 == null) {
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						if(node.shape.type == 0) {
							if(zpp_nape.geom.ZPP_Collide.circleContains(node.shape.circle,v)) ret.push(node.shape.outer);
						} else if(zpp_nape.geom.ZPP_Collide.polyContains(node.shape.polygon,v)) ret.push(node.shape.outer);
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	var o = v;
	{
		if(o.outer != null) o.outer.zpp_inner = null;
		o.outer = null;
		o._immutable = null;
		o._validate = null;
		o._invalidate = null;
		o.weak = false;
	}
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	return ret;
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.bodiesUnderPoint = function(x,y,filter) {
	this.sync_broadphase();
	var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
	var ret = new nape.phys.BodyList();
	if(this.stree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.stree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(node.aabb.containsPoint(v)) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					if(!ret.has(body)) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(node.shape.type == 0) {
								if(zpp_nape.geom.ZPP_Collide.circleContains(node.shape.circle,v)) ret.push(body);
							} else if(zpp_nape.geom.ZPP_Collide.polyContains(node.shape.polygon,v)) ret.push(body);
						}
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.dtree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(node.aabb.containsPoint(v)) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					if(!ret.has(body)) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(node.shape.type == 0) {
								if(zpp_nape.geom.ZPP_Collide.circleContains(node.shape.circle,v)) ret.push(body);
							} else if(zpp_nape.geom.ZPP_Collide.polyContains(node.shape.polygon,v)) ret.push(body);
						}
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	var o = v;
	{
		if(o.outer != null) o.outer.zpp_inner = null;
		o.outer = null;
		o._immutable = null;
		o._validate = null;
		o._invalidate = null;
		o.weak = false;
	}
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	return ret;
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.shapesInAABB = function(aabb,strict,containment,filter) {
	this.sync_broadphase();
	this.updateAABBShape(aabb);
	var ab = this.aabbShape.zpp_inner.aabb;
	var ret = new nape.shape.ShapeList();
	if(this.stree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.stree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(ab.contains(node.aabb)) {
				if(node.child1 == null) ret.push(node.shape.outer); else {
					var stack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
					stack2.add(node);
					while(!(stack2.head == null)) {
						var node1 = stack2.pop_unsafe();
						if(node1.child1 == null) ret.push(node1.shape.outer); else {
							if(node1.child1 != null) stack2.add(node1.child1);
							if(node1.child2 != null) stack2.add(node1.child2);
						}
					}
				}
			} else if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						if(strict) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
							} else if(ab.contains(node.shape.aabb)) ret.push(node.shape.outer); else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(node.shape.outer);
						} else if(!containment || ab.contains(node.shape.aabb)) ret.push(node.shape.outer);
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.dtree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(ab.contains(node.aabb)) {
				if(node.child1 == null) ret.push(node.shape.outer); else {
					var stack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
					stack2.add(node);
					while(!(stack2.head == null)) {
						var node1 = stack2.pop_unsafe();
						if(node1.child1 == null) ret.push(node1.shape.outer); else {
							if(node1.child1 != null) stack2.add(node1.child1);
							if(node1.child2 != null) stack2.add(node1.child2);
						}
					}
				}
			} else if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						if(strict) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
							} else if(ab.contains(node.shape.aabb)) ret.push(node.shape.outer); else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(node.shape.outer);
						} else if(!containment || ab.contains(node.shape.aabb)) ret.push(node.shape.outer);
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	return ret;
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.bodiesInAABB = function(aabb,strict,containment,filter) {
	this.sync_broadphase();
	this.updateAABBShape(aabb);
	var ab = this.aabbShape.zpp_inner.aabb;
	var ret = new nape.phys.BodyList();
	if(this.stree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.stree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(ab.contains(node.aabb)) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					if(!ret.has(body)) ret.push(body);
				} else {
					var stack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
					stack2.add(node);
					while(!(stack2.head == null)) {
						var node1 = stack2.pop_unsafe();
						if(node1.child1 == null) {
							var body = node1.shape.body.outer;
							if(!ret.has(body)) ret.push(body);
						} else {
							if(node1.child1 != null) stack2.add(node1.child1);
							if(node1.child2 != null) stack2.add(node1.child2);
						}
					}
				}
			} else if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					if(!ret.has(body)) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape)) ret.push(body);
								} else if(ab.contains(node.shape.aabb)) ret.push(body); else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(body);
							} else if(!containment || ab.contains(node.shape.aabb)) ret.push(body);
						}
					} else if(containment) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(!zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape)) ret.remove(body);
							} else if(!ab.contains(node.shape.aabb)) ret.remove(body);
						}
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.dtree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(ab.contains(node.aabb)) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					if(!ret.has(body)) ret.push(body);
				} else {
					var stack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
					stack2.add(node);
					while(!(stack2.head == null)) {
						var node1 = stack2.pop_unsafe();
						if(node1.child1 == null) {
							var body = node1.shape.body.outer;
							if(!ret.has(body)) ret.push(body);
						} else {
							if(node1.child1 != null) stack2.add(node1.child1);
							if(node1.child2 != null) stack2.add(node1.child2);
						}
					}
				}
			} else if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					if(!ret.has(body)) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape)) ret.push(body);
								} else if(ab.contains(node.shape.aabb)) ret.push(body); else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(body);
							} else if(!containment || ab.contains(node.shape.aabb)) ret.push(body);
						}
					} else if(containment) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(!zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape)) ret.remove(body);
							} else if(!ab.contains(node.shape.aabb)) ret.remove(body);
						}
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	return ret;
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.shapesInCircle = function(x,y,r,containment,filter) {
	this.sync_broadphase();
	this.updateCircShape(x,y,r);
	var ab = this.circShape.zpp_inner.aabb;
	var ret = new nape.shape.ShapeList();
	if(this.stree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.stree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						if(containment) {
							if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
						} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(node.shape.outer);
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.dtree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						if(containment) {
							if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
						} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(node.shape.outer);
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	return ret;
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.bodiesInCircle = function(x,y,r,containment,filter) {
	this.sync_broadphase();
	this.updateCircShape(x,y,r);
	var ab = this.circShape.zpp_inner.aabb;
	var ret = new nape.phys.BodyList();
	if(this.stree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.stree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					if(!ret.has(body)) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape)) ret.push(body);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(body);
						}
					} else if(containment) {
						if((filter == null || node.shape.filter.shouldCollide(filter)) && !zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape)) ret.remove(body);
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.dtree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					if(!ret.has(body)) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape)) ret.push(body);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(body);
						}
					} else if(containment) {
						if((filter == null || node.shape.filter.shouldCollide(filter)) && !zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape)) ret.remove(body);
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	return ret;
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.shapesInShape = function(shp,containment,filter) {
	this.sync_broadphase();
	{
		if(shp.type == 1) shp.polygon.validate_gaxi();
		if(shp.zip_aabb) {
			if(shp.body != null) {
				shp.zip_aabb = false;
				if(shp.type == 0) shp.circle.__validate_aabb(); else shp.polygon.__validate_aabb();
			}
		}
		if(shp.zip_worldCOM) {
			if(shp.body != null) {
				shp.zip_worldCOM = false;
				if(shp.zip_localCOM) {
					shp.zip_localCOM = false;
					if(shp.type == 1) shp.polygon.__validate_localCOM();
					if(shp.wrap_localCOM != null) {
						shp.wrap_localCOM.zpp_inner.x = shp.localCOMx;
						shp.wrap_localCOM.zpp_inner.y = shp.localCOMy;
					}
				}
				shp.body.validate_axis();
				shp.worldCOMx = shp.body.posx + (shp.body.axisy * shp.localCOMx - shp.body.axisx * shp.localCOMy);
				shp.worldCOMy = shp.body.posy + (shp.localCOMx * shp.body.axisx + shp.localCOMy * shp.body.axisy);
				if(shp.wrap_worldCOM != null) {
					shp.wrap_worldCOM.zpp_inner.x = shp.worldCOMx;
					shp.wrap_worldCOM.zpp_inner.y = shp.worldCOMy;
				}
			}
		}
	}
	var ab = shp.aabb;
	var ret = new nape.shape.ShapeList();
	if(this.stree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.stree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						if(containment) {
							if(zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape)) ret.push(node.shape.outer);
						} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,shp)) ret.push(node.shape.outer);
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.dtree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					if(filter == null || node.shape.filter.shouldCollide(filter)) {
						if(containment) {
							if(zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape)) ret.push(node.shape.outer);
						} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,shp)) ret.push(node.shape.outer);
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	return ret;
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.bodiesInShape = function(shp,containment,filter) {
	this.sync_broadphase();
	{
		if(shp.type == 1) shp.polygon.validate_gaxi();
		if(shp.zip_aabb) {
			if(shp.body != null) {
				shp.zip_aabb = false;
				if(shp.type == 0) shp.circle.__validate_aabb(); else shp.polygon.__validate_aabb();
			}
		}
		if(shp.zip_worldCOM) {
			if(shp.body != null) {
				shp.zip_worldCOM = false;
				if(shp.zip_localCOM) {
					shp.zip_localCOM = false;
					if(shp.type == 1) shp.polygon.__validate_localCOM();
					if(shp.wrap_localCOM != null) {
						shp.wrap_localCOM.zpp_inner.x = shp.localCOMx;
						shp.wrap_localCOM.zpp_inner.y = shp.localCOMy;
					}
				}
				shp.body.validate_axis();
				shp.worldCOMx = shp.body.posx + (shp.body.axisy * shp.localCOMx - shp.body.axisx * shp.localCOMy);
				shp.worldCOMy = shp.body.posy + (shp.localCOMx * shp.body.axisx + shp.localCOMy * shp.body.axisy);
				if(shp.wrap_worldCOM != null) {
					shp.wrap_worldCOM.zpp_inner.x = shp.worldCOMx;
					shp.wrap_worldCOM.zpp_inner.y = shp.worldCOMy;
				}
			}
		}
	}
	var ab = shp.aabb;
	var ret = new nape.phys.BodyList();
	if(this.stree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.stree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					if(!ret.has(body)) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape)) ret.push(body);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,shp)) ret.push(body);
						}
					} else if(containment) {
						if((filter == null || node.shape.filter.shouldCollide(filter)) && !zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape)) ret.remove(body);
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	if(this.dtree.root != null) {
		var stack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		stack.add(this.dtree.root);
		while(!(stack.head == null)) {
			var node = stack.pop_unsafe();
			if(node.aabb.intersect(ab)) {
				if(node.child1 == null) {
					var body = node.shape.body.outer;
					if(!ret.has(body)) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape)) ret.push(body);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,shp)) ret.push(body);
						}
					} else if(containment) {
						if((filter == null || node.shape.filter.shouldCollide(filter)) && !zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape)) ret.remove(body);
					}
				} else {
					if(node.child1 != null) stack.add(node.child1);
					if(node.child2 != null) stack.add(node.child2);
				}
			}
		}
	}
	return ret;
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.openlist = null;
zpp_nape.space.ZPP_DynAABBPhase.prototype.rayCast = function(ray,inner,filter) {
	if(this.openlist == null) this.openlist = new zpp_nape.util.ZNPList_ZPP_AABBNode();
	this.sync_broadphase();
	ray.validate_dir();
	var mint = ray.maxdist;
	if(this.dtree.root != null) {
		if(ray.aabbtest(this.dtree.root.aabb)) {
			var t = ray.aabbsect(this.dtree.root.aabb);
			if(t >= 0 && t < mint) {
				this.dtree.root.rayt = t;
				var pre = null;
				var cx_ite = this.openlist.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(this.dtree.root.rayt < j.rayt) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				this.openlist.insert(pre,this.dtree.root);
			}
		}
	}
	if(this.stree.root != null) {
		if(ray.aabbtest(this.stree.root.aabb)) {
			var t = ray.aabbsect(this.stree.root.aabb);
			if(t >= 0 && t < mint) {
				this.stree.root.rayt = t;
				var pre = null;
				var cx_ite = this.openlist.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(this.stree.root.rayt < j.rayt) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				this.openlist.insert(pre,this.stree.root);
			}
		}
	}
	var minres = null;
	while(!(this.openlist.head == null)) {
		var cnode = this.openlist.pop_unsafe();
		if(cnode.rayt >= mint) break;
		if(cnode.child1 == null) {
			var shape = cnode.shape;
			if(filter == null || shape.filter.shouldCollide(filter)) {
				var result = shape.type == 0?ray.circlesect(shape.circle,inner,mint):ray.aabbtest(shape.aabb)?ray.polysect(shape.polygon,inner,mint):null;
				if(result != null) {
					mint = result.distance;
					minres = result;
				}
			}
		} else {
			if(cnode.child1 != null) {
				if(ray.aabbtest(cnode.child1.aabb)) {
					var t = ray.aabbsect(cnode.child1.aabb);
					if(t >= 0 && t < mint) {
						cnode.child1.rayt = t;
						var pre = null;
						var cx_ite = this.openlist.head;
						while(cx_ite != null) {
							var j = cx_ite.elt;
							if(cnode.child1.rayt < j.rayt) break;
							pre = cx_ite;
							cx_ite = cx_ite.next;
						}
						this.openlist.insert(pre,cnode.child1);
					}
				}
			}
			if(cnode.child2 != null) {
				if(ray.aabbtest(cnode.child2.aabb)) {
					var t = ray.aabbsect(cnode.child2.aabb);
					if(t >= 0 && t < mint) {
						cnode.child2.rayt = t;
						var pre = null;
						var cx_ite = this.openlist.head;
						while(cx_ite != null) {
							var j = cx_ite.elt;
							if(cnode.child2.rayt < j.rayt) break;
							pre = cx_ite;
							cx_ite = cx_ite.next;
						}
						this.openlist.insert(pre,cnode.child2);
					}
				}
			}
		}
	}
	this.openlist.clear();
	return minres;
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.rayMultiCast = function(ray,inner,filter) {
	if(this.openlist == null) this.openlist = new zpp_nape.util.ZNPList_ZPP_AABBNode();
	this.sync_broadphase();
	ray.validate_dir();
	var inf = ray.maxdist == Math.POSITIVE_INFINITY;
	var ret = new nape.geom.RayResultList();
	if(this.dtree.root != null) {
		if(ray.aabbtest(this.dtree.root.aabb)) {
			if(inf) this.openlist.add(this.dtree.root); else {
				var t = ray.aabbsect(this.dtree.root.aabb);
				if(t >= 0 && t < ray.maxdist) this.openlist.add(this.dtree.root);
			}
		}
	}
	if(this.stree.root != null) {
		if(ray.aabbtest(this.stree.root.aabb)) {
			if(inf) this.openlist.add(this.stree.root); else {
				var t = ray.aabbsect(this.stree.root.aabb);
				if(t >= 0 && t < ray.maxdist) this.openlist.add(this.stree.root);
			}
		}
	}
	while(!(this.openlist.head == null)) {
		var cnode = this.openlist.pop_unsafe();
		if(cnode.child1 == null) {
			var shape = cnode.shape;
			if(filter == null || shape.filter.shouldCollide(filter)) {
				if(shape.type == 0) ray.circlesect2(shape.circle,inner,ret); else if(ray.aabbtest(shape.aabb)) ray.polysect2(shape.polygon,inner,ret);
			}
		} else {
			if(cnode.child1 != null) {
				if(ray.aabbtest(cnode.child1.aabb)) {
					if(inf) this.openlist.add(cnode.child1); else {
						var t = ray.aabbsect(cnode.child1.aabb);
						if(t >= 0 && t < ray.maxdist) this.openlist.add(cnode.child1);
					}
				}
			}
			if(cnode.child2 != null) {
				if(ray.aabbtest(cnode.child2.aabb)) {
					if(inf) this.openlist.add(cnode.child2); else {
						var t = ray.aabbsect(cnode.child2.aabb);
						if(t >= 0 && t < ray.maxdist) this.openlist.add(cnode.child2);
					}
				}
			}
		}
	}
	this.openlist.clear();
	return ret;
}
zpp_nape.space.ZPP_DynAABBPhase.prototype.__class__ = zpp_nape.space.ZPP_DynAABBPhase;
jeash.display.Loader = function(p) {
	if( p === $_ ) return;
	jeash.display.DisplayObjectContainer.call(this);
	this.contentLoaderInfo = jeash.display.LoaderInfo.create(this);
	this.name = "Loader " + jeash.display.DisplayObject.mNameID++;
}
jeash.display.Loader.__name__ = ["jeash","display","Loader"];
jeash.display.Loader.__super__ = jeash.display.DisplayObjectContainer;
for(var k in jeash.display.DisplayObjectContainer.prototype ) jeash.display.Loader.prototype[k] = jeash.display.DisplayObjectContainer.prototype[k];
jeash.display.Loader.prototype.content = null;
jeash.display.Loader.prototype.contentLoaderInfo = null;
jeash.display.Loader.prototype.mImage = null;
jeash.display.Loader.prototype.mShape = null;
jeash.display.Loader.prototype.load = function(request,context) {
	var parts = request.url.split(".");
	var extension = parts.length == 0?"":parts[parts.length - 1].toLowerCase();
	var transparent = true;
	this.contentLoaderInfo.url = request.url;
	this.contentLoaderInfo.contentType = (function($this) {
		var $r;
		switch(extension) {
		case "swf":
			$r = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			$r = (function($this) {
				var $r;
				transparent = false;
				$r = "image/jpeg";
				return $r;
			}($this));
			break;
		case "png":
			$r = "image/png";
			break;
		case "gif":
			$r = "image/gif";
			break;
		default:
			$r = (function($this) {
				var $r;
				throw "Unrecognized file " + request.url;
				return $r;
			}($this));
		}
		return $r;
	}(this));
	this.mImage = new jeash.display.BitmapData(0,0,transparent);
	try {
		this.contentLoaderInfo.addEventListener(jeash.events.Event.COMPLETE,$closure(this,"handleLoad"),false,2147483647);
		this.mImage.jeashLoadFromFile(request.url,this.contentLoaderInfo);
		this.content = new jeash.display.Bitmap(this.mImage);
		Reflect.setField(this.contentLoaderInfo,"content",this.content);
		this.addChild(this.content);
	} catch( e ) {
		haxe.Log.trace("Error " + e,{ fileName : "Loader.hx", lineNumber : 90, className : "jeash.display.Loader", methodName : "load"});
		var evt = new jeash.events.IOErrorEvent(jeash.events.IOErrorEvent.IO_ERROR);
		this.contentLoaderInfo.dispatchEvent(evt);
		return;
	}
	if(this.mShape == null) {
		this.mShape = new jeash.display.Shape();
		this.addChild(this.mShape);
	}
}
jeash.display.Loader.prototype.handleLoad = function(e) {
	this.contentLoaderInfo.removeEventListener(jeash.events.Event.COMPLETE,$closure(this,"handleLoad"));
	this.jeashInvalidateBounds();
}
jeash.display.Loader.prototype.BuildBounds = function() {
	jeash.display.DisplayObjectContainer.prototype.BuildBounds.call(this);
	if(this.mImage != null) {
		var r = new jeash.geom.Rectangle(0,0,this.mImage.getWidth(),this.mImage.getHeight());
		if(r.width != 0 || r.height != 0) {
			if(this.mBoundsRect.width == 0 && this.mBoundsRect.height == 0) this.mBoundsRect = r.clone(); else this.mBoundsRect.extendBounds(r);
		}
	}
}
jeash.display.Loader.prototype.__class__ = jeash.display.Loader;
zpp_nape.geom.ZPP_Monotone = function() { }
zpp_nape.geom.ZPP_Monotone.__name__ = ["zpp_nape","geom","ZPP_Monotone"];
zpp_nape.geom.ZPP_Monotone.bisector = function(b) {
	var a = b.prev;
	var c = b.next;
	var ux;
	var uy;
	ux = b.x - a.x;
	uy = b.y - a.y;
	var vx;
	var vy;
	vx = c.x - b.x;
	vy = c.y - b.y;
	var ret = zpp_nape.geom.ZPP_Vec2.get(-uy - vy,ux + vx,null);
	var d = ret.x * ret.x + ret.y * ret.y;
	var imag = (function($this) {
		var $r;
		{
		}
		$r = 1.0 / (function($this) {
			var $r;
			{
			}
			$r = Math.sqrt(d);
			return $r;
		}($this));
		return $r;
	}(this));
	var t = imag;
	ret.x *= t;
	ret.y *= t;
	if(vy * ux - vx * uy < 0) {
		ret.x = -ret.x;
		ret.y = -ret.y;
	}
	return ret;
}
zpp_nape.geom.ZPP_Monotone.below = function(p,q) {
	if(p.y < q.y) return true; else if(p.y > q.y) return false; else if(p.x < q.x) return true; else if(p.x > q.x) return false; else {
		var po = zpp_nape.geom.ZPP_Monotone.bisector(p);
		var qo = zpp_nape.geom.ZPP_Monotone.bisector(q);
		var t = 1.0;
		po.x += p.x * t;
		po.y += p.y * t;
		var t = 1.0;
		qo.x += q.x * t;
		qo.y += q.y * t;
		var ret = po.x < qo.x || po.x == qo.x && po.y < qo.y;
		var o = po;
		{
			if(o.outer != null) o.outer.zpp_inner = null;
			o.outer = null;
			o._immutable = null;
			o._validate = null;
			o._invalidate = null;
			o.weak = false;
		}
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		var o = qo;
		{
			if(o.outer != null) o.outer.zpp_inner = null;
			o.outer = null;
			o._immutable = null;
			o._validate = null;
			o._invalidate = null;
			o.weak = false;
		}
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		return ret;
	}
}
zpp_nape.geom.ZPP_Monotone.above = function(p,q) {
	return zpp_nape.geom.ZPP_Monotone.below(q,p);
}
zpp_nape.geom.ZPP_Monotone.left_vertex = function(v) {
	var pre = v.prev;
	var nxt = v.next;
	return pre.y > v.y || pre.y == v.y && nxt.y < v.y;
}
zpp_nape.geom.ZPP_Monotone.isMonotone = function(P) {
	var min = P;
	var max = P;
	var F = P.next;
	var L = P;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			if(v.y < min.y) min = v;
			if(v.y > max.y) max = v;
			nite = nite.next;
		} while(nite != L);
	}
	var ret = true;
	var pre = min;
	if(max != min.next) {
		var F = min.next;
		var L = max;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.y < pre.y) {
					ret = false;
					break;
				}
				pre = v;
				nite = nite.next;
			} while(nite != L);
		}
	}
	if(!ret) return false;
	pre = min;
	if(max != min.prev) {
		var F = min.prev;
		var L = max;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.y < pre.y) {
					ret = false;
					break;
				}
				pre = v;
				nite = nite.prev;
			} while(nite != L);
		}
	}
	return ret;
}
zpp_nape.geom.ZPP_Monotone.decompose = function(P) {
	var poly = new zpp_nape.geom.ZPP_PartitionPoly(P);
	var queue = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
	var F = poly.vertices;
	var L = poly.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			queue.add(p);
			var ux;
			var uy;
			ux = p.next.x - p.x;
			uy = p.next.y - p.y;
			var vx;
			var vy;
			vx = p.prev.x - p.x;
			vy = p.prev.y - p.y;
			var cx = vy * ux - vx * uy > 0;
			p.type = zpp_nape.geom.ZPP_Monotone.below(p.prev,p)?zpp_nape.geom.ZPP_Monotone.below(p.next,p)?cx?0:1:4:zpp_nape.geom.ZPP_Monotone.below(p,p.next)?cx?2:3:4;
			nite = nite.next;
		} while(nite != L);
	}
	var edges = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
			ret = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	edges.lt = zpp_nape.geom.ZPP_PartitionVertex.edge_lt;
	edges.swapped = zpp_nape.geom.ZPP_PartitionVertex.edge_swap;
	var xxlist = queue;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges, leftSize, rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(zpp_nape.geom.ZPP_Monotone.below(right.elt,left.elt)) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		{
			xxlist.head = head;
			xxlist.modified = true;
			xxlist.pushmod = true;
		}
	}
	while(!(queue.head == null)) {
		var v = queue.pop_unsafe();
		switch(v.type) {
		case 0:
			v.helper = v;
			v.node = edges.insert(v);
			break;
		case 2:
			var e = v.prev;
			if(e.helper == null) throw "FATAL ERROR (Monotone 1) : Polygon is not simple + CW, but was not caught sooner!";
			if(e.helper.type == 3) poly.insert_diagonal(v,e.helper);
			edges.remove_node(e.node);
			e.helper = null;
			break;
		case 1:
			var e = (function($this) {
				var $r;
				var ret = null;
				{
					if(!(edges.parent == null)) {
						var set_ite = edges.parent;
						while(set_ite.prev != null) set_ite = set_ite.prev;
						while(set_ite != null) {
							var elt = set_ite.data;
							if(!zpp_nape.geom.ZPP_PartitionVertex.vert_lt(elt,v)) {
								ret = elt;
								break;
							}
							if(set_ite.next != null) {
								set_ite = set_ite.next;
								while(set_ite.prev != null) set_ite = set_ite.prev;
							} else {
								while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
								set_ite = set_ite.parent;
							}
						}
					}
				}
				$r = ret;
				return $r;
			}(this));
			if(e != null) {
				if(e.helper == null) throw "FATAL ERROR (Monotone 2) : Polygon is not simple + CW, but was not caught sooner!";
				poly.insert_diagonal(v,e.helper);
				e.helper = v;
			}
			v.node = edges.insert(v);
			v.helper = v;
			break;
		case 3:
			var e = v.prev;
			if(e.helper == null) throw "FATAL ERROR (Monotone 3) : Polygon is not simple + CW, but was not caught sooner!";
			if(e.helper.type == 3) poly.insert_diagonal(v,e.helper);
			edges.remove_node(e.node);
			e.helper = null;
			var e1 = (function($this) {
				var $r;
				var ret = null;
				{
					if(!(edges.parent == null)) {
						var set_ite = edges.parent;
						while(set_ite.prev != null) set_ite = set_ite.prev;
						while(set_ite != null) {
							var elt = set_ite.data;
							if(!zpp_nape.geom.ZPP_PartitionVertex.vert_lt(elt,v)) {
								ret = elt;
								break;
							}
							if(set_ite.next != null) {
								set_ite = set_ite.next;
								while(set_ite.prev != null) set_ite = set_ite.prev;
							} else {
								while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
								set_ite = set_ite.parent;
							}
						}
					}
				}
				$r = ret;
				return $r;
			}(this));
			if(e1 != null) {
				if(e1.helper == null) throw "FATAL ERROR (Monotone 4) : Polygon is not simple + CW, but was not caught sooner!";
				if(e1.helper.type == 3) poly.insert_diagonal(v,e1.helper);
				e1.helper = v;
			}
			break;
		case 4:
			var pre = v.prev;
			if(zpp_nape.geom.ZPP_Monotone.left_vertex(v)) {
				if(pre.helper == null) throw "FATAL ERROR (Monotone 5) : Polygon is not simple + CW, but was not caught sooner!";
				if(pre.helper.type == 3) poly.insert_diagonal(v,pre.helper);
				edges.remove_node(pre.node);
				pre.helper = null;
				v.node = edges.insert(v);
				v.helper = v;
			} else {
				var e = (function($this) {
					var $r;
					var ret = null;
					{
						if(!(edges.parent == null)) {
							var set_ite = edges.parent;
							while(set_ite.prev != null) set_ite = set_ite.prev;
							while(set_ite != null) {
								var elt = set_ite.data;
								if(!zpp_nape.geom.ZPP_PartitionVertex.vert_lt(elt,v)) {
									ret = elt;
									break;
								}
								if(set_ite.next != null) {
									set_ite = set_ite.next;
									while(set_ite.prev != null) set_ite = set_ite.prev;
								} else {
									while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
									set_ite = set_ite.parent;
								}
							}
						}
					}
					$r = ret;
					return $r;
				}(this));
				if(e == null || e.helper == null) throw "FATAL ERROR (Monotone 6) : Polygon is not simple + CW, but was not caught sooner!";
				if(e.helper.type == 3) poly.insert_diagonal(v,e.helper);
				e.helper = v;
			}
			break;
		}
	}
	return poly.partition();
}
zpp_nape.geom.ZPP_Monotone.prototype.__class__ = zpp_nape.geom.ZPP_Monotone;
nape.phys.FluidProperties = function(density,viscosity) {
	if( density === $_ ) return;
	if(viscosity == null) viscosity = 1;
	if(density == null) density = 1;
	this.zpp_inner = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.phys.ZPP_FluidProperties.zpp_pool == null) ret = new zpp_nape.phys.ZPP_FluidProperties(); else {
			ret = zpp_nape.phys.ZPP_FluidProperties.zpp_pool;
			zpp_nape.phys.ZPP_FluidProperties.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	this.zpp_inner.outer = this;
	if(density != this.zpp_inner.density * ("density" == "density"?1000:1)) {
		if(density != density) throw "Error: FluidProperties::" + "density" + " cannot be NaN";
		if("density" != "density" && density < 0) throw "Error: FluidProperties::" + "density" + " (" + density + ") must be >= 0";
		this.zpp_inner.density = density / ("density" == "density"?1000:1);
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.density * ("density" == "density"?1000:1);
	if(viscosity != this.zpp_inner.viscosity * ("viscosity" == "density"?1000:1)) {
		if(viscosity != viscosity) throw "Error: FluidProperties::" + "viscosity" + " cannot be NaN";
		if("viscosity" != "density" && viscosity < 0) throw "Error: FluidProperties::" + "viscosity" + " (" + viscosity + ") must be >= 0";
		this.zpp_inner.viscosity = viscosity / ("viscosity" == "density"?1000:1);
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.viscosity * ("viscosity" == "density"?1000:1);
}
nape.phys.FluidProperties.__name__ = ["nape","phys","FluidProperties"];
nape.phys.FluidProperties.prototype.zpp_inner = null;
nape.phys.FluidProperties.prototype.shapes = null;
nape.phys.FluidProperties.prototype.flibget_shapes = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_shapes == null) $this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get($this.zpp_inner.shapes,true);
		$r = $this.zpp_inner.wrap_shapes;
		return $r;
	}(this));
}
nape.phys.FluidProperties.prototype.copy = function() {
	var ret = new nape.phys.FluidProperties(this.zpp_inner.density * ("density" == "density"?1000:1),this.zpp_inner.viscosity * ("viscosity" == "density"?1000:1));
	ret.userData = this.userData;
	return ret;
}
nape.phys.FluidProperties.prototype.userData = null;
nape.phys.FluidProperties.prototype.density = null;
nape.phys.FluidProperties.prototype.flibget_density = function() {
	return this.zpp_inner.density * ("density" == "density"?1000:1);
}
nape.phys.FluidProperties.prototype.flibset_density = function(density) {
	if(density != this.zpp_inner.density * ("density" == "density"?1000:1)) {
		if(density != density) throw "Error: FluidProperties::" + "density" + " cannot be NaN";
		if("density" != "density" && density < 0) throw "Error: FluidProperties::" + "density" + " (" + density + ") must be >= 0";
		this.zpp_inner.density = density / ("density" == "density"?1000:1);
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.density * ("density" == "density"?1000:1);
}
nape.phys.FluidProperties.prototype.viscosity = null;
nape.phys.FluidProperties.prototype.flibget_viscosity = function() {
	return this.zpp_inner.viscosity * ("viscosity" == "density"?1000:1);
}
nape.phys.FluidProperties.prototype.flibset_viscosity = function(viscosity) {
	if(viscosity != this.zpp_inner.viscosity * ("viscosity" == "density"?1000:1)) {
		if(viscosity != viscosity) throw "Error: FluidProperties::" + "viscosity" + " cannot be NaN";
		if("viscosity" != "density" && viscosity < 0) throw "Error: FluidProperties::" + "viscosity" + " (" + viscosity + ") must be >= 0";
		this.zpp_inner.viscosity = viscosity / ("viscosity" == "density"?1000:1);
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.viscosity * ("viscosity" == "density"?1000:1);
}
nape.phys.FluidProperties.prototype.gravity = null;
nape.phys.FluidProperties.prototype.flibget_gravity = function() {
	return this.zpp_inner.wrap_gravity;
}
nape.phys.FluidProperties.prototype.flibset_gravity = function(gravity) {
	if(gravity == null) {
		if(this.zpp_inner.wrap_gravity != null) {
			this.zpp_inner.wrap_gravity.zpp_inner.inuse = false;
			this.zpp_inner.wrap_gravity.dispose();
			this.zpp_inner.wrap_gravity = null;
		}
	} else {
		if(gravity != null && gravity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
		this.zpp_inner.wrap_gravity.set(gravity);
	}
	return this.zpp_inner.wrap_gravity;
}
nape.phys.FluidProperties.prototype.toString = function() {
	return "{ density: " + this.zpp_inner.density * ("density" == "density"?1000:1) + " viscosity: " + this.zpp_inner.viscosity * ("viscosity" == "density"?1000:1) + " }";
}
nape.phys.FluidProperties.prototype.__class__ = nape.phys.FluidProperties;
nape.constraint.LineJoint = function(body1,body2,anchor1,anchor2,direction,jointMin,jointMax) {
	if( body1 === $_ ) return;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_LineJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	if(body1 == null) throw "Error: Constraint::" + "body1" + " cannot be null";
	if(body1.zpp_inner != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = body1.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != body1.zpp_inner) body1.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body1.zpp_inner.wake();
	}
	if(this.zpp_inner_zn.b1 == null) null; else this.zpp_inner_zn.b1.outer;
	if(body2 == null) throw "Error: Constraint::" + "body2" + " cannot be null";
	if(body2.zpp_inner != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = body2.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != body2.zpp_inner) body2.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body2.zpp_inner.wake();
	}
	if(this.zpp_inner_zn.b2 == null) null; else this.zpp_inner_zn.b2.outer;
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	{
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		this.zpp_inner_zn.wrap_a1;
	}
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	{
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		this.zpp_inner_zn.wrap_a2;
	}
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction == null) throw "Error: Constraint::" + "direction" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
		$r = $this.zpp_inner_zn.wrap_n;
		return $r;
	}(this))).set(direction);
	{
		if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
		this.zpp_inner_zn.wrap_n;
	}
	if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
}
nape.constraint.LineJoint.__name__ = ["nape","constraint","LineJoint"];
nape.constraint.LineJoint.__super__ = nape.constraint.Constraint;
for(var k in nape.constraint.Constraint.prototype ) nape.constraint.LineJoint.prototype[k] = nape.constraint.Constraint.prototype[k];
nape.constraint.LineJoint.prototype.zpp_inner_zn = null;
nape.constraint.LineJoint.prototype.body1 = null;
nape.constraint.LineJoint.prototype.flibget_body1 = function() {
	return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
}
nape.constraint.LineJoint.prototype.flibset_body1 = function(body1) {
	if(body1 == null) throw "Error: Constraint::" + "body1" + " cannot be null";
	if(body1.zpp_inner != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = body1.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != body1.zpp_inner) body1.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body1.zpp_inner.wake();
	}
	return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
}
nape.constraint.LineJoint.prototype.body2 = null;
nape.constraint.LineJoint.prototype.flibget_body2 = function() {
	return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
}
nape.constraint.LineJoint.prototype.flibset_body2 = function(body2) {
	if(body2 == null) throw "Error: Constraint::" + "body2" + " cannot be null";
	if(body2.zpp_inner != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = body2.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != body2.zpp_inner) body2.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body2.zpp_inner.wake();
	}
	return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
}
nape.constraint.LineJoint.prototype.anchor1 = null;
nape.constraint.LineJoint.prototype.flibget_anchor1 = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this));
}
nape.constraint.LineJoint.prototype.flibset_anchor1 = function(anchor1) {
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this));
}
nape.constraint.LineJoint.prototype.anchor2 = null;
nape.constraint.LineJoint.prototype.flibget_anchor2 = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this));
}
nape.constraint.LineJoint.prototype.flibset_anchor2 = function(anchor2) {
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this));
}
nape.constraint.LineJoint.prototype.direction = null;
nape.constraint.LineJoint.prototype.flibget_direction = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
		$r = $this.zpp_inner_zn.wrap_n;
		return $r;
	}(this));
}
nape.constraint.LineJoint.prototype.flibset_direction = function(direction) {
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction == null) throw "Error: Constraint::" + "direction" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
		$r = $this.zpp_inner_zn.wrap_n;
		return $r;
	}(this))).set(direction);
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
		$r = $this.zpp_inner_zn.wrap_n;
		return $r;
	}(this));
}
nape.constraint.LineJoint.prototype.jointMin = null;
nape.constraint.LineJoint.prototype.flibget_jointMin = function() {
	return this.zpp_inner_zn.jointMin;
}
nape.constraint.LineJoint.prototype.flibset_jointMin = function(jointMin) {
	if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMin;
}
nape.constraint.LineJoint.prototype.jointMax = null;
nape.constraint.LineJoint.prototype.flibget_jointMax = function() {
	return this.zpp_inner_zn.jointMax;
}
nape.constraint.LineJoint.prototype.flibset_jointMax = function(jointMax) {
	if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMax;
}
nape.constraint.LineJoint.prototype.impulse = function() {
	var ret = new nape.geom.MatMN(2,1);
	{
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx + this.zpp_inner_zn.pjAccx;
	}
	{
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy + this.zpp_inner_zn.pjAccy;
	}
	return ret;
}
nape.constraint.LineJoint.prototype.bodyImpulse = function(body) {
	if(body == null) throw "Error: Cannot evaluate impulse on null body";
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
	if(!this.zpp_inner.active) return new nape.geom.Vec3(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
}
nape.constraint.LineJoint.prototype.__class__ = nape.constraint.LineJoint;
zpp_nape.geom.ZPP_Vec2 = function(p) {
	if( p === $_ ) return;
	this.weak = false;
}
zpp_nape.geom.ZPP_Vec2.__name__ = ["zpp_nape","geom","ZPP_Vec2"];
zpp_nape.geom.ZPP_Vec2.zpp_pool = null;
zpp_nape.geom.ZPP_Vec2.get = function(x,y,immutable) {
	if(immutable == null) immutable = false;
	var ret = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) ret = new zpp_nape.geom.ZPP_Vec2(); else {
			ret = zpp_nape.geom.ZPP_Vec2.zpp_pool;
			zpp_nape.geom.ZPP_Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	ret.immutable = immutable;
	ret.x = x;
	ret.y = y;
	return ret;
}
zpp_nape.geom.ZPP_Vec2.prototype._invalidate = null;
zpp_nape.geom.ZPP_Vec2.prototype._validate = null;
zpp_nape.geom.ZPP_Vec2.prototype.immutable = null;
zpp_nape.geom.ZPP_Vec2.prototype._immutable = null;
zpp_nape.geom.ZPP_Vec2.prototype.validate = function() {
	if(this._validate != null) this._validate();
}
zpp_nape.geom.ZPP_Vec2.prototype.invalidate = function() {
	if(this._invalidate != null) this._invalidate(this);
}
zpp_nape.geom.ZPP_Vec2.prototype.outer = null;
zpp_nape.geom.ZPP_Vec2.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new nape.geom.Vec2();
		var o = this.outer.zpp_inner;
		{
			if(o.outer != null) o.outer.zpp_inner = null;
			o.outer = null;
			o._immutable = null;
			o._validate = null;
			o._invalidate = null;
			o.weak = false;
		}
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
}
zpp_nape.geom.ZPP_Vec2.prototype.weak = null;
zpp_nape.geom.ZPP_Vec2.prototype.free = function() {
	if(this.outer != null) this.outer.zpp_inner = null;
	this.outer = null;
	this._immutable = null;
	this._validate = null;
	this._invalidate = null;
	this.weak = false;
}
zpp_nape.geom.ZPP_Vec2.prototype.alloc = function() {
}
zpp_nape.geom.ZPP_Vec2.prototype.next = null;
zpp_nape.geom.ZPP_Vec2.prototype.elem = function() {
	return this;
}
zpp_nape.geom.ZPP_Vec2.prototype.begin = function() {
	return this.next;
}
zpp_nape.geom.ZPP_Vec2.prototype.inuse = null;
zpp_nape.geom.ZPP_Vec2.prototype.modified = null;
zpp_nape.geom.ZPP_Vec2.prototype.pushmod = null;
zpp_nape.geom.ZPP_Vec2.prototype.mcnt = null;
zpp_nape.geom.ZPP_Vec2.prototype.set_begin = function(i) {
	this.next = i;
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.geom.ZPP_Vec2.prototype.add = function(o) {
	var temp = (function($this) {
		var $r;
		o.inuse = true;
		$r = o;
		return $r;
	}(this));
	temp.next = this.next;
	this.next = temp;
	this.modified = true;
	this.mcnt++;
	return o;
}
zpp_nape.geom.ZPP_Vec2.prototype.addAll = function(x) {
	var cx_ite = x.next;
	while(cx_ite != null) {
		var i = cx_ite;
		this.add(i);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.geom.ZPP_Vec2.prototype.insert = function(cur,o) {
	if(cur == null) {
		this.add(o);
		return this.next;
	} else {
		var temp = (function($this) {
			var $r;
			o.inuse = true;
			$r = o;
			return $r;
		}(this));
		temp.next = cur.next;
		cur.next = temp;
		this.pushmod = this.modified = true;
		this.mcnt++;
		return temp;
	}
}
zpp_nape.geom.ZPP_Vec2.prototype.pop = function() {
	var ret = this.next;
	this.next = ret.next;
	ret.inuse = false;
	if(this.next == null) this.pushmod = true;
	this.modified = true;
	this.mcnt--;
}
zpp_nape.geom.ZPP_Vec2.prototype.pop_unsafe = function() {
	var ret = this.next;
	this.pop();
	return ret;
}
zpp_nape.geom.ZPP_Vec2.prototype.remove = function(obj) {
	var pre = null;
	var cur = this.next;
	var ret = false;
	while(cur != null) {
		if(cur == obj) {
			this.erase(pre);
			ret = true;
			break;
		}
		pre = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.geom.ZPP_Vec2.prototype.erase = function(pre) {
	if(pre == null) {
		this.pop();
		return this.next;
	} else {
		var old = pre.next;
		var cur = old.next;
		pre.next = cur;
		old.inuse = false;
		this.modified = true;
		if(cur == null) this.pushmod = true;
		this.mcnt--;
		return cur;
	}
}
zpp_nape.geom.ZPP_Vec2.prototype.splice = function(pre,n) {
	while(n-- > 0 && pre.next != null) this.erase(pre);
	return pre.next;
}
zpp_nape.geom.ZPP_Vec2.prototype.clear = function() {
}
zpp_nape.geom.ZPP_Vec2.prototype.reverse = function() {
	var cur = this.next;
	var pre = null;
	while(cur != null) {
		var nx = cur.next;
		cur.next = pre;
		this.next = cur;
		pre = cur;
		cur = nx;
	}
	this.modified = true;
	this.pushmod = true;
}
zpp_nape.geom.ZPP_Vec2.prototype.empty = function() {
	return this.next == null;
}
zpp_nape.geom.ZPP_Vec2.prototype.size = function() {
	var cnt = 0;
	var cur = this.next;
	while(cur != null) {
		cnt++;
		cur = cur.next;
	}
	return cnt;
}
zpp_nape.geom.ZPP_Vec2.prototype.has = function(obj) {
	return (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.next;
			while(cx_ite != null) {
				var npite = cx_ite;
				if(npite == obj) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.geom.ZPP_Vec2.prototype.front = function() {
	return this.next;
}
zpp_nape.geom.ZPP_Vec2.prototype.back = function() {
	var ret = this.next;
	var cur = ret;
	while(cur != null) {
		ret = cur;
		cur = cur.next;
	}
	return ret;
}
zpp_nape.geom.ZPP_Vec2.prototype.iterator_at = function(ind) {
	var ret = this.next;
	while(ind-- > 0 && ret != null) ret = ret.next;
	return ret;
}
zpp_nape.geom.ZPP_Vec2.prototype.at = function(ind) {
	var it = this.iterator_at(ind);
	return it != null?it:null;
}
zpp_nape.geom.ZPP_Vec2.prototype.x = null;
zpp_nape.geom.ZPP_Vec2.prototype.y = null;
zpp_nape.geom.ZPP_Vec2.prototype.copy = function() {
	return zpp_nape.geom.ZPP_Vec2.get(this.x,this.y,null);
}
zpp_nape.geom.ZPP_Vec2.prototype.toString = function() {
	return "{ x: " + this.x + " y: " + this.y + " }";
}
zpp_nape.geom.ZPP_Vec2.prototype.__class__ = zpp_nape.geom.ZPP_Vec2;
nape.dynamics.InteractionFilter = function(collisionGroup,collisionMask,sensorGroup,sensorMask,fluidGroup,fluidMask) {
	if( collisionGroup === $_ ) return;
	if(fluidMask == null) fluidMask = -1;
	if(fluidGroup == null) fluidGroup = 1;
	if(sensorMask == null) sensorMask = -1;
	if(sensorGroup == null) sensorGroup = 1;
	if(collisionMask == null) collisionMask = -1;
	if(collisionGroup == null) collisionGroup = 1;
	this.zpp_inner = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) ret = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
			ret = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	this.zpp_inner.outer = this;
	if(this.zpp_inner.collisionGroup != collisionGroup) {
		this.zpp_inner.collisionGroup = collisionGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.collisionGroup;
	if(this.zpp_inner.collisionMask != collisionMask) {
		this.zpp_inner.collisionMask = collisionMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.collisionMask;
	if(this.zpp_inner.sensorGroup != sensorGroup) {
		this.zpp_inner.sensorGroup = sensorGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.sensorGroup;
	if(this.zpp_inner.sensorMask != sensorMask) {
		this.zpp_inner.sensorMask = sensorMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.sensorMask;
	if(this.zpp_inner.fluidGroup != fluidGroup) {
		this.zpp_inner.fluidGroup = fluidGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.fluidGroup;
	if(this.zpp_inner.fluidMask != fluidMask) {
		this.zpp_inner.fluidMask = fluidMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.fluidMask;
}
nape.dynamics.InteractionFilter.__name__ = ["nape","dynamics","InteractionFilter"];
nape.dynamics.InteractionFilter.prototype.zpp_inner = null;
nape.dynamics.InteractionFilter.prototype.shapes = null;
nape.dynamics.InteractionFilter.prototype.flibget_shapes = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_shapes == null) $this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get($this.zpp_inner.shapes,true);
		$r = $this.zpp_inner.wrap_shapes;
		return $r;
	}(this));
}
nape.dynamics.InteractionFilter.prototype.collisionGroup = null;
nape.dynamics.InteractionFilter.prototype.flibget_collisionGroup = function() {
	return this.zpp_inner.collisionGroup;
}
nape.dynamics.InteractionFilter.prototype.flibset_collisionGroup = function(collisionGroup) {
	if(this.zpp_inner.collisionGroup != collisionGroup) {
		this.zpp_inner.collisionGroup = collisionGroup;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.collisionGroup;
}
nape.dynamics.InteractionFilter.prototype.collisionMask = null;
nape.dynamics.InteractionFilter.prototype.flibget_collisionMask = function() {
	return this.zpp_inner.collisionMask;
}
nape.dynamics.InteractionFilter.prototype.flibset_collisionMask = function(collisionMask) {
	if(this.zpp_inner.collisionMask != collisionMask) {
		this.zpp_inner.collisionMask = collisionMask;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.collisionMask;
}
nape.dynamics.InteractionFilter.prototype.sensorGroup = null;
nape.dynamics.InteractionFilter.prototype.flibget_sensorGroup = function() {
	return this.zpp_inner.sensorGroup;
}
nape.dynamics.InteractionFilter.prototype.flibset_sensorGroup = function(sensorGroup) {
	if(this.zpp_inner.sensorGroup != sensorGroup) {
		this.zpp_inner.sensorGroup = sensorGroup;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.sensorGroup;
}
nape.dynamics.InteractionFilter.prototype.sensorMask = null;
nape.dynamics.InteractionFilter.prototype.flibget_sensorMask = function() {
	return this.zpp_inner.sensorMask;
}
nape.dynamics.InteractionFilter.prototype.flibset_sensorMask = function(sensorMask) {
	if(this.zpp_inner.sensorMask != sensorMask) {
		this.zpp_inner.sensorMask = sensorMask;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.sensorMask;
}
nape.dynamics.InteractionFilter.prototype.fluidGroup = null;
nape.dynamics.InteractionFilter.prototype.flibget_fluidGroup = function() {
	return this.zpp_inner.fluidGroup;
}
nape.dynamics.InteractionFilter.prototype.flibset_fluidGroup = function(fluidGroup) {
	if(this.zpp_inner.fluidGroup != fluidGroup) {
		this.zpp_inner.fluidGroup = fluidGroup;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.fluidGroup;
}
nape.dynamics.InteractionFilter.prototype.fluidMask = null;
nape.dynamics.InteractionFilter.prototype.flibget_fluidMask = function() {
	return this.zpp_inner.fluidMask;
}
nape.dynamics.InteractionFilter.prototype.flibset_fluidMask = function(fluidMask) {
	if(this.zpp_inner.fluidMask != fluidMask) {
		this.zpp_inner.fluidMask = fluidMask;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.fluidMask;
}
nape.dynamics.InteractionFilter.prototype.userData = null;
nape.dynamics.InteractionFilter.prototype.collisionFilter = null;
nape.dynamics.InteractionFilter.prototype.flibget_collisionFilter = function() {
	return this.zpp_inner.collisionFilter;
}
nape.dynamics.InteractionFilter.prototype.flibset_collisionFilter = function(collisionFilter) {
	if(this.zpp_inner.collisionFilter != collisionFilter) {
		this.zpp_inner.collisionFilter = collisionFilter;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.collisionFilter;
}
nape.dynamics.InteractionFilter.prototype.sensorFilter = null;
nape.dynamics.InteractionFilter.prototype.flibget_sensorFilter = function() {
	return this.zpp_inner.sensorFilter;
}
nape.dynamics.InteractionFilter.prototype.flibset_sensorFilter = function(sensorFilter) {
	if(this.zpp_inner.sensorFilter != sensorFilter) {
		this.zpp_inner.sensorFilter = sensorFilter;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.sensorFilter;
}
nape.dynamics.InteractionFilter.prototype.fluidFilter = null;
nape.dynamics.InteractionFilter.prototype.flibget_fluidFilter = function() {
	return this.zpp_inner.fluidFilter;
}
nape.dynamics.InteractionFilter.prototype.flibset_fluidFilter = function(fluidFilter) {
	if(this.zpp_inner.fluidFilter != fluidFilter) {
		this.zpp_inner.fluidFilter = fluidFilter;
		this.zpp_inner.invalidate();
	}
	return this.zpp_inner.fluidFilter;
}
nape.dynamics.InteractionFilter.prototype.shouldCollide = function(filter) {
	return this.zpp_inner.shouldCollide(filter.zpp_inner);
}
nape.dynamics.InteractionFilter.prototype.shouldSense = function(filter) {
	return this.zpp_inner.shouldSense(filter.zpp_inner);
}
nape.dynamics.InteractionFilter.prototype.shouldFlow = function(filter) {
	return this.zpp_inner.shouldFlow(filter.zpp_inner);
}
nape.dynamics.InteractionFilter.prototype.copy = function() {
	return new nape.dynamics.InteractionFilter(this.zpp_inner.collisionGroup,this.zpp_inner.collisionMask,this.zpp_inner.sensorGroup,this.zpp_inner.sensorMask,this.zpp_inner.fluidGroup,this.zpp_inner.fluidMask);
}
nape.dynamics.InteractionFilter.prototype.toString = function() {
	return "{ collision: " + StringTools.hex(this.zpp_inner.collisionGroup,8) + "~" + StringTools.hex(this.zpp_inner.collisionMask,8) + " sensor: " + StringTools.hex(this.zpp_inner.sensorGroup,8) + "~" + StringTools.hex(this.zpp_inner.sensorMask,8) + " fluid: " + StringTools.hex(this.zpp_inner.fluidGroup,8) + "~" + StringTools.hex(this.zpp_inner.fluidMask,8) + " }";
}
nape.dynamics.InteractionFilter.prototype.__class__ = nape.dynamics.InteractionFilter;
jeash.display.BitmapDataChannel = function() { }
jeash.display.BitmapDataChannel.__name__ = ["jeash","display","BitmapDataChannel"];
jeash.display.BitmapDataChannel.prototype.__class__ = jeash.display.BitmapDataChannel;
zpp_nape.geom.ZPP_SimplifyV = function(p) {
}
zpp_nape.geom.ZPP_SimplifyV.__name__ = ["zpp_nape","geom","ZPP_SimplifyV"];
zpp_nape.geom.ZPP_SimplifyV.zpp_pool = null;
zpp_nape.geom.ZPP_SimplifyV.get = function(v) {
	var ret = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.geom.ZPP_SimplifyV.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimplifyV(); else {
			ret = zpp_nape.geom.ZPP_SimplifyV.zpp_pool;
			zpp_nape.geom.ZPP_SimplifyV.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	ret.x = v.x;
	ret.y = v.y;
	ret.flag = false;
	return ret;
}
zpp_nape.geom.ZPP_SimplifyV.prototype.x = null;
zpp_nape.geom.ZPP_SimplifyV.prototype.y = null;
zpp_nape.geom.ZPP_SimplifyV.prototype.next = null;
zpp_nape.geom.ZPP_SimplifyV.prototype.prev = null;
zpp_nape.geom.ZPP_SimplifyV.prototype.flag = null;
zpp_nape.geom.ZPP_SimplifyV.prototype.forced = null;
zpp_nape.geom.ZPP_SimplifyV.prototype.free = function() {
}
zpp_nape.geom.ZPP_SimplifyV.prototype.alloc = function() {
}
zpp_nape.geom.ZPP_SimplifyV.prototype.__class__ = zpp_nape.geom.ZPP_SimplifyV;
zpp_nape.geom.ZPP_SimplifyP = function(p) {
}
zpp_nape.geom.ZPP_SimplifyP.__name__ = ["zpp_nape","geom","ZPP_SimplifyP"];
zpp_nape.geom.ZPP_SimplifyP.zpp_pool = null;
zpp_nape.geom.ZPP_SimplifyP.get = function(min,max) {
	var ret = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.geom.ZPP_SimplifyP.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimplifyP(); else {
			ret = zpp_nape.geom.ZPP_SimplifyP.zpp_pool;
			zpp_nape.geom.ZPP_SimplifyP.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	ret.min = min;
	ret.max = max;
	return ret;
}
zpp_nape.geom.ZPP_SimplifyP.prototype.next = null;
zpp_nape.geom.ZPP_SimplifyP.prototype.min = null;
zpp_nape.geom.ZPP_SimplifyP.prototype.max = null;
zpp_nape.geom.ZPP_SimplifyP.prototype.free = function() {
	this.min = this.max = null;
}
zpp_nape.geom.ZPP_SimplifyP.prototype.alloc = function() {
}
zpp_nape.geom.ZPP_SimplifyP.prototype.__class__ = zpp_nape.geom.ZPP_SimplifyP;
zpp_nape.geom.ZPP_Simplify = function() { }
zpp_nape.geom.ZPP_Simplify.__name__ = ["zpp_nape","geom","ZPP_Simplify"];
zpp_nape.geom.ZPP_Simplify.lessval = function(a,b) {
	return a.x - b.x + (a.y - b.y);
}
zpp_nape.geom.ZPP_Simplify.less = function(a,b) {
	return a.x - b.x + (a.y - b.y) < 0.0;
}
zpp_nape.geom.ZPP_Simplify.distance = function(v,a,b) {
	var nx;
	var ny;
	nx = b.x - a.x;
	ny = b.y - a.y;
	var cx;
	var cy;
	cx = v.x - a.x;
	cy = v.y - a.y;
	var den = nx * nx + ny * ny;
	if(den == 0.0) return cx * cx + cy * cy; else {
		var t = (cx * nx + cy * ny) / (nx * nx + ny * ny);
		if(t <= 0) return cx * cx + cy * cy; else if(t >= 1) return (function($this) {
			var $r;
			var dx;
			var dy;
			{
				dx = v.x - b.x;
				dy = v.y - b.y;
			}
			$r = dx * dx + dy * dy;
			return $r;
		}(this)); else {
			var t1 = t;
			cx -= nx * t1;
			cy -= ny * t1;
			return cx * cx + cy * cy;
		}
	}
}
zpp_nape.geom.ZPP_Simplify.simplify = function(P,epsilon) {
	var ret = null;
	var min = null;
	var max = null;
	epsilon *= epsilon;
	var stack = new zpp_nape.util.ZNPList_ZPP_SimplifyP();
	var pre = null;
	var fst = null;
	var cur = P;
	do {
		var v = zpp_nape.geom.ZPP_SimplifyV.get(cur);
		v.forced = cur.forced;
		if(v.forced) {
			v.flag = true;
			if(pre != null) stack.add(zpp_nape.geom.ZPP_SimplifyP.get(pre,v)); else fst = v;
			pre = v;
		}
		ret = (function($this) {
			var $r;
			var obj = v;
			if(ret == null) ret = obj.prev = obj.next = obj; else {
				obj.prev = ret;
				obj.next = ret.next;
				ret.next.prev = obj;
				ret.next = obj;
			}
			$r = obj;
			return $r;
		}(this));
		if(min == null) {
			min = ret;
			max = ret;
		} else {
			if(ret.x - min.x + (ret.y - min.y) < 0.0) min = ret;
			if(max.x - ret.x + (max.y - ret.y) < 0.0) max = ret;
		}
		cur = cur.next;
	} while(cur != P);
	if(stack.head == null) {
		if(fst == null) {
			min.flag = max.flag = true;
			stack.add(zpp_nape.geom.ZPP_SimplifyP.get(min,max));
			stack.add(zpp_nape.geom.ZPP_SimplifyP.get(max,min));
		} else {
			var d1 = min.x - fst.x + (min.y - fst.y);
			if(d1 < 0) d1 = -d1;
			var d2 = max.x - fst.x + (max.y - fst.y);
			if(d2 < 0) d2 = -d2;
			if(d1 > d2) {
				min.flag = fst.flag = true;
				stack.add(zpp_nape.geom.ZPP_SimplifyP.get(min,fst));
				stack.add(zpp_nape.geom.ZPP_SimplifyP.get(fst,min));
			} else {
				max.flag = fst.flag = true;
				stack.add(zpp_nape.geom.ZPP_SimplifyP.get(max,fst));
				stack.add(zpp_nape.geom.ZPP_SimplifyP.get(fst,max));
			}
		}
	} else stack.add(zpp_nape.geom.ZPP_SimplifyP.get(pre,fst));
	while(!(stack.head == null)) {
		var cur1 = stack.pop_unsafe();
		var min1 = cur1.min;
		var max1 = cur1.max;
		var o = cur1;
		o.min = o.max = null;
		o.next = zpp_nape.geom.ZPP_SimplifyP.zpp_pool;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool = o;
		var dmax = epsilon;
		var dv = null;
		var ite = min1.next;
		while(ite != max1) {
			var dist = zpp_nape.geom.ZPP_Simplify.distance(ite,min1,max1);
			if(dist > dmax) {
				dmax = dist;
				dv = ite;
			}
			ite = ite.next;
		}
		if(dv != null) {
			dv.flag = true;
			stack.add(zpp_nape.geom.ZPP_SimplifyP.get(min1,dv));
			stack.add(zpp_nape.geom.ZPP_SimplifyP.get(dv,max1));
		}
	}
	var retp = null;
	while(ret != null) {
		if(ret.flag) {
			retp = (function($this) {
				var $r;
				var obj = zpp_nape.geom.ZPP_GeomVert.get(ret.x,ret.y);
				if(retp == null) retp = obj.prev = obj.next = obj; else {
					obj.prev = retp;
					obj.next = retp.next;
					retp.next.prev = obj;
					retp.next = obj;
				}
				$r = obj;
				return $r;
			}(this));
			retp.forced = ret.forced;
		}
		ret = (function($this) {
			var $r;
			{
			}
			$r = ret != null && ret.prev == ret?(function($this) {
				var $r;
				ret.next = ret.prev = null;
				{
					var o = ret;
					null;
					o.next = zpp_nape.geom.ZPP_SimplifyV.zpp_pool;
					zpp_nape.geom.ZPP_SimplifyV.zpp_pool = o;
				}
				$r = ret = null;
				return $r;
			}($this)):(function($this) {
				var $r;
				var retnodes = ret.next;
				ret.prev.next = ret.next;
				ret.next.prev = ret.prev;
				ret.next = ret.prev = null;
				{
					var o = ret;
					null;
					o.next = zpp_nape.geom.ZPP_SimplifyV.zpp_pool;
					zpp_nape.geom.ZPP_SimplifyV.zpp_pool = o;
				}
				ret = null;
				$r = retnodes;
				return $r;
			}($this));
			return $r;
		}(this));
	}
	return retp;
}
zpp_nape.geom.ZPP_Simplify.prototype.__class__ = zpp_nape.geom.ZPP_Simplify;
nape.geom.Vec2Iterator = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_Vec2List.internal) throw "Error: Cannot instantiate " + "Vec2" + "Iterator derp!";
}
nape.geom.Vec2Iterator.__name__ = ["nape","geom","Vec2Iterator"];
nape.geom.Vec2Iterator.zpp_pool = null;
nape.geom.Vec2Iterator.get = function(list) {
	var ret = nape.geom.Vec2Iterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_Vec2List.internal = true;
		var ret = new nape.geom.Vec2Iterator();
		zpp_nape.util.ZPP_Vec2List.internal = false;
		$r = ret;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.geom.Vec2Iterator.zpp_pool;
		nape.geom.Vec2Iterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	list.zpp_inner.iterators.add(ret);
	return ret;
}
nape.geom.Vec2Iterator.prototype.zpp_inner = null;
nape.geom.Vec2Iterator.prototype.zpp_i = null;
nape.geom.Vec2Iterator.prototype.zpp_critical = null;
nape.geom.Vec2Iterator.prototype.zpp_next = null;
nape.geom.Vec2Iterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.zpp_gl();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.geom.Vec2Iterator.zpp_pool;
		nape.geom.Vec2Iterator.zpp_pool = this;
		this.zpp_inner.zpp_inner.iterators.remove(this);
		return false;
	}
}
nape.geom.Vec2Iterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
}
nape.geom.Vec2Iterator.prototype.__class__ = nape.geom.Vec2Iterator;
nape.geom.Vec2 = function(x,y) {
	if( x === $_ ) return;
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(x != x || y != y) throw "Error: Vec2 components cannot be NaN";
	this.zpp_inner = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
	this.zpp_inner.outer = this;
}
nape.geom.Vec2.__name__ = ["nape","geom","Vec2"];
nape.geom.Vec2.weak = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	return nape.geom.Vec2.get(x,y,true);
}
nape.geom.Vec2.get = function(x,y,weak) {
	if(weak == null) weak = false;
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(x != x || y != y) throw "Error: Vec2 components cannot be NaN";
	var ret = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.util.ZPP_PubPool.poolVec2 == null) ret = new nape.geom.Vec2(); else {
			ret = zpp_nape.util.ZPP_PubPool.poolVec2;
			zpp_nape.util.ZPP_PubPool.poolVec2 = ret.zpp_pool;
			ret.zpp_pool = null;
			ret.zpp_disp = false;
			if(ret == zpp_nape.util.ZPP_PubPool.nextVec2) zpp_nape.util.ZPP_PubPool.nextVec2 = null;
		}
		$r = ret;
		return $r;
	}(this));
	if(ret.zpp_inner == null) ret.zpp_inner = zpp_nape.geom.ZPP_Vec2.get(x,y,null); else ret.setxy(x,y);
	if(weak) ret.zpp_inner.weak = true;
	return ret;
}
nape.geom.Vec2.fromPolar = function(length,angle,weak) {
	if(weak == null) weak = false;
	if(length != length) throw "Error: Vec2::length cannot be NaN";
	if(angle != angle) throw "Error: Vec2::angle cannot be NaN";
	return nape.geom.Vec2.get(length * Math.cos(angle),length * Math.sin(angle),weak);
}
nape.geom.Vec2.prototype.zpp_inner = null;
nape.geom.Vec2.prototype.zpp_pool = null;
nape.geom.Vec2.prototype.zpp_disp = null;
nape.geom.Vec2.prototype.dispose = function() {
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.inuse) throw "Error: This Vec2 is not disposable";
	var pr = this.zpp_inner;
	this.zpp_inner.outer = null;
	this.zpp_inner = null;
	var o = this;
	o.zpp_pool = null;
	if(zpp_nape.util.ZPP_PubPool.nextVec2 != null) zpp_nape.util.ZPP_PubPool.nextVec2.zpp_pool = o; else zpp_nape.util.ZPP_PubPool.poolVec2 = o;
	zpp_nape.util.ZPP_PubPool.nextVec2 = o;
	o.zpp_disp = true;
	var o = pr;
	{
		if(o.outer != null) o.outer.zpp_inner = null;
		o.outer = null;
		o._immutable = null;
		o._validate = null;
		o._invalidate = null;
		o.weak = false;
	}
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
}
nape.geom.Vec2.prototype.copy = function(weak) {
	if(weak == null) weak = false;
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	return nape.geom.Vec2.get((function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)),weak);
}
nape.geom.Vec2.prototype.x = null;
nape.geom.Vec2.prototype.flibget_x = function() {
	return (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this));
}
nape.geom.Vec2.prototype.flibset_x = function(x) {
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec2 is immutable";
	if(this.zpp_inner._immutable != null) this.zpp_inner._immutable();
	if((function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) != x) {
		if(x != x) throw "Error: Vec2::" + "x" + " cannot be NaN";
		this.zpp_inner.x = x;
		this.zpp_inner.invalidate();
	}
	return (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this));
}
nape.geom.Vec2.prototype.y = null;
nape.geom.Vec2.prototype.flibget_y = function() {
	return (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this));
}
nape.geom.Vec2.prototype.flibset_y = function(y) {
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec2 is immutable";
	if(this.zpp_inner._immutable != null) this.zpp_inner._immutable();
	if((function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) != y) {
		if(y != y) throw "Error: Vec2::" + "y" + " cannot be NaN";
		this.zpp_inner.y = y;
		this.zpp_inner.invalidate();
	}
	return (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this));
}
nape.geom.Vec2.prototype.length = null;
nape.geom.Vec2.prototype.flibget_length = function() {
	return (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$r = Math.sqrt((function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) + (function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)));
		return $r;
	}(this));
}
nape.geom.Vec2.prototype.flibset_length = function(length) {
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec2 is immutable";
	if(length != length) throw "Error: Vec2::length cannot be NaN";
	if((function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) == 0) throw "Error: Cannot set length of a zero vector";
	var t = length / Math.sqrt((function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)));
	var _g = this;
	_g.flibset_x((function($this) {
		var $r;
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		_g.zpp_inner.validate();
		$r = _g.zpp_inner.x;
		return $r;
	}(this)) * t);
	var _g = this;
	_g.flibset_y((function($this) {
		var $r;
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		_g.zpp_inner.validate();
		$r = _g.zpp_inner.y;
		return $r;
	}(this)) * t);
	this.zpp_inner.invalidate();
	return (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$r = Math.sqrt((function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) + (function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)));
		return $r;
	}(this));
}
nape.geom.Vec2.prototype.lsq = function() {
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	return (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this));
}
nape.geom.Vec2.prototype.set = function(p) {
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec2 is immutable";
	if(p == null) throw "Error: Cannot assign null Vec2";
	var ret = this.setxy((function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(p != null && p.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p.zpp_inner.validate();
		$r = p.zpp_inner.y;
		return $r;
	}(this)));
	if(p.zpp_inner.weak) {
		p.dispose();
		true;
	} else false;
	return ret;
}
nape.geom.Vec2.prototype.setxy = function(x,y) {
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec2 is immutable";
	if(x != x || y != y) throw "Error: Vec2 components cannot be NaN";
	if(!((function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) == x && (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) == y)) {
		this.zpp_inner.x = x;
		this.zpp_inner.y = y;
		this.zpp_inner.invalidate();
	}
	return this;
}
nape.geom.Vec2.prototype.angle = null;
nape.geom.Vec2.prototype.flibget_angle = function() {
	return (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$r = (function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) == (function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)) && (function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) == 0?0.0:Math.atan2((function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)),(function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)));
		return $r;
	}(this));
}
nape.geom.Vec2.prototype.flibset_angle = function(angle) {
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec2 is immutable";
	if(angle != angle) throw "Error: Vec2::angle cannot be NaN";
	var l = (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$r = Math.sqrt((function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) + (function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)) * (function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)));
		return $r;
	}(this));
	this.setxy(l * Math.cos(angle),l * Math.sin(angle));
	return (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$r = (function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) == (function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)) && (function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)) == 0?0.0:Math.atan2((function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}($this)),(function($this) {
			var $r;
			if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}($this)));
		return $r;
	}(this));
}
nape.geom.Vec2.prototype.add = function(a,weak) {
	if(weak == null) weak = false;
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a == null) throw "Error: Cannot add null vectors";
	var ret = nape.geom.Vec2.get((function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)),weak);
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	return ret;
}
nape.geom.Vec2.prototype.sub = function(a,weak) {
	if(weak == null) weak = false;
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a == null) throw "Error: Cannot subtract null vectors";
	var ret = nape.geom.Vec2.get((function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) - (function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) - (function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)),weak);
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	return ret;
}
nape.geom.Vec2.prototype.mul = function(s,weak) {
	if(weak == null) weak = false;
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(s != s) throw "Error: Cannot multiply with NaN";
	return nape.geom.Vec2.get((function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * s,(function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * s,weak);
}
nape.geom.Vec2.prototype.addeq = function(a) {
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec2 is immutable";
	if(a == null) throw "Error: Cannot add null vectors";
	var ret = this.setxy((function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	return ret;
}
nape.geom.Vec2.prototype.subeq = function(a) {
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec2 is immutable";
	if(a == null) throw "Error: Cannot subtract null vectors";
	var ret = this.setxy((function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) - (function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) - (function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	return ret;
}
nape.geom.Vec2.prototype.muleq = function(s) {
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec2 is immutable";
	if(s != s) throw "Error: Cannot multiply with NaN";
	return this.setxy((function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * s,(function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * s);
}
nape.geom.Vec2.prototype.dot = function(a) {
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a == null) throw "Error: Cannot take dot product with null vector";
	var ret = (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)) + (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	return ret;
}
nape.geom.Vec2.prototype.cross = function(a) {
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a == null) throw "Error: Cannot take cross product with null vector";
	var ret = (function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.x;
		return $r;
	}(this)) - (function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)) * (function($this) {
		var $r;
		if($this != null && $this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		$this.zpp_inner.validate();
		$r = $this.zpp_inner.y;
		return $r;
	}(this));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	return ret;
}
nape.geom.Vec2.prototype.toString = function() {
	if(this != null && this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	return this.zpp_inner.toString();
}
nape.geom.Vec2.prototype.__class__ = nape.geom.Vec2;
js.Lib = function() { }
js.Lib.__name__ = ["js","Lib"];
js.Lib.isIE = null;
js.Lib.isOpera = null;
js.Lib.document = null;
js.Lib.window = null;
js.Lib.alert = function(v) {
	alert(js.Boot.__string_rec(v,""));
}
js.Lib.eval = function(code) {
	return eval(code);
}
js.Lib.setErrorHandler = function(f) {
	js.Lib.onerror = f;
}
js.Lib.prototype.__class__ = js.Lib;
jeash.display.Stage = function(width,height) {
	if( width === $_ ) return;
	jeash.display.DisplayObjectContainer.call(this);
	this.mFocusObject = null;
	this.jeashWindowWidth = width;
	this.jeashWindowHeight = height;
	this.stageFocusRect = false;
	this.scaleMode = jeash.display.StageScaleMode.SHOW_ALL;
	this.jeashStageMatrix = new jeash.geom.Matrix();
	this.tabEnabled = true;
	this.jeashSetFrameRate(60.0);
	this.jeashSetBackgroundColour(16777215);
	this.name = "Stage";
	this.loaderInfo = jeash.display.LoaderInfo.create(null);
	this.loaderInfo.parameters.width = Std.string(this.jeashWindowWidth);
	this.loaderInfo.parameters.height = Std.string(this.jeashWindowHeight);
	this.mProjMatrix = [1.,0,0,0,0,1,0,0,0,0,-1,-1,0,0,0,0];
	this.jeashPointInPathMode = jeash.display.Graphics.jeashDetectIsPointInPathMode();
	this.jeashMouseOverObjects = [];
	this.jeashMouseDown = false;
	this.jeashSetShowDefaultContextMenu(true);
}
jeash.display.Stage.__name__ = ["jeash","display","Stage"];
jeash.display.Stage.__super__ = jeash.display.DisplayObjectContainer;
for(var k in jeash.display.DisplayObjectContainer.prototype ) jeash.display.Stage.prototype[k] = jeash.display.DisplayObjectContainer.prototype[k];
jeash.display.Stage.prototype.jeashWindowWidth = null;
jeash.display.Stage.prototype.jeashWindowHeight = null;
jeash.display.Stage.prototype.jeashTimer = null;
jeash.display.Stage.prototype.jeashInterval = null;
jeash.display.Stage.prototype.jeashFastMode = null;
jeash.display.Stage.prototype.jeashDragObject = null;
jeash.display.Stage.prototype.jeashDragBounds = null;
jeash.display.Stage.prototype.jeashDragOffsetX = null;
jeash.display.Stage.prototype.jeashDragOffsetY = null;
jeash.display.Stage.prototype.jeashMouseOverObjects = null;
jeash.display.Stage.prototype.jeashStageMatrix = null;
jeash.display.Stage.prototype.jeashMouseDown = null;
jeash.display.Stage.prototype.jeashStageActive = null;
jeash.display.Stage.prototype.jeashFrameRate = null;
jeash.display.Stage.prototype.jeashBackgroundColour = null;
jeash.display.Stage.prototype.jeashShowDefaultContextMenu = null;
jeash.display.Stage.prototype.jeashPointInPathMode = null;
jeash.display.Stage.prototype.stageWidth = null;
jeash.display.Stage.prototype.stageHeight = null;
jeash.display.Stage.prototype.frameRate = null;
jeash.display.Stage.prototype.quality = null;
jeash.display.Stage.prototype.scaleMode = null;
jeash.display.Stage.prototype.align = null;
jeash.display.Stage.prototype.stageFocusRect = null;
jeash.display.Stage.prototype.focus = null;
jeash.display.Stage.prototype.backgroundColor = null;
jeash.display.Stage.prototype.showDefaultContextMenu = null;
jeash.display.Stage.prototype.displayState = null;
jeash.display.Stage.prototype.fullScreenWidth = null;
jeash.display.Stage.prototype.fullScreenHeight = null;
jeash.display.Stage.prototype.jeashGetStageWidth = function() {
	return this.jeashWindowWidth;
}
jeash.display.Stage.prototype.jeashGetStageHeight = function() {
	return this.jeashWindowHeight;
}
jeash.display.Stage.prototype.mFocusObject = null;
jeash.display.Stage.prototype.mProjMatrix = null;
jeash.display.Stage.prototype.jeashStartDrag = function(sprite,lockCenter,bounds) {
	if(lockCenter == null) lockCenter = false;
	this.jeashDragBounds = bounds == null?null:bounds.clone();
	this.jeashDragObject = sprite;
	if(this.jeashDragObject != null) {
		if(lockCenter) {
			var bounds1 = sprite.getBounds(this);
			this.jeashDragOffsetX = -bounds1.width / 2 - bounds1.x;
			this.jeashDragOffsetY = -bounds1.height / 2 - bounds1.y;
		} else {
			var mouse = new jeash.geom.Point(this.jeashGetMouseX(),this.jeashGetMouseY());
			var p = this.jeashDragObject.parent;
			if(p != null) mouse = p.globalToLocal(mouse);
			this.jeashDragOffsetX = this.jeashDragObject.jeashGetX() - mouse.x;
			this.jeashDragOffsetY = this.jeashDragObject.jeashGetY() - mouse.y;
		}
	}
}
jeash.display.Stage.prototype.jeashDrag = function(point) {
	var p = this.jeashDragObject.parent;
	if(p != null) point = p.globalToLocal(point);
	var x = point.x + this.jeashDragOffsetX;
	var y = point.y + this.jeashDragOffsetY;
	if(this.jeashDragBounds != null) {
		if(x < this.jeashDragBounds.x) x = this.jeashDragBounds.x; else if(x > this.jeashDragBounds.get_right()) x = this.jeashDragBounds.get_right();
		if(y < this.jeashDragBounds.y) y = this.jeashDragBounds.y; else if(y > this.jeashDragBounds.get_bottom()) y = this.jeashDragBounds.get_bottom();
	}
	this.jeashDragObject.jeashSetX(x);
	this.jeashDragObject.jeashSetY(y);
}
jeash.display.Stage.prototype.jeashStopDrag = function(sprite) {
	this.jeashDragBounds = null;
	this.jeashDragObject = null;
}
jeash.display.Stage.prototype.jeashCheckInOuts = function(event,stack) {
	var prev = this.jeashMouseOverObjects;
	var events = jeash.display.Stage.jeashMouseChanges;
	var new_n = stack.length;
	var new_obj = new_n > 0?stack[new_n - 1]:null;
	var old_n = prev.length;
	var old_obj = old_n > 0?prev[old_n - 1]:null;
	if(new_obj != old_obj) {
		if(old_obj != null) old_obj.jeashFireEvent(event.jeashCreateSimilar(events[0],new_obj,old_obj));
		if(new_obj != null) new_obj.jeashFireEvent(event.jeashCreateSimilar(events[1],old_obj,new_obj));
		var common = 0;
		while(common < new_n && common < old_n && stack[common] == prev[common]) common++;
		var rollOut = event.jeashCreateSimilar(events[2],new_obj,old_obj);
		var i = old_n - 1;
		while(i >= common) {
			prev[i].dispatchEvent(rollOut);
			i--;
		}
		var rollOver = event.jeashCreateSimilar(events[3],old_obj);
		var i1 = new_n - 1;
		while(i1 >= common) {
			stack[i1].dispatchEvent(rollOver);
			i1--;
		}
		this.jeashMouseOverObjects = stack;
	}
}
jeash.display.Stage.prototype.jeashProcessStageEvent = function(evt) {
	evt.stopPropagation();
	switch(evt.type) {
	case "mousemove":
		this.jeashOnMouse(evt,jeash.events.MouseEvent.MOUSE_MOVE);
		break;
	case "mousedown":
		this.jeashOnMouse(evt,jeash.events.MouseEvent.MOUSE_DOWN);
		break;
	case "mouseup":
		this.jeashOnMouse(evt,jeash.events.MouseEvent.MOUSE_UP);
		break;
	case "click":
		this.jeashOnMouse(evt,jeash.events.MouseEvent.CLICK);
		break;
	case "mousewheel":
		this.jeashOnMouse(evt,jeash.events.MouseEvent.MOUSE_WHEEL);
		break;
	case "dblclick":
		this.jeashOnMouse(evt,jeash.events.MouseEvent.DOUBLE_CLICK);
		break;
	case "keydown":
		var evt1 = evt;
		var keyCode = evt1.keyIdentifier != null?(function($this) {
			var $r;
			try {
				$r = jeash.ui.Keyboard.jeashConvertWebkitCode(evt1.keyIdentifier);
			} catch( e ) {
				$r = evt1.keyCode;
			}
			return $r;
		}(this)):jeash.ui.Keyboard.jeashConvertMozillaCode(evt1.keyCode);
		this.jeashOnKey(keyCode,true,evt1.keyLocation,evt1.ctrlKey,evt1.altKey,evt1.shiftKey);
		break;
	case "keyup":
		var evt1 = evt;
		var keyCode = evt1.keyIdentifier != null?(function($this) {
			var $r;
			try {
				$r = jeash.ui.Keyboard.jeashConvertWebkitCode(evt1.keyIdentifier);
			} catch( e ) {
				$r = evt1.keyCode;
			}
			return $r;
		}(this)):jeash.ui.Keyboard.jeashConvertMozillaCode(evt1.keyCode);
		this.jeashOnKey(keyCode,false,evt1.keyLocation,evt1.ctrlKey,evt1.altKey,evt1.shiftKey);
		break;
	default:
	}
}
jeash.display.Stage.prototype.jeashOnMouse = function(event,type) {
	var point = new jeash.geom.Point(event.clientX - jeash.Lib.mMe.__scr.offsetLeft + window.pageXOffset,event.clientY - jeash.Lib.mMe.__scr.offsetTop + window.pageYOffset);
	if(this.jeashDragObject != null) this.jeashDrag(point);
	var obj = this.jeashGetObjectUnderPoint(point);
	this.jeashSetMouseX(point.x);
	this.jeashSetMouseY(point.y);
	var stack = new Array();
	if(obj != null) obj.jeashGetInteractiveObjectStack(stack);
	if(stack.length > 0) {
		stack.reverse();
		var local = obj.globalToLocal(point);
		var evt = this.jeashCreateMouseEvent(type,event,local,obj);
		this.jeashCheckInOuts(evt,stack);
		obj.jeashFireEvent(evt);
	} else {
		var evt = this.jeashCreateMouseEvent(type,event,point,null);
		this.jeashCheckInOuts(evt,stack);
	}
}
jeash.display.Stage.prototype.jeashCreateMouseEvent = function(type,event,local,target) {
	var delta = type == jeash.events.MouseEvent.MOUSE_WHEEL?(function($this) {
		var $r;
		var mouseEvent = event;
		$r = mouseEvent.wheelDelta?js.Lib.isOpera?Std["int"](mouseEvent.wheelDelta / 40):Std["int"](mouseEvent.wheelDelta / 120):mouseEvent.detail?Std["int"](-mouseEvent.detail):null;
		return $r;
	}(this)):2;
	if(type == jeash.events.MouseEvent.MOUSE_DOWN) this.jeashMouseDown = event.which != null?event.which == 1:event.button != null?js.Lib.isIE && event.button == 1 || event.button == 0:false; else if(type == jeash.events.MouseEvent.MOUSE_UP) {
		if(event.which != null) {
			if(event.which == 1) this.jeashMouseDown = false; else if(event.button != null) {
				if(js.Lib.isIE && event.button == 1 || event.button == 0) this.jeashMouseDown = false; else this.jeashMouseDown = false;
			}
		}
	}
	var pseudoEvent = new jeash.events.MouseEvent(type,true,false,local.x,local.y,null,event.ctrlKey,event.altKey,event.shiftKey,this.jeashMouseDown,delta);
	pseudoEvent.stageX = this.jeashGetMouseX();
	pseudoEvent.stageY = this.jeashGetMouseY();
	pseudoEvent.target = target;
	return pseudoEvent;
}
jeash.display.Stage.prototype.jeashOnKey = function(code,pressed,inChar,ctrl,alt,shift) {
	var event = new jeash.events.KeyboardEvent(pressed?jeash.events.KeyboardEvent.KEY_DOWN:jeash.events.KeyboardEvent.KEY_UP,true,false,inChar,code,shift || ctrl?1:0,ctrl,alt,shift);
	this.dispatchEvent(event);
}
jeash.display.Stage.prototype.jeashOnResize = function(inW,inH) {
	this.jeashWindowWidth = inW;
	this.jeashWindowHeight = inH;
	var event = new jeash.events.Event(jeash.events.Event.RESIZE);
	event.target = this;
	this.jeashBroadcast(event);
}
jeash.display.Stage.prototype.jeashGetBackgroundColour = function() {
	return this.jeashBackgroundColour;
}
jeash.display.Stage.prototype.jeashSetBackgroundColour = function(col) {
	this.jeashBackgroundColour = col;
	return col;
}
jeash.display.Stage.prototype.DoSetFocus = function(inObj,inKeyCode) {
	return inObj;
}
jeash.display.Stage.prototype.SetFocus = function(inObj) {
	return this.DoSetFocus(inObj,-1);
}
jeash.display.Stage.prototype.GetFocus = function() {
	return this.mFocusObject;
}
jeash.display.Stage.prototype.jeashRenderAll = function() {
	this.jeashRender(this.jeashStageMatrix);
}
jeash.display.Stage.prototype.jeashRenderToCanvas = function(canvas) {
	canvas.width = canvas.width;
	this.jeashRender(this.jeashStageMatrix,canvas);
}
jeash.display.Stage.prototype.jeashSetQuality = function(inQuality) {
	this.quality = inQuality;
	return inQuality;
}
jeash.display.Stage.prototype.jeashGetQuality = function() {
	return this.quality != null?this.quality:jeash.display.StageQuality.BEST;
}
jeash.display.Stage.prototype.jeashGetFrameRate = function() {
	return this.jeashFrameRate;
}
jeash.display.Stage.prototype.jeashSetFrameRate = function(speed) {
	if(StringTools.startsWith(jeash.Lib.context,"swf")) return speed;
	var window = js.Lib.window;
	if(speed == 0 && window.postMessage != null) this.jeashFastMode = true; else {
		this.jeashFastMode = false;
		this.jeashInterval = Std["int"](1000.0 / speed);
	}
	this.jeashUpdateNextWake();
	this.jeashFrameRate = speed;
	return speed;
}
jeash.display.Stage.prototype.jeashUpdateNextWake = function() {
	var window = js.Lib.window;
	window.clearInterval(this.jeashTimer);
	if(this.jeashFastMode) {
		window.addEventListener("message",$closure(this,"jeashStageRender"),false);
		window.postMessage("a",window.location);
	} else this.jeashTimer = window.setInterval($closure(this,"jeashStageRender"),this.jeashInterval,[]);
}
jeash.display.Stage.prototype.jeashStageRender = function(_) {
	if(!this.jeashStageActive) {
		this.jeashOnResize(this.jeashWindowWidth,this.jeashWindowHeight);
		var event = new jeash.events.Event(jeash.events.Event.ACTIVATE);
		event.target = this;
		this.jeashBroadcast(event);
		this.jeashStageActive = true;
	}
	var event = new jeash.events.Event(jeash.events.Event.ENTER_FRAME);
	this.jeashBroadcast(event);
	this.jeashRenderAll();
	var event1 = new jeash.events.Event(jeash.events.Event.RENDER);
	this.jeashBroadcast(event1);
	if(this.jeashFastMode) window.postMessage("a",window.location);
}
jeash.display.Stage.prototype.jeashIsOnStage = function() {
	return true;
}
jeash.display.Stage.prototype.jeashGetMouseX = function() {
	return this.mouseX;
}
jeash.display.Stage.prototype.jeashSetMouseX = function(x) {
	this.mouseX = x;
	return x;
}
jeash.display.Stage.prototype.jeashGetMouseY = function() {
	return this.mouseY;
}
jeash.display.Stage.prototype.jeashSetMouseY = function(y) {
	this.mouseY = y;
	return y;
}
jeash.display.Stage.prototype.jeashGetShowDefaultContextMenu = function() {
	return this.jeashShowDefaultContextMenu;
}
jeash.display.Stage.prototype.jeashSetShowDefaultContextMenu = function(showDefaultContextMenu) {
	if(showDefaultContextMenu != this.jeashShowDefaultContextMenu && this.jeashShowDefaultContextMenu != null) {
		if(!showDefaultContextMenu) jeash.Lib.jeashDisableRightClick(); else jeash.Lib.jeashEnableRightClick();
	}
	this.jeashShowDefaultContextMenu = showDefaultContextMenu;
	return showDefaultContextMenu;
}
jeash.display.Stage.prototype.jeashGetDisplayState = function() {
	return this.displayState;
}
jeash.display.Stage.prototype.jeashSetDisplayState = function(displayState) {
	if(displayState != this.displayState && this.displayState != null) {
		switch( (displayState)[1] ) {
		case 1:
			jeash.Lib.jeashDisableFullScreen();
			break;
		case 0:
			jeash.Lib.jeashEnableFullScreen();
			break;
		}
	}
	this.displayState = displayState;
	return displayState;
}
jeash.display.Stage.prototype.jeashGetFullScreenWidth = function() {
	return jeash.Lib.jeashFullScreenWidth();
}
jeash.display.Stage.prototype.jeashGetFullScreenHeight = function() {
	return jeash.Lib.jeashFullScreenHeight();
}
jeash.display.Stage.prototype.__class__ = jeash.display.Stage;
haxe.Log = function() { }
haxe.Log.__name__ = ["haxe","Log"];
haxe.Log.trace = function(v,infos) {
	js.Boot.__trace(v,infos);
}
haxe.Log.clear = function() {
	js.Boot.__clear_trace();
}
haxe.Log.prototype.__class__ = haxe.Log;
jeash.errors.IOError = function(message) {
	if( message === $_ ) return;
	if(message == null) message = "";
	jeash.errors.Error.call(this,message);
}
jeash.errors.IOError.__name__ = ["jeash","errors","IOError"];
jeash.errors.IOError.__super__ = jeash.errors.Error;
for(var k in jeash.errors.Error.prototype ) jeash.errors.IOError.prototype[k] = jeash.errors.Error.prototype[k];
jeash.errors.IOError.prototype.__class__ = jeash.errors.IOError;
jeash.text.TextFieldType = function(p) {
}
jeash.text.TextFieldType.__name__ = ["jeash","text","TextFieldType"];
jeash.text.TextFieldType.prototype.__class__ = jeash.text.TextFieldType;
nape.dynamics.ContactList = function(p) {
	if( p === $_ ) return;
	this.zpp_inner = new zpp_nape.util.ZPP_ContactList();
	this.zpp_inner.outer = this;
}
nape.dynamics.ContactList.__name__ = ["nape","dynamics","ContactList"];
nape.dynamics.ContactList.fromArray = function(array) {
	var ret = new nape.dynamics.ContactList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.dynamics.ContactList.prototype.zpp_inner = null;
nape.dynamics.ContactList.prototype.length = null;
nape.dynamics.ContactList.prototype.flibget_length = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.zip_length) {
		this.zpp_inner.zip_length = false;
		this.zpp_inner.user_length = 0;
		var cx_ite = this.zpp_inner.inner.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i.active && i.arbiter.active) this.zpp_inner.user_length++;
			cx_ite = cx_ite.next;
		}
	}
	return this.zpp_inner.user_length;
}
nape.dynamics.ContactList.prototype.has = function(obj) {
	this.zpp_inner.valmod();
	return this.zpp_inner.inner.has(obj.zpp_inner);
}
nape.dynamics.ContactList.prototype.at = function(index) {
	this.zpp_inner.valmod();
	if(index < 0 || index >= this.flibget_length()) throw "Error: Index out of bounds";
	if(this.zpp_inner.reverse_flag) index = this.flibget_length() - 1 - index;
	if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
		this.zpp_inner.at_index = 0;
		this.zpp_inner.at_ite = this.zpp_inner.inner.next;
		while(true) {
			var x = this.zpp_inner.at_ite;
			if(x.active && x.arbiter.active) break;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	while(this.zpp_inner.at_index != index) {
		this.zpp_inner.at_index++;
		this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		while(true) {
			var x = this.zpp_inner.at_ite;
			if(x.active && x.arbiter.active) break;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
	}
	return this.zpp_inner.at_ite.wrapper();
}
nape.dynamics.ContactList.prototype.push = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.flibget_length() == 0?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		}
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.dynamics.ContactList.prototype.unshift = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
	if(cont) {
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.flibget_length() == 0?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 1);
			this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
		} else this.zpp_inner.inner.add(obj.zpp_inner);
		this.zpp_inner.invalidate();
		if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
	}
	return cont;
}
nape.dynamics.ContactList.prototype.pop = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.flibget_length() == 0) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		ret = this.zpp_inner.inner.next;
		var retx = (function($this) {
			var $r;
			if(ret.outer == null) {
				zpp_nape.dynamics.ZPP_Contact.internal = true;
				ret.outer = new nape.dynamics.Contact();
				zpp_nape.dynamics.ZPP_Contact.internal = false;
				ret.outer.zpp_inner = ret;
			}
			$r = ret.outer;
			return $r;
		}(this));
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	} else {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.next:ite.next;
		var retx = (function($this) {
			var $r;
			if(ret.outer == null) {
				zpp_nape.dynamics.ZPP_Contact.internal = true;
				ret.outer = new nape.dynamics.Contact();
				zpp_nape.dynamics.ZPP_Contact.internal = false;
				ret.outer.zpp_inner = ret;
			}
			$r = ret.outer;
			return $r;
		}(this));
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	}
	this.zpp_inner.invalidate();
	var retx = (function($this) {
		var $r;
		if(ret.outer == null) {
			zpp_nape.dynamics.ZPP_Contact.internal = true;
			ret.outer = new nape.dynamics.Contact();
			zpp_nape.dynamics.ZPP_Contact.internal = false;
			ret.outer.zpp_inner = ret;
		}
		$r = ret.outer;
		return $r;
	}(this));
	return retx;
}
nape.dynamics.ContactList.prototype.shift = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
	this.zpp_inner.modify_test();
	if(this.flibget_length() == 0) throw "Error: Cannot remove from empty list";
	this.zpp_inner.valmod();
	var ret = null;
	if(this.zpp_inner.reverse_flag) {
		if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
		var ite = this.flibget_length() == 1?null:this.zpp_inner.inner.iterator_at(this.flibget_length() - 2);
		ret = ite == null?this.zpp_inner.inner.next:ite.next;
		var retx = (function($this) {
			var $r;
			if(ret.outer == null) {
				zpp_nape.dynamics.ZPP_Contact.internal = true;
				ret.outer = new nape.dynamics.Contact();
				zpp_nape.dynamics.ZPP_Contact.internal = false;
				ret.outer.zpp_inner = ret;
			}
			$r = ret.outer;
			return $r;
		}(this));
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.erase(ite);
	} else {
		ret = this.zpp_inner.inner.next;
		var retx = (function($this) {
			var $r;
			if(ret.outer == null) {
				zpp_nape.dynamics.ZPP_Contact.internal = true;
				ret.outer = new nape.dynamics.Contact();
				zpp_nape.dynamics.ZPP_Contact.internal = false;
				ret.outer.zpp_inner = ret;
			}
			$r = ret.outer;
			return $r;
		}(this));
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
		this.zpp_inner.inner.pop();
	}
	this.zpp_inner.invalidate();
	var retx = (function($this) {
		var $r;
		if(ret.outer == null) {
			zpp_nape.dynamics.ZPP_Contact.internal = true;
			ret.outer = new nape.dynamics.Contact();
			zpp_nape.dynamics.ZPP_Contact.internal = false;
			ret.outer.zpp_inner = ret;
		}
		$r = ret.outer;
		return $r;
	}(this));
	return retx;
}
nape.dynamics.ContactList.prototype.add = function(obj) {
	return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
}
nape.dynamics.ContactList.prototype.remove = function(obj) {
	if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
	this.zpp_inner.modify_test();
	this.zpp_inner.valmod();
	var ret = (function($this) {
		var $r;
		var ret = false;
		{
			var cx_ite = $this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var x = cx_ite;
				if(x == obj.zpp_inner) {
					ret = true;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = ret;
		return $r;
	}(this));
	if(ret) {
		if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
		this.zpp_inner.inner.remove(obj.zpp_inner);
		this.zpp_inner.invalidate();
	}
	return ret;
}
nape.dynamics.ContactList.prototype.clear = function() {
	if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
	if(this.zpp_inner.reverse_flag) while(!(this.flibget_length() == 0)) this.pop(); else while(!(this.flibget_length() == 0)) this.shift();
}
nape.dynamics.ContactList.prototype.empty = function() {
	return this.flibget_length() == 0;
}
nape.dynamics.ContactList.prototype.iterator = function() {
	this.zpp_inner.valmod();
	if(this.zpp_inner.iterators == null) this.zpp_inner.iterators = new zpp_nape.util.ZNPList_ContactIterator();
	return nape.dynamics.ContactIterator.get(this);
}
nape.dynamics.ContactList.prototype.copy = function(deep) {
	if(deep == null) deep = false;
	var ret = new nape.dynamics.ContactList();
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_ContactIterator();
		$r = nape.dynamics.ContactIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		ret.push(deep?(function($this) {
			var $r;
			throw "Error: " + "Contact" + " is not a copyable type";
			$r = null;
			return $r;
		}(this)):i);
	}
	return ret;
}
nape.dynamics.ContactList.prototype.merge = function(xs) {
	if(xs == null) throw "Error: Cannot merge with null list";
	var $it0 = (function($this) {
		var $r;
		xs.zpp_inner.valmod();
		if(xs.zpp_inner.iterators == null) xs.zpp_inner.iterators = new zpp_nape.util.ZNPList_ContactIterator();
		$r = nape.dynamics.ContactIterator.get(xs);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(!this.has(x)) if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
	}
}
nape.dynamics.ContactList.prototype.toString = function() {
	var ret = "[";
	var fst = true;
	var $it0 = (function($this) {
		var $r;
		$this.zpp_inner.valmod();
		if($this.zpp_inner.iterators == null) $this.zpp_inner.iterators = new zpp_nape.util.ZNPList_ContactIterator();
		$r = nape.dynamics.ContactIterator.get($this);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var i = $it0.next();
		if(!fst) ret += ",";
		ret += i == null?"NULL":i.toString();
		fst = false;
	}
	return ret + "]";
}
nape.dynamics.ContactList.prototype.__class__ = nape.dynamics.ContactList;
nape.dynamics.ContactIterator = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_ContactList.internal) throw "Error: Cannot instantiate " + "Contact" + "Iterator derp!";
}
nape.dynamics.ContactIterator.__name__ = ["nape","dynamics","ContactIterator"];
nape.dynamics.ContactIterator.zpp_pool = null;
nape.dynamics.ContactIterator.get = function(list) {
	var ret = nape.dynamics.ContactIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_ContactList.internal = true;
		var ret = new nape.dynamics.ContactIterator();
		zpp_nape.util.ZPP_ContactList.internal = false;
		$r = ret;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.dynamics.ContactIterator.zpp_pool;
		nape.dynamics.ContactIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	list.zpp_inner.iterators.add(ret);
	return ret;
}
nape.dynamics.ContactIterator.prototype.zpp_inner = null;
nape.dynamics.ContactIterator.prototype.zpp_i = null;
nape.dynamics.ContactIterator.prototype.zpp_critical = null;
nape.dynamics.ContactIterator.prototype.zpp_next = null;
nape.dynamics.ContactIterator.prototype.hasNext = function() {
	this.zpp_inner.zpp_inner.valmod();
	var length = this.zpp_inner.flibget_length();
	this.zpp_critical = true;
	if(this.zpp_i < length) return true; else {
		this.zpp_next = nape.dynamics.ContactIterator.zpp_pool;
		nape.dynamics.ContactIterator.zpp_pool = this;
		this.zpp_inner.zpp_inner.iterators.remove(this);
		return false;
	}
}
nape.dynamics.ContactIterator.prototype.next = function() {
	this.zpp_critical = false;
	return this.zpp_inner.at(this.zpp_i++);
}
nape.dynamics.ContactIterator.prototype.__class__ = nape.dynamics.ContactIterator;
nape.dynamics.Contact = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.dynamics.ZPP_Contact.internal) throw "Error: Cannot instantiate Contact derp!";
}
nape.dynamics.Contact.__name__ = ["nape","dynamics","Contact"];
nape.dynamics.Contact.prototype.zpp_inner = null;
nape.dynamics.Contact.prototype.active = null;
nape.dynamics.Contact.prototype.flibget_active = function() {
	return this.zpp_inner.active && this.zpp_inner.arbiter != null && !this.zpp_inner.arbiter.cleared;
}
nape.dynamics.Contact.prototype.arbiter = null;
nape.dynamics.Contact.prototype.flibget_arbiter = function() {
	return this.zpp_inner.arbiter == null?null:this.zpp_inner.arbiter.outer.flibget_collisionArbiter();
}
nape.dynamics.Contact.prototype.penetration = null;
nape.dynamics.Contact.prototype.flibget_penetration = function() {
	return (function($this) {
		var $r;
		if(!($this.zpp_inner.active && $this.zpp_inner.arbiter != null && !$this.zpp_inner.arbiter.cleared)) throw "Error: Contact not currently in use";
		$r = -$this.zpp_inner.dist;
		return $r;
	}(this));
}
nape.dynamics.Contact.prototype.position = null;
nape.dynamics.Contact.prototype.flibget_position = function() {
	return (function($this) {
		var $r;
		if(!($this.zpp_inner.active && $this.zpp_inner.arbiter != null && !$this.zpp_inner.arbiter.cleared)) throw "Error: Contact not currently in use";
		if($this.zpp_inner.wrap_position == null) $this.zpp_inner.getposition();
		$r = $this.zpp_inner.wrap_position;
		return $r;
	}(this));
}
nape.dynamics.Contact.prototype.fresh = null;
nape.dynamics.Contact.prototype.flibget_fresh = function() {
	return (function($this) {
		var $r;
		if(!($this.zpp_inner.active && $this.zpp_inner.arbiter != null && !$this.zpp_inner.arbiter.cleared)) throw "Error: Contact not currently in use";
		$r = $this.zpp_inner.fresh;
		return $r;
	}(this));
}
nape.dynamics.Contact.prototype.normalImpulse = function(body) {
	if(!(this.zpp_inner.active && this.zpp_inner.arbiter != null && !this.zpp_inner.arbiter.cleared)) throw "Error: Contact not currently in use";
	var colarb = this.zpp_inner.arbiter.colarb;
	var cin = this.zpp_inner.inner;
	var jnAcc = cin.jnAcc + this.zpp_inner.pjnAcc;
	if(body == null) return new nape.geom.Vec3(colarb.nx * jnAcc,colarb.ny * jnAcc); else {
		if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
		if(body == colarb.b1.outer) return new nape.geom.Vec3(colarb.nx * -jnAcc,colarb.ny * -jnAcc,-(colarb.ny * cin.r1x - colarb.nx * cin.r1y) * jnAcc); else return new nape.geom.Vec3(colarb.nx * jnAcc,colarb.ny * jnAcc,(colarb.ny * cin.r2x - colarb.nx * cin.r2y) * jnAcc);
	}
}
nape.dynamics.Contact.prototype.tangentImpulse = function(body) {
	if(!(this.zpp_inner.active && this.zpp_inner.arbiter != null && !this.zpp_inner.arbiter.cleared)) throw "Error: Contact not currently in use";
	var colarb = this.zpp_inner.arbiter.colarb;
	var cin = this.zpp_inner.inner;
	var jtAcc = cin.jtAcc + this.zpp_inner.pjtAcc;
	if(body == null) return new nape.geom.Vec3(-colarb.ny * jtAcc,colarb.nx * jtAcc); else {
		if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
		if(body == colarb.b1.outer) return new nape.geom.Vec3(colarb.ny * jtAcc,-colarb.nx * jtAcc,-(cin.r1x * colarb.nx + cin.r1y * colarb.ny) * jtAcc); else return new nape.geom.Vec3(-colarb.ny * jtAcc,colarb.nx * jtAcc,(cin.r2x * colarb.nx + cin.r2y * colarb.ny) * jtAcc);
	}
}
nape.dynamics.Contact.prototype.rollingImpulse = function(body) {
	if(!(this.zpp_inner.active && this.zpp_inner.arbiter != null && !this.zpp_inner.arbiter.cleared)) throw "Error: Contact not currently in use";
	var colarb = this.zpp_inner.arbiter.colarb;
	var jrAcc = this.zpp_inner.arbiter.colarb.jrAcc + this.zpp_inner.arbiter.colarb.pjrAcc;
	if(body == null) return jrAcc; else {
		if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
		if(body == colarb.b1.outer) return -jrAcc; else return jrAcc;
	}
}
nape.dynamics.Contact.prototype.totalImpulse = function(body) {
	if(!(this.zpp_inner.active && this.zpp_inner.arbiter != null && !this.zpp_inner.arbiter.cleared)) throw "Error: Contact not currently in use";
	var colarb = this.zpp_inner.arbiter.colarb;
	var cin = this.zpp_inner.inner;
	var jnAcc = cin.jnAcc + this.zpp_inner.pjnAcc;
	var jtAcc = cin.jtAcc + this.zpp_inner.pjtAcc;
	var jrAcc = colarb.jrAcc + colarb.pjrAcc;
	if(body == null) return new nape.geom.Vec3(colarb.nx * jnAcc - colarb.ny * jtAcc,colarb.ny * jnAcc + colarb.nx * jtAcc,jrAcc); else {
		if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
		var jx = colarb.nx * jnAcc - colarb.ny * jtAcc;
		var jy = colarb.ny * jnAcc + colarb.nx * jtAcc;
		if(body == colarb.b1.outer) return new nape.geom.Vec3(-jx,-jy,-(jy * cin.r1x - jx * cin.r1y) - jrAcc); else return new nape.geom.Vec3(jx,jy,jy * cin.r2x - jx * cin.r2y + jrAcc);
	}
}
nape.dynamics.Contact.prototype.restitution = null;
nape.dynamics.Contact.prototype.flibget_restitution = function() {
	return (function($this) {
		var $r;
		if(!($this.zpp_inner.active && $this.zpp_inner.arbiter != null && !$this.zpp_inner.arbiter.cleared)) throw "Error: Contact not currently in use";
		$r = $this.zpp_inner.elasticity;
		return $r;
	}(this));
}
nape.dynamics.Contact.prototype.friction = null;
nape.dynamics.Contact.prototype.flibget_friction = function() {
	return (function($this) {
		var $r;
		if(!($this.zpp_inner.active && $this.zpp_inner.arbiter != null && !$this.zpp_inner.arbiter.cleared)) throw "Error: Contact not currently in use";
		$r = $this.zpp_inner.inner.friction;
		return $r;
	}(this));
}
nape.dynamics.Contact.prototype.rollingFriction = null;
nape.dynamics.Contact.prototype.flibget_rollingFriction = function() {
	return (function($this) {
		var $r;
		if(!($this.zpp_inner.active && $this.zpp_inner.arbiter != null && !$this.zpp_inner.arbiter.cleared)) throw "Error: Contact not currently in use";
		$r = $this.zpp_inner.arbiter.colarb.rfric;
		return $r;
	}(this));
}
nape.dynamics.Contact.prototype.toString = function() {
	if(this.zpp_inner.arbiter == null || this.zpp_inner.arbiter.cleared) return "{object-pooled}"; else return "{Contact}";
}
nape.dynamics.Contact.prototype.__class__ = nape.dynamics.Contact;
zpp_nape.shape.ZPP_Edge = function(p) {
	if( p === $_ ) return;
	this.lnormx = 0;
	this.lnormy = 0;
	this.gnormx = 0;
	this.gnormy = 0;
	this.length = 0;
	this.lprojection = 0;
	this.gprojection = 0;
}
zpp_nape.shape.ZPP_Edge.__name__ = ["zpp_nape","shape","ZPP_Edge"];
zpp_nape.shape.ZPP_Edge.zpp_pool = null;
zpp_nape.shape.ZPP_Edge.internal = null;
zpp_nape.shape.ZPP_Edge.prototype.next = null;
zpp_nape.shape.ZPP_Edge.prototype.free = function() {
	this.polygon = null;
}
zpp_nape.shape.ZPP_Edge.prototype.alloc = function() {
}
zpp_nape.shape.ZPP_Edge.prototype.polygon = null;
zpp_nape.shape.ZPP_Edge.prototype.outer = null;
zpp_nape.shape.ZPP_Edge.prototype.wrapper = function() {
	if(this.outer == null) {
		zpp_nape.shape.ZPP_Edge.internal = true;
		this.outer = new nape.shape.Edge();
		zpp_nape.shape.ZPP_Edge.internal = false;
		this.outer.zpp_inner = this;
	}
	return this.outer;
}
zpp_nape.shape.ZPP_Edge.prototype.lnormx = null;
zpp_nape.shape.ZPP_Edge.prototype.lnormy = null;
zpp_nape.shape.ZPP_Edge.prototype.wrap_lnorm = null;
zpp_nape.shape.ZPP_Edge.prototype.gnormx = null;
zpp_nape.shape.ZPP_Edge.prototype.gnormy = null;
zpp_nape.shape.ZPP_Edge.prototype.wrap_gnorm = null;
zpp_nape.shape.ZPP_Edge.prototype.length = null;
zpp_nape.shape.ZPP_Edge.prototype.lprojection = null;
zpp_nape.shape.ZPP_Edge.prototype.gprojection = null;
zpp_nape.shape.ZPP_Edge.prototype.lp0 = null;
zpp_nape.shape.ZPP_Edge.prototype.gp0 = null;
zpp_nape.shape.ZPP_Edge.prototype.lp1 = null;
zpp_nape.shape.ZPP_Edge.prototype.gp1 = null;
zpp_nape.shape.ZPP_Edge.prototype.tp0 = null;
zpp_nape.shape.ZPP_Edge.prototype.tp1 = null;
zpp_nape.shape.ZPP_Edge.prototype.get_lnorm = function() {
	var me = this;
	this.wrap_lnorm = nape.geom.Vec2.get(this.lnormx,this.lnormy,null);
	this.wrap_lnorm.zpp_inner.immutable = true;
	this.wrap_lnorm.zpp_inner._validate = function() {
		if(me.polygon == null) throw "Error: Edge not currently in use";
		me.polygon.validate_laxi();
		me.wrap_lnorm.zpp_inner.x = me.lnormx;
		me.wrap_lnorm.zpp_inner.y = me.lnormy;
	};
}
zpp_nape.shape.ZPP_Edge.prototype.get_gnorm = function() {
	var me = this;
	this.wrap_gnorm = nape.geom.Vec2.get(this.gnormx,this.gnormy,null);
	this.wrap_gnorm.zpp_inner.immutable = true;
	this.wrap_gnorm.zpp_inner._validate = function() {
		if(me.polygon == null) throw "Error: Edge not currently in use";
		if(me.polygon.body == null) throw "Error: Edge worldNormal only makes sense if the parent Polygon is contained within a rigid body";
		me.polygon.validate_gaxi();
		me.wrap_gnorm.zpp_inner.x = me.gnormx;
		me.wrap_gnorm.zpp_inner.y = me.gnormy;
	};
}
zpp_nape.shape.ZPP_Edge.prototype.__class__ = zpp_nape.shape.ZPP_Edge;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex = function(p) {
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_PartitionVertex"];
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.alloc = function() {
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.lt = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.swapped = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.data = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.prev = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.next = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.parent = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.colour = null;
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.verify = function() {
	if(!(this.parent == null)) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!(this.parent == null)) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) return false;
					} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.empty = function() {
	return this.parent == null;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.singular = function() {
	return this.parent != null && this.parent.prev == null && this.parent.next == null;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.size = function() {
	var ret = 0;
	if(!(this.parent == null)) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			ret++;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.has = function(obj) {
	return this.find(obj) != null;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
	return cur;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.lower_bound = function(obj) {
	return (function($this) {
		var $r;
		var ret = null;
		{
			if(!($this.parent == null)) {
				var set_ite = $this.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!$this.lt(elt,obj)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.remove = function(obj) {
	var node = this.find(obj);
	this.remove_node(node);
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	return node == null?null:node.data;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	return node == null?null:node.data;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) this.swapped(cur.data,sm.data);
		cur = sm;
	}
	var child = cur.prev == null?cur.next:cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child1 = parent.next;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) parent.colour = 1; else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
	if(child != null) child.parent = par;
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	{
		o.data = null;
		o.lt = null;
		o.swapped = null;
	}
	o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = o;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.clear = function() {
	if(this.parent != null) this.clear_node(this.parent);
	this.parent = null;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.clear_node = function(node) {
	if(node.prev != null) this.clear_node(node.prev);
	if(node.next != null) this.clear_node(node.next);
	node.parent = node.prev = node.next = null;
	var o = node;
	{
		o.data = null;
		o.lt = null;
		o.swapped = null;
	}
	o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = o;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child = parent.prev == negred?(function($this) {
		var $r;
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		{
			negred.next = trl;
			if(trl != null) trl.parent = negred;
		}
		{
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
		}
		if($this.swapped != null) $this.swapped(parent.data,nr.data);
		{
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
		}
		{
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
		}
		{
			parent.next = nr;
			if(nr != null) nr.parent = parent;
		}
		$r = nl;
		return $r;
	}(this)):(function($this) {
		var $r;
		var nl = negred.next;
		var nr = negred.prev;
		var trl = nr.next;
		var trr = nr.prev;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		{
			negred.prev = trl;
			if(trl != null) trl.parent = negred;
		}
		{
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
		}
		if($this.swapped != null) $this.swapped(parent.data,nr.data);
		{
			nr.next = trr;
			if(trr != null) trr.parent = nr;
		}
		{
			nr.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr;
		}
		{
			parent.prev = nr;
			if(nr != null) nr.parent = parent;
		}
		$r = nl;
		return $r;
	}(this));
	if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1, n2, n3, t1, t2, t3, t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
		if(n2 != null) n2.parent = par1;
		n1.prev = t1;
		if(t1 != null) t1.parent = n1;
		n1.next = t2;
		if(t2 != null) t2.parent = n1;
		n2.prev = n1;
		if(n1 != null) n1.parent = n2;
		n2.next = n3;
		if(n3 != null) n3.parent = n2;
		n3.prev = t3;
		if(t3 != null) t3.parent = n3;
		n3.next = t4;
		if(t4 != null) t4.parent = n3;
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		x = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
				ret = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}(this));
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				x = (function($this) {
					var $r;
					var ret;
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
						ret = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = ret.next;
						ret.next = null;
					}
					null;
					$r = ret;
					return $r;
				}(this));
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				x = (function($this) {
					var $r;
					var ret;
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
						ret = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = ret.next;
						ret.next = null;
					}
					null;
					$r = ret;
					return $r;
				}(this));
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return cur; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.insert = function(obj) {
	var x = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
			ret = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	x.data = obj;
	if(this.parent == null) this.parent = x; else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else cur = cur.next;
	}
	if(x.parent == null) x.colour = 1; else {
		x.colour = 0;
		if(x.parent.colour == 0) this.__fix_dbl_red(x);
	}
	return x;
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype.__class__ = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert = function(p) {
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleVert"];
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.alloc = function() {
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.lt = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.swapped = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.data = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.prev = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.next = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.parent = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.colour = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.verify = function() {
	if(!(this.parent == null)) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!(this.parent == null)) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) return false;
					} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.empty = function() {
	return this.parent == null;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.singular = function() {
	return this.parent != null && this.parent.prev == null && this.parent.next == null;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.size = function() {
	var ret = 0;
	if(!(this.parent == null)) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			ret++;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.has = function(obj) {
	return this.find(obj) != null;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
	return cur;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.lower_bound = function(obj) {
	return (function($this) {
		var $r;
		var ret = null;
		{
			if(!($this.parent == null)) {
				var set_ite = $this.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!$this.lt(elt,obj)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.remove = function(obj) {
	var node = this.find(obj);
	this.remove_node(node);
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	return node == null?null:node.data;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	return node == null?null:node.data;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) this.swapped(cur.data,sm.data);
		cur = sm;
	}
	var child = cur.prev == null?cur.next:cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child1 = parent.next;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) parent.colour = 1; else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
	if(child != null) child.parent = par;
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	{
		o.data = null;
		o.lt = null;
		o.swapped = null;
	}
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.clear = function() {
	if(this.parent != null) this.clear_node(this.parent);
	this.parent = null;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.clear_node = function(node) {
	if(node.prev != null) this.clear_node(node.prev);
	if(node.next != null) this.clear_node(node.next);
	node.parent = node.prev = node.next = null;
	var o = node;
	{
		o.data = null;
		o.lt = null;
		o.swapped = null;
	}
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child = parent.prev == negred?(function($this) {
		var $r;
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		{
			negred.next = trl;
			if(trl != null) trl.parent = negred;
		}
		{
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
		}
		if($this.swapped != null) $this.swapped(parent.data,nr.data);
		{
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
		}
		{
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
		}
		{
			parent.next = nr;
			if(nr != null) nr.parent = parent;
		}
		$r = nl;
		return $r;
	}(this)):(function($this) {
		var $r;
		var nl = negred.next;
		var nr = negred.prev;
		var trl = nr.next;
		var trr = nr.prev;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		{
			negred.prev = trl;
			if(trl != null) trl.parent = negred;
		}
		{
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
		}
		if($this.swapped != null) $this.swapped(parent.data,nr.data);
		{
			nr.next = trr;
			if(trr != null) trr.parent = nr;
		}
		{
			nr.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr;
		}
		{
			parent.prev = nr;
			if(nr != null) nr.parent = parent;
		}
		$r = nl;
		return $r;
	}(this));
	if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1, n2, n3, t1, t2, t3, t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
		if(n2 != null) n2.parent = par1;
		n1.prev = t1;
		if(t1 != null) t1.parent = n1;
		n1.next = t2;
		if(t2 != null) t2.parent = n1;
		n2.prev = n1;
		if(n1 != null) n1.parent = n2;
		n2.next = n3;
		if(n3 != null) n3.parent = n2;
		n3.prev = t3;
		if(t3 != null) t3.parent = n3;
		n3.next = t4;
		if(t4 != null) t4.parent = n3;
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		x = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
				ret = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}(this));
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				x = (function($this) {
					var $r;
					var ret;
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
						ret = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = ret.next;
						ret.next = null;
					}
					null;
					$r = ret;
					return $r;
				}(this));
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				x = (function($this) {
					var $r;
					var ret;
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
						ret = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = ret.next;
						ret.next = null;
					}
					null;
					$r = ret;
					return $r;
				}(this));
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return cur; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.insert = function(obj) {
	var x = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
			ret = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	x.data = obj;
	if(this.parent == null) this.parent = x; else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else cur = cur.next;
	}
	if(x.parent == null) x.colour = 1; else {
		x.colour = 0;
		if(x.parent.colour == 0) this.__fix_dbl_red(x);
	}
	return x;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype.__class__ = zpp_nape.util.ZPP_Set_ZPP_SimpleVert;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg = function(p) {
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleSeg"];
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.alloc = function() {
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.lt = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.swapped = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.data = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.prev = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.next = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.parent = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.colour = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.verify = function() {
	if(!(this.parent == null)) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!(this.parent == null)) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) return false;
					} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.empty = function() {
	return this.parent == null;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.singular = function() {
	return this.parent != null && this.parent.prev == null && this.parent.next == null;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.size = function() {
	var ret = 0;
	if(!(this.parent == null)) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			ret++;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.has = function(obj) {
	return this.find(obj) != null;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
	return cur;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.lower_bound = function(obj) {
	return (function($this) {
		var $r;
		var ret = null;
		{
			if(!($this.parent == null)) {
				var set_ite = $this.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!$this.lt(elt,obj)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.remove = function(obj) {
	var node = this.find(obj);
	this.remove_node(node);
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	return node == null?null:node.data;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	return node == null?null:node.data;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) this.swapped(cur.data,sm.data);
		cur = sm;
	}
	var child = cur.prev == null?cur.next:cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child1 = parent.next;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) parent.colour = 1; else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
	if(child != null) child.parent = par;
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	{
		o.data = null;
		o.lt = null;
		o.swapped = null;
	}
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = o;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.clear = function() {
	if(this.parent != null) this.clear_node(this.parent);
	this.parent = null;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.clear_node = function(node) {
	if(node.prev != null) this.clear_node(node.prev);
	if(node.next != null) this.clear_node(node.next);
	node.parent = node.prev = node.next = null;
	var o = node;
	{
		o.data = null;
		o.lt = null;
		o.swapped = null;
	}
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = o;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child = parent.prev == negred?(function($this) {
		var $r;
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		{
			negred.next = trl;
			if(trl != null) trl.parent = negred;
		}
		{
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
		}
		if($this.swapped != null) $this.swapped(parent.data,nr.data);
		{
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
		}
		{
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
		}
		{
			parent.next = nr;
			if(nr != null) nr.parent = parent;
		}
		$r = nl;
		return $r;
	}(this)):(function($this) {
		var $r;
		var nl = negred.next;
		var nr = negred.prev;
		var trl = nr.next;
		var trr = nr.prev;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		{
			negred.prev = trl;
			if(trl != null) trl.parent = negred;
		}
		{
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
		}
		if($this.swapped != null) $this.swapped(parent.data,nr.data);
		{
			nr.next = trr;
			if(trr != null) trr.parent = nr;
		}
		{
			nr.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr;
		}
		{
			parent.prev = nr;
			if(nr != null) nr.parent = parent;
		}
		$r = nl;
		return $r;
	}(this));
	if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1, n2, n3, t1, t2, t3, t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
		if(n2 != null) n2.parent = par1;
		n1.prev = t1;
		if(t1 != null) t1.parent = n1;
		n1.next = t2;
		if(t2 != null) t2.parent = n1;
		n2.prev = n1;
		if(n1 != null) n1.parent = n2;
		n2.next = n3;
		if(n3 != null) n3.parent = n2;
		n3.prev = t3;
		if(t3 != null) t3.parent = n3;
		n3.next = t4;
		if(t4 != null) t4.parent = n3;
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		x = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
				ret = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}(this));
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				x = (function($this) {
					var $r;
					var ret;
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
						ret = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = ret.next;
						ret.next = null;
					}
					null;
					$r = ret;
					return $r;
				}(this));
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				x = (function($this) {
					var $r;
					var ret;
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
						ret = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = ret.next;
						ret.next = null;
					}
					null;
					$r = ret;
					return $r;
				}(this));
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return cur; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.insert = function(obj) {
	var x = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
			ret = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	x.data = obj;
	if(this.parent == null) this.parent = x; else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else cur = cur.next;
	}
	if(x.parent == null) x.colour = 1; else {
		x.colour = 0;
		if(x.parent.colour == 0) this.__fix_dbl_red(x);
	}
	return x;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype.__class__ = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent = function(p) {
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleEvent"];
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.free = function() {
	this.data = null;
	this.lt = null;
	this.swapped = null;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.alloc = function() {
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.lt = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.swapped = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.data = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.prev = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.next = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.parent = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.colour = null;
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.verify = function() {
	if(!(this.parent == null)) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			var prei = true;
			if(!(this.parent == null)) {
				var set_ite1 = this.parent;
				while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
				while(set_ite1 != null) {
					var j = set_ite1.data;
					if(!prei) {
						if(!this.lt(i,j) && this.lt(j,i)) return false;
					} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
					if(set_ite1.next != null) {
						set_ite1 = set_ite1.next;
						while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					} else {
						while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
						set_ite1 = set_ite1.parent;
					}
				}
			}
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return true;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.empty = function() {
	return this.parent == null;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.singular = function() {
	return this.parent != null && this.parent.prev == null && this.parent.next == null;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.size = function() {
	var ret = 0;
	if(!(this.parent == null)) {
		var set_ite = this.parent;
		while(set_ite.prev != null) set_ite = set_ite.prev;
		while(set_ite != null) {
			var i = set_ite.data;
			ret++;
			if(set_ite.next != null) {
				set_ite = set_ite.next;
				while(set_ite.prev != null) set_ite = set_ite.prev;
			} else {
				while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
				set_ite = set_ite.parent;
			}
		}
	}
	return ret;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.has = function(obj) {
	return this.find(obj) != null;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.find = function(obj) {
	var cur = this.parent;
	while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
	return cur;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.lower_bound = function(obj) {
	return (function($this) {
		var $r;
		var ret = null;
		{
			if(!($this.parent == null)) {
				var set_ite = $this.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!$this.lt(elt,obj)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
		}
		$r = ret;
		return $r;
	}(this));
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.first = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	return cur.data;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.pop_front = function() {
	var cur = this.parent;
	while(cur.prev != null) cur = cur.prev;
	var ret = cur.data;
	this.remove_node(cur);
	return ret;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.remove = function(obj) {
	var node = this.find(obj);
	this.remove_node(node);
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.successor_node = function(cur) {
	if(cur.next != null) {
		cur = cur.next;
		while(cur.prev != null) cur = cur.prev;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.prev != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.predecessor_node = function(cur) {
	if(cur.prev != null) {
		cur = cur.prev;
		while(cur.next != null) cur = cur.next;
	} else {
		var pre = cur;
		cur = cur.parent;
		while(cur != null && cur.next != pre) {
			pre = cur;
			cur = cur.parent;
		}
	}
	return cur;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.successor = function(obj) {
	var node = this.successor_node(this.find(obj));
	return node == null?null:node.data;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.predecessor = function(obj) {
	var node = this.predecessor_node(this.find(obj));
	return node == null?null:node.data;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.remove_node = function(cur) {
	if(cur.next != null && cur.prev != null) {
		var sm = cur.next;
		while(sm.prev != null) sm = sm.prev;
		var t = cur.data;
		cur.data = sm.data;
		sm.data = t;
		if(this.swapped != null) this.swapped(cur.data,sm.data);
		cur = sm;
	}
	var child = cur.prev == null?cur.next:cur.prev;
	if(cur.colour == 1) {
		if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
			var parent = cur.parent;
			while(true) {
				parent.colour++;
				parent.prev.colour--;
				parent.next.colour--;
				var child1 = parent.prev;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				var child1 = parent.next;
				if(child1.colour == -1) {
					this.__fix_neg_red(child1);
					break;
				} else if(child1.colour == 0) {
					if(child1.prev != null && child1.prev.colour == 0) {
						this.__fix_dbl_red(child1.prev);
						break;
					}
					if(child1.next != null && child1.next.colour == 0) {
						this.__fix_dbl_red(child1.next);
						break;
					}
				}
				if(parent.colour == 2) {
					if(parent.parent == null) parent.colour = 1; else {
						parent = parent.parent;
						continue;
					}
				}
				break;
			}
		}
	}
	var par = cur.parent;
	if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
	if(child != null) child.parent = par;
	cur.parent = cur.prev = cur.next = null;
	var o = cur;
	{
		o.data = null;
		o.lt = null;
		o.swapped = null;
	}
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = o;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.clear = function() {
	if(this.parent != null) this.clear_node(this.parent);
	this.parent = null;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.clear_node = function(node) {
	if(node.prev != null) this.clear_node(node.prev);
	if(node.next != null) this.clear_node(node.next);
	node.parent = node.prev = node.next = null;
	var o = node;
	{
		o.data = null;
		o.lt = null;
		o.swapped = null;
	}
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = o;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.__fix_neg_red = function(negred) {
	var parent = negred.parent;
	var child = parent.prev == negred?(function($this) {
		var $r;
		var nl = negred.prev;
		var nr = negred.next;
		var trl = nr.prev;
		var trr = nr.next;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		{
			negred.next = trl;
			if(trl != null) trl.parent = negred;
		}
		{
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
		}
		if($this.swapped != null) $this.swapped(parent.data,nr.data);
		{
			nr.prev = trr;
			if(trr != null) trr.parent = nr;
		}
		{
			nr.next = parent.next;
			if(parent.next != null) parent.next.parent = nr;
		}
		{
			parent.next = nr;
			if(nr != null) nr.parent = parent;
		}
		$r = nl;
		return $r;
	}(this)):(function($this) {
		var $r;
		var nl = negred.next;
		var nr = negred.prev;
		var trl = nr.next;
		var trr = nr.prev;
		nl.colour = 0;
		negred.colour = parent.colour = 1;
		{
			negred.prev = trl;
			if(trl != null) trl.parent = negred;
		}
		{
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
		}
		if($this.swapped != null) $this.swapped(parent.data,nr.data);
		{
			nr.next = trr;
			if(trr != null) trr.parent = nr;
		}
		{
			nr.prev = parent.prev;
			if(parent.prev != null) parent.prev.parent = nr;
		}
		{
			parent.prev = nr;
			if(nr != null) nr.parent = parent;
		}
		$r = nl;
		return $r;
	}(this));
	if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.__fix_dbl_red = function(x) {
	while(true) {
		var par = x.parent;
		var g = par.parent;
		if(g == null) {
			par.colour = 1;
			break;
		}
		var n1, n2, n3, t1, t2, t3, t4;
		if(par == g.prev) {
			n3 = g;
			t4 = g.next;
			if(x == par.prev) {
				n1 = x;
				n2 = par;
				t1 = x.prev;
				t2 = x.next;
				t3 = par.next;
			} else {
				n1 = par;
				n2 = x;
				t1 = par.prev;
				t2 = x.prev;
				t3 = x.next;
			}
		} else {
			n1 = g;
			t1 = g.prev;
			if(x == par.prev) {
				n2 = x;
				n3 = par;
				t2 = x.prev;
				t3 = x.next;
				t4 = par.next;
			} else {
				n2 = par;
				n3 = x;
				t2 = par.prev;
				t3 = x.prev;
				t4 = x.next;
			}
		}
		var par1 = g.parent;
		if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
		if(n2 != null) n2.parent = par1;
		n1.prev = t1;
		if(t1 != null) t1.parent = n1;
		n1.next = t2;
		if(t2 != null) t2.parent = n1;
		n2.prev = n1;
		if(n1 != null) n1.parent = n2;
		n2.next = n3;
		if(n3 != null) n3.parent = n2;
		n3.prev = t3;
		if(t3 != null) t3.parent = n3;
		n3.next = t4;
		if(t4 != null) t4.parent = n3;
		n2.colour = g.colour - 1;
		n1.colour = 1;
		n3.colour = 1;
		if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
			x = n2;
			continue;
		}
		break;
	}
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.try_insert = function(obj) {
	var x = null;
	var cur = null;
	if(this.parent == null) {
		x = (function($this) {
			var $r;
			var ret;
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
				ret = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			$r = ret;
			return $r;
		}(this));
		x.data = obj;
		this.parent = x;
	} else {
		cur = this.parent;
		while(true) if(this.lt(obj,cur.data)) {
			if(cur.prev == null) {
				x = (function($this) {
					var $r;
					var ret;
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
						ret = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = ret.next;
						ret.next = null;
					}
					null;
					$r = ret;
					return $r;
				}(this));
				x.data = obj;
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			if(cur.next == null) {
				x = (function($this) {
					var $r;
					var ret;
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
						ret = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = ret.next;
						ret.next = null;
					}
					null;
					$r = ret;
					return $r;
				}(this));
				x.data = obj;
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		} else break;
	}
	if(x == null) return cur; else {
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.insert = function(obj) {
	var x = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			ret = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	x.data = obj;
	if(this.parent == null) this.parent = x; else {
		var cur = this.parent;
		while(true) if(this.lt(x.data,cur.data)) {
			if(cur.prev == null) {
				cur.prev = x;
				x.parent = cur;
				break;
			} else cur = cur.prev;
		} else if(cur.next == null) {
			cur.next = x;
			x.parent = cur;
			break;
		} else cur = cur.next;
	}
	if(x.parent == null) x.colour = 1; else {
		x.colour = 0;
		if(x.parent.colour == 0) this.__fix_dbl_red(x);
	}
	return x;
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype.__class__ = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent;
if(!nape.space) nape.space = {}
nape.space.Broadphase = function(p) {
	if( p === $_ ) return;
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "Broadphase" + " derp!";
}
nape.space.Broadphase.__name__ = ["nape","space","Broadphase"];
nape.space.Broadphase.DYNAMIC_AABB_TREE = null;
nape.space.Broadphase.flibget_DYNAMIC_AABB_TREE = function() {
	if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
}
nape.space.Broadphase.SWEEP_AND_PRUNE = null;
nape.space.Broadphase.flibget_SWEEP_AND_PRUNE = function() {
	if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
}
nape.space.Broadphase.prototype.toString = function() {
	if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
		return $r;
	}(this))) return "DYNAMIC_AABB_TREE"; else if(this == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
		return $r;
	}(this))) return "SWEEP_AND_PRUNE"; else return "";
}
nape.space.Broadphase.prototype.__class__ = nape.space.Broadphase;
nape.space.Space = function(gravity,broadphase) {
	if( gravity === $_ ) return;
	if(gravity != null && gravity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner = new zpp_nape.space.ZPP_Space(gravity == null?null:gravity.zpp_inner,broadphase);
	this.zpp_inner.outer = this;
	if(gravity != null) {
		if(gravity.zpp_inner.weak) {
			gravity.dispose();
			true;
		} else false;
	}
}
nape.space.Space.__name__ = ["nape","space","Space"];
nape.space.Space.prototype.zpp_inner = null;
nape.space.Space.prototype.gravity = null;
nape.space.Space.prototype.flibget_gravity = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_gravity == null) $this.zpp_inner.getgravity();
		$r = $this.zpp_inner.wrap_gravity;
		return $r;
	}(this));
}
nape.space.Space.prototype.flibset_gravity = function(gravity) {
	if(gravity != null && gravity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(gravity == null) throw "Error: Space::gravity cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner.wrap_gravity == null) $this.zpp_inner.getgravity();
		$r = $this.zpp_inner.wrap_gravity;
		return $r;
	}(this))).set(gravity);
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_gravity == null) $this.zpp_inner.getgravity();
		$r = $this.zpp_inner.wrap_gravity;
		return $r;
	}(this));
}
nape.space.Space.prototype.broadphase = null;
nape.space.Space.prototype.flibget_broadphase = function() {
	return this.zpp_inner.bphase.is_sweep?(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
		return $r;
	}(this)):(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
		return $r;
	}(this));
}
nape.space.Space.prototype.bodies = null;
nape.space.Space.prototype.flibget_bodies = function() {
	return this.zpp_inner.wrap_bodies;
}
nape.space.Space.prototype.statics = null;
nape.space.Space.prototype.flibget_statics = function() {
	return this.zpp_inner.wrap_statics;
}
nape.space.Space.prototype.dynamics = null;
nape.space.Space.prototype.flibget_dynamics = function() {
	return this.zpp_inner.wrap_dynamics;
}
nape.space.Space.prototype.kinematics = null;
nape.space.Space.prototype.flibget_kinematics = function() {
	return this.zpp_inner.wrap_kinematics;
}
nape.space.Space.prototype.liveBodies = null;
nape.space.Space.prototype.flibget_liveBodies = function() {
	return this.zpp_inner.wrap_live;
}
nape.space.Space.prototype.constraints = null;
nape.space.Space.prototype.flibget_constraints = function() {
	return this.zpp_inner.wrap_constraints;
}
nape.space.Space.prototype.liveConstraints = null;
nape.space.Space.prototype.flibget_liveConstraints = function() {
	return this.zpp_inner.wrap_livecon;
}
nape.space.Space.prototype.world = null;
nape.space.Space.prototype.flibget_world = function() {
	return this.zpp_inner.__static;
}
nape.space.Space.prototype.arbiters = null;
nape.space.Space.prototype.flibget_arbiters = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_arbiters == null) {
			var ret = new zpp_nape.dynamics.ZPP_SpaceArbiterList();
			ret.space = $this.zpp_inner;
			$this.zpp_inner.wrap_arbiters = ret;
		}
		$r = $this.zpp_inner.wrap_arbiters;
		return $r;
	}(this));
}
nape.space.Space.prototype.callbacks = null;
nape.space.Space.prototype.flibget_callbacks = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner.wrap_callbacks == null) {
			zpp_nape.callbacks.ZPP_Callback.internal = true;
			var ret = new nape.callbacks.CallbackQueue();
			zpp_nape.callbacks.ZPP_Callback.internal = false;
			ret.zpp_inner = $this.zpp_inner.callbacks;
			$this.zpp_inner.wrap_callbacks = ret;
		}
		$r = $this.zpp_inner.wrap_callbacks;
		return $r;
	}(this));
}
nape.space.Space.prototype.listeners = null;
nape.space.Space.prototype.flibget_listeners = function() {
	return this.zpp_inner.wrap_listeners;
}
nape.space.Space.prototype.clear = function() {
	this.zpp_inner.clear();
}
nape.space.Space.prototype.step = function(deltaTime,velocityIterations,positionIterations) {
	if(positionIterations == null) positionIterations = 10;
	if(velocityIterations == null) velocityIterations = 10;
	if(deltaTime != deltaTime) throw "Error: deltaTime cannot be NaN";
	if(deltaTime <= 0) throw "Error: deltaTime must be strictly positive";
	if(velocityIterations <= 0) throw "Error: must use atleast one velocity iteration";
	if(positionIterations <= 0) throw "Error: must use atleast one position iteration";
	this.zpp_inner.step(deltaTime,velocityIterations,positionIterations);
}
nape.space.Space.prototype.timeStamp = null;
nape.space.Space.prototype.flibget_timeStamp = function() {
	return this.zpp_inner.stamp;
}
nape.space.Space.prototype.elapsedTime = null;
nape.space.Space.prototype.flibget_elapsedTime = function() {
	return this.zpp_inner.time;
}
nape.space.Space.prototype.shapesUnderPoint = function(point,filter) {
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(point == null) throw "Error: Cannot evaluate shapes under a null point :)";
	var ret = this.zpp_inner.bphase.shapesUnderPoint((function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.y;
		return $r;
	}(this)),filter == null?null:filter.zpp_inner);
	if(point.zpp_inner.weak) {
		point.dispose();
		true;
	} else false;
	return ret;
}
nape.space.Space.prototype.bodiesUnderPoint = function(point,filter) {
	if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(point == null) throw "Error: Cannot evaluate objects under a null point :)";
	var ret = this.zpp_inner.bphase.bodiesUnderPoint((function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		point.zpp_inner.validate();
		$r = point.zpp_inner.y;
		return $r;
	}(this)),filter == null?null:filter.zpp_inner);
	if(point.zpp_inner.weak) {
		point.dispose();
		true;
	} else false;
	return ret;
}
nape.space.Space.prototype.shapesInAABB = function(aabb,containment,strict,filter) {
	if(strict == null) strict = true;
	if(containment == null) containment = false;
	if(aabb == null) throw "Error: Cannot evaluate shapes in a null AABB :)";
	if((function($this) {
		var $r;
		aabb.zpp_inner.validate();
		$r = aabb.zpp_inner.width();
		return $r;
	}(this)) == 0 || (function($this) {
		var $r;
		aabb.zpp_inner.validate();
		$r = aabb.zpp_inner.height();
		return $r;
	}(this)) == 0) throw "Error: Cannot evaluate shapes in degenerate AABB :/";
	return this.zpp_inner.bphase.shapesInAABB(aabb.zpp_inner,strict,containment,filter == null?null:filter.zpp_inner);
}
nape.space.Space.prototype.bodiesInAABB = function(aabb,containment,strict,filter) {
	if(strict == null) strict = true;
	if(containment == null) containment = false;
	if(aabb == null) throw "Error: Cannot evaluate objects in a null AABB :)";
	if((function($this) {
		var $r;
		aabb.zpp_inner.validate();
		$r = aabb.zpp_inner.width();
		return $r;
	}(this)) == 0 || (function($this) {
		var $r;
		aabb.zpp_inner.validate();
		$r = aabb.zpp_inner.height();
		return $r;
	}(this)) == 0) throw "Error: Cannot evaluate objects in degenerate AABB :/";
	return this.zpp_inner.bphase.bodiesInAABB(aabb.zpp_inner,strict,containment,filter == null?null:filter.zpp_inner);
}
nape.space.Space.prototype.shapesInCircle = function(position,radius,containment,filter) {
	if(containment == null) containment = false;
	if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(position == null) throw "Error: Cannot evaluate shapes at null circle :)";
	if(radius != radius) throw "Error: Circle radius cannot be NaN";
	if(radius <= 0) throw "Error: Circle radius must be strictly positive";
	var ret = this.zpp_inner.bphase.shapesInCircle((function($this) {
		var $r;
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		position.zpp_inner.validate();
		$r = position.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		position.zpp_inner.validate();
		$r = position.zpp_inner.y;
		return $r;
	}(this)),radius,containment,filter == null?null:filter.zpp_inner);
	if(position.zpp_inner.weak) {
		position.dispose();
		true;
	} else false;
	return ret;
}
nape.space.Space.prototype.bodiesInCircle = function(position,radius,containment,filter) {
	if(containment == null) containment = false;
	if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(position == null) throw "Error: Cannot evaluate objects at null circle :)";
	if(radius != radius) throw "Error: Circle radius cannot be NaN";
	if(radius <= 0) throw "Error: Circle radius must be strictly positive";
	var ret = this.zpp_inner.bphase.bodiesInCircle((function($this) {
		var $r;
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		position.zpp_inner.validate();
		$r = position.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		position.zpp_inner.validate();
		$r = position.zpp_inner.y;
		return $r;
	}(this)),radius,containment,filter == null?null:filter.zpp_inner);
	if(position.zpp_inner.weak) {
		position.dispose();
		true;
	} else false;
	return ret;
}
nape.space.Space.prototype.shapesInShape = function(shape,containment,filter) {
	if(containment == null) containment = false;
	if(shape == null) throw "Error: Cannot evaluate shapes in a null shapes :)";
	if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw "Error: Query shape needs to be inside a Body to be well defined :)";
	if(shape.zpp_inner.type == 1) {
		var res = shape.zpp_inner.polygon.valid();
		if(res != (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
			return $r;
		}(this))) throw "Error: Polygon query shape is invalid : " + (res == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
			return $r;
		}(this))?"VALID":res == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
			return $r;
		}(this))?"DEGENERATE":res == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES;
			return $r;
		}(this))?"DEGENERATE_EDGES":res == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
			return $r;
		}(this))?"CONCAVE":res == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
			return $r;
		}(this))?"SELF_INTERSECTING":"");
	}
	return this.zpp_inner.bphase.shapesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner);
}
nape.space.Space.prototype.bodiesInShape = function(shape,containment,filter) {
	if(containment == null) containment = false;
	if(shape == null) throw "Error: Cannot evaluate bodies in a null shapes :)";
	if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw "Error: Query shape needs to be inside a Body to be well defined :)";
	if(shape.zpp_inner.type == 1) {
		var res = shape.zpp_inner.polygon.valid();
		if(res != (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
			return $r;
		}(this))) throw "Error: Polygon query shape is invalid : " + (res == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
			return $r;
		}(this))?"VALID":res == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
			return $r;
		}(this))?"DEGENERATE":res == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES;
			return $r;
		}(this))?"DEGENERATE_EDGES":res == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
			return $r;
		}(this))?"CONCAVE":res == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
			return $r;
		}(this))?"SELF_INTERSECTING":"");
	}
	return this.zpp_inner.bphase.bodiesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner);
}
nape.space.Space.prototype.shapesInBody = function(body,filter) {
	if(body == null) throw "Error: Cannot evaluate shapes in null body";
	var ret = null;
	var $it0 = body.zpp_inner.wrap_shapes.iterator();
	while( $it0.hasNext() ) {
		var shape = $it0.next();
		var cur = this.shapesInShape(shape,false,filter);
		if(ret == null) ret = cur; else ret.merge(cur);
	}
	return ret == null?new nape.shape.ShapeList():ret;
}
nape.space.Space.prototype.bodiesInBody = function(body,filter) {
	if(body == null) throw "Error: Cannot evaluate shapes in null body";
	var ret = null;
	var $it0 = body.zpp_inner.wrap_shapes.iterator();
	while( $it0.hasNext() ) {
		var shape = $it0.next();
		var cur = this.bodiesInShape(shape,false,filter);
		if(ret == null) ret = cur; else ret.merge(cur);
	}
	return ret == null?new nape.phys.BodyList():ret;
}
nape.space.Space.prototype.rayCast = function(ray,inner,filter) {
	if(inner == null) inner = false;
	if(ray == null) throw "Error: Cannot cast null ray :)";
	return this.zpp_inner.bphase.rayCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner);
}
nape.space.Space.prototype.rayMultiCast = function(ray,inner,filter) {
	if(inner == null) inner = false;
	if(ray == null) throw "Error: Cannot cast null ray :)";
	return this.zpp_inner.bphase.rayMultiCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner);
}
nape.space.Space.prototype.__class__ = nape.space.Space;
ValueType = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] }
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; }
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; }
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
nape.constraint.WeldJoint = function(body1,body2,anchor1,anchor2,phase) {
	if( body1 === $_ ) return;
	if(phase == null) phase = 0.0;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_WeldJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	if(body1 == null) throw "Error: Constraint::" + "body1" + " cannot be null";
	if(body1.zpp_inner != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = body1.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != body1.zpp_inner) body1.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body1.zpp_inner.wake();
	}
	if(this.zpp_inner_zn.b1 == null) null; else this.zpp_inner_zn.b1.outer;
	if(body2 == null) throw "Error: Constraint::" + "body2" + " cannot be null";
	if(body2.zpp_inner != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = body2.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != body2.zpp_inner) body2.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body2.zpp_inner.wake();
	}
	if(this.zpp_inner_zn.b2 == null) null; else this.zpp_inner_zn.b2.outer;
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	{
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		this.zpp_inner_zn.wrap_a1;
	}
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	{
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		this.zpp_inner_zn.wrap_a2;
	}
	if(phase != phase) throw "Error: WeldJoint::phase cannot be NaN";
	if(this.zpp_inner_zn.phase != phase) {
		this.zpp_inner_zn.phase = phase;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.phase;
}
nape.constraint.WeldJoint.__name__ = ["nape","constraint","WeldJoint"];
nape.constraint.WeldJoint.__super__ = nape.constraint.Constraint;
for(var k in nape.constraint.Constraint.prototype ) nape.constraint.WeldJoint.prototype[k] = nape.constraint.Constraint.prototype[k];
nape.constraint.WeldJoint.prototype.zpp_inner_zn = null;
nape.constraint.WeldJoint.prototype.body1 = null;
nape.constraint.WeldJoint.prototype.flibget_body1 = function() {
	return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
}
nape.constraint.WeldJoint.prototype.flibset_body1 = function(body1) {
	if(body1 == null) throw "Error: Constraint::" + "body1" + " cannot be null";
	if(body1.zpp_inner != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = body1.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != body1.zpp_inner) body1.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body1.zpp_inner.wake();
	}
	return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
}
nape.constraint.WeldJoint.prototype.body2 = null;
nape.constraint.WeldJoint.prototype.flibget_body2 = function() {
	return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
}
nape.constraint.WeldJoint.prototype.flibset_body2 = function(body2) {
	if(body2 == null) throw "Error: Constraint::" + "body2" + " cannot be null";
	if(body2.zpp_inner != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = body2.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != body2.zpp_inner) body2.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body2.zpp_inner.wake();
	}
	return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
}
nape.constraint.WeldJoint.prototype.anchor1 = null;
nape.constraint.WeldJoint.prototype.flibget_anchor1 = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this));
}
nape.constraint.WeldJoint.prototype.flibset_anchor1 = function(anchor1) {
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this));
}
nape.constraint.WeldJoint.prototype.anchor2 = null;
nape.constraint.WeldJoint.prototype.flibget_anchor2 = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this));
}
nape.constraint.WeldJoint.prototype.flibset_anchor2 = function(anchor2) {
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this));
}
nape.constraint.WeldJoint.prototype.phase = null;
nape.constraint.WeldJoint.prototype.flibget_phase = function() {
	return this.zpp_inner_zn.phase;
}
nape.constraint.WeldJoint.prototype.flibset_phase = function(phase) {
	if(phase != phase) throw "Error: WeldJoint::phase cannot be NaN";
	if(this.zpp_inner_zn.phase != phase) {
		this.zpp_inner_zn.phase = phase;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.phase;
}
nape.constraint.WeldJoint.prototype.impulse = function() {
	var ret = new nape.geom.MatMN(3,1);
	{
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx + this.zpp_inner_zn.pjAccx;
	}
	{
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy + this.zpp_inner_zn.pjAccy;
	}
	{
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccz + this.zpp_inner_zn.pjAccz;
	}
	return ret;
}
nape.constraint.WeldJoint.prototype.bodyImpulse = function(body) {
	if(body == null) throw "Error: Cannot evaluate impulse on null body";
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
	if(!this.zpp_inner.active) return new nape.geom.Vec3(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
}
nape.constraint.WeldJoint.prototype.__class__ = nape.constraint.WeldJoint;
if(!jeash.accessibility) jeash.accessibility = {}
jeash.accessibility.AccessibilityProperties = function(p) {
	if( p === $_ ) return;
	this.description = "";
	this.forceSimple = false;
	this.name = "";
	this.noAutoLabeling = false;
	this.shortcut = "";
	this.silent = false;
}
jeash.accessibility.AccessibilityProperties.__name__ = ["jeash","accessibility","AccessibilityProperties"];
jeash.accessibility.AccessibilityProperties.prototype.description = null;
jeash.accessibility.AccessibilityProperties.prototype.forceSimple = null;
jeash.accessibility.AccessibilityProperties.prototype.name = null;
jeash.accessibility.AccessibilityProperties.prototype.noAutoLabeling = null;
jeash.accessibility.AccessibilityProperties.prototype.shortcut = null;
jeash.accessibility.AccessibilityProperties.prototype.silent = null;
jeash.accessibility.AccessibilityProperties.prototype.__class__ = jeash.accessibility.AccessibilityProperties;
zpp_nape.geom.ZPP_SCache = function(p) {
}
zpp_nape.geom.ZPP_SCache.__name__ = ["zpp_nape","geom","ZPP_SCache"];
zpp_nape.geom.ZPP_SCache.prototype.metric = null;
zpp_nape.geom.ZPP_SCache.prototype.count = null;
zpp_nape.geom.ZPP_SCache.prototype.v1 = null;
zpp_nape.geom.ZPP_SCache.prototype.v2 = null;
zpp_nape.geom.ZPP_SCache.prototype.v3 = null;
zpp_nape.geom.ZPP_SCache.prototype.p1 = null;
zpp_nape.geom.ZPP_SCache.prototype.p2 = null;
zpp_nape.geom.ZPP_SCache.prototype.set = function(p1,p2) {
	this.v1 = new zpp_nape.geom.ZPP_SVertex();
	this.v2 = new zpp_nape.geom.ZPP_SVertex();
	this.v3 = new zpp_nape.geom.ZPP_SVertex();
	this.p1 = p1;
	this.p2 = p2;
	this.count = 0;
}
zpp_nape.geom.ZPP_SCache.prototype.validate = function() {
	if(this.count != 0) {
		this.v1.ax = this.v1.a.x;
		this.v1.ay = this.v1.a.y;
		this.v1.bx = this.v1.b.x;
		this.v1.by = this.v1.b.y;
		this.v1.vx = this.v1.bx - this.v1.ax;
		this.v1.vy = this.v1.by - this.v1.ay;
		this.v1.w = 0.0;
	}
	if(this.count > 1) {
		this.v2.ax = this.v2.a.x;
		this.v2.ay = this.v2.a.y;
		this.v2.bx = this.v2.b.x;
		this.v2.by = this.v2.b.y;
		this.v2.vx = this.v2.bx - this.v2.ax;
		this.v2.vy = this.v2.by - this.v2.ay;
		this.v2.w = 0.0;
		if(this.count == 3) {
			this.v3.ax = this.v3.a.x;
			this.v3.ay = this.v3.a.y;
			this.v3.bx = this.v3.b.x;
			this.v3.by = this.v3.b.y;
			this.v3.vx = this.v3.bx - this.v3.ax;
			this.v3.vy = this.v3.by - this.v3.ay;
			this.v3.w = 0.0;
		}
		var old = this.metric;
		this.metric = this.get_metric();
		if(this.metric < 0.5 * old || 2 * old < this.metric || this.metric < 1e-8) this.count = 0;
	}
	if(this.count == 0) {
		this.count = 1;
		this.v1.a = this.p1.gverts.next;
		this.v1.b = this.p2.gverts.next;
		this.v1.ax = this.v1.a.x;
		this.v1.ay = this.v1.a.y;
		this.v1.ia = 0;
		this.v1.bx = this.v1.b.x;
		this.v1.by = this.v1.b.y;
		this.v1.ib = 0;
		this.v1.vx = this.v1.bx - this.v1.ax;
		this.v1.vy = this.v1.by - this.v1.ay;
		this.v1.w = 0.0;
	}
}
zpp_nape.geom.ZPP_SCache.prototype.get_metric = function() {
	return (function($this) {
		var $r;
		switch($this.count) {
		case 2:
			$r = (function($this) {
				var $r;
				var dx;
				var dy;
				{
					dx = $this.v1.vx - $this.v2.vx;
					dy = $this.v1.vy - $this.v2.vy;
				}
				$r = dx * dx + dy * dy;
				return $r;
			}($this));
			break;
		case 3:
			$r = (function($this) {
				var $r;
				var ax;
				var ay;
				{
					ax = $this.v2.vx - $this.v1.vx;
					ay = $this.v2.vy - $this.v1.vy;
				}
				var bx;
				var by;
				{
					bx = $this.v3.vx - $this.v1.vx;
					by = $this.v3.vy - $this.v1.vy;
				}
				$r = by * ax - bx * ay;
				return $r;
			}($this));
			break;
		default:
			$r = 0.0;
		}
		return $r;
	}(this));
}
zpp_nape.geom.ZPP_SCache.prototype.write = function(count,v1,v2,v3) {
	this.count = count;
	this.v1 = v1;
	this.v2 = v2;
	this.v3 = v3;
	this.metric = this.get_metric();
}
zpp_nape.geom.ZPP_SCache.prototype.__class__ = zpp_nape.geom.ZPP_SCache;
zpp_nape.geom.ZPP_Distance = function() { }
zpp_nape.geom.ZPP_Distance.__name__ = ["zpp_nape","geom","ZPP_Distance"];
zpp_nape.geom.ZPP_Distance.distance = function(outa,outb,s1,s2,cache) {
	if(s2.type == 1) return s1.type == 1?(function($this) {
		var $r;
		if(cache == null) {
			cache = zpp_nape.geom.ZPP_Distance.defcache;
			{
				cache.v1 = new zpp_nape.geom.ZPP_SVertex();
				cache.v2 = new zpp_nape.geom.ZPP_SVertex();
				cache.v3 = new zpp_nape.geom.ZPP_SVertex();
				cache.p1 = s1.polygon;
				cache.p2 = s2.polygon;
				cache.count = 0;
			}
		}
		cache.validate();
		var count = cache.count;
		var v1 = cache.v1;
		var v2 = cache.v2;
		var v3 = cache.v3;
		var ida = [];
		var idb = [];
		var ind = 0;
		while(ind++ < 2000) {
			var pcount = count;
			ida[0] = v1.ia;
			idb[0] = v1.ib;
			if(count >= 2) {
				ida[1] = v2.ia;
				idb[1] = v2.ib;
			}
			if(count == 3) {
				ida[2] = v3.ia;
				idb[2] = v3.ib;
			}
			if(count == 2) {
				var ex;
				var ey;
				ex = v2.vx - v1.vx;
				ey = v2.vy - v1.vy;
				var d2 = -(v1.vx * ex + v1.vy * ey);
				if(d2 <= 0.0) {
					v1.w = 1.0;
					count = 1;
				} else {
					var d1 = v2.vx * ex + v2.vy * ey;
					if(d1 <= 0.0) {
						v2.w = 1.0;
						count = 1;
						var t = v1;
						v1 = v2;
						v2 = t;
					} else {
						var id = 1 / (d1 + d2);
						v1.w = d1 * id;
						v2.w = d2 * id;
					}
				}
			} else if(count == 3) {
				var e12x;
				var e12y;
				e12x = v2.vx - v1.vx;
				e12y = v2.vy - v1.vy;
				var d12_1 = v2.vx * e12x + v2.vy * e12y;
				var d12_2 = -(v1.vx * e12x + v1.vy * e12y);
				var e13x;
				var e13y;
				e13x = v3.vx - v1.vx;
				e13y = v3.vy - v1.vy;
				var d13_1 = v3.vx * e13x + v3.vy * e13y;
				var d13_2 = -(v1.vx * e13x + v1.vy * e13y);
				var e23x;
				var e23y;
				e23x = v3.vx - v2.vx;
				e23y = v3.vy - v2.vy;
				var d23_1 = v3.vx * e23x + v3.vy * e23y;
				var d23_2 = -(v2.vx * e23x + v2.vy * e23y);
				var dn = e13y * e12x - e13x * e12y;
				var d1 = dn * (v3.vy * v2.vx - v3.vx * v2.vy);
				var d2 = dn * (v1.vy * v3.vx - v1.vx * v3.vy);
				var d3 = dn * (v2.vy * v1.vx - v2.vx * v1.vy);
				if(d12_2 <= 0.0 && d13_2 <= 0.0) {
					v1.w = 1.0;
					count = 1;
				} else if(d12_1 > 0.0 && d12_2 > 0.0 && d3 <= 0.0) {
					var id = 1.0 / (d12_1 + d12_2);
					v1.w = d12_1 * id;
					v2.w = d12_2 * id;
					count = 2;
				} else if(d13_1 > 0.0 && d13_2 > 0.0 && d2 <= 0.0) {
					var id = 1.0 / (d13_1 + d13_2);
					v1.w = d13_1 * id;
					v3.w = d13_2 * id;
					count = 2;
					var t = v2;
					v2 = v3;
					v3 = t;
				} else if(d12_1 <= 0.0 && d23_2 <= 0.0) {
					v2.w = 1.0;
					count = 1;
					var t = v1;
					v1 = v2;
					v2 = t;
				} else if(d13_1 <= 0.0 && d23_1 <= 0.0) {
					v3.w = 1.0;
					count = 1;
					var t = v1;
					v1 = v3;
					v3 = t;
				} else if(d23_1 > 0.0 && d23_2 > 0.0 && d1 <= 0.0) {
					var id = 1.0 / (d23_1 + d23_2);
					v2.w = d23_1 * id;
					v3.w = d23_2 * id;
					count = 2;
					var t = v1;
					v1 = v3;
					v3 = t;
				} else {
					var id = 1.0 / (d1 + d2 + d3);
					v1.w = d1 * id;
					v2.w = d2 * id;
					v3.w = d3 * id;
				}
			}
			if(count == 3) break;
			var dx;
			var dy;
			if(count == 1) {
				dx = -v1.vx;
				dy = -v1.vy;
			} else if(count == 2) {
				var ex;
				var ey;
				ex = v2.vx - v1.vx;
				ey = v2.vy - v1.vy;
				var sgn = ey * v1.vx - ex * v1.vy;
				if(sgn > 0) {
					dx = -ey;
					dy = ex;
				} else {
					dx = ey;
					dy = -ex;
				}
			} else {
				dx = 0;
				dy = 0;
			}
			if(dx * dx + dy * dy < 1e-8) break;
			var vertex = count == 1?v2:v3;
			vertex.ia = 0;
			var best = s1.polygon.gverts.next;
			var bestv = (best.x * dx + best.y * dy) * -1.0;
			var ind1 = 1;
			var cx_ite = s1.polygon.gverts.next.next;
			while(cx_ite != null) {
				var vert = cx_ite;
				var value = (vert.x * dx + vert.y * dy) * -1.0;
				if(value > bestv) {
					bestv = value;
					best = vert;
					vertex.ia = ind1;
				}
				ind1++;
				cx_ite = cx_ite.next;
			}
			vertex.a = best;
			vertex.ax = best.x;
			vertex.ay = best.y;
			vertex.ib = 0;
			var best = s2.polygon.gverts.next;
			var bestv = best.x * dx + best.y * dy;
			var ind1 = 1;
			var cx_ite = s2.polygon.gverts.next.next;
			while(cx_ite != null) {
				var vert = cx_ite;
				var value = vert.x * dx + vert.y * dy;
				if(value > bestv) {
					bestv = value;
					best = vert;
					vertex.ib = ind1;
				}
				ind1++;
				cx_ite = cx_ite.next;
			}
			vertex.b = best;
			vertex.bx = best.x;
			vertex.by = best.y;
			vertex.vx = vertex.bx - vertex.ax;
			vertex.vy = vertex.by - vertex.ay;
			var dup = false;
			var _g = 0;
			while(_g < pcount) {
				var i = _g++;
				if(vertex.ia == ida[i] && vertex.ib == idb[i]) {
					dup = true;
					break;
				}
			}
			if(dup) break;
			count++;
		}
		if(cache != zpp_nape.geom.ZPP_Distance.defcache) {
			cache.count = count;
			cache.v1 = v1;
			cache.v2 = v2;
			cache.v3 = v3;
			cache.metric = cache.get_metric();
		}
		$r = count == 1?(function($this) {
			var $r;
			{
				outa.x = v1.ax;
				outa.y = v1.ay;
			}
			{
				outb.x = v1.bx;
				outb.y = v1.by;
			}
			$r = Math.sqrt((function($this) {
				var $r;
				var dx;
				var dy;
				{
					dx = outa.x - outb.x;
					dy = outa.y - outb.y;
				}
				$r = dx * dx + dy * dy;
				return $r;
			}($this)));
			return $r;
		}($this)):count == 2?(function($this) {
			var $r;
			{
				outa.x = 0;
				outa.y = 0;
			}
			{
				var t = v1.w;
				outa.x += v1.ax * t;
				outa.y += v1.ay * t;
			}
			{
				var t = v2.w;
				outa.x += v2.ax * t;
				outa.y += v2.ay * t;
			}
			{
				outb.x = 0;
				outb.y = 0;
			}
			{
				var t = v1.w;
				outb.x += v1.bx * t;
				outb.y += v1.by * t;
			}
			{
				var t = v2.w;
				outb.x += v2.bx * t;
				outb.y += v2.by * t;
			}
			$r = Math.sqrt((function($this) {
				var $r;
				var dx;
				var dy;
				{
					dx = outa.x - outb.x;
					dy = outa.y - outb.y;
				}
				$r = dx * dx + dy * dy;
				return $r;
			}($this)));
			return $r;
		}($this)):-1.0;
		return $r;
	}(this)):(function($this) {
		var $r;
		var max = -1e+100;
		var a0 = null, vi = null;
		var vite = s2.polygon.gverts.next;
		{
			var cx_ite = s2.polygon.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > max) {
					max = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite = cx_ite.next;
			}
		}
		var v0 = vi;
		var v1 = vi.next == null?s2.polygon.gverts.next:vi.next;
		var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
		$r = dt <= v0.y * a0.gnormx - v0.x * a0.gnormy?(function($this) {
			var $r;
			var dx;
			var dy;
			{
				dx = v0.x - s1.circle.worldCOMx;
				dy = v0.y - s1.circle.worldCOMy;
			}
			var r = s1.circle.radius;
			var dl = dx * dx + dy * dy;
			$r = dl < r * r?-1.0:(function($this) {
				var $r;
				var id = (function($this) {
					var $r;
					{
					}
					$r = 1.0 / (function($this) {
						var $r;
						{
						}
						$r = Math.sqrt(dl);
						return $r;
					}($this));
					return $r;
				}($this));
				{
					var t = id;
					dx *= t;
					dy *= t;
				}
				{
					outa.x = s1.circle.worldCOMx;
					outa.y = s1.circle.worldCOMy;
				}
				{
					var t = s1.circle.radius;
					outa.x += dx * t;
					outa.y += dy * t;
				}
				{
					outb.x = v0.x;
					outb.y = v0.y;
				}
				{
					var t = 0;
					outb.x -= dx * t;
					outb.y -= dy * t;
				}
				$r = 1 / id - r;
				return $r;
			}($this));
			return $r;
		}($this)):dt >= v1.y * a0.gnormx - v1.x * a0.gnormy?(function($this) {
			var $r;
			var dx;
			var dy;
			{
				dx = v1.x - s1.circle.worldCOMx;
				dy = v1.y - s1.circle.worldCOMy;
			}
			var r = s1.circle.radius;
			var dl = dx * dx + dy * dy;
			$r = dl < r * r?-1.0:(function($this) {
				var $r;
				var id = (function($this) {
					var $r;
					{
					}
					$r = 1.0 / (function($this) {
						var $r;
						{
						}
						$r = Math.sqrt(dl);
						return $r;
					}($this));
					return $r;
				}($this));
				{
					var t = id;
					dx *= t;
					dy *= t;
				}
				{
					outa.x = s1.circle.worldCOMx;
					outa.y = s1.circle.worldCOMy;
				}
				{
					var t = s1.circle.radius;
					outa.x += dx * t;
					outa.y += dy * t;
				}
				{
					outb.x = v1.x;
					outb.y = v1.y;
				}
				{
					var t = 0;
					outb.x -= dx * t;
					outb.y -= dy * t;
				}
				$r = 1 / id - r;
				return $r;
			}($this));
			return $r;
		}($this)):max >= 0.0?(function($this) {
			var $r;
			{
				outa.x = s1.circle.worldCOMx;
				outa.y = s1.circle.worldCOMy;
			}
			{
				var t = s1.circle.radius;
				outa.x -= a0.gnormx * t;
				outa.y -= a0.gnormy * t;
			}
			{
				outb.x = outa.x;
				outb.y = outa.y;
			}
			{
				var t = max;
				outb.x -= a0.gnormx * t;
				outb.y -= a0.gnormy * t;
			}
			$r = max;
			return $r;
		}($this)):-1.0;
		return $r;
	}(this)); else return (function($this) {
		var $r;
		var dx;
		var dy;
		{
			dx = s2.circle.worldCOMx - s1.circle.worldCOMx;
			dy = s2.circle.worldCOMy - s1.circle.worldCOMy;
		}
		var r = s1.circle.radius + s2.circle.radius;
		var dl = dx * dx + dy * dy;
		$r = dl < r * r?-1.0:(function($this) {
			var $r;
			var id = (function($this) {
				var $r;
				{
				}
				$r = 1.0 / (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(dl);
					return $r;
				}($this));
				return $r;
			}($this));
			{
				var t = id;
				dx *= t;
				dy *= t;
			}
			{
				outa.x = s1.circle.worldCOMx;
				outa.y = s1.circle.worldCOMy;
			}
			{
				var t = s1.circle.radius;
				outa.x += dx * t;
				outa.y += dy * t;
			}
			{
				outb.x = s2.circle.worldCOMx;
				outb.y = s2.circle.worldCOMy;
			}
			{
				var t = s2.circle.radius;
				outb.x -= dx * t;
				outb.y -= dy * t;
			}
			$r = 1 / id - r;
			return $r;
		}($this));
		return $r;
	}(this));
}
zpp_nape.geom.ZPP_Distance.prototype.__class__ = zpp_nape.geom.ZPP_Distance;
zpp_nape.geom.ZPP_SVertex = function(p) {
}
zpp_nape.geom.ZPP_SVertex.__name__ = ["zpp_nape","geom","ZPP_SVertex"];
zpp_nape.geom.ZPP_SVertex.prototype.ia = null;
zpp_nape.geom.ZPP_SVertex.prototype.ib = null;
zpp_nape.geom.ZPP_SVertex.prototype.a = null;
zpp_nape.geom.ZPP_SVertex.prototype.b = null;
zpp_nape.geom.ZPP_SVertex.prototype.ax = null;
zpp_nape.geom.ZPP_SVertex.prototype.ay = null;
zpp_nape.geom.ZPP_SVertex.prototype.bx = null;
zpp_nape.geom.ZPP_SVertex.prototype.by = null;
zpp_nape.geom.ZPP_SVertex.prototype.vx = null;
zpp_nape.geom.ZPP_SVertex.prototype.vy = null;
zpp_nape.geom.ZPP_SVertex.prototype.w = null;
zpp_nape.geom.ZPP_SVertex.prototype.__class__ = zpp_nape.geom.ZPP_SVertex;
Selection = function() { }
Selection.__name__ = ["Selection"];
Selection.prototype.anchorNode = null;
Selection.prototype.anchorOffset = null;
Selection.prototype.focusNode = null;
Selection.prototype.focusOffset = null;
Selection.prototype.isCollapsed = null;
Selection.prototype.rangeCount = null;
Selection.prototype.collapse = null;
Selection.prototype.collapseToStart = null;
Selection.prototype.collapseToEnd = null;
Selection.prototype.selectAllChildren = null;
Selection.prototype.deleteFromDocument = null;
Selection.prototype.getRangeAt = null;
Selection.prototype.addRange = null;
Selection.prototype.removeRange = null;
Selection.prototype.removeAllRanges = null;
Selection.prototype.stringifier = null;
Selection.prototype.__class__ = Selection;
MessagePortArray = function() { }
MessagePortArray.__name__ = ["MessagePortArray"];
MessagePortArray.prototype.__class__ = MessagePortArray;
MessagePort = function() { }
MessagePort.__name__ = ["MessagePort"];
MessagePort.prototype.postMessage = null;
MessagePort.prototype.start = null;
MessagePort.prototype.close = null;
MessagePort.prototype.onmessage = null;
MessagePort.prototype.__class__ = MessagePort;
jeash.net.URLLoaderDataFormat = { __ename__ : ["jeash","net","URLLoaderDataFormat"], __constructs__ : ["BINARY","TEXT","VARIABLES"] }
jeash.net.URLLoaderDataFormat.BINARY = ["BINARY",0];
jeash.net.URLLoaderDataFormat.BINARY.toString = $estr;
jeash.net.URLLoaderDataFormat.BINARY.__enum__ = jeash.net.URLLoaderDataFormat;
jeash.net.URLLoaderDataFormat.TEXT = ["TEXT",1];
jeash.net.URLLoaderDataFormat.TEXT.toString = $estr;
jeash.net.URLLoaderDataFormat.TEXT.__enum__ = jeash.net.URLLoaderDataFormat;
jeash.net.URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
jeash.net.URLLoaderDataFormat.VARIABLES.toString = $estr;
jeash.net.URLLoaderDataFormat.VARIABLES.__enum__ = jeash.net.URLLoaderDataFormat;
zpp_nape.constraint.ZPP_WeldJoint = function(p) {
	if( p === $_ ) return;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.phase = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jAccz = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
}
zpp_nape.constraint.ZPP_WeldJoint.__name__ = ["zpp_nape","constraint","ZPP_WeldJoint"];
zpp_nape.constraint.ZPP_WeldJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
for(var k in zpp_nape.constraint.ZPP_Constraint.prototype ) zpp_nape.constraint.ZPP_WeldJoint.prototype[k] = zpp_nape.constraint.ZPP_Constraint.prototype[k];
zpp_nape.constraint.ZPP_WeldJoint.prototype.outer_zn = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		var jccx;
		var jccy;
		var jccz;
		jccx = this.jAccx + this.pjAccx;
		jccy = this.jAccy + this.pjAccy;
		jccz = this.jAccz + this.pjAccz;
		if(b == this.b1) return new nape.geom.Vec3(-jccx,-jccy,-(jccy * this.a1relx - jccx * this.a1rely + jccz)); else return new nape.geom.Vec3(jccx,jccy,jccy * this.a2relx - jccx * this.a2rely + jccz);
	} else return new nape.geom.Vec3(0,0,0);
}
zpp_nape.constraint.ZPP_WeldJoint.prototype.activeBodies = function() {
	this.b1.constraints.add(this);
	if(this.b2 != this.b1) this.b2.constraints.add(this);
}
zpp_nape.constraint.ZPP_WeldJoint.prototype.inactiveBodies = function() {
	this.b1.constraints.remove(this);
	if(this.b2 != this.b1) this.b2.constraints.remove(this);
}
zpp_nape.constraint.ZPP_WeldJoint.prototype.b1 = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a1localx = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a1localy = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a1relx = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a1rely = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.setup_a1 = function() {
	var me = this;
	this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
	this.wrap_a1.zpp_inner.inuse = true;
	this.wrap_a1.zpp_inner._validate = function() {
		me.wrap_a1.zpp_inner.x = me.a1localx;
		me.wrap_a1.zpp_inner.y = me.a1localy;
	};
	this.wrap_a1.zpp_inner._invalidate = function(x) {
		me.a1localx = x.x;
		me.a1localy = x.y;
		if(me.space != null) me.space.wake_constraint(me);
	};
}
zpp_nape.constraint.ZPP_WeldJoint.prototype.wrap_a1 = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.b2 = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a2localx = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a2localy = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a2relx = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.a2rely = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.setup_a2 = function() {
	var me = this;
	this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
	this.wrap_a2.zpp_inner.inuse = true;
	this.wrap_a2.zpp_inner._validate = function() {
		me.wrap_a2.zpp_inner.x = me.a2localx;
		me.wrap_a2.zpp_inner.y = me.a2localy;
	};
	this.wrap_a2.zpp_inner._invalidate = function(x) {
		me.a2localx = x.x;
		me.a2localy = x.y;
		if(me.space != null) me.space.wake_constraint(me);
	};
}
zpp_nape.constraint.ZPP_WeldJoint.prototype.wrap_a2 = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.phase = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.kMassa = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.kMassb = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.kMassd = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.kMassc = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.kMasse = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.kMassf = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.jAccx = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.jAccy = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.jAccz = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.pjAccx = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.pjAccy = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.pjAccz = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.jMax = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.gamma = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.biasx = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.biasy = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.biasz = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.stepped = null;
zpp_nape.constraint.ZPP_WeldJoint.prototype.validate = function() {
	if(this.b1 == this.b2) throw "Error: WeldJoint cannot be simulated with body1 == body2";
	if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
	if(!(this.b1.type == 2) && !(this.b2.type == 2)) throw "Error: Constraints cannot have both bodies non-dynamic";
}
zpp_nape.constraint.ZPP_WeldJoint.prototype.wake_connected = function() {
	if(this.b1.type == 2) this.b1.wake();
	if(this.b2.type == 2) this.b2.wake();
}
zpp_nape.constraint.ZPP_WeldJoint.prototype.forest = function() {
	if(this.b1.type == 2) {
		var xr = this.b1.component == this.b1.component.parent?this.b1.component:(function($this) {
			var $r;
			var obj = $this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		var yr = this.component == this.component.parent?this.component:(function($this) {
			var $r;
			var obj = $this.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == 2) {
		var xr = this.b2.component == this.b2.component.parent?this.b2.component:(function($this) {
			var $r;
			var obj = $this.b2.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		var yr = this.component == this.component.parent?this.component:(function($this) {
			var $r;
			var obj = $this.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
}
zpp_nape.constraint.ZPP_WeldJoint.prototype.pair_exists = function(id,di) {
	return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
}
zpp_nape.constraint.ZPP_WeldJoint.prototype.destroy = function() {
	this.b1.constraints.remove(this);
	if(this.b2 != this.b1) this.b2.constraints.remove(this);
}
zpp_nape.constraint.ZPP_WeldJoint.prototype.clearcache = function() {
	this.jAccx = 0;
	this.jAccy = 0;
	this.jAccz = 0;
	this.pjAccx = 0;
	this.pjAccy = 0;
	this.pjAccz = 0;
	this.pre_dt = -1.0;
}
zpp_nape.constraint.ZPP_WeldJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var m = this.b1.smass + this.b2.smass;
	this.kMassa = m;
	this.kMassb = 0;
	this.kMassd = m;
	this.kMassc = 0;
	this.kMasse = 0;
	this.kMassf = 0;
	if(this.b1.sinertia != 0) {
		var X = this.a1relx * this.b1.sinertia;
		var Y = this.a1rely * this.b1.sinertia;
		this.kMassa += Y * this.a1rely;
		this.kMassb += -Y * this.a1relx;
		this.kMassd += X * this.a1relx;
		this.kMassc += -Y;
		this.kMasse += X;
		this.kMassf += this.b1.sinertia;
	}
	if(this.b2.sinertia != 0) {
		var X = this.a2relx * this.b2.sinertia;
		var Y = this.a2rely * this.b2.sinertia;
		this.kMassa += Y * this.a2rely;
		this.kMassb += -Y * this.a2relx;
		this.kMassd += X * this.a2relx;
		this.kMassc += -Y;
		this.kMasse += X;
		this.kMassf += this.b2.sinertia;
	}
	var flag = (function($this) {
		var $r;
		var det = $this.kMassa * ($this.kMassd * $this.kMassf - $this.kMasse * $this.kMasse) + $this.kMassb * ($this.kMassc * $this.kMasse - $this.kMassb * $this.kMassf) + $this.kMassc * ($this.kMassb * $this.kMasse - $this.kMassc * $this.kMassd);
		$r = det != det?(function($this) {
			var $r;
			{
				$this.kMassa = 0;
				$this.kMassb = 0;
				$this.kMassd = 0;
				$this.kMassc = 0;
				$this.kMasse = 0;
				$this.kMassf = 0;
			}
			$r = 7;
			return $r;
		}($this)):det < 1e-8?(function($this) {
			var $r;
			var flag = 0;
			if($this.kMassa * $this.kMassa > 1e-8) $this.kMassa = 1 / $this.kMassa; else {
				$this.kMassa = 0;
				flag |= 1;
			}
			if($this.kMassd * $this.kMassd > 1e-8) $this.kMassd = 1 / $this.kMassd; else {
				$this.kMassd = 0;
				flag |= 2;
			}
			if($this.kMassf * $this.kMassf > 1e-8) $this.kMassf = 1 / $this.kMassf; else {
				$this.kMassf = 0;
				flag |= 4;
			}
			$this.kMassb = $this.kMassc = $this.kMasse = 0.0;
			$r = flag;
			return $r;
		}($this)):(function($this) {
			var $r;
			det = 1 / det;
			var A = det * ($this.kMassd * $this.kMassf - $this.kMasse * $this.kMasse);
			var B = det * ($this.kMasse * $this.kMassc - $this.kMassb * $this.kMassf);
			var D = det * ($this.kMassa * $this.kMassf - $this.kMassc * $this.kMassc);
			var C = det * ($this.kMassb * $this.kMasse - $this.kMassc * $this.kMassd);
			var E = det * ($this.kMassb * $this.kMassc - $this.kMassa * $this.kMasse);
			var F = det * ($this.kMassa * $this.kMassd - $this.kMassb * $this.kMassb);
			{
				$this.kMassa = A;
				$this.kMassb = B;
				$this.kMassd = D;
				$this.kMassc = C;
				$this.kMasse = E;
				$this.kMassf = F;
			}
			$r = 0;
			return $r;
		}($this));
		return $r;
	}(this));
	if((flag & 1) != 0) this.jAccx = 0;
	if((flag & 2) != 0) this.jAccy = 0;
	if((flag & 4) != 0) this.jAccz = 0;
	if(!this.stiff) {
		var biasCoef;
		var X = (function($this) {
			var $r;
			var omega = 2 * Math.PI * $this.frequency;
			$this.gamma = 1 / (omega * dt * (2 * $this.damping + omega * dt));
			var ig = 1 / (1 + $this.gamma);
			biasCoef = omega * omega * $this.gamma;
			$this.gamma *= ig;
			$r = ig;
			return $r;
		}(this));
		this.kMassa *= X;
		this.kMassb *= X;
		this.kMassd *= X;
		this.kMassc *= X;
		this.kMasse *= X;
		this.kMassf *= X;
		this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		this.biasz = this.b2.rot - this.b1.rot - this.phase;
		if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz > this.maxError * this.maxError) return true;
		var t = -dt * biasCoef;
		var t1 = t;
		this.biasx *= t1;
		this.biasy *= t1;
		this.biasz *= t;
		var t = this.maxError;
		var ls = this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz;
		if(ls > t * t) {
			var t1 = t * (function($this) {
				var $r;
				{
				}
				$r = 1.0 / (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(ls);
					return $r;
				}($this));
				return $r;
			}(this));
			var t2 = t1;
			this.biasx *= t2;
			this.biasy *= t2;
			this.biasz *= t1;
		}
	} else {
		this.biasx = 0;
		this.biasy = 0;
		this.biasz = 0;
		this.gamma = 0;
	}
	var t = dtratio;
	var t1 = t;
	this.jAccx *= t1;
	this.jAccy *= t1;
	this.jAccz *= t;
	this.jMax = this.maxForce * dt;
	return false;
}
zpp_nape.constraint.ZPP_WeldJoint.prototype.warmStart = function() {
	var t = this.b1.imass;
	this.b1.velx -= this.jAccx * t;
	this.b1.vely -= this.jAccy * t;
	var t = this.b2.imass;
	this.b2.velx += this.jAccx * t;
	this.b2.vely += this.jAccy * t;
	this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz) * this.b1.iinertia;
	this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz) * this.b2.iinertia;
	this.pjAccx = this.jAccx;
	this.pjAccy = this.jAccy;
	this.pjAccz = this.jAccz;
}
zpp_nape.constraint.ZPP_WeldJoint.prototype.applyImpulseVel = function() {
	var Ex;
	var Ey;
	var Ez;
	Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
	Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
	Ez = this.b2.angvel + this.b2.kinangvel - this.b1.angvel - this.b1.kinangvel;
	var Jx;
	var Jy;
	var Jz;
	Jx = this.biasx - Ex;
	Jy = this.biasy - Ey;
	Jz = this.biasz - Ez;
	var X = this.kMassa * Jx + this.kMassb * Jy + this.kMassc * Jz;
	var Y = this.kMassb * Jx + this.kMassd * Jy + this.kMasse * Jz;
	Jz = this.kMassc * Jx + this.kMasse * Jy + this.kMassf * Jz;
	Jx = X;
	Jy = Y;
	var t = this.gamma;
	var t1 = t;
	Jx -= this.jAccx * t1;
	Jy -= this.jAccy * t1;
	Jz -= this.jAccz * t;
	var jOldx;
	var jOldy;
	var jOldz;
	jOldx = this.jAccx;
	jOldy = this.jAccy;
	jOldz = this.jAccz;
	var t = 1;
	var t1 = t;
	this.jAccx += Jx * t1;
	this.jAccy += Jy * t1;
	this.jAccz += Jz * t;
	if(this.breakUnderForce) {
		if(this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz > this.jMax * this.jMax) return true;
	} else if(!this.stiff) {
		var t = this.jMax;
		var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz;
		if(ls > t * t) {
			var t1 = t * (function($this) {
				var $r;
				{
				}
				$r = 1.0 / (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(ls);
					return $r;
				}($this));
				return $r;
			}(this));
			var t2 = t1;
			this.jAccx *= t2;
			this.jAccy *= t2;
			this.jAccz *= t1;
		}
	}
	Jx = this.jAccx - jOldx;
	Jy = this.jAccy - jOldy;
	Jz = this.jAccz - jOldz;
	var t = this.b1.imass;
	this.b1.velx -= Jx * t;
	this.b1.vely -= Jy * t;
	var t = this.b2.imass;
	this.b2.velx += Jx * t;
	this.b2.vely += Jy * t;
	this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely + Jz) * this.b1.iinertia;
	this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely + Jz) * this.b2.iinertia;
	return false;
}
zpp_nape.constraint.ZPP_WeldJoint.prototype.applyImpulsePos = function() {
	var r1x;
	var r1y;
	r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	var r2x;
	var r2y;
	r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var Ex;
	var Ey;
	var Ez;
	Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
	Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
	Ez = this.b2.rot - this.b1.rot - this.phase;
	var Jx;
	var Jy;
	var Jz;
	if(this.breakUnderError && Ex * Ex + Ey * Ey + Ez * Ez > this.maxError * this.maxError) return true;
	var cont = true;
	if(Ex * Ex + Ey * Ey < 0.01) {
		cont = false;
		Ex = 0;
		Ey = 0;
	}
	if((function($this) {
		var $r;
		{
		}
		$r = Ez * Ez;
		return $r;
	}(this)) < 1e-6) {
		if(!cont) return false; else Ez = 0;
	}
	var t = 0.5;
	var t1 = t;
	Ex *= t1;
	Ey *= t1;
	Ez *= t;
	if(Ex * Ex + Ey * Ey > 6) {
		var k = this.b1.smass + this.b2.smass;
		if(k > 1e-8) {
			k = 0.75 / k;
			Jx = -Ex * k;
			Jy = -Ey * k;
			var t = 20;
			var ls = Jx * Jx + Jy * Jy;
			if(ls > t * t) {
				var t1 = t * (function($this) {
					var $r;
					{
					}
					$r = 1.0 / (function($this) {
						var $r;
						{
						}
						$r = Math.sqrt(ls);
						return $r;
					}($this));
					return $r;
				}(this));
				Jx *= t1;
				Jy *= t1;
			}
			var t = this.b1.imass;
			this.b1.posx -= Jx * t;
			this.b1.posy -= Jy * t;
			var t = this.b2.imass;
			this.b2.posx += Jx * t;
			this.b2.posy += Jy * t;
			Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
			Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
			Ez = this.b2.rot - this.b1.rot - this.phase;
			var t = 0.5;
			var t1 = t;
			Ex *= t1;
			Ey *= t1;
			Ez *= t;
		}
	}
	var Ka;
	var Kb;
	var Kd;
	var Kc;
	var Ke;
	var Kf;
	var m = this.b1.smass + this.b2.smass;
	Ka = m;
	Kb = 0;
	Kd = m;
	Kc = 0;
	Ke = 0;
	Kf = 0;
	if(this.b1.sinertia != 0) {
		var X = r1x * this.b1.sinertia;
		var Y = r1y * this.b1.sinertia;
		Ka += Y * r1y;
		Kb += -Y * r1x;
		Kd += X * r1x;
		Kc += -Y;
		Ke += X;
		Kf += this.b1.sinertia;
	}
	if(this.b2.sinertia != 0) {
		var X = r2x * this.b2.sinertia;
		var Y = r2y * this.b2.sinertia;
		Ka += Y * r2y;
		Kb += -Y * r2x;
		Kd += X * r2x;
		Kc += -Y;
		Ke += X;
		Kf += this.b2.sinertia;
	}
	Jx = -Ex;
	Jy = -Ey;
	Jz = -Ez;
	var t = 6;
	var ls = Jx * Jx + Jy * Jy;
	if(ls > t * t) {
		var t1 = t * (function($this) {
			var $r;
			{
			}
			$r = 1.0 / (function($this) {
				var $r;
				{
				}
				$r = Math.sqrt(ls);
				return $r;
			}($this));
			return $r;
		}(this));
		Jx *= t1;
		Jy *= t1;
	}
	{
		zpp_nape.util.ZPP_Math.clamp(Jz,-0.25,0.25);
	}
	var det = Ka * (Kd * Kf - Ke * Ke) + Kb * (Kc * Ke - Kb * Kf) + Kc * (Kb * Ke - Kc * Kd);
	if(det != det) Jx = Jy = Jz = 0; else if(det < 1e-8) {
		if(Ka * Ka > 1e-8) Jx /= Ka; else Jx = 0;
		if(Kd * Kd > 1e-8) Jy /= Kd; else Jy = 0;
		if(Kf * Kf > 1e-8) Jz /= Kf; else Jz = 0;
	} else {
		det = 1 / det;
		var B = Ke * Kc - Kb * Kf;
		var C = Kb * Ke - Kc * Kd;
		var E = Kb * Kc - Ka * Ke;
		var X = det * (Jx * (Kd * Kf - Ke * Ke) + Jy * B + Jz * C);
		var Y = det * (Jx * B + Jy * (Ka * Kf - Kc * Kc) + Jz * E);
		Jz = det * (Jx * C + Jy * E + Jz * (Ka * Kd - Kb * Kb));
		Jx = X;
		Jy = Y;
	}
	var t = this.b1.imass;
	this.b1.posx -= Jx * t;
	this.b1.posy -= Jy * t;
	var t = this.b2.imass;
	this.b2.posx += Jx * t;
	this.b2.posy += Jy * t;
	this.b1.delta_rot(-(Jy * r1x - Jx * r1y + Jz) * this.b1.iinertia);
	this.b2.delta_rot((Jy * r2x - Jx * r2y + Jz) * this.b2.iinertia);
	return false;
}
zpp_nape.constraint.ZPP_WeldJoint.prototype.__class__ = zpp_nape.constraint.ZPP_WeldJoint;
Reflect = function() { }
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	if(o.hasOwnProperty != null) return o.hasOwnProperty(field);
	var arr = Reflect.fields(o);
	var $it0 = arr.iterator();
	while( $it0.hasNext() ) {
		var t = $it0.next();
		if(t == field) return true;
	}
	return false;
}
Reflect.field = function(o,field) {
	var methodName = "jeashGet" + field.substr(0,1).toUpperCase() + field.substr(1);
	if(o[methodName] != null) return o[methodName](); else {
		var v = null;
		try {
			v = o[field];
		} catch( e ) {
		}
		return v;
	}
}
Reflect.setField = function(o,field,value) {
	var methodName = "jeashSet" + field.substr(0,1).toUpperCase() + field.substr(1);
	if(o[methodName] != null) o[methodName](value); else o[field] = value;
}
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
}
Reflect.fields = function(o) {
	if(o == null) return new Array();
	var a = new Array();
	if(o.hasOwnProperty) {
		
				for(var i in o)
					if( o.hasOwnProperty(i) )
						a.push(i);
			;
	} else {
		var t;
		try {
			t = o.__proto__;
		} catch( e ) {
			t = null;
		}
		if(t != null) o.__proto__ = null;
		
				for(var i in o)
					if( i != "__proto__" )
						a.push(i);
			;
		if(t != null) o.__proto__ = t;
	}
	return a;
}
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && f.__name__ == null;
}
Reflect.compare = function(a,b) {
	return a == b?0:a > b?1:-1;
}
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
}
Reflect.isObject = function(v) {
	if(v == null) return false;
	var t = typeof(v);
	return t == "string" || t == "object" && !v.__enum__ || t == "function" && v.__name__ != null;
}
Reflect.deleteField = function(o,f) {
	if(!Reflect.hasField(o,f)) return false;
	delete(o[f]);
	return true;
}
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0, _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		Reflect.setField(o2,f,Reflect.field(o,f));
	}
	return o2;
}
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = new Array();
		var _g1 = 0, _g = arguments.length;
		while(_g1 < _g) {
			var i = _g1++;
			a.push(arguments[i]);
		}
		return f(a);
	};
}
Reflect.prototype.__class__ = Reflect;
zpp_nape.util.ZPP_Flags = function() { }
zpp_nape.util.ZPP_Flags.__name__ = ["zpp_nape","util","ZPP_Flags"];
zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = null;
zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = null;
zpp_nape.util.ZPP_Flags.CbEvent_END = null;
zpp_nape.util.ZPP_Flags.CbEvent_WAKE = null;
zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = null;
zpp_nape.util.ZPP_Flags.CbEvent_BREAK = null;
zpp_nape.util.ZPP_Flags.ImmFlag_ACCEPT = null;
zpp_nape.util.ZPP_Flags.ImmFlag_IGNORE = null;
zpp_nape.util.ZPP_Flags.ImmFlag_ACCEPT_ONCE = null;
zpp_nape.util.ZPP_Flags.ImmFlag_IGNORE_ONCE = null;
zpp_nape.util.ZPP_Flags.ListenerType_BODY = null;
zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = null;
zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = null;
zpp_nape.util.ZPP_Flags.ListenerType_IMM = null;
zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = null;
zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = null;
zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = null;
zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = null;
zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = null;
zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = null;
zpp_nape.util.ZPP_Flags.MassMode_FIXED = null;
zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = null;
zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = null;
zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = null;
zpp_nape.util.ZPP_Flags.BodyType_STATIC = null;
zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = null;
zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = null;
zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = null;
zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = null;
zpp_nape.util.ZPP_Flags.ValidationResult_VALID = null;
zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = null;
zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE_EDGES = null;
zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = null;
zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = null;
zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = null;
zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = null;
zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = null;
zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = null;
zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = null;
zpp_nape.util.ZPP_Flags.prototype.__class__ = zpp_nape.util.ZPP_Flags;
zpp_nape.space.ZPP_SweepData = function(p) {
}
zpp_nape.space.ZPP_SweepData.__name__ = ["zpp_nape","space","ZPP_SweepData"];
zpp_nape.space.ZPP_SweepData.zpp_pool = null;
zpp_nape.space.ZPP_SweepData.prototype.next = null;
zpp_nape.space.ZPP_SweepData.prototype.prev = null;
zpp_nape.space.ZPP_SweepData.prototype.shape = null;
zpp_nape.space.ZPP_SweepData.prototype.aabb = null;
zpp_nape.space.ZPP_SweepData.prototype.free = function() {
	this.prev = null;
	this.shape = null;
	this.aabb = null;
}
zpp_nape.space.ZPP_SweepData.prototype.alloc = function() {
}
zpp_nape.space.ZPP_SweepData.prototype.gt = function(x) {
	return this.aabb.minx > x.aabb.minx;
}
zpp_nape.space.ZPP_SweepData.prototype.__class__ = zpp_nape.space.ZPP_SweepData;
zpp_nape.space.ZPP_SweepPhase = function(space) {
	if( space === $_ ) return;
	this.space = space;
	this.is_sweep = true;
	this.sweep = this;
}
zpp_nape.space.ZPP_SweepPhase.__name__ = ["zpp_nape","space","ZPP_SweepPhase"];
zpp_nape.space.ZPP_SweepPhase.__super__ = zpp_nape.space.ZPP_Broadphase;
for(var k in zpp_nape.space.ZPP_Broadphase.prototype ) zpp_nape.space.ZPP_SweepPhase.prototype[k] = zpp_nape.space.ZPP_Broadphase.prototype[k];
zpp_nape.space.ZPP_SweepPhase.prototype.list = null;
zpp_nape.space.ZPP_SweepPhase.prototype.__insert = function(shape) {
	var dat = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.space.ZPP_SweepData.zpp_pool == null) ret = new zpp_nape.space.ZPP_SweepData(); else {
			ret = zpp_nape.space.ZPP_SweepData.zpp_pool;
			zpp_nape.space.ZPP_SweepData.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	shape.sweep = dat;
	dat.shape = shape;
	dat.aabb = shape.aabb;
	dat.next = this.list;
	if(this.list != null) this.list.prev = dat;
	this.list = dat;
}
zpp_nape.space.ZPP_SweepPhase.prototype.__remove = function(shape) {
	var dat = shape.sweep;
	if(dat.prev == null) this.list = dat.next; else dat.prev.next = dat.next;
	if(dat.next != null) dat.next.prev = dat.prev;
	shape.sweep = null;
	var o = dat;
	{
		o.prev = null;
		o.shape = null;
		o.aabb = null;
	}
	o.next = zpp_nape.space.ZPP_SweepData.zpp_pool;
	zpp_nape.space.ZPP_SweepData.zpp_pool = o;
}
zpp_nape.space.ZPP_SweepPhase.prototype.sync_broadphase = function() {
	this.space.validation();
	this.sync_broadphase_fast();
}
zpp_nape.space.ZPP_SweepPhase.prototype.sync_broadphase_fast = function() {
	var a = this.list.next;
	while(a != null) {
		var n = a.next;
		var b = a.prev;
		if(a.aabb.minx > b.aabb.minx) {
			a = n;
			continue;
		}
		while(b.prev != null && b.prev.aabb.minx > a.aabb.minx) b = b.prev;
		var prev = a.prev;
		prev.next = a.next;
		if(a.next != null) a.next.prev = prev;
		if(b.prev == null) {
			a.prev = null;
			this.list = a;
			a.next = b;
			b.prev = a;
		} else {
			a.prev = b.prev;
			b.prev = a;
			a.prev.next = a;
			a.next = b;
		}
		a = n;
	}
}
zpp_nape.space.ZPP_SweepPhase.prototype.broadphase = function() {
	if(this.list != null) {
		this.sync_broadphase_fast();
		var d1 = this.list;
		while(d1 != null) {
			var d2 = d1.next;
			var s1 = d1.shape;
			var b1 = s1.body;
			var bottom = d1.aabb.maxx;
			while(d2 != null) {
				if(d2.aabb.minx > bottom) break;
				var s2 = d2.shape;
				var b2 = s2.body;
				if(b2 == b1) {
					d2 = d2.next;
					continue;
				}
				if(b1.type == 1 && b2.type == 1) {
					d2 = d2.next;
					continue;
				}
				if(b1.component.sleeping && b2.component.sleeping) {
					d2 = d2.next;
					continue;
				}
				if(s1.aabb.intersectY(s2.aabb)) this.space.narrowPhase(s1,s2,!(b1.type == 2) || !(b2.type == 2),null);
				d2 = d2.next;
			}
			d1 = d1.next;
		}
	}
}
zpp_nape.space.ZPP_SweepPhase.prototype.clear = function() {
	while(this.list != null) {
		this.list.shape.removedFromSpace();
		this.__remove(this.list.shape);
	}
}
zpp_nape.space.ZPP_SweepPhase.prototype.shapesUnderPoint = function(x,y,filter) {
	{
		this.space.validation();
		this.sync_broadphase_fast();
	}
	var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
	var ret = new nape.shape.ShapeList();
	var a = this.list;
	while(a != null && a.aabb.minx > x) a = a.next;
	while(a != null && a.aabb.minx <= x) {
		if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
			var shape = a.shape;
			if(filter == null || shape.filter.shouldCollide(filter)) {
				if(shape.type == 0) {
					if(zpp_nape.geom.ZPP_Collide.circleContains(shape.circle,v)) ret.push(shape.outer);
				} else if(zpp_nape.geom.ZPP_Collide.polyContains(shape.polygon,v)) ret.push(shape.outer);
			}
		}
		a = a.next;
	}
	var o = v;
	{
		if(o.outer != null) o.outer.zpp_inner = null;
		o.outer = null;
		o._immutable = null;
		o._validate = null;
		o._invalidate = null;
		o.weak = false;
	}
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	return ret;
}
zpp_nape.space.ZPP_SweepPhase.prototype.bodiesUnderPoint = function(x,y,filter) {
	{
		this.space.validation();
		this.sync_broadphase_fast();
	}
	var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
	var ret = new nape.phys.BodyList();
	var a = this.list;
	while(a != null && a.aabb.minx > x) a = a.next;
	while(a != null && a.aabb.minx <= x) {
		if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
			var shape = a.shape;
			var body = shape.body.outer;
			if(!ret.has(body)) {
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(shape.type == 0) {
						if(zpp_nape.geom.ZPP_Collide.circleContains(shape.circle,v)) ret.push(body);
					} else if(zpp_nape.geom.ZPP_Collide.polyContains(shape.polygon,v)) ret.push(body);
				}
			}
		}
		a = a.next;
	}
	var o = v;
	{
		if(o.outer != null) o.outer.zpp_inner = null;
		o.outer = null;
		o._immutable = null;
		o._validate = null;
		o._invalidate = null;
		o.weak = false;
	}
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	return ret;
}
zpp_nape.space.ZPP_SweepPhase.prototype.shapesInAABB = function(aabb,strict,containment,filter) {
	{
		this.space.validation();
		this.sync_broadphase_fast();
	}
	this.updateAABBShape(aabb);
	var ab = this.aabbShape.zpp_inner.aabb;
	var ret = new nape.shape.ShapeList();
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		var shape = a.shape;
		if(filter == null || shape.filter.shouldCollide(filter)) {
			if(strict) {
				if(containment) {
					if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,shape)) ret.push(shape.outer);
				} else if(ab.contains(a.aabb)) ret.push(shape.outer); else if(a.aabb.intersect(ab)) {
					if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) ret.push(shape.outer);
				}
			} else if(containment?ab.contains(a.aabb):a.aabb.intersect(ab)) ret.push(shape.outer);
		}
		a = a.next;
	}
	return ret;
}
zpp_nape.space.ZPP_SweepPhase.prototype.bodiesInAABB = function(aabb,strict,containment,filter) {
	{
		this.space.validation();
		this.sync_broadphase_fast();
	}
	this.updateAABBShape(aabb);
	var ab = this.aabbShape.zpp_inner.aabb;
	var ret = new nape.phys.BodyList();
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		var shape = a.shape;
		var body = shape.body.outer;
		if(!ret.has(body)) {
			if(filter == null || shape.filter.shouldCollide(filter)) {
				if(strict) {
					if(containment) {
						if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,shape)) ret.push(body);
					} else if(ab.contains(a.aabb)) ret.push(body); else if(a.aabb.intersect(ab)) {
						if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) ret.push(body);
					}
				} else if(containment?ab.contains(a.aabb):a.aabb.intersect(ab)) ret.push(body);
			}
		} else if(containment) {
			if(filter == null || shape.filter.shouldCollide(filter)) {
				if(strict) {
					if(!zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,shape)) ret.remove(body);
				} else if(!ab.contains(a.aabb)) ret.remove(body);
			}
		}
		a = a.next;
	}
	return ret;
}
zpp_nape.space.ZPP_SweepPhase.prototype.shapesInCircle = function(x,y,r,containment,filter) {
	{
		this.space.validation();
		this.sync_broadphase_fast();
	}
	this.updateCircShape(x,y,r);
	var ab = this.circShape.zpp_inner.aabb;
	var ret = new nape.shape.ShapeList();
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		if(a.aabb.intersect(ab)) {
			var shape = a.shape;
			if(filter == null || shape.filter.shouldCollide(filter)) {
				if(containment) {
					if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,shape)) ret.push(shape.outer);
				} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.circShape.zpp_inner)) ret.push(shape.outer);
			}
		}
		a = a.next;
	}
	return ret;
}
zpp_nape.space.ZPP_SweepPhase.prototype.bodiesInCircle = function(x,y,r,containment,filter) {
	{
		this.space.validation();
		this.sync_broadphase_fast();
	}
	this.updateCircShape(x,y,r);
	var ab = this.circShape.zpp_inner.aabb;
	var ret = new nape.phys.BodyList();
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		if(a.aabb.intersect(ab)) {
			var shape = a.shape;
			var body = shape.body.outer;
			if(!ret.has(body)) {
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(containment) {
						if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,shape)) ret.push(body);
					} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.circShape.zpp_inner)) ret.push(body);
				}
			} else if(containment) {
				if((shape.filter == null || shape.filter.shouldCollide(filter)) && !zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,shape)) ret.remove(body);
			}
		}
		a = a.next;
	}
	return ret;
}
zpp_nape.space.ZPP_SweepPhase.prototype.shapesInShape = function(shape,containment,filter) {
	{
		this.space.validation();
		this.sync_broadphase_fast();
	}
	{
		if(shape.type == 1) shape.polygon.validate_gaxi();
		if(shape.zip_aabb) {
			if(shape.body != null) {
				shape.zip_aabb = false;
				if(shape.type == 0) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
			}
		}
		if(shape.zip_worldCOM) {
			if(shape.body != null) {
				shape.zip_worldCOM = false;
				if(shape.zip_localCOM) {
					shape.zip_localCOM = false;
					if(shape.type == 1) shape.polygon.__validate_localCOM();
					if(shape.wrap_localCOM != null) {
						shape.wrap_localCOM.zpp_inner.x = shape.localCOMx;
						shape.wrap_localCOM.zpp_inner.y = shape.localCOMy;
					}
				}
				shape.body.validate_axis();
				shape.worldCOMx = shape.body.posx + (shape.body.axisy * shape.localCOMx - shape.body.axisx * shape.localCOMy);
				shape.worldCOMy = shape.body.posy + (shape.localCOMx * shape.body.axisx + shape.localCOMy * shape.body.axisy);
				if(shape.wrap_worldCOM != null) {
					shape.wrap_worldCOM.zpp_inner.x = shape.worldCOMx;
					shape.wrap_worldCOM.zpp_inner.y = shape.worldCOMy;
				}
			}
		}
	}
	var ab = shape.aabb;
	var ret = new nape.shape.ShapeList();
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		if(a.aabb.intersect(ab)) {
			var shape2 = a.shape;
			if(filter == null || shape2.filter.shouldCollide(filter)) {
				if(containment) {
					if(zpp_nape.geom.ZPP_Collide.containTest(shape,shape2)) ret.push(shape2.outer);
				} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape2,shape)) ret.push(shape2.outer);
			}
		}
		a = a.next;
	}
	return ret;
}
zpp_nape.space.ZPP_SweepPhase.prototype.bodiesInShape = function(shape,containment,filter) {
	{
		this.space.validation();
		this.sync_broadphase_fast();
	}
	{
		if(shape.type == 1) shape.polygon.validate_gaxi();
		if(shape.zip_aabb) {
			if(shape.body != null) {
				shape.zip_aabb = false;
				if(shape.type == 0) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
			}
		}
		if(shape.zip_worldCOM) {
			if(shape.body != null) {
				shape.zip_worldCOM = false;
				if(shape.zip_localCOM) {
					shape.zip_localCOM = false;
					if(shape.type == 1) shape.polygon.__validate_localCOM();
					if(shape.wrap_localCOM != null) {
						shape.wrap_localCOM.zpp_inner.x = shape.localCOMx;
						shape.wrap_localCOM.zpp_inner.y = shape.localCOMy;
					}
				}
				shape.body.validate_axis();
				shape.worldCOMx = shape.body.posx + (shape.body.axisy * shape.localCOMx - shape.body.axisx * shape.localCOMy);
				shape.worldCOMy = shape.body.posy + (shape.localCOMx * shape.body.axisx + shape.localCOMy * shape.body.axisy);
				if(shape.wrap_worldCOM != null) {
					shape.wrap_worldCOM.zpp_inner.x = shape.worldCOMx;
					shape.wrap_worldCOM.zpp_inner.y = shape.worldCOMy;
				}
			}
		}
	}
	var ab = shape.aabb;
	var ret = new nape.phys.BodyList();
	var a = this.list;
	while(a != null && a.aabb.maxx < ab.minx) a = a.next;
	while(a != null && a.aabb.minx <= ab.maxx) {
		if(a.aabb.intersect(ab)) {
			var shape2 = a.shape;
			var body = shape2.body.outer;
			if(!ret.has(body)) {
				if(filter == null || shape2.filter.shouldCollide(filter)) {
					if(containment) {
						if(zpp_nape.geom.ZPP_Collide.containTest(shape,shape2)) ret.push(body);
					} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape2,shape)) ret.push(body);
				}
			} else if(containment) {
				if(filter == null && shape2.filter.shouldCollide(filter) && !zpp_nape.geom.ZPP_Collide.containTest(shape,shape2)) ret.remove(body);
			}
		}
		a = a.next;
	}
	return ret;
}
zpp_nape.space.ZPP_SweepPhase.prototype.rayCast = function(ray,inner,filter) {
	{
		this.space.validation();
		this.sync_broadphase_fast();
	}
	ray.validate_dir();
	var rayab = ray.rayAABB();
	var mint = ray.maxdist;
	var minres = null;
	if(ray.dirx == 0) {
		var a = this.list;
		while(a != null && a.aabb.minx <= rayab.minx) {
			if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
				var t = ray.aabbsect(a.aabb);
				if(t >= 0 && t < mint) {
					var result = a.shape.type == 0?ray.circlesect(a.shape.circle,inner,mint):ray.polysect(a.shape.polygon,inner,mint);
					if(result != null) {
						mint = result.distance;
						minres = result;
					}
				}
			}
			a = a.next;
		}
	} else if(ray.dirx < 0) {
		var a = this.list;
		var b = null;
		while(a != null && a.aabb.minx <= rayab.maxx) {
			b = a;
			a = a.next;
		}
		a = b;
		while(a != null) {
			if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
				var t = ray.aabbsect(a.aabb);
				if(t >= 0 && t < mint) {
					var result = a.shape.type == 0?ray.circlesect(a.shape.circle,inner,mint):ray.polysect(a.shape.polygon,inner,mint);
					if(result != null) {
						mint = result.distance;
						minres = result;
					}
				}
			}
			a = a.prev;
		}
	} else {
		var a = this.list;
		while(a != null && a.aabb.minx <= rayab.maxx && a.aabb.minx < ray.originx + ray.dirx * mint) {
			if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
				var t = ray.aabbsect(a.aabb);
				if(t >= 0 && t < mint) {
					var result = a.shape.type == 0?ray.circlesect(a.shape.circle,inner,mint):ray.polysect(a.shape.polygon,inner,mint);
					if(result != null) {
						mint = result.distance;
						minres = result;
					}
				}
			}
			a = a.next;
		}
	}
	return minres;
}
zpp_nape.space.ZPP_SweepPhase.prototype.rayMultiCast = function(ray,inner,filter) {
	{
		this.space.validation();
		this.sync_broadphase_fast();
	}
	ray.validate_dir();
	var rayab = ray.rayAABB();
	var ret = new nape.geom.RayResultList();
	if(ray.dirx == 0) {
		var a = this.list;
		while(a != null && a.aabb.minx <= rayab.minx) {
			if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
				var t = ray.aabbsect(a.aabb);
				if(t >= 0) {
					if(a.shape.type == 0) ray.circlesect2(a.shape.circle,inner,ret); else ray.polysect2(a.shape.polygon,inner,ret);
				}
			}
			a = a.next;
		}
	} else if(ray.dirx < 0) {
		var a = this.list;
		var b = null;
		while(a != null && a.aabb.minx <= rayab.maxx) {
			b = a;
			a = a.next;
		}
		a = b;
		while(a != null) {
			if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
				var t = ray.aabbsect(a.aabb);
				if(t >= 0) {
					if(a.shape.type == 0) ray.circlesect2(a.shape.circle,inner,ret); else ray.polysect2(a.shape.polygon,inner,ret);
				}
			}
			a = a.prev;
		}
	} else {
		var a = this.list;
		while(a != null && a.aabb.minx <= rayab.maxx) {
			if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
				var t = ray.aabbsect(a.aabb);
				if(t >= 0) {
					if(a.shape.type == 0) ray.circlesect2(a.shape.circle,inner,ret); else ray.polysect2(a.shape.polygon,inner,ret);
				}
			}
			a = a.next;
		}
	}
	return ret;
}
zpp_nape.space.ZPP_SweepPhase.prototype.__class__ = zpp_nape.space.ZPP_SweepPhase;
jeash.text.FontType = { __ename__ : ["jeash","text","FontType"], __constructs__ : ["EMBEDDED","DEVICE"] }
jeash.text.FontType.EMBEDDED = ["EMBEDDED",0];
jeash.text.FontType.EMBEDDED.toString = $estr;
jeash.text.FontType.EMBEDDED.__enum__ = jeash.text.FontType;
jeash.text.FontType.DEVICE = ["DEVICE",1];
jeash.text.FontType.DEVICE.toString = $estr;
jeash.text.FontType.DEVICE.__enum__ = jeash.text.FontType;
zpp_nape.geom.ZPP_SimpleVert = function(p) {
	if( p === $_ ) return;
	this.id = zpp_nape.geom.ZPP_SimpleVert.nextId++;
}
zpp_nape.geom.ZPP_SimpleVert.__name__ = ["zpp_nape","geom","ZPP_SimpleVert"];
zpp_nape.geom.ZPP_SimpleVert.zpp_pool = null;
zpp_nape.geom.ZPP_SimpleVert.less_xy = function(p,q) {
	return p.y < q.y || p.y == q.y && p.x < q.x;
}
zpp_nape.geom.ZPP_SimpleVert.swap_nodes = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
}
zpp_nape.geom.ZPP_SimpleVert.get = function(x,y) {
	var ret = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.geom.ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimpleVert(); else {
			ret = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
			zpp_nape.geom.ZPP_SimpleVert.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		$r = ret;
		return $r;
	}(this));
	ret.x = x;
	ret.y = y;
	return ret;
}
zpp_nape.geom.ZPP_SimpleVert.prototype.forced = null;
zpp_nape.geom.ZPP_SimpleVert.prototype.x = null;
zpp_nape.geom.ZPP_SimpleVert.prototype.y = null;
zpp_nape.geom.ZPP_SimpleVert.prototype.links = null;
zpp_nape.geom.ZPP_SimpleVert.prototype.id = null;
zpp_nape.geom.ZPP_SimpleVert.prototype.next = null;
zpp_nape.geom.ZPP_SimpleVert.prototype.node = null;
zpp_nape.geom.ZPP_SimpleVert.prototype.free = function() {
	this.links.clear();
	var o = this.links;
	{
		o.data = null;
		o.lt = null;
		o.swapped = null;
	}
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
	this.links = null;
	this.node = null;
	this.forced = false;
}
zpp_nape.geom.ZPP_SimpleVert.prototype.alloc = function() {
	this.links = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
			ret = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	this.links.lt = zpp_nape.geom.ZPP_SimpleVert.less_xy;
}
zpp_nape.geom.ZPP_SimpleVert.prototype.__class__ = zpp_nape.geom.ZPP_SimpleVert;
zpp_nape.geom.ZPP_SimpleSeg = function(p) {
	if( p === $_ ) return;
	this.id = zpp_nape.geom.ZPP_SimpleSeg.nextId++;
}
zpp_nape.geom.ZPP_SimpleSeg.__name__ = ["zpp_nape","geom","ZPP_SimpleSeg"];
zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = null;
zpp_nape.geom.ZPP_SimpleSeg.get = function(left,right) {
	var ret = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.geom.ZPP_SimpleSeg.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimpleSeg(); else {
			ret = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
			zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		$r = ret;
		return $r;
	}(this));
	ret.left = left;
	ret.right = right;
	ret.vertices.insert(left);
	ret.vertices.insert(right);
	return ret;
}
zpp_nape.geom.ZPP_SimpleSeg.prototype.left = null;
zpp_nape.geom.ZPP_SimpleSeg.prototype.right = null;
zpp_nape.geom.ZPP_SimpleSeg.prototype.vertices = null;
zpp_nape.geom.ZPP_SimpleSeg.prototype.id = null;
zpp_nape.geom.ZPP_SimpleSeg.prototype.next = null;
zpp_nape.geom.ZPP_SimpleSeg.prototype.free = function() {
	this.left = this.right = null;
	this.prev = null;
	this.node = null;
	this.vertices.clear();
	var o = this.vertices;
	{
		o.data = null;
		o.lt = null;
		o.swapped = null;
	}
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
	this.vertices = null;
}
zpp_nape.geom.ZPP_SimpleSeg.prototype.alloc = function() {
	this.vertices = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
			ret = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	this.vertices.lt = $closure(this,"less_xy");
}
zpp_nape.geom.ZPP_SimpleSeg.prototype.prev = null;
zpp_nape.geom.ZPP_SimpleSeg.prototype.node = null;
zpp_nape.geom.ZPP_SimpleSeg.prototype.less_xy = function(a,b) {
	return a.x < b.x || a.x == b.x && a.y < b.y;
}
zpp_nape.geom.ZPP_SimpleSeg.prototype.__class__ = zpp_nape.geom.ZPP_SimpleSeg;
zpp_nape.geom.ZPP_SimpleEvent = function(p) {
}
zpp_nape.geom.ZPP_SimpleEvent.__name__ = ["zpp_nape","geom","ZPP_SimpleEvent"];
zpp_nape.geom.ZPP_SimpleEvent.swap_nodes = function(a,b) {
	var t = a.node;
	a.node = b.node;
	b.node = t;
}
zpp_nape.geom.ZPP_SimpleEvent.less_xy = function(a,b) {
	if(a.vertex.x < b.vertex.x) return true; else if(a.vertex.x > b.vertex.x) return false; else if(a.vertex.y < b.vertex.y) return true; else if(a.vertex.y > b.vertex.y) return false; else return a.type < b.type;
}
zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = null;
zpp_nape.geom.ZPP_SimpleEvent.get = function(v) {
	var ret = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.geom.ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimpleEvent(); else {
			ret = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
			zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	ret.vertex = v;
	return ret;
}
zpp_nape.geom.ZPP_SimpleEvent.prototype.type = null;
zpp_nape.geom.ZPP_SimpleEvent.prototype.vertex = null;
zpp_nape.geom.ZPP_SimpleEvent.prototype.segment = null;
zpp_nape.geom.ZPP_SimpleEvent.prototype.segment2 = null;
zpp_nape.geom.ZPP_SimpleEvent.prototype.node = null;
zpp_nape.geom.ZPP_SimpleEvent.prototype.next = null;
zpp_nape.geom.ZPP_SimpleEvent.prototype.free = function() {
	this.vertex = null;
	this.segment = this.segment2 = null;
	this.node = null;
}
zpp_nape.geom.ZPP_SimpleEvent.prototype.alloc = function() {
}
zpp_nape.geom.ZPP_SimpleEvent.prototype.__class__ = zpp_nape.geom.ZPP_SimpleEvent;
zpp_nape.geom.ZPP_SimpleSweep = function(p) {
	if( p === $_ ) return;
	this.tree = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
			ret = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	this.tree.lt = $closure(this,"edge_lt");
	this.tree.swapped = $closure(this,"swap_nodes");
}
zpp_nape.geom.ZPP_SimpleSweep.__name__ = ["zpp_nape","geom","ZPP_SimpleSweep"];
zpp_nape.geom.ZPP_SimpleSweep.prototype.sweepx = null;
zpp_nape.geom.ZPP_SimpleSweep.prototype.tree = null;
zpp_nape.geom.ZPP_SimpleSweep.prototype.swap_nodes = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
}
zpp_nape.geom.ZPP_SimpleSweep.prototype.edge_lt = function(p,q) {
	var ux;
	var uy;
	var vx;
	var vy;
	var flip;
	if(p.left == q.left && p.right == q.right) return false; else if(p.left == q.right) return p.left.x == p.right.x?p.left.y < p.right.y?p.left.y > q.left.y:p.right.y > q.left.y:(function($this) {
		var $r;
		flip = p.right.x < p.left.x;
		{
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
		}
		{
			vx = q.left.x - p.left.x;
			vy = q.left.y - p.left.y;
		}
		$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
		return $r;
	}(this)) < 0; else if(p.right == q.left) return !(q.left.x == q.right.x?q.left.y < q.right.y?q.left.y > p.left.y:q.right.y > p.left.y:(function($this) {
		var $r;
		flip = q.right.x < q.left.x;
		{
			ux = q.right.x - q.left.x;
			uy = q.right.y - q.left.y;
		}
		{
			vx = p.left.x - q.left.x;
			vy = p.left.y - q.left.y;
		}
		$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
		return $r;
	}(this)) < 0); else if(p.left == q.left) return p.left.x == p.right.x?p.left.y < p.right.y?p.left.y > q.right.y:p.right.y > q.right.y:(function($this) {
		var $r;
		flip = p.right.x < p.left.x;
		{
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
		}
		{
			vx = q.right.x - p.left.x;
			vy = q.right.y - p.left.y;
		}
		$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
		return $r;
	}(this)) < 0; else if(p.right == q.right) return p.left.x == p.right.x?p.left.y < p.right.y?p.left.y > q.left.y:p.right.y > q.left.y:(function($this) {
		var $r;
		flip = p.right.x < p.left.x;
		{
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
		}
		{
			vx = q.left.x - p.left.x;
			vy = q.left.y - p.left.y;
		}
		$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
		return $r;
	}(this)) < 0;
	if(p.left.x == p.right.x) {
		if(q.left.x == q.right.x) {
			var pmax = p.left.y < p.right.y?p.right:p.left;
			var qmax = q.left.y < q.right.y?q.right:q.left;
			return pmax.y > qmax.y;
		} else {
			var plrg = (function($this) {
				var $r;
				flip = q.right.x < q.left.x;
				{
					ux = q.right.x - q.left.x;
					uy = q.right.y - q.left.y;
				}
				{
					vx = p.left.x - q.left.x;
					vy = p.left.y - q.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this));
			var aplrg = (function($this) {
				var $r;
				flip = q.right.x < q.left.x;
				{
					ux = q.right.x - q.left.x;
					uy = q.right.y - q.left.y;
				}
				{
					vx = p.right.x - q.left.x;
					vy = p.right.y - q.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this));
			if(plrg * aplrg >= 0) return plrg >= 0.0; else return this.sweepx >= p.left.x;
		}
	} else if(q.left.x == q.right.x) {
		var qlrg = (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.left.x - p.left.x;
				vy = q.left.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this));
		var aqlrg = (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.right.x - p.left.x;
				vy = q.right.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this));
		if(qlrg * aqlrg >= 0) return qlrg < 0.0; else return this.sweepx < q.left.x;
	} else {
		var qlrg = (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.left.x - p.left.x;
				vy = q.left.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0.0;
		var aqlrg = (function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.right.x - p.left.x;
				vy = q.right.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0.0;
		if(qlrg == aqlrg) return qlrg; else {
			var plrg = (function($this) {
				var $r;
				flip = q.right.x < q.left.x;
				{
					ux = q.right.x - q.left.x;
					uy = q.right.y - q.left.y;
				}
				{
					vx = p.left.x - q.left.x;
					vy = p.left.y - q.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this)) >= 0.0;
			var aplrg = (function($this) {
				var $r;
				flip = q.right.x < q.left.x;
				{
					ux = q.right.x - q.left.x;
					uy = q.right.y - q.left.y;
				}
				{
					vx = p.right.x - q.left.x;
					vy = p.right.y - q.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this)) >= 0.0;
			if(plrg == aplrg) return plrg;
			var py = (this.sweepx - p.left.x) / (p.right.x - p.left.x) * (p.right.y - p.left.y) + p.left.y;
			var qy = (this.sweepx - q.left.x) / (q.right.x - q.left.x) * (q.right.y - q.left.y) + q.left.y;
			return py > qy;
		}
	}
}
zpp_nape.geom.ZPP_SimpleSweep.prototype.clear = function() {
	this.tree.clear();
}
zpp_nape.geom.ZPP_SimpleSweep.prototype.add = function(e) {
	e.node = this.tree.insert(e);
	var nxt = this.tree.successor_node(e.node);
	var pre = this.tree.predecessor_node(e.node);
	if(nxt != null) {
		e.next = nxt.data;
		nxt.data.prev = e;
	}
	if(pre != null) {
		e.prev = pre.data;
		pre.data.next = e;
	}
	return e;
}
zpp_nape.geom.ZPP_SimpleSweep.prototype.remove = function(e) {
	var nxt = this.tree.successor_node(e.node);
	var pre = this.tree.predecessor_node(e.node);
	if(nxt != null) nxt.data.prev = e.prev;
	if(pre != null) pre.data.next = e.next;
	this.tree.remove_node(e.node);
	e.node = null;
}
zpp_nape.geom.ZPP_SimpleSweep.prototype.intersect = function(p,q) {
	if(p == null || q == null) return false; else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) return false; else {
		var lsign = (q.left.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.left.y - p.left.y);
		var rsign = (q.right.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.right.y - p.left.y);
		if(lsign * rsign > 0) return false; else {
			var lsign2 = (p.left.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.left.y - q.left.y);
			var rsign2 = (p.right.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.right.y - q.left.y);
			if(lsign2 * rsign2 > 0) return false; else if(lsign * rsign >= 0 && lsign2 * rsign2 >= 0) return true; else return true;
		}
	}
}
zpp_nape.geom.ZPP_SimpleSweep.prototype.intersection = function(p,q) {
	if(p == null || q == null) return null; else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) return null; else {
		var ux;
		var uy;
		ux = p.right.x - p.left.x;
		uy = p.right.y - p.left.y;
		var vx;
		var vy;
		vx = q.right.x - q.left.x;
		vy = q.right.y - q.left.y;
		var denom = vy * ux - vx * uy;
		if(denom == 0.0) return null;
		denom = 1 / denom;
		var cx;
		var cy;
		cx = q.left.x - p.left.x;
		cy = q.left.y - p.left.y;
		var t = (vy * cx - vx * cy) * denom;
		if(t < 0 || t > 1) return null;
		var s = (uy * cx - ux * cy) * denom;
		if(s < 0 || s > 1) return null;
		var vet;
		if(s == 0 || s == 1 || t == 0 || t == 1) {
			var cases = s == 0;
			if(s == 1 && cases) throw "corner case 1a"; else if(s == 1) cases = true;
			if(t == 0 && cases) throw "corner case 1b"; else if(t == 0) cases = true;
			if(t == 1 && cases) throw "corner case 1c";
			vet = s == 0?q.left:s == 1?q.right:t == 0?p.left:p.right;
		} else vet = zpp_nape.geom.ZPP_SimpleVert.get(0.5 * (p.left.x + ux * t + q.left.x + vx * s),0.5 * (p.left.y + uy * t + q.left.y + vy * s));
		var ret = zpp_nape.geom.ZPP_SimpleEvent.get(vet);
		ret.type = 0;
		ret.segment = p;
		ret.segment2 = q;
		return ret;
	}
}
zpp_nape.geom.ZPP_SimpleSweep.prototype.__class__ = zpp_nape.geom.ZPP_SimpleSweep;
zpp_nape.util.FastHash2_Hashable2_Bool = function(p) {
	if( p === $_ ) return;
	this.table = new Array();
	var _g1 = 0, _g = 65536;
	while(_g1 < _g) {
		var i = _g1++;
		this.table.push(null);
	}
}
zpp_nape.util.FastHash2_Hashable2_Bool.__name__ = ["zpp_nape","util","FastHash2_Hashable2_Bool"];
zpp_nape.util.FastHash2_Hashable2_Bool.prototype.table = null;
zpp_nape.util.FastHash2_Hashable2_Bool.prototype.clear = function() {
	var _g1 = 0, _g = this.table.length;
	while(_g1 < _g) {
		var i = _g1++;
		var n = this.table[i];
		if(n == null) continue;
		while(n != null) {
			var t = n.hnext;
			n.hnext = null;
			n;
			n = t;
		}
		this.table[i] = null;
	}
}
zpp_nape.util.FastHash2_Hashable2_Bool.prototype.get = function(id,di) {
	var n = this.table[id * 106039 + di & 65535];
	if(n == null) return null; else if(n.id == id && n.di == di) return n; else {
		do n = n.hnext; while(n != null && (n.id != id || n.di != di));
		return n;
	}
}
zpp_nape.util.FastHash2_Hashable2_Bool.prototype.has = function(id,di) {
	var n = this.table[id * 106039 + di & 65535];
	if(n == null) return false; else if(n.id == id && n.di == di) return true; else {
		do n = n.hnext; while(n != null && (n.id != id || n.di != di));
		return n != null;
	}
}
zpp_nape.util.FastHash2_Hashable2_Bool.prototype.add = function(arb) {
	var h = arb.id * 106039 + arb.di & 65535;
	var n = this.table[h];
	if(n == null) {
		this.table[h] = arb;
		arb.hnext = null;
	} else {
		arb.hnext = n.hnext;
		n.hnext = arb;
	}
}
zpp_nape.util.FastHash2_Hashable2_Bool.prototype.remove = function(arb) {
	var h = arb.id * 106039 + arb.di & 65535;
	var n = this.table[h];
	if(n == arb) this.table[h] = n.hnext; else if(n != null) {
		var pre;
		do {
			pre = n;
			n = n.hnext;
		} while(n != null && n != arb);
		pre.hnext = n.hnext;
	}
	arb.hnext = null;
}
zpp_nape.util.FastHash2_Hashable2_Bool.prototype.hash = function(id,di) {
	return id * 106039 + di & 65535;
}
zpp_nape.util.FastHash2_Hashable2_Bool.prototype.__class__ = zpp_nape.util.FastHash2_Hashable2_Bool;
zpp_nape.geom.ZPP_Simple = function() { }
zpp_nape.geom.ZPP_Simple.__name__ = ["zpp_nape","geom","ZPP_Simple"];
zpp_nape.geom.ZPP_Simple.decompose = function(poly) {
	var vertices = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
			ret = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	vertices.lt = zpp_nape.geom.ZPP_SimpleVert.less_xy;
	vertices.swapped = zpp_nape.geom.ZPP_SimpleVert.swap_nodes;
	var queue = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			ret = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	queue.lt = zpp_nape.geom.ZPP_SimpleEvent.less_xy;
	queue.swapped = zpp_nape.geom.ZPP_SimpleEvent.swap_nodes;
	var fst = null;
	var pre = null;
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			var vert = zpp_nape.geom.ZPP_SimpleVert.get(v.x,v.y);
			var vx = (function($this) {
				var $r;
				var cur = vertices.parent;
				while(cur != null) if(vertices.lt(vert,cur.data)) cur = cur.prev; else if(vertices.lt(cur.data,vert)) cur = cur.next; else break;
				$r = cur;
				return $r;
			}(this));
			if(vx != null) {
				var o = vert;
				o.free();
				o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
				vert = vx.data;
			} else vert.node = vertices.insert(vert);
			if(pre != null) {
				var e1 = zpp_nape.geom.ZPP_SimpleEvent.get(pre);
				var e2 = zpp_nape.geom.ZPP_SimpleEvent.get(vert);
				var seg;
				if(e1.vertex.x < e2.vertex.x?true:e1.vertex.x > e2.vertex.x?false:e1.vertex.y < e2.vertex.y?true:e1.vertex.y > e2.vertex.y?false:e1.type < e2.type) {
					e1.type = 1;
					e2.type = 2;
					seg = zpp_nape.geom.ZPP_SimpleSeg.get(pre,vert);
				} else {
					e1.type = 2;
					e2.type = 1;
					seg = zpp_nape.geom.ZPP_SimpleSeg.get(vert,pre);
				}
				e1.segment = e2.segment = seg;
				queue.insert(e1);
				queue.insert(e2);
				pre.links.insert(vert);
				vert.links.insert(pre);
			}
			pre = vert;
			if(fst == null) fst = vert;
			nite = nite.next;
		} while(nite != L);
	}
	var e1 = zpp_nape.geom.ZPP_SimpleEvent.get(pre);
	var e2 = zpp_nape.geom.ZPP_SimpleEvent.get(fst);
	var seg;
	if(e1.vertex.x < e2.vertex.x?true:e1.vertex.x > e2.vertex.x?false:e1.vertex.y < e2.vertex.y?true:e1.vertex.y > e2.vertex.y?false:e1.type < e2.type) {
		e1.type = 1;
		e2.type = 2;
		seg = zpp_nape.geom.ZPP_SimpleSeg.get(pre,fst);
	} else {
		e1.type = 2;
		e2.type = 1;
		seg = zpp_nape.geom.ZPP_SimpleSeg.get(fst,pre);
	}
	e1.segment = e2.segment = seg;
	queue.insert(e1);
	queue.insert(e2);
	pre.links.insert(fst);
	fst.links.insert(pre);
	var ints = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			ret = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	ints.lt = zpp_nape.geom.ZPP_SimpleEvent.less_xy;
	while(!(queue.parent == null)) {
		var e = queue.pop_front();
		zpp_nape.geom.ZPP_Simple.sweep.sweepx = e.vertex.x;
		if(e.type == 1) {
			var s = e.segment;
			zpp_nape.geom.ZPP_Simple.sweep.add(s);
			if(s.next != null && s != null && !(s.next.id < s.id?zpp_nape.geom.ZPP_Simple.inthash.has(s.next.id,s.id):zpp_nape.geom.ZPP_Simple.inthash.has(s.id,s.next.id))) {
				var $int = zpp_nape.geom.ZPP_Simple.sweep.intersection(s.next,s);
				if($int != null) {
					if($int.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex = (function($this) {
							var $r;
							var cur = queue.parent;
							while(cur != null) if(queue.lt($int,cur.data)) cur = cur.prev; else if(queue.lt(cur.data,$int)) cur = cur.next; else break;
							$r = cur;
							return $r;
						}(this));
						if(ex == null) {
							var vx = (function($this) {
								var $r;
								var cur = ints.parent;
								while(cur != null) if(ints.lt($int,cur.data)) cur = cur.prev; else if(ints.lt(cur.data,$int)) cur = cur.next; else break;
								$r = cur;
								return $r;
							}(this));
							if(vx != null) {
								var o = $int.vertex;
								o.free();
								o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
								$int.vertex = vx.data.vertex;
								vx.data = $int;
								queue.insert($int);
							} else {
								queue.insert($int);
								ints.insert($int);
							}
							if(s.next.id < s.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Bool.get(s.next.id,s.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Bool.get(s.id,s.next.id,true));
						} else {
							var x = ex.data;
							if(x.segment != $int.segment || $int.segment2 != x.segment2) throw "corner case 2, shiiiit.";
							var o = $int.vertex;
							o.free();
							o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
							var o = $int;
							{
								o.vertex = null;
								o.segment = o.segment2 = null;
								o.node = null;
							}
							o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
						}
					} else {
						var o = $int.vertex;
						o.free();
						o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
						var o = $int;
						{
							o.vertex = null;
							o.segment = o.segment2 = null;
							o.node = null;
						}
						o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
					}
				}
			}
			if(s != null && s.prev != null && !(s.id < s.prev.id?zpp_nape.geom.ZPP_Simple.inthash.has(s.id,s.prev.id):zpp_nape.geom.ZPP_Simple.inthash.has(s.prev.id,s.id))) {
				var $int = zpp_nape.geom.ZPP_Simple.sweep.intersection(s,s.prev);
				if($int != null) {
					if($int.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex = (function($this) {
							var $r;
							var cur = queue.parent;
							while(cur != null) if(queue.lt($int,cur.data)) cur = cur.prev; else if(queue.lt(cur.data,$int)) cur = cur.next; else break;
							$r = cur;
							return $r;
						}(this));
						if(ex == null) {
							var vx = (function($this) {
								var $r;
								var cur = ints.parent;
								while(cur != null) if(ints.lt($int,cur.data)) cur = cur.prev; else if(ints.lt(cur.data,$int)) cur = cur.next; else break;
								$r = cur;
								return $r;
							}(this));
							if(vx != null) {
								var o = $int.vertex;
								o.free();
								o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
								$int.vertex = vx.data.vertex;
								vx.data = $int;
								queue.insert($int);
							} else {
								queue.insert($int);
								ints.insert($int);
							}
							if(s.id < s.prev.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Bool.get(s.id,s.prev.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Bool.get(s.prev.id,s.id,true));
						} else {
							var x = ex.data;
							if(x.segment != $int.segment || $int.segment2 != x.segment2) throw "corner case 2, shiiiit.";
							var o = $int.vertex;
							o.free();
							o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
							var o = $int;
							{
								o.vertex = null;
								o.segment = o.segment2 = null;
								o.node = null;
							}
							o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
						}
					} else {
						var o = $int.vertex;
						o.free();
						o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
						var o = $int;
						{
							o.vertex = null;
							o.segment = o.segment2 = null;
							o.node = null;
						}
						o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
					}
				}
			}
		} else if(e.type == 2) {
			var s = e.segment;
			if(s.node != null) {
				var nxt = s.next;
				var pre1 = s.prev;
				zpp_nape.geom.ZPP_Simple.sweep.remove(s);
				var o = s;
				o.free();
				o.next = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
				zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = o;
				if(nxt != null && pre1 != null && !(nxt.id < pre1.id?zpp_nape.geom.ZPP_Simple.inthash.has(nxt.id,pre1.id):zpp_nape.geom.ZPP_Simple.inthash.has(pre1.id,nxt.id))) {
					var $int = zpp_nape.geom.ZPP_Simple.sweep.intersection(nxt,pre1);
					if($int != null) {
						if($int.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
							var ex = (function($this) {
								var $r;
								var cur = queue.parent;
								while(cur != null) if(queue.lt($int,cur.data)) cur = cur.prev; else if(queue.lt(cur.data,$int)) cur = cur.next; else break;
								$r = cur;
								return $r;
							}(this));
							if(ex == null) {
								var vx = (function($this) {
									var $r;
									var cur = ints.parent;
									while(cur != null) if(ints.lt($int,cur.data)) cur = cur.prev; else if(ints.lt(cur.data,$int)) cur = cur.next; else break;
									$r = cur;
									return $r;
								}(this));
								if(vx != null) {
									var o = $int.vertex;
									o.free();
									o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
									zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
									$int.vertex = vx.data.vertex;
									vx.data = $int;
									queue.insert($int);
								} else {
									queue.insert($int);
									ints.insert($int);
								}
								if(nxt.id < pre1.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Bool.get(nxt.id,pre1.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Bool.get(pre1.id,nxt.id,true));
							} else {
								var x = ex.data;
								if(x.segment != $int.segment || $int.segment2 != x.segment2) throw "corner case 2, shiiiit.";
								var o = $int.vertex;
								o.free();
								o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
								var o = $int;
								{
									o.vertex = null;
									o.segment = o.segment2 = null;
									o.node = null;
								}
								o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
								zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
							}
						} else {
							var o = $int.vertex;
							o.free();
							o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
							var o = $int;
							{
								o.vertex = null;
								o.segment = o.segment2 = null;
								o.node = null;
							}
							o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
						}
					}
				}
			}
		} else {
			var $int = e.vertex;
			var pnull = $int.node == null;
			var a = e.segment;
			var b = e.segment2;
			if(b.next != a) {
				var t = a;
				a = b;
				b = t;
			}
			var anew = (function($this) {
				var $r;
				var cur = a.vertices.parent;
				while(cur != null) if(a.vertices.lt($int,cur.data)) cur = cur.prev; else if(a.vertices.lt(cur.data,$int)) cur = cur.next; else break;
				$r = cur;
				return $r;
			}(this)) == null;
			var bnew = (function($this) {
				var $r;
				var cur = b.vertices.parent;
				while(cur != null) if(b.vertices.lt($int,cur.data)) cur = cur.prev; else if(b.vertices.lt(cur.data,$int)) cur = cur.next; else break;
				$r = cur;
				return $r;
			}(this)) == null;
			if(anew) {
				var aint = a.vertices.insert($int);
				var naleft = $int == a.left?$int:a.vertices.predecessor_node(aint).data;
				var naright = $int == a.right?$int:a.vertices.successor_node(aint).data;
				naleft.links.remove(naright);
				if($int != naleft) naleft.links.insert($int);
				naright.links.remove(naleft);
				if($int != naright) naright.links.insert($int);
				if($int != naleft) $int.links.insert(naleft);
				if($int != naright) $int.links.insert(naright);
			}
			if(bnew) {
				var bint = b.vertices.insert($int);
				var nbleft = $int == b.left?$int:b.vertices.predecessor_node(bint).data;
				var nbright = $int == b.right?$int:b.vertices.successor_node(bint).data;
				nbleft.links.remove(nbright);
				if($int != nbleft) nbleft.links.insert($int);
				nbright.links.remove(nbleft);
				if($int != nbright) nbright.links.insert($int);
				if($int != nbleft) $int.links.insert(nbleft);
				if($int != nbright) $int.links.insert(nbright);
			}
			if(pnull) $int.node = vertices.insert($int);
			$int.forced = true;
			if(pnull) {
				var an = a.node;
				var bn = b.node;
				an.data = b;
				bn.data = a;
				a.node = bn;
				b.node = an;
				b.next = a.next;
				a.next = b;
				a.prev = b.prev;
				b.prev = a;
				if(a.prev != null) a.prev.next = a;
				if(b.next != null) b.next.prev = b;
			}
			if(b.next != null && b != null && !(b.next.id < b.id?zpp_nape.geom.ZPP_Simple.inthash.has(b.next.id,b.id):zpp_nape.geom.ZPP_Simple.inthash.has(b.id,b.next.id))) {
				var int1 = zpp_nape.geom.ZPP_Simple.sweep.intersection(b.next,b);
				if(int1 != null) {
					if(int1.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex = (function($this) {
							var $r;
							var cur = queue.parent;
							while(cur != null) if(queue.lt(int1,cur.data)) cur = cur.prev; else if(queue.lt(cur.data,int1)) cur = cur.next; else break;
							$r = cur;
							return $r;
						}(this));
						if(ex == null) {
							var vx = (function($this) {
								var $r;
								var cur = ints.parent;
								while(cur != null) if(ints.lt(int1,cur.data)) cur = cur.prev; else if(ints.lt(cur.data,int1)) cur = cur.next; else break;
								$r = cur;
								return $r;
							}(this));
							if(vx != null) {
								var o = int1.vertex;
								o.free();
								o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
								int1.vertex = vx.data.vertex;
								vx.data = int1;
								queue.insert(int1);
							} else {
								queue.insert(int1);
								ints.insert(int1);
							}
							if(b.next.id < b.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Bool.get(b.next.id,b.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Bool.get(b.id,b.next.id,true));
						} else {
							var x = ex.data;
							if(x.segment != int1.segment || int1.segment2 != x.segment2) throw "corner case 2, shiiiit.";
							var o = int1.vertex;
							o.free();
							o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
							var o = int1;
							{
								o.vertex = null;
								o.segment = o.segment2 = null;
								o.node = null;
							}
							o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
						}
					} else {
						var o = int1.vertex;
						o.free();
						o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
						var o = int1;
						{
							o.vertex = null;
							o.segment = o.segment2 = null;
							o.node = null;
						}
						o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
					}
				}
			}
			if(a != null && a.prev != null && !(a.id < a.prev.id?zpp_nape.geom.ZPP_Simple.inthash.has(a.id,a.prev.id):zpp_nape.geom.ZPP_Simple.inthash.has(a.prev.id,a.id))) {
				var int1 = zpp_nape.geom.ZPP_Simple.sweep.intersection(a,a.prev);
				if(int1 != null) {
					if(int1.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex = (function($this) {
							var $r;
							var cur = queue.parent;
							while(cur != null) if(queue.lt(int1,cur.data)) cur = cur.prev; else if(queue.lt(cur.data,int1)) cur = cur.next; else break;
							$r = cur;
							return $r;
						}(this));
						if(ex == null) {
							var vx = (function($this) {
								var $r;
								var cur = ints.parent;
								while(cur != null) if(ints.lt(int1,cur.data)) cur = cur.prev; else if(ints.lt(cur.data,int1)) cur = cur.next; else break;
								$r = cur;
								return $r;
							}(this));
							if(vx != null) {
								var o = int1.vertex;
								o.free();
								o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
								int1.vertex = vx.data.vertex;
								vx.data = int1;
								queue.insert(int1);
							} else {
								queue.insert(int1);
								ints.insert(int1);
							}
							if(a.id < a.prev.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Bool.get(a.id,a.prev.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Bool.get(a.prev.id,a.id,true));
						} else {
							var x = ex.data;
							if(x.segment != int1.segment || int1.segment2 != x.segment2) throw "corner case 2, shiiiit.";
							var o = int1.vertex;
							o.free();
							o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
							var o = int1;
							{
								o.vertex = null;
								o.segment = o.segment2 = null;
								o.node = null;
							}
							o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
						}
					} else {
						var o = int1.vertex;
						o.free();
						o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
						var o = int1;
						{
							o.vertex = null;
							o.segment = o.segment2 = null;
							o.node = null;
						}
						o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
					}
				}
			}
			ints.remove(e);
		}
		var o = e;
		{
			o.vertex = null;
			o.segment = o.segment2 = null;
			o.node = null;
		}
		o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
	}
	var o = queue;
	{
		o.data = null;
		o.lt = null;
		o.swapped = null;
	}
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = o;
	var o = ints;
	{
		o.data = null;
		o.lt = null;
		o.swapped = null;
	}
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = o;
	var _g1 = 0, _g = zpp_nape.geom.ZPP_Simple.inthash.table.length;
	while(_g1 < _g) {
		var i = _g1++;
		var n = zpp_nape.geom.ZPP_Simple.inthash.table[i];
		if(n == null) continue;
		while(n != null) {
			var t = n.hnext;
			n.hnext = null;
			n;
			n = t;
		}
		zpp_nape.geom.ZPP_Simple.inthash.table[i] = null;
	}
	var rets = new zpp_nape.util.ZNPList_ZPP_GeomVert();
	while(!(vertices.parent == null)) zpp_nape.geom.ZPP_Simple.clip_polygon(vertices,rets);
	var o = vertices;
	{
		o.data = null;
		o.lt = null;
		o.swapped = null;
	}
	o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
	zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
	return rets;
}
zpp_nape.geom.ZPP_Simple.clip_polygon = function(vertices,rets) {
	var ret = null;
	var cur = vertices.first();
	var fst = cur;
	var pren = cur.links.parent;
	var nxtn = pren.prev == null?pren.next:pren.prev;
	var pre = pren.data;
	var nxt = nxtn.data;
	if((function($this) {
		var $r;
		var ux;
		var uy;
		{
			ux = cur.x - pre.x;
			uy = cur.y - pre.y;
		}
		var vx;
		var vy;
		{
			vx = nxt.x - cur.x;
			vy = nxt.y - cur.y;
		}
		$r = vy * ux - vx * uy;
		return $r;
	}(this)) < 0) nxt = pre;
	ret = (function($this) {
		var $r;
		var obj = zpp_nape.geom.ZPP_GeomVert.get(cur.x,cur.y);
		if(ret == null) ret = obj.prev = obj.next = obj; else {
			obj.prev = ret;
			obj.next = ret.next;
			ret.next.prev = obj;
			ret.next = obj;
		}
		$r = obj;
		return $r;
	}(this));
	ret.forced = cur.forced;
	while(true) {
		cur.links.remove(nxt);
		nxt.links.remove(cur);
		if(nxt == fst) {
			if(cur.links.parent == null) {
				vertices.remove(cur);
				var o = cur;
				o.free();
				o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
			}
			break;
		}
		ret = (function($this) {
			var $r;
			var obj = zpp_nape.geom.ZPP_GeomVert.get(nxt.x,nxt.y);
			if(ret == null) ret = obj.prev = obj.next = obj; else {
				obj.prev = ret;
				obj.next = ret.next;
				ret.next.prev = obj;
				ret.next = obj;
			}
			$r = obj;
			return $r;
		}(this));
		ret.forced = nxt.forced;
		if(nxt.links.singular()) {
			if(cur.links.parent == null) {
				vertices.remove(cur);
				var o = cur;
				o.free();
				o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
			}
			cur = nxt;
			nxt = nxt.links.parent.data;
		} else {
			var min = null;
			var minl = 0.0;
			if(!(nxt.links.parent == null)) {
				var set_ite = nxt.links.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var p = set_ite.data;
					if(min == null) {
						min = p;
						minl = (function($this) {
							var $r;
							var ux;
							var uy;
							{
								ux = nxt.x - cur.x;
								uy = nxt.y - cur.y;
							}
							var vx;
							var vy;
							{
								vx = p.x - nxt.x;
								vy = p.y - nxt.y;
							}
							$r = vy * ux - vx * uy;
							return $r;
						}(this));
					} else {
						var nleft = (function($this) {
							var $r;
							var ux;
							var uy;
							{
								ux = nxt.x - cur.x;
								uy = nxt.y - cur.y;
							}
							var vx;
							var vy;
							{
								vx = p.x - nxt.x;
								vy = p.y - nxt.y;
							}
							$r = vy * ux - vx * uy;
							return $r;
						}(this));
						if(nleft > 0 && minl <= 0) {
							min = p;
							minl = nleft;
						} else if(minl * nleft >= 0) {
							var pleft = (function($this) {
								var $r;
								var ux;
								var uy;
								{
									ux = nxt.x - p.x;
									uy = nxt.y - p.y;
								}
								var vx;
								var vy;
								{
									vx = min.x - nxt.x;
									vy = min.y - nxt.y;
								}
								$r = vy * ux - vx * uy;
								return $r;
							}(this));
							if(pleft > 0) {
								min = p;
								minl = nleft;
							}
						}
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			if(cur.links.parent == null) {
				vertices.remove(cur);
				var o = cur;
				o.free();
				o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
			}
			cur = nxt;
			nxt = min;
		}
	}
	vertices.remove(fst);
	var o = fst;
	o.free();
	o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
	zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
	rets.add(ret);
}
zpp_nape.geom.ZPP_Simple.isSimple = function(poly) {
	var vertices = new zpp_nape.util.ZNPList_ZPP_SimpleVert();
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			vertices.add(zpp_nape.geom.ZPP_SimpleVert.get(v.x,v.y));
			nite = nite.next;
		} while(nite != L);
	}
	var queue = new zpp_nape.util.ZNPList_ZPP_SimpleEvent();
	var cx_ite = vertices.head;
	var u = cx_ite.elt;
	cx_ite = cx_ite.next;
	while(cx_ite != null) {
		var v = cx_ite.elt;
		var e1 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(u));
		var e2 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(v));
		e1.segment = e2.segment = e1.vertex.x < e2.vertex.x?true:e1.vertex.x > e2.vertex.x?false:e1.vertex.y < e2.vertex.y?true:e1.vertex.y > e2.vertex.y?false:e1.type < e2.type?(function($this) {
			var $r;
			e1.type = 1;
			e2.type = 2;
			$r = zpp_nape.geom.ZPP_SimpleSeg.get(u,v);
			return $r;
		}(this)):(function($this) {
			var $r;
			e1.type = 2;
			e2.type = 1;
			$r = zpp_nape.geom.ZPP_SimpleSeg.get(v,u);
			return $r;
		}(this));
		u = v;
		cx_ite = cx_ite.next;
	}
	var v = vertices.head.elt;
	var e1 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(u));
	var e2 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(v));
	e1.segment = e2.segment = e1.vertex.x < e2.vertex.x?true:e1.vertex.x > e2.vertex.x?false:e1.vertex.y < e2.vertex.y?true:e1.vertex.y > e2.vertex.y?false:e1.type < e2.type?(function($this) {
		var $r;
		e1.type = 1;
		e2.type = 2;
		$r = zpp_nape.geom.ZPP_SimpleSeg.get(u,v);
		return $r;
	}(this)):(function($this) {
		var $r;
		e1.type = 2;
		e2.type = 1;
		$r = zpp_nape.geom.ZPP_SimpleSeg.get(v,u);
		return $r;
	}(this));
	var xxlist = queue;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges, leftSize, rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(zpp_nape.geom.ZPP_SimpleEvent.less_xy(left.elt,right.elt)) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		{
			xxlist.head = head;
			xxlist.modified = true;
			xxlist.pushmod = true;
		}
	}
	var ret = true;
	while(!(queue.head == null)) {
		var e = queue.pop_unsafe();
		var seg = e.segment;
		if(e.type == 1) {
			zpp_nape.geom.ZPP_Simple.sweep.add(seg);
			if(zpp_nape.geom.ZPP_Simple.sweep.intersect(seg,seg.next) || zpp_nape.geom.ZPP_Simple.sweep.intersect(seg,seg.prev)) {
				ret = false;
				break;
			}
		} else if(e.type == 2) {
			if(zpp_nape.geom.ZPP_Simple.sweep.intersect(seg.prev,seg.next)) {
				ret = false;
				break;
			}
			zpp_nape.geom.ZPP_Simple.sweep.remove(seg);
			var o = seg;
			o.free();
			o.next = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
			zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = o;
		}
		var o = e;
		{
			o.vertex = null;
			o.segment = o.segment2 = null;
			o.node = null;
		}
		o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
	}
	while(!(queue.head == null)) {
		var e = queue.pop_unsafe();
		if(e.type == 2) {
			var o = e.segment;
			o.free();
			o.next = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
			zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = o;
		}
		var o = e;
		{
			o.vertex = null;
			o.segment = o.segment2 = null;
			o.node = null;
		}
		o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
	}
	zpp_nape.geom.ZPP_Simple.sweep.tree.clear();
	while(!(vertices.head == null)) {
		var o = vertices.pop_unsafe();
		o.free();
		o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
	}
	return ret;
}
zpp_nape.geom.ZPP_Simple.prototype.__class__ = zpp_nape.geom.ZPP_Simple;
zpp_nape.util.Hashable2_Bool = function(p) {
}
zpp_nape.util.Hashable2_Bool.__name__ = ["zpp_nape","util","Hashable2_Bool"];
zpp_nape.util.Hashable2_Bool.zpp_pool = null;
zpp_nape.util.Hashable2_Bool.get = function(id,di,val) {
	var ret = (function($this) {
		var $r;
		var ret;
		if(zpp_nape.util.Hashable2_Bool.zpp_pool == null) ret = new zpp_nape.util.Hashable2_Bool(); else {
			ret = zpp_nape.util.Hashable2_Bool.zpp_pool;
			zpp_nape.util.Hashable2_Bool.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		$r = ret;
		return $r;
	}(this));
	ret.value = val;
	ret.id = id;
	ret.di = di;
	return ret;
}
zpp_nape.util.Hashable2_Bool.prototype.value = null;
zpp_nape.util.Hashable2_Bool.prototype.next = null;
zpp_nape.util.Hashable2_Bool.prototype.hnext = null;
zpp_nape.util.Hashable2_Bool.prototype.id = null;
zpp_nape.util.Hashable2_Bool.prototype.di = null;
zpp_nape.util.Hashable2_Bool.prototype.free = function() {
}
zpp_nape.util.Hashable2_Bool.prototype.alloc = function() {
}
zpp_nape.util.Hashable2_Bool.prototype.__class__ = zpp_nape.util.Hashable2_Bool;
zpp_nape.util.FastHash2_ZPP_AABBPair = function(p) {
	if( p === $_ ) return;
	this.table = new Array();
	var _g1 = 0, _g = 65536;
	while(_g1 < _g) {
		var i = _g1++;
		this.table.push(null);
	}
}
zpp_nape.util.FastHash2_ZPP_AABBPair.__name__ = ["zpp_nape","util","FastHash2_ZPP_AABBPair"];
zpp_nape.util.FastHash2_ZPP_AABBPair.prototype.table = null;
zpp_nape.util.FastHash2_ZPP_AABBPair.prototype.clear = function() {
	var _g1 = 0, _g = this.table.length;
	while(_g1 < _g) {
		var i = _g1++;
		var n = this.table[i];
		if(n == null) continue;
		while(n != null) {
			var t = n.hnext;
			n.hnext = null;
			n;
			n = t;
		}
		this.table[i] = null;
	}
}
zpp_nape.util.FastHash2_ZPP_AABBPair.prototype.get = function(id,di) {
	var n = this.table[id * 106039 + di & 65535];
	if(n == null) return null; else if(n.id == id && n.di == di) return n; else {
		do n = n.hnext; while(n != null && (n.id != id || n.di != di));
		return n;
	}
}
zpp_nape.util.FastHash2_ZPP_AABBPair.prototype.has = function(id,di) {
	var n = this.table[id * 106039 + di & 65535];
	if(n == null) return false; else if(n.id == id && n.di == di) return true; else {
		do n = n.hnext; while(n != null && (n.id != id || n.di != di));
		return n != null;
	}
}
zpp_nape.util.FastHash2_ZPP_AABBPair.prototype.add = function(arb) {
	var h = arb.id * 106039 + arb.di & 65535;
	var n = this.table[h];
	if(n == null) {
		this.table[h] = arb;
		arb.hnext = null;
	} else {
		arb.hnext = n.hnext;
		n.hnext = arb;
	}
}
zpp_nape.util.FastHash2_ZPP_AABBPair.prototype.remove = function(arb) {
	var h = arb.id * 106039 + arb.di & 65535;
	var n = this.table[h];
	if(n == arb) this.table[h] = n.hnext; else if(n != null) {
		var pre;
		do {
			pre = n;
			n = n.hnext;
		} while(n != null && n != arb);
		pre.hnext = n.hnext;
	}
	arb.hnext = null;
}
zpp_nape.util.FastHash2_ZPP_AABBPair.prototype.hash = function(id,di) {
	return id * 106039 + di & 65535;
}
zpp_nape.util.FastHash2_ZPP_AABBPair.prototype.__class__ = zpp_nape.util.FastHash2_ZPP_AABBPair;
zpp_nape.util.FastHash2_ZPP_Arbiter = function(p) {
	if( p === $_ ) return;
	this.table = new Array();
	var _g1 = 0, _g = 65536;
	while(_g1 < _g) {
		var i = _g1++;
		this.table.push(null);
	}
}
zpp_nape.util.FastHash2_ZPP_Arbiter.__name__ = ["zpp_nape","util","FastHash2_ZPP_Arbiter"];
zpp_nape.util.FastHash2_ZPP_Arbiter.prototype.table = null;
zpp_nape.util.FastHash2_ZPP_Arbiter.prototype.clear = function() {
	var _g1 = 0, _g = this.table.length;
	while(_g1 < _g) {
		var i = _g1++;
		var n = this.table[i];
		if(n == null) continue;
		while(n != null) {
			var t = n.hnext;
			n.hnext = null;
			n;
			n = t;
		}
		this.table[i] = null;
	}
}
zpp_nape.util.FastHash2_ZPP_Arbiter.prototype.get = function(id,di) {
	var n = this.table[id * 106039 + di & 65535];
	if(n == null) return null; else if(n.id == id && n.di == di) return n; else {
		do n = n.hnext; while(n != null && (n.id != id || n.di != di));
		return n;
	}
}
zpp_nape.util.FastHash2_ZPP_Arbiter.prototype.has = function(id,di) {
	var n = this.table[id * 106039 + di & 65535];
	if(n == null) return false; else if(n.id == id && n.di == di) return true; else {
		do n = n.hnext; while(n != null && (n.id != id || n.di != di));
		return n != null;
	}
}
zpp_nape.util.FastHash2_ZPP_Arbiter.prototype.add = function(arb) {
	var h = arb.id * 106039 + arb.di & 65535;
	var n = this.table[h];
	if(n == null) {
		this.table[h] = arb;
		arb.hnext = null;
	} else {
		arb.hnext = n.hnext;
		n.hnext = arb;
	}
}
zpp_nape.util.FastHash2_ZPP_Arbiter.prototype.remove = function(arb) {
	var h = arb.id * 106039 + arb.di & 65535;
	var n = this.table[h];
	if(n == arb) this.table[h] = n.hnext; else if(n != null) {
		var pre;
		do {
			pre = n;
			n = n.hnext;
		} while(n != null && n != arb);
		pre.hnext = n.hnext;
	}
	arb.hnext = null;
}
zpp_nape.util.FastHash2_ZPP_Arbiter.prototype.hash = function(id,di) {
	return id * 106039 + di & 65535;
}
zpp_nape.util.FastHash2_ZPP_Arbiter.prototype.__class__ = zpp_nape.util.FastHash2_ZPP_Arbiter;
Main = function(p) {
	if( p === $_ ) return;
	jeash.display.Sprite.call(this);
	Main.STAGE_WIDTH = jeash.Lib.jeashGetCurrent().GetStage().jeashGetStageWidth();
	Main.STAGE_HEIGHT = jeash.Lib.jeashGetCurrent().GetStage().jeashGetStageHeight();
	jeash.Lib.jeashGetCurrent().GetStage().addEventListener(jeash.events.Event.RESIZE,$closure(this,"onResize"));
	var test = new Test();
	this.addChild(test);
	haxe.Log.trace("BBBOOOOOOM",{ fileName : "Main.hx", lineNumber : 34, className : "Main", methodName : "new"});
}
Main.__name__ = ["Main"];
Main.__super__ = jeash.display.Sprite;
for(var k in jeash.display.Sprite.prototype ) Main.prototype[k] = jeash.display.Sprite.prototype[k];
Main.STAGE_WIDTH = null;
Main.STAGE_HEIGHT = null;
Main.main = function() {
	jeash.Lib.jeashGetCurrent().GetStage().align = jeash.display.StageAlign.TOP_LEFT;
	jeash.Lib.jeashGetCurrent().GetStage().scaleMode = jeash.display.StageScaleMode.NO_SCALE;
	jeash.Lib.jeashGetCurrent().addChild(new Main());
	jeash.Lib.jeashGetCurrent().GetStage().addChild(new nme.display.FPS(jeash.Lib.jeashGetCurrent().GetStage().jeashGetStageWidth() - 40,0,0));
}
Main.prototype.onResize = function(e) {
	Main.STAGE_WIDTH = jeash.Lib.jeashGetCurrent().GetStage().jeashGetStageWidth();
	Main.STAGE_HEIGHT = jeash.Lib.jeashGetCurrent().GetStage().jeashGetStageHeight();
}
Main.prototype.__class__ = Main;
zpp_nape.constraint.ZPP_LineJoint = function(p) {
	if( p === $_ ) return;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.nlocalx = 0;
	this.nlocaly = 0;
	this.nrelx = 0;
	this.nrely = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.jointMin = Math.NEGATIVE_INFINITY;
	this.jointMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
}
zpp_nape.constraint.ZPP_LineJoint.__name__ = ["zpp_nape","constraint","ZPP_LineJoint"];
zpp_nape.constraint.ZPP_LineJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
for(var k in zpp_nape.constraint.ZPP_Constraint.prototype ) zpp_nape.constraint.ZPP_LineJoint.prototype[k] = zpp_nape.constraint.ZPP_Constraint.prototype[k];
zpp_nape.constraint.ZPP_LineJoint.prototype.outer_zn = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.scale = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.jointMin = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.jointMax = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.dot1 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.dot2 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.cx1 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.cx2 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.bodyImpulse = function(b) {
	if(this.stepped) {
		var jx = this.scale * this.nrelx * (this.pjAccy + this.jAccy) - this.nrely * (this.pjAccx + this.jAccx);
		var jy = this.nrelx * (this.pjAccx + this.jAccx) + this.scale * this.nrely * (this.pjAccy + this.jAccy);
		if(b == this.b1) return new nape.geom.Vec3(-jx,-jy,this.scale * this.cx1 * jy - this.dot1 * jx); else return new nape.geom.Vec3(jx,jy,this.scale * this.cx1 * jy - this.dot1 * jx);
	} else return new nape.geom.Vec3(0,0,0);
}
zpp_nape.constraint.ZPP_LineJoint.prototype.activeBodies = function() {
	this.b1.constraints.add(this);
	if(this.b2 != this.b1) this.b2.constraints.add(this);
}
zpp_nape.constraint.ZPP_LineJoint.prototype.inactiveBodies = function() {
	this.b1.constraints.remove(this);
	if(this.b2 != this.b1) this.b2.constraints.remove(this);
}
zpp_nape.constraint.ZPP_LineJoint.prototype.b1 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a1localx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a1localy = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a1relx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a1rely = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.setup_a1 = function() {
	var me = this;
	this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
	this.wrap_a1.zpp_inner.inuse = true;
	this.wrap_a1.zpp_inner._validate = function() {
		me.wrap_a1.zpp_inner.x = me.a1localx;
		me.wrap_a1.zpp_inner.y = me.a1localy;
	};
	this.wrap_a1.zpp_inner._invalidate = function(x) {
		me.a1localx = x.x;
		me.a1localy = x.y;
		if(me.space != null) me.space.wake_constraint(me);
	};
}
zpp_nape.constraint.ZPP_LineJoint.prototype.wrap_a1 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.b2 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a2localx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a2localy = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a2relx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.a2rely = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.setup_a2 = function() {
	var me = this;
	this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
	this.wrap_a2.zpp_inner.inuse = true;
	this.wrap_a2.zpp_inner._validate = function() {
		me.wrap_a2.zpp_inner.x = me.a2localx;
		me.wrap_a2.zpp_inner.y = me.a2localy;
	};
	this.wrap_a2.zpp_inner._invalidate = function(x) {
		me.a2localx = x.x;
		me.a2localy = x.y;
		if(me.space != null) me.space.wake_constraint(me);
	};
}
zpp_nape.constraint.ZPP_LineJoint.prototype.wrap_a2 = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.zip_n = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.nlocalx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.nlocaly = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.nrelx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.nrely = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.setup_n = function() {
	var me = this;
	this.wrap_n = nape.geom.Vec2.get(this.nlocalx,this.nlocaly,null);
	this.wrap_n.zpp_inner.inuse = true;
	this.wrap_n.zpp_inner._validate = function() {
		me.wrap_n.zpp_inner.x = me.nlocalx;
		me.wrap_n.zpp_inner.y = me.nlocaly;
	};
	this.wrap_n.zpp_inner._invalidate = function(x) {
		me.nlocalx = x.x;
		me.nlocaly = x.y;
		me.zip_n = true;
		if(me.space != null) me.space.wake_constraint(me);
	};
}
zpp_nape.constraint.ZPP_LineJoint.prototype.wrap_n = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.validate_n = function() {
	if(this.zip_n) {
		this.zip_n = false;
		var d = this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly;
		var imag = 1.0 / Math.sqrt(d);
		var t = imag;
		this.nlocalx *= t;
		this.nlocaly *= t;
	}
}
zpp_nape.constraint.ZPP_LineJoint.prototype.kMassa = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.kMassb = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.kMassc = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.jAccx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.jAccy = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.pjAccx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.pjAccy = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.jMax = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.gamma = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.biasx = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.biasy = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.stepped = null;
zpp_nape.constraint.ZPP_LineJoint.prototype.validate = function() {
	if(this.b1 == this.b2) throw "Error: DistanceJoint cannot be simulated with body1 == body2";
	if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
	if(this.jointMin > this.jointMax) throw "Error: DistanceJoint must have jointMin <= jointMax";
	if(this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly < 1e-8) throw "Error: DistanceJoint direction must be non-degenerate";
	if(!(this.b1.type == 2) && !(this.b2.type == 2)) throw "Error: Constraints cannot have both bodies non-dynamic";
}
zpp_nape.constraint.ZPP_LineJoint.prototype.wake_connected = function() {
	if(this.b1.type == 2) this.b1.wake();
	if(this.b2.type == 2) this.b2.wake();
}
zpp_nape.constraint.ZPP_LineJoint.prototype.forest = function() {
	if(this.b1.type == 2) {
		var xr = this.b1.component == this.b1.component.parent?this.b1.component:(function($this) {
			var $r;
			var obj = $this.b1.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		var yr = this.component == this.component.parent?this.component:(function($this) {
			var $r;
			var obj = $this.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
	if(this.b2.type == 2) {
		var xr = this.b2.component == this.b2.component.parent?this.b2.component:(function($this) {
			var $r;
			var obj = $this.b2.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		var yr = this.component == this.component.parent?this.component:(function($this) {
			var $r;
			var obj = $this.component;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		if(xr != yr) {
			if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
				yr.parent = xr;
				xr.rank++;
			}
		}
	}
}
zpp_nape.constraint.ZPP_LineJoint.prototype.pair_exists = function(id,di) {
	return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
}
zpp_nape.constraint.ZPP_LineJoint.prototype.destroy = function() {
	this.b1.constraints.remove(this);
	if(this.b2 != this.b1) this.b2.constraints.remove(this);
}
zpp_nape.constraint.ZPP_LineJoint.prototype.clearcache = function() {
	this.jAccx = 0;
	this.jAccy = 0;
	this.pjAccx = 0;
	this.pjAccy = 0;
	this.pre_dt = -1.0;
}
zpp_nape.constraint.ZPP_LineJoint.prototype.preStep = function(dt) {
	if(this.pre_dt == -1.0) this.pre_dt = dt;
	var dtratio = dt / this.pre_dt;
	this.pre_dt = dt;
	this.stepped = true;
	this.validate_n();
	this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	this.nrelx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
	this.nrely = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
	this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var dx;
	var dy;
	var Cx;
	var Cy;
	dx = this.b2.posx + this.a2relx - this.b1.posx - this.a1relx;
	dy = this.b2.posy + this.a2rely - this.b1.posy - this.a1rely;
	Cx = dy * this.nrelx - dx * this.nrely;
	Cy = this.nrelx * dx + this.nrely * dy;
	if(Cy > this.jointMax) {
		Cy -= this.jointMax;
		this.scale = 1.0;
	} else if(Cy < this.jointMin) {
		Cy = this.jointMin - Cy;
		this.scale = -1.0;
	} else {
		Cy = 0;
		this.scale = 0;
	}
	var drx;
	var dry;
	drx = dx + this.a1relx;
	dry = dy + this.a1rely;
	this.dot1 = this.nrelx * drx + this.nrely * dry;
	this.cx1 = dry * this.nrelx - drx * this.nrely;
	this.dot2 = this.nrelx * this.a2relx + this.nrely * this.a2rely;
	this.cx2 = this.a2rely * this.nrelx - this.a2relx * this.nrely;
	this.kMassa = this.b1.smass + this.b2.smass + this.dot1 * this.dot1 * this.b1.sinertia + this.dot2 * this.dot2 * this.b2.sinertia;
	this.kMassb = -this.scale * (this.dot1 * this.cx1 * this.b1.sinertia + this.dot2 * this.cx2 * this.b2.sinertia);
	this.kMassc = this.scale * this.scale * (this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia);
	var flag = (function($this) {
		var $r;
		var det = $this.kMassa * $this.kMassc - $this.kMassb * $this.kMassb;
		$r = det != det?(function($this) {
			var $r;
			$this.kMassa = $this.kMassb = $this.kMassc = 0;
			$r = 3;
			return $r;
		}($this)):det < 1e-8?(function($this) {
			var $r;
			var flag = 0;
			if($this.kMassa * $this.kMassa > 1e-8) $this.kMassa = 1 / $this.kMassa; else {
				$this.kMassa = 0;
				flag |= 1;
			}
			if($this.kMassc * $this.kMassc > 1e-8) $this.kMassc = 1 / $this.kMassc; else {
				$this.kMassc = 0;
				flag |= 2;
			}
			$this.kMassb = 0;
			$r = flag;
			return $r;
		}($this)):(function($this) {
			var $r;
			det = 1 / det;
			var t = $this.kMassc * det;
			$this.kMassc = $this.kMassa * det;
			$this.kMassa = t;
			$this.kMassb *= -det;
			$r = 0;
			return $r;
		}($this));
		return $r;
	}(this));
	if((flag & 1) != 0) this.jAccx = 0;
	if((flag & 2) != 0) this.jAccy = 0;
	if(!this.stiff) {
		var biasCoef;
		var X = (function($this) {
			var $r;
			var omega = 2 * Math.PI * $this.frequency;
			$this.gamma = 1 / (omega * dt * (2 * $this.damping + omega * dt));
			var ig = 1 / (1 + $this.gamma);
			biasCoef = omega * omega * $this.gamma;
			$this.gamma *= ig;
			$r = ig;
			return $r;
		}(this));
		this.kMassa *= X;
		this.kMassb *= X;
		this.kMassc *= X;
		this.biasx = Cx;
		this.biasy = Cy;
		var t = -dt * biasCoef;
		this.biasx *= t;
		this.biasy *= t;
		var t = this.maxError;
		var ls = this.biasx * this.biasx + this.biasy * this.biasy;
		if(ls > t * t) {
			var t1 = t * (function($this) {
				var $r;
				{
				}
				$r = 1.0 / (function($this) {
					var $r;
					{
					}
					$r = Math.sqrt(ls);
					return $r;
				}($this));
				return $r;
			}(this));
			this.biasx *= t1;
			this.biasy *= t1;
		}
	} else {
		this.gamma = 0;
		this.biasx = 0;
		this.biasy = 0;
	}
	var t = dtratio;
	this.jAccx *= t;
	this.jAccy *= t;
	return false;
}
zpp_nape.constraint.ZPP_LineJoint.prototype.warmStart = function() {
	var J2x = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
	var J2y = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
	var t = this.b1.imass;
	this.b1.velx -= J2x * t;
	this.b1.vely -= J2y * t;
	var t = this.b2.imass;
	this.b2.velx += J2x * t;
	this.b2.vely += J2y * t;
	this.b1.angvel += (this.scale * this.cx1 * this.jAccy - this.dot1 * this.jAccx) * this.b1.iinertia;
	this.b2.angvel += (this.dot2 * this.jAccx - this.scale * this.cx2 * this.jAccy) * this.b2.iinertia;
	this.pjAccx = this.jAccx;
	this.pjAccy = this.jAccy;
}
zpp_nape.constraint.ZPP_LineJoint.prototype.applyImpulseVel = function() {
	var Ex;
	var Ey;
	var dvx;
	var dvy;
	dvx = this.b2.velx - this.b1.velx;
	dvy = this.b2.vely - this.b1.vely;
	dvx += this.b2.kinvelx - this.b1.kinvelx;
	dvy += this.b2.kinvely - this.b1.kinvely;
	Ex = dvy * this.nrelx - dvx * this.nrely + (this.b2.angvel + this.b2.kinangvel) * this.dot2 - (this.b1.angvel + this.b1.kinangvel) * this.dot1;
	Ey = this.scale * (this.nrelx * dvx + this.nrely * dvy - (this.b2.angvel + this.b2.kinangvel) * this.cx2 + (this.b1.angvel + this.b1.kinangvel) * this.cx1);
	var Jx;
	var Jy;
	Jx = this.biasx - Ex;
	Jy = this.biasy - Ey;
	var t = this.kMassa * Jx + this.kMassb * Jy;
	Jy = this.kMassb * Jx + this.kMassc * Jy;
	Jx = t;
	var t = this.gamma;
	Jx -= this.jAccx * t;
	Jy -= this.jAccy * t;
	var jOldx;
	var jOldy;
	jOldx = this.jAccx;
	jOldy = this.jAccy;
	var t = 1.0;
	this.jAccx += Jx * t;
	this.jAccy += Jy * t;
	if(this.jAccy > 0) this.jAccy = 0;
	var t = this.jMax;
	var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
	if(ls > t * t) {
		var t1 = t * (function($this) {
			var $r;
			{
			}
			$r = 1.0 / (function($this) {
				var $r;
				{
				}
				$r = Math.sqrt(ls);
				return $r;
			}($this));
			return $r;
		}(this));
		this.jAccx *= t1;
		this.jAccy *= t1;
	}
	Jx = this.jAccx - jOldx;
	Jy = this.jAccy - jOldy;
	var J2x = this.scale * this.nrelx * Jy - this.nrely * Jx;
	var J2y = this.nrelx * Jx + this.scale * this.nrely * Jy;
	var t = this.b1.imass;
	this.b1.velx -= J2x * t;
	this.b1.vely -= J2y * t;
	var t = this.b2.imass;
	this.b2.velx += J2x * t;
	this.b2.vely += J2y * t;
	this.b1.angvel += (this.scale * this.cx1 * Jy - this.dot1 * Jx) * this.b1.iinertia;
	this.b2.angvel += (this.dot2 * Jx - this.scale * this.cx2 * Jy) * this.b2.iinertia;
	return false;
}
zpp_nape.constraint.ZPP_LineJoint.prototype.applyImpulsePos = function() {
	var nx;
	var ny;
	nx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
	ny = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
	var r1x;
	var r1y;
	r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
	r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
	var r2x;
	var r2y;
	r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
	r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
	var dx;
	var dy;
	var scale;
	var Ex;
	var Ey;
	dx = this.b2.posx + r2x - this.b1.posx - r1x;
	dy = this.b2.posy + r2y - this.b1.posy - r1y;
	Ex = dy * nx - dx * ny;
	Ey = nx * dx + ny * dy;
	if(Ey > this.jointMax) {
		Ey -= this.jointMax;
		scale = 1.0;
	} else if(Ey < this.jointMin) {
		Ey = this.jointMin - Ey;
		scale = -1.0;
	} else {
		Ey = 0;
		scale = 0;
	}
	if(Ex * Ex + Ey * Ey < 0.01) return false;
	var Jx;
	var Jy;
	var t = 0.5;
	Ex *= t;
	Ey *= t;
	if(Ex * Ex + Ey * Ey > 6) {
		var k = this.b1.smass + this.b2.smass;
		if(k > 1e-8) {
			k = 0.6 / k;
			var Jx1 = k * (ny * Ex - scale * nx * Ey);
			var Jy1 = k * (nx * Ex * scale - ny * Ex);
			var t = this.b1.imass;
			this.b1.posx -= Jx1 * t;
			this.b1.posy -= Jy1 * t;
			var t = this.b2.imass;
			this.b2.posx += Jx1 * t;
			this.b2.posy += Jy1 * t;
			dx = this.b2.posx + r2x - this.b1.posx - r1x;
			dy = this.b2.posy + r2y - this.b1.posy - r1y;
			Ex = dy * nx - dx * ny;
			Ey = nx * dx + ny * dy;
			if(Ey > this.jointMax) {
				Ey -= this.jointMax;
				scale = 1.0;
			} else if(Ey < this.jointMin) {
				Ey = this.jointMin - Ey;
				scale = -1.0;
			} else {
				Ey = 0;
				scale = 0;
			}
			var t = 0.5;
			Ex *= t;
			Ey *= t;
		}
	}
	var dot1, dot2, cx1, cx2;
	var Ka;
	var Kb;
	var Kc;
	var drx;
	var dry;
	drx = dx + r1x;
	dry = dy + r1y;
	dot1 = nx * drx + ny * dry;
	cx1 = dry * nx - drx * ny;
	dot2 = nx * r2x + ny * r2y;
	cx2 = r2y * nx - r2x * ny;
	Ka = this.b1.smass + this.b2.smass + dot1 * dot1 * this.b1.sinertia + dot2 * dot2 * this.b2.sinertia;
	Kb = -scale * (dot1 * cx1 * this.b1.sinertia + dot2 * cx2 * this.b2.sinertia);
	Kc = scale * scale * (this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia);
	Jx = -Ex;
	Jy = -Ey;
	var det = Ka * Kc - Kb * Kb;
	if(det != det) Jx = Jy = 0; else if(det < 1e-8) {
		if(Ka * Ka > 1e-8) Jx /= Ka; else Jx = 0;
		if(Kc * Kc > 1e-8) Jy /= Kc; else Jy = 0;
	} else {
		det = 1 / det;
		var t = det * (Kc * Jx - Kb * Jy);
		Jy = det * (Ka * Jy - Kb * Jx);
		Jx = t;
	}
	if(Jy > 0) Jy = 0;
	var J2x = scale * nx * Jy - ny * Jx;
	var J2y = nx * Jx + scale * ny * Jy;
	var t = this.b1.imass;
	this.b1.posx -= J2x * t;
	this.b1.posy -= J2y * t;
	var t = this.b2.imass;
	this.b2.posx += J2x * t;
	this.b2.posy += J2y * t;
	this.b1.delta_rot((scale * cx1 * Jy - dot1 * Jx) * this.b1.iinertia);
	this.b2.delta_rot((dot2 * Jx - scale * cx2 * Jy) * this.b2.iinertia);
	return false;
}
zpp_nape.constraint.ZPP_LineJoint.prototype.__class__ = zpp_nape.constraint.ZPP_LineJoint;
haxe.io.BytesBuffer = function(p) {
	if( p === $_ ) return;
	this.b = new Array();
}
haxe.io.BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe.io.BytesBuffer.prototype.b = null;
haxe.io.BytesBuffer.prototype.addByte = function($byte) {
	this.b.push($byte);
}
haxe.io.BytesBuffer.prototype.add = function(src) {
	var b1 = this.b;
	var b2 = src.b;
	var _g1 = 0, _g = src.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.b.push(b2[i]);
	}
}
haxe.io.BytesBuffer.prototype.addBytes = function(src,pos,len) {
	if(pos < 0 || len < 0 || pos + len > src.length) throw haxe.io.Error.OutsideBounds;
	var b1 = this.b;
	var b2 = src.b;
	var _g1 = pos, _g = pos + len;
	while(_g1 < _g) {
		var i = _g1++;
		this.b.push(b2[i]);
	}
}
haxe.io.BytesBuffer.prototype.getBytes = function() {
	var bytes = new haxe.io.Bytes(this.b.length,this.b);
	this.b = null;
	return bytes;
}
haxe.io.BytesBuffer.prototype.__class__ = haxe.io.BytesBuffer;
StringBuf = function(p) {
	if( p === $_ ) return;
	this.b = new Array();
}
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype.add = function(x) {
	this.b[this.b.length] = x == null?"null":x;
}
StringBuf.prototype.addSub = function(s,pos,len) {
	this.b[this.b.length] = s.substr(pos,len);
}
StringBuf.prototype.addChar = function(c) {
	this.b[this.b.length] = String.fromCharCode(c);
}
StringBuf.prototype.toString = function() {
	return this.b.join("");
}
StringBuf.prototype.b = null;
StringBuf.prototype.__class__ = StringBuf;
zpp_nape.shape.ZPP_Circle = function(p) {
	if( p === $_ ) return;
	zpp_nape.shape.ZPP_Shape.call(this,0);
	this.circle = this;
	this.zip_localCOM = false;
}
zpp_nape.shape.ZPP_Circle.__name__ = ["zpp_nape","shape","ZPP_Circle"];
zpp_nape.shape.ZPP_Circle.__super__ = zpp_nape.shape.ZPP_Shape;
for(var k in zpp_nape.shape.ZPP_Shape.prototype ) zpp_nape.shape.ZPP_Circle.prototype[k] = zpp_nape.shape.ZPP_Shape.prototype[k];
zpp_nape.shape.ZPP_Circle.prototype.outer_zn = null;
zpp_nape.shape.ZPP_Circle.prototype.radius = null;
zpp_nape.shape.ZPP_Circle.prototype.__clear = function() {
}
zpp_nape.shape.ZPP_Circle.prototype.invalidate_radius = function() {
	{
		this.zip_area_inertia = true;
		if(this.body != null) {
			this.body.invalidate_localCOM();
			this.body.invalidate_mass();
			this.body.invalidate_inertia();
		}
	}
	this.zip_angDrag = true;
	{
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	if(this.body != null) this.body.wake();
}
zpp_nape.shape.ZPP_Circle.prototype.setupLocalCOM = function() {
	var me = this;
	this.wrap_localCOM = nape.geom.Vec2.get(this.localCOMx,this.localCOMy,null);
	this.wrap_localCOM.zpp_inner.inuse = true;
	this.wrap_localCOM.zpp_inner._validate = function() {
		me.wrap_localCOM.zpp_inner.x = me.localCOMx;
		me.wrap_localCOM.zpp_inner.y = me.localCOMy;
	};
	this.wrap_localCOM.zpp_inner._invalidate = function(x) {
		me.localCOMx = x.x;
		me.localCOMy = x.y;
		{
			me.zip_localCOM = true;
			{
				me.zip_area_inertia = true;
				if(me.body != null) {
					me.body.invalidate_localCOM();
					me.body.invalidate_mass();
					me.body.invalidate_inertia();
				}
			}
			me.zip_angDrag = true;
			{
				me.zip_worldCOM = true;
				{
					me.zip_aabb = true;
					if(me.body != null) me.body.zip_aabb = true;
				}
			}
			if(me.body != null) me.body.invalidate_localCOM();
		}
		if(me.body != null) me.body.wake();
	};
	this.wrap_localCOM.zpp_inner._immutable = function() {
		if(me.body != null && me.body.type == 1 && me.body.space != null) throw "Error: Cannot modify localCOM of Circle added to a static Body whilst within a Space";
	};
}
zpp_nape.shape.ZPP_Circle.prototype.__validate_aabb = function() {
	if(this.zip_worldCOM) {
		if(this.body != null) {
			this.zip_worldCOM = false;
			if(this.zip_localCOM) {
				this.zip_localCOM = false;
				if(this.type == 1) this.polygon.__validate_localCOM();
				if(this.wrap_localCOM != null) {
					this.wrap_localCOM.zpp_inner.x = this.localCOMx;
					this.wrap_localCOM.zpp_inner.y = this.localCOMy;
				}
			}
			this.body.validate_axis();
			this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
			this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			if(this.wrap_worldCOM != null) {
				this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
				this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
			}
		}
	}
	var rx = this.radius;
	var ry = this.radius;
	this.aabb.minx = this.worldCOMx - rx;
	this.aabb.miny = this.worldCOMy - ry;
	this.aabb.maxx = this.worldCOMx + rx;
	this.aabb.maxy = this.worldCOMy + ry;
}
zpp_nape.shape.ZPP_Circle.prototype.__validate_area_inertia = function() {
	var r2 = this.radius * this.radius;
	this.area = r2 * Math.PI;
	this.inertia = r2 * 0.5 + (this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
}
zpp_nape.shape.ZPP_Circle.prototype.__validate_angDrag = function() {
	var lc = this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy;
	var r2 = this.radius * this.radius;
	var skin = this.material.dynamicFriction * 2.5;
	this.angDrag = (lc + 2 * r2) * skin + 0.5 * 100 * (1 + 0.5) * lc;
	this.angDrag /= 2 * (lc + 0.5 * r2);
}
zpp_nape.shape.ZPP_Circle.prototype.__scale = function(sx,sy) {
	var factor = ((sx < 0?-sx:sx) + (sy < 0?-sy:sy)) / 2;
	this.radius *= factor < 0?-factor:factor;
	{
		{
			this.zip_area_inertia = true;
			if(this.body != null) {
				this.body.invalidate_localCOM();
				this.body.invalidate_mass();
				this.body.invalidate_inertia();
			}
		}
		this.zip_angDrag = true;
		{
			this.zip_aabb = true;
			if(this.body != null) this.body.zip_aabb = true;
		}
		if(this.body != null) this.body.wake();
	}
	if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
		this.localCOMx *= sx;
		this.localCOMy *= sy;
		{
			this.zip_localCOM = true;
			{
				this.zip_area_inertia = true;
				if(this.body != null) {
					this.body.invalidate_localCOM();
					this.body.invalidate_mass();
					this.body.invalidate_inertia();
				}
			}
			this.zip_angDrag = true;
			{
				this.zip_worldCOM = true;
				{
					this.zip_aabb = true;
					if(this.body != null) this.body.zip_aabb = true;
				}
			}
			if(this.body != null) this.body.invalidate_localCOM();
		}
	}
}
zpp_nape.shape.ZPP_Circle.prototype.__translate = function(x,y) {
	var t = 1.0;
	this.localCOMx += x * t;
	this.localCOMy += y * t;
	{
		this.zip_localCOM = true;
		{
			this.zip_area_inertia = true;
			if(this.body != null) {
				this.body.invalidate_localCOM();
				this.body.invalidate_mass();
				this.body.invalidate_inertia();
			}
		}
		this.zip_angDrag = true;
		{
			this.zip_worldCOM = true;
			{
				this.zip_aabb = true;
				if(this.body != null) this.body.zip_aabb = true;
			}
		}
		if(this.body != null) this.body.invalidate_localCOM();
	}
}
zpp_nape.shape.ZPP_Circle.prototype.__rotate = function(x,y) {
	if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
		var tx;
		var ty;
		tx = y * this.localCOMx - x * this.localCOMy;
		ty = this.localCOMx * x + this.localCOMy * y;
		this.localCOMx = tx;
		this.localCOMy = ty;
		{
			this.zip_localCOM = true;
			{
				this.zip_area_inertia = true;
				if(this.body != null) {
					this.body.invalidate_localCOM();
					this.body.invalidate_mass();
					this.body.invalidate_inertia();
				}
			}
			this.zip_angDrag = true;
			{
				this.zip_worldCOM = true;
				{
					this.zip_aabb = true;
					if(this.body != null) this.body.zip_aabb = true;
				}
			}
			if(this.body != null) this.body.invalidate_localCOM();
		}
	}
}
zpp_nape.shape.ZPP_Circle.prototype.__transform = function(m) {
	var det = m.zpp_inner.a * m.zpp_inner.d - m.zpp_inner.b * m.zpp_inner.c;
	if(det < 0) det = -det;
	this.radius *= Math.sqrt(det);
	var t = m.zpp_inner.a * this.localCOMx + m.zpp_inner.b * this.localCOMy + m.zpp_inner.tx;
	this.localCOMy = m.zpp_inner.c * this.localCOMx + m.zpp_inner.d * this.localCOMy + m.zpp_inner.ty;
	this.localCOMx = t;
	{
		{
			this.zip_area_inertia = true;
			if(this.body != null) {
				this.body.invalidate_localCOM();
				this.body.invalidate_mass();
				this.body.invalidate_inertia();
			}
		}
		this.zip_angDrag = true;
		{
			this.zip_aabb = true;
			if(this.body != null) this.body.zip_aabb = true;
		}
		if(this.body != null) this.body.wake();
	}
	{
		this.zip_localCOM = true;
		{
			this.zip_area_inertia = true;
			if(this.body != null) {
				this.body.invalidate_localCOM();
				this.body.invalidate_mass();
				this.body.invalidate_inertia();
			}
		}
		this.zip_angDrag = true;
		{
			this.zip_worldCOM = true;
			{
				this.zip_aabb = true;
				if(this.body != null) this.body.zip_aabb = true;
			}
		}
		if(this.body != null) this.body.invalidate_localCOM();
	}
}
zpp_nape.shape.ZPP_Circle.prototype.__copy = function() {
	var ret = new nape.shape.Circle(this.radius).zpp_inner_zn;
	ret.localCOMx = this.localCOMx;
	ret.localCOMy = this.localCOMy;
	ret.zip_localCOM = false;
	return ret;
}
zpp_nape.shape.ZPP_Circle.prototype.__class__ = zpp_nape.shape.ZPP_Circle;
if(!jeash.system) jeash.system = {}
jeash.system.LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if( checkPolicyFile === $_ ) return;
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
}
jeash.system.LoaderContext.__name__ = ["jeash","system","LoaderContext"];
jeash.system.LoaderContext.prototype.applicationDomain = null;
jeash.system.LoaderContext.prototype.checkPolicyFile = null;
jeash.system.LoaderContext.prototype.securityDomain = null;
jeash.system.LoaderContext.prototype.__class__ = jeash.system.LoaderContext;
nape.constraint.DistanceJoint = function(body1,body2,anchor1,anchor2,jointMin,jointMax) {
	if( body1 === $_ ) return;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_DistanceJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	if(body1 == null) throw "Error: Constraint::" + "body1" + " cannot be null";
	if(body1.zpp_inner != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = body1.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != body1.zpp_inner) body1.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body1.zpp_inner.wake();
	}
	if(this.zpp_inner_zn.b1 == null) null; else this.zpp_inner_zn.b1.outer;
	if(body2 == null) throw "Error: Constraint::" + "body2" + " cannot be null";
	if(body2.zpp_inner != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = body2.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != body2.zpp_inner) body2.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body2.zpp_inner.wake();
	}
	if(this.zpp_inner_zn.b2 == null) null; else this.zpp_inner_zn.b2.outer;
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	{
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		this.zpp_inner_zn.wrap_a1;
	}
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	{
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		this.zpp_inner_zn.wrap_a2;
	}
	if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
	if(jointMin < 0) throw "Error: DistanceJoint::jointMin must be >= 0";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
	if(jointMax < 0) throw "Error: DistanceJoint::jointMax must be >= 0";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
}
nape.constraint.DistanceJoint.__name__ = ["nape","constraint","DistanceJoint"];
nape.constraint.DistanceJoint.__super__ = nape.constraint.Constraint;
for(var k in nape.constraint.Constraint.prototype ) nape.constraint.DistanceJoint.prototype[k] = nape.constraint.Constraint.prototype[k];
nape.constraint.DistanceJoint.prototype.zpp_inner_zn = null;
nape.constraint.DistanceJoint.prototype.body1 = null;
nape.constraint.DistanceJoint.prototype.flibget_body1 = function() {
	return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
}
nape.constraint.DistanceJoint.prototype.flibset_body1 = function(body1) {
	if(body1 == null) throw "Error: Constraint::" + "body1" + " cannot be null";
	if(body1.zpp_inner != this.zpp_inner_zn.b1) {
		if(this.zpp_inner_zn.b1 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
		}
		this.zpp_inner_zn.b1 = body1.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != body1.zpp_inner) body1.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body1.zpp_inner.wake();
	}
	return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
}
nape.constraint.DistanceJoint.prototype.body2 = null;
nape.constraint.DistanceJoint.prototype.flibget_body2 = function() {
	return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
}
nape.constraint.DistanceJoint.prototype.flibset_body2 = function(body2) {
	if(body2 == null) throw "Error: Constraint::" + "body2" + " cannot be null";
	if(body2.zpp_inner != this.zpp_inner_zn.b2) {
		if(this.zpp_inner_zn.b2 != null) {
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
		}
		this.zpp_inner_zn.b2 = body2.zpp_inner;
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != body2.zpp_inner) body2.zpp_inner.constraints.add(this.zpp_inner);
		this.zpp_inner.wake();
		body2.zpp_inner.wake();
	}
	return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
}
nape.constraint.DistanceJoint.prototype.anchor1 = null;
nape.constraint.DistanceJoint.prototype.flibget_anchor1 = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this));
}
nape.constraint.DistanceJoint.prototype.flibset_anchor1 = function(anchor1) {
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this));
}
nape.constraint.DistanceJoint.prototype.anchor2 = null;
nape.constraint.DistanceJoint.prototype.flibget_anchor2 = function() {
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this));
}
nape.constraint.DistanceJoint.prototype.flibset_anchor2 = function(anchor2) {
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	return (function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this));
}
nape.constraint.DistanceJoint.prototype.jointMin = null;
nape.constraint.DistanceJoint.prototype.flibget_jointMin = function() {
	return this.zpp_inner_zn.jointMin;
}
nape.constraint.DistanceJoint.prototype.flibset_jointMin = function(jointMin) {
	if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
	if(jointMin < 0) throw "Error: DistanceJoint::jointMin must be >= 0";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMin;
}
nape.constraint.DistanceJoint.prototype.jointMax = null;
nape.constraint.DistanceJoint.prototype.flibget_jointMax = function() {
	return this.zpp_inner_zn.jointMax;
}
nape.constraint.DistanceJoint.prototype.flibset_jointMax = function(jointMax) {
	if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
	if(jointMax < 0) throw "Error: DistanceJoint::jointMax must be >= 0";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	return this.zpp_inner_zn.jointMax;
}
nape.constraint.DistanceJoint.prototype.slack = null;
nape.constraint.DistanceJoint.prototype.flibget_slack = function() {
	return this.zpp_inner_zn.slack;
}
nape.constraint.DistanceJoint.prototype.impulse = function() {
	var ret = new nape.geom.MatMN(1,1);
	{
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc + this.zpp_inner_zn.pjAcc;
	}
	return ret;
}
nape.constraint.DistanceJoint.prototype.bodyImpulse = function(body) {
	if(body == null) throw "Error: Cannot evaluate impulse on null body";
	if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
	if(!this.zpp_inner.active) return new nape.geom.Vec3(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
}
nape.constraint.DistanceJoint.prototype.__class__ = nape.constraint.DistanceJoint;
zpp_nape.phys.ZPP_Material = function(p) {
	if( p === $_ ) return;
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.elasticity = 0;
	this.dynamicFriction = 1;
	this.staticFriction = 2;
	this.density = 0.001;
	this.rollingFriction = 0.01;
}
zpp_nape.phys.ZPP_Material.__name__ = ["zpp_nape","phys","ZPP_Material"];
zpp_nape.phys.ZPP_Material.zpp_pool = null;
zpp_nape.phys.ZPP_Material.prototype.next = null;
zpp_nape.phys.ZPP_Material.prototype.outer = null;
zpp_nape.phys.ZPP_Material.prototype.wrapper = function() {
	if(this.outer == null) {
		this.outer = new nape.phys.Material();
		var o = this.outer.zpp_inner;
		o.outer = null;
		o.next = zpp_nape.phys.ZPP_Material.zpp_pool;
		zpp_nape.phys.ZPP_Material.zpp_pool = o;
		this.outer.zpp_inner = this;
	}
	return this.outer;
}
zpp_nape.phys.ZPP_Material.prototype.free = function() {
	this.outer = null;
}
zpp_nape.phys.ZPP_Material.prototype.alloc = function() {
}
zpp_nape.phys.ZPP_Material.prototype.shapes = null;
zpp_nape.phys.ZPP_Material.prototype.wrap_shapes = null;
zpp_nape.phys.ZPP_Material.prototype.feature_cons = function() {
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
}
zpp_nape.phys.ZPP_Material.prototype.addShape = function(shape) {
	this.shapes.add(shape);
}
zpp_nape.phys.ZPP_Material.prototype.remShape = function(shape) {
	this.shapes.remove(shape);
}
zpp_nape.phys.ZPP_Material.prototype.dynamicFriction = null;
zpp_nape.phys.ZPP_Material.prototype.staticFriction = null;
zpp_nape.phys.ZPP_Material.prototype.density = null;
zpp_nape.phys.ZPP_Material.prototype.elasticity = null;
zpp_nape.phys.ZPP_Material.prototype.rollingFriction = null;
zpp_nape.phys.ZPP_Material.prototype.copy = function() {
	var ret = new zpp_nape.phys.ZPP_Material();
	ret.dynamicFriction = this.dynamicFriction;
	ret.staticFriction = this.staticFriction;
	ret.density = this.density;
	ret.elasticity = this.elasticity;
	ret.rollingFriction = this.rollingFriction;
	return ret;
}
zpp_nape.phys.ZPP_Material.prototype.set = function(x) {
	this.dynamicFriction = x.dynamicFriction;
	this.staticFriction = x.staticFriction;
	this.density = x.density;
	this.elasticity = x.elasticity;
	this.rollingFriction = x.rollingFriction;
}
zpp_nape.phys.ZPP_Material.prototype.invalidate = function(x) {
	var cx_ite = this.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		s.invalidate_material(x);
		cx_ite = cx_ite.next;
	}
}
zpp_nape.phys.ZPP_Material.prototype.__class__ = zpp_nape.phys.ZPP_Material;
haxe.Timer = function(time_ms) {
	if( time_ms === $_ ) return;
	this.id = haxe.Timer.arr.length;
	haxe.Timer.arr[this.id] = this;
	this.timerId = window.setInterval("haxe.Timer.arr[" + this.id + "].run();",time_ms);
}
haxe.Timer.__name__ = ["haxe","Timer"];
haxe.Timer.delay = function(f,time_ms) {
	var t = new haxe.Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
}
haxe.Timer.measure = function(f,pos) {
	var t0 = haxe.Timer.stamp();
	var r = f();
	haxe.Log.trace(haxe.Timer.stamp() - t0 + "s",pos);
	return r;
}
haxe.Timer.stamp = function() {
	return Date.now().getTime() / 1000;
}
haxe.Timer.prototype.id = null;
haxe.Timer.prototype.timerId = null;
haxe.Timer.prototype.stop = function() {
	if(this.id == null) return;
	window.clearInterval(this.timerId);
	haxe.Timer.arr[this.id] = null;
	if(this.id > 100 && this.id == haxe.Timer.arr.length - 1) {
		var p = this.id - 1;
		while(p >= 0 && haxe.Timer.arr[p] == null) p--;
		haxe.Timer.arr = haxe.Timer.arr.slice(0,p + 1);
	}
	this.id = null;
}
haxe.Timer.prototype.run = function() {
}
haxe.Timer.prototype.__class__ = haxe.Timer;
jeash.utils.Endian = { __ename__ : ["jeash","utils","Endian"], __constructs__ : ["BIG_ENDIAN","LITTLE_ENDIAN"] }
jeash.utils.Endian.BIG_ENDIAN = ["BIG_ENDIAN",0];
jeash.utils.Endian.BIG_ENDIAN.toString = $estr;
jeash.utils.Endian.BIG_ENDIAN.__enum__ = jeash.utils.Endian;
jeash.utils.Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",1];
jeash.utils.Endian.LITTLE_ENDIAN.toString = $estr;
jeash.utils.Endian.LITTLE_ENDIAN.__enum__ = jeash.utils.Endian;
jeash.display.GfxPoint = function(inX,inY,inCX,inCY,inType) {
	if( inX === $_ ) return;
	this.x = inX;
	this.y = inY;
	this.cx = inCX;
	this.cy = inCY;
	this.type = inType;
}
jeash.display.GfxPoint.__name__ = ["jeash","display","GfxPoint"];
jeash.display.GfxPoint.prototype.x = null;
jeash.display.GfxPoint.prototype.y = null;
jeash.display.GfxPoint.prototype.cx = null;
jeash.display.GfxPoint.prototype.cy = null;
jeash.display.GfxPoint.prototype.type = null;
jeash.display.GfxPoint.prototype.__class__ = jeash.display.GfxPoint;
jeash.display.LineJob = function(inGrad,inPoint_idx0,inPoint_idx1,inThickness,inAlpha,inColour,inPixel_hinting,inJoints,inCaps,inScale_mode,inMiter_limit) {
	if( inGrad === $_ ) return;
	this.grad = inGrad;
	this.point_idx0 = inPoint_idx0;
	this.point_idx1 = inPoint_idx1;
	this.thickness = inThickness;
	this.alpha = inAlpha;
	this.colour = inColour;
	this.pixel_hinting = inPixel_hinting;
	this.joints = inJoints;
	this.caps = inCaps;
	this.scale_mode = inScale_mode;
	this.miter_limit = inMiter_limit;
}
jeash.display.LineJob.__name__ = ["jeash","display","LineJob"];
jeash.display.LineJob.prototype.grad = null;
jeash.display.LineJob.prototype.point_idx0 = null;
jeash.display.LineJob.prototype.point_idx1 = null;
jeash.display.LineJob.prototype.thickness = null;
jeash.display.LineJob.prototype.alpha = null;
jeash.display.LineJob.prototype.colour = null;
jeash.display.LineJob.prototype.pixel_hinting = null;
jeash.display.LineJob.prototype.joints = null;
jeash.display.LineJob.prototype.caps = null;
jeash.display.LineJob.prototype.scale_mode = null;
jeash.display.LineJob.prototype.miter_limit = null;
jeash.display.LineJob.prototype.__class__ = jeash.display.LineJob;
jeash.display.PointInPathMode = { __ename__ : ["jeash","display","PointInPathMode"], __constructs__ : ["USER_SPACE","DEVICE_SPACE"] }
jeash.display.PointInPathMode.USER_SPACE = ["USER_SPACE",0];
jeash.display.PointInPathMode.USER_SPACE.toString = $estr;
jeash.display.PointInPathMode.USER_SPACE.__enum__ = jeash.display.PointInPathMode;
jeash.display.PointInPathMode.DEVICE_SPACE = ["DEVICE_SPACE",1];
jeash.display.PointInPathMode.DEVICE_SPACE.toString = $estr;
jeash.display.PointInPathMode.DEVICE_SPACE.__enum__ = jeash.display.PointInPathMode;
jeash.display.Graphics = function(inSurface) {
	if( inSurface === $_ ) return;
	if(inSurface == null) {
		this.jeashSurface = js.Lib.document.createElement("canvas");
		this.jeashSurface.width = 0;
		this.jeashSurface.height = 0;
	} else this.jeashSurface = inSurface;
	this.mMatrix = new jeash.geom.Matrix();
	this.mLastMoveID = 0;
	this.mPenX = 0.0;
	this.mPenY = 0.0;
	this.originX = 0;
	this.originY = 0;
	this.mDrawList = new Array();
	this.mPoints = [];
	this.mSolidGradient = null;
	this.mBitmap = null;
	this.mFilling = false;
	this.mFillColour = 0;
	this.mFillAlpha = 0.0;
	this.mLastMoveID = 0;
	this.mNoClip = false;
	this.jeashClearLine();
	this.mLineJobs = [];
	this.jeashChanged = true;
	this.nextDrawIndex = 0;
	this.jeashRenderFrame = 0;
	this.jeashExtentBuffer = 0;
	this.jeashIsTile = false;
	this.jeashExtent = new jeash.geom.Rectangle();
}
jeash.display.Graphics.__name__ = ["jeash","display","Graphics"];
jeash.display.Graphics.jeashDetectIsPointInPathMode = function() {
	var canvas = js.Lib.document.createElement("canvas");
	var ctx = canvas.getContext("2d");
	if(ctx.isPointInPath == null) return jeash.display.PointInPathMode.USER_SPACE;
	ctx.save();
	ctx.translate(1,0);
	ctx.beginPath();
	ctx.rect(0,0,1,1);
	var rv = ctx.isPointInPath(0.3,0.3)?jeash.display.PointInPathMode.USER_SPACE:jeash.display.PointInPathMode.DEVICE_SPACE;
	ctx.restore();
	return rv;
}
jeash.display.Graphics.prototype.jeashSurface = null;
jeash.display.Graphics.prototype.jeashChanged = null;
jeash.display.Graphics.prototype.mPoints = null;
jeash.display.Graphics.prototype.mSolid = null;
jeash.display.Graphics.prototype.mFilling = null;
jeash.display.Graphics.prototype.mFillColour = null;
jeash.display.Graphics.prototype.mFillAlpha = null;
jeash.display.Graphics.prototype.mSolidGradient = null;
jeash.display.Graphics.prototype.mBitmap = null;
jeash.display.Graphics.prototype.mCurrentLine = null;
jeash.display.Graphics.prototype.mLineJobs = null;
jeash.display.Graphics.prototype.mNoClip = null;
jeash.display.Graphics.prototype.mDrawList = null;
jeash.display.Graphics.prototype.mLineDraws = null;
jeash.display.Graphics.prototype.mPenX = null;
jeash.display.Graphics.prototype.mPenY = null;
jeash.display.Graphics.prototype.mLastMoveID = null;
jeash.display.Graphics.prototype.mMatrix = null;
jeash.display.Graphics.prototype.owner = null;
jeash.display.Graphics.prototype.mBoundsDirty = null;
jeash.display.Graphics.prototype.jeashExtent = null;
jeash.display.Graphics.prototype.originX = null;
jeash.display.Graphics.prototype.originY = null;
jeash.display.Graphics.prototype.nextDrawIndex = null;
jeash.display.Graphics.prototype.jeashRenderFrame = null;
jeash.display.Graphics.prototype.jeashExtentBuffer = null;
jeash.display.Graphics.prototype.jeashIsTile = null;
jeash.display.Graphics.prototype.SetSurface = function(inSurface) {
	this.jeashSurface = inSurface;
}
jeash.display.Graphics.prototype.createCanvasColor = function(color,alpha) {
	var r;
	var g;
	var b;
	r = (16711680 & color) >> 16;
	g = (65280 & color) >> 8;
	b = 255 & color;
	return "rgba" + "(" + r + "," + g + "," + b + "," + alpha + ")";
}
jeash.display.Graphics.prototype.createCanvasGradient = function(ctx,g) {
	var gradient;
	var matrix = g.matrix;
	if((g.flags & jeash.display.Graphics.RADIAL) == 0) {
		var p1 = matrix.transformPoint(new jeash.geom.Point(-819.2,0));
		var p2 = matrix.transformPoint(new jeash.geom.Point(819.2,0));
		gradient = ctx.createLinearGradient(p1.x,p1.y,p2.x,p2.y);
	} else {
		var p1 = matrix.transformPoint(new jeash.geom.Point(g.focal * 819.2,0));
		var p2 = matrix.transformPoint(new jeash.geom.Point(0,819.2));
		gradient = ctx.createRadialGradient(p1.x,p1.y,0,p2.x,p1.y,p2.y);
	}
	var _g = 0, _g1 = g.points;
	while(_g < _g1.length) {
		var point = _g1[_g];
		++_g;
		var color = this.createCanvasColor(point.col,point.alpha);
		var pos = point.ratio / 255;
		gradient.addColorStop(pos,color);
	}
	return gradient;
}
jeash.display.Graphics.prototype.jeashRender = function(maskHandle,matrix) {
	if(!this.jeashChanged) return false;
	this.ClosePolygon(true);
	if(this.jeashExtent.width - this.jeashExtent.x != this.jeashSurface.width || this.jeashExtent.height - this.jeashExtent.y != this.jeashSurface.height) this.jeashAdjustSurface();
	var ctx = (function($this) {
		var $r;
		try {
			$r = $this.jeashSurface.getContext("2d");
		} catch( e ) {
			$r = (function($this) {
				var $r;
				jeash.Lib.trace("2d canvas API not implemented for: " + $this.jeashSurface);
				$r = null;
				return $r;
			}($this));
		}
		return $r;
	}(this));
	if(ctx == null) return false;
	var len = this.mDrawList.length;
	ctx.save();
	if(this.jeashExtent.x != 0 || this.jeashExtent.y != 0) ctx.translate(-this.jeashExtent.x,-this.jeashExtent.y);
	var _g = this.nextDrawIndex;
	while(_g < len) {
		var i = _g++;
		var d = this.mDrawList[len - 1 - i];
		if(d.lineJobs.length > 0) {
			var _g1 = 0, _g2 = d.lineJobs;
			while(_g1 < _g2.length) {
				var lj = _g2[_g1];
				++_g1;
				ctx.lineWidth = lj.thickness;
				switch(lj.joints) {
				case jeash.display.Graphics.CORNER_ROUND:
					ctx.lineJoin = "round";
					break;
				case jeash.display.Graphics.CORNER_MITER:
					ctx.lineJoin = "miter";
					break;
				case jeash.display.Graphics.CORNER_BEVEL:
					ctx.lineJoin = "bevel";
					break;
				}
				switch(lj.caps) {
				case jeash.display.Graphics.END_ROUND:
					ctx.lineCap = "round";
					break;
				case jeash.display.Graphics.END_SQUARE:
					ctx.lineCap = "square";
					break;
				case jeash.display.Graphics.END_NONE:
					ctx.lineCap = "butt";
					break;
				}
				ctx.miterLimit = lj.miter_limit;
				if(lj.grad != null) ctx.strokeStyle = this.createCanvasGradient(ctx,lj.grad); else ctx.strokeStyle = this.createCanvasColor(lj.colour,lj.alpha);
				ctx.beginPath();
				var _g4 = lj.point_idx0, _g3 = lj.point_idx1 + 1;
				while(_g4 < _g3) {
					var i1 = _g4++;
					var p = d.points[i1];
					switch(p.type) {
					case jeash.display.Graphics.MOVE:
						ctx.moveTo(p.x,p.y);
						break;
					case jeash.display.Graphics.CURVE:
						ctx.quadraticCurveTo(p.cx,p.cy,p.x,p.y);
						break;
					default:
						ctx.lineTo(p.x,p.y);
					}
				}
				ctx.closePath();
				ctx.stroke();
			}
		} else {
			ctx.beginPath();
			var _g1 = 0, _g2 = d.points;
			while(_g1 < _g2.length) {
				var p = _g2[_g1];
				++_g1;
				switch(p.type) {
				case jeash.display.Graphics.MOVE:
					ctx.moveTo(p.x,p.y);
					break;
				case jeash.display.Graphics.CURVE:
					ctx.quadraticCurveTo(p.cx,p.cy,p.x,p.y);
					break;
				default:
					ctx.lineTo(p.x,p.y);
				}
			}
			ctx.closePath();
		}
		var fillColour = d.fillColour;
		var fillAlpha = d.fillAlpha;
		if(fillAlpha >= 0. && fillAlpha <= 1.) {
			var g = d.solidGradient;
			if(g != null) ctx.fillStyle = this.createCanvasGradient(ctx,g); else ctx.fillStyle = this.createCanvasColor(fillColour,fillAlpha);
		}
		ctx.fill();
		ctx.save();
		var bitmap = d.bitmap;
		if(bitmap != null) {
			ctx.clip();
			if(this.jeashExtent.x != 0 || this.jeashExtent.y != 0) ctx.translate(-this.jeashExtent.x,-this.jeashExtent.y);
			var img = bitmap.texture_buffer;
			var matrix1 = bitmap.matrix;
			if(matrix1 != null) ctx.transform(matrix1.a,matrix1.b,matrix1.c,matrix1.d,matrix1.tx,matrix1.ty);
			ctx.drawImage(img,0,0);
		}
		ctx.restore();
	}
	ctx.restore();
	this.jeashChanged = false;
	this.nextDrawIndex = len;
	return true;
}
jeash.display.Graphics.prototype.jeashHitTest = function(inX,inY) {
	var ctx = (function($this) {
		var $r;
		try {
			$r = $this.jeashSurface.getContext("2d");
		} catch( e ) {
			$r = (function($this) {
				var $r;
				jeash.Lib.trace("2d canvas API not implemented for: " + $this.jeashSurface);
				$r = null;
				return $r;
			}($this));
		}
		return $r;
	}(this));
	if(ctx == null) return false;
	ctx.save();
	var _g = 0, _g1 = this.mDrawList;
	while(_g < _g1.length) {
		var d = _g1[_g];
		++_g;
		ctx.beginPath();
		var _g2 = 0, _g3 = d.points;
		while(_g2 < _g3.length) {
			var p = _g3[_g2];
			++_g2;
			switch(p.type) {
			case jeash.display.Graphics.MOVE:
				ctx.moveTo(p.x,p.y);
				break;
			case jeash.display.Graphics.CURVE:
				ctx.quadraticCurveTo(p.cx,p.cy,p.x,p.y);
				break;
			default:
				ctx.lineTo(p.x,p.y);
			}
		}
		ctx.closePath();
		if(ctx.isPointInPath(inX,inY)) return true;
	}
	ctx.restore();
	return false;
}
jeash.display.Graphics.prototype.blit = function(inTexture) {
	this.ClosePolygon(true);
	var ctx = (function($this) {
		var $r;
		try {
			$r = $this.jeashSurface.getContext("2d");
		} catch( e ) {
			$r = (function($this) {
				var $r;
				jeash.Lib.trace("2d canvas API not implemented for: " + $this.jeashSurface);
				$r = null;
				return $r;
			}($this));
		}
		return $r;
	}(this));
	if(ctx != null) ctx.drawImage(inTexture.mTextureBuffer,this.mPenX,this.mPenY);
}
jeash.display.Graphics.prototype.lineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
	this.AddLineSegment();
	if(thickness == null) {
		this.jeashClearLine();
		return;
	} else {
		this.mCurrentLine.grad = null;
		this.mCurrentLine.thickness = thickness;
		this.mCurrentLine.colour = color == null?0:color;
		this.mCurrentLine.alpha = alpha == null?1.0:alpha;
		this.mCurrentLine.miter_limit = miterLimit == null?3.0:miterLimit;
		this.mCurrentLine.pixel_hinting = pixelHinting == null || !pixelHinting?0:jeash.display.Graphics.PIXEL_HINTING;
	}
	if(caps != null) {
		switch( (caps)[1] ) {
		case 1:
			this.mCurrentLine.caps = jeash.display.Graphics.END_ROUND;
			break;
		case 2:
			this.mCurrentLine.caps = jeash.display.Graphics.END_SQUARE;
			break;
		case 0:
			this.mCurrentLine.caps = jeash.display.Graphics.END_NONE;
			break;
		}
	}
	this.mCurrentLine.scale_mode = jeash.display.Graphics.SCALE_NORMAL;
	if(scaleMode != null) {
		switch( (scaleMode)[1] ) {
		case 2:
			this.mCurrentLine.scale_mode = jeash.display.Graphics.SCALE_NORMAL;
			break;
		case 3:
			this.mCurrentLine.scale_mode = jeash.display.Graphics.SCALE_VERTICAL;
			break;
		case 0:
			this.mCurrentLine.scale_mode = jeash.display.Graphics.SCALE_HORIZONTAL;
			break;
		case 1:
			this.mCurrentLine.scale_mode = jeash.display.Graphics.SCALE_NONE;
			break;
		}
	}
	this.mCurrentLine.joints = jeash.display.Graphics.CORNER_ROUND;
	if(joints != null) {
		switch( (joints)[1] ) {
		case 1:
			this.mCurrentLine.joints = jeash.display.Graphics.CORNER_ROUND;
			break;
		case 0:
			this.mCurrentLine.joints = jeash.display.Graphics.CORNER_MITER;
			break;
		case 2:
			this.mCurrentLine.joints = jeash.display.Graphics.CORNER_BEVEL;
			break;
		}
	}
}
jeash.display.Graphics.prototype.lineGradientStyle = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	this.mCurrentLine.grad = this.CreateGradient(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
}
jeash.display.Graphics.prototype.beginFill = function(color,alpha) {
	this.ClosePolygon(true);
	this.mFillColour = color;
	this.mFillAlpha = alpha == null?1.0:alpha;
	this.mFilling = true;
	this.mSolidGradient = null;
	this.mBitmap = null;
}
jeash.display.Graphics.prototype.endFill = function() {
	this.ClosePolygon(true);
}
jeash.display.Graphics.prototype.DrawEllipse = function(x,y,rx,ry) {
	this.moveTo(x + rx,y);
	this.curveTo(rx + x,-0.4142 * ry + y,0.7071 * rx + x,-0.7071 * ry + y);
	this.curveTo(0.4142 * rx + x,-ry + y,x,-ry + y);
	this.curveTo(-0.4142 * rx + x,-ry + y,-0.7071 * rx + x,-0.7071 * ry + y);
	this.curveTo(-rx + x,-0.4142 * ry + y,-rx + x,y);
	this.curveTo(-rx + x,0.4142 * ry + y,-0.7071 * rx + x,0.7071 * ry + y);
	this.curveTo(-0.4142 * rx + x,ry + y,x,ry + y);
	this.curveTo(0.4142 * rx + x,ry + y,0.7071 * rx + x,0.7071 * ry + y);
	this.curveTo(rx + x,0.4142 * ry + y,rx + x,y);
}
jeash.display.Graphics.prototype.drawEllipse = function(x,y,rx,ry) {
	this.ClosePolygon(false);
	rx /= 2;
	ry /= 2;
	this.DrawEllipse(x + rx,y + ry,rx,ry);
	this.ClosePolygon(false);
}
jeash.display.Graphics.prototype.drawCircle = function(x,y,rad) {
	this.ClosePolygon(false);
	this.DrawEllipse(x,y,rad,rad);
	this.ClosePolygon(false);
}
jeash.display.Graphics.prototype.drawRect = function(x,y,width,height) {
	this.ClosePolygon(false);
	this.moveTo(x,y);
	this.lineTo(x + width,y);
	this.lineTo(x + width,y + height);
	this.lineTo(x,y + height);
	this.lineTo(x,y);
	this.ClosePolygon(false);
}
jeash.display.Graphics.prototype.drawRoundRect = function(x,y,width,height,rx,ry) {
	rx *= 0.5;
	ry *= 0.5;
	var w = width * 0.5;
	x += w;
	if(rx > w) rx = w;
	var lw = w - rx;
	var w_ = lw + rx * Math.sin(Math.PI / 4);
	var cw_ = lw + rx * Math.tan(Math.PI / 8);
	var h = height * 0.5;
	y += h;
	if(ry > h) ry = h;
	var lh = h - ry;
	var h_ = lh + ry * Math.sin(Math.PI / 4);
	var ch_ = lh + ry * Math.tan(Math.PI / 8);
	this.ClosePolygon(false);
	this.moveTo(x + w,y + lh);
	this.curveTo(x + w,y + ch_,x + w_,y + h_);
	this.curveTo(x + cw_,y + h,x + lw,y + h);
	this.lineTo(x - lw,y + h);
	this.curveTo(x - cw_,y + h,x - w_,y + h_);
	this.curveTo(x - w,y + ch_,x - w,y + lh);
	this.lineTo(x - w,y - lh);
	this.curveTo(x - w,y - ch_,x - w_,y - h_);
	this.curveTo(x - cw_,y - h,x - lw,y - h);
	this.lineTo(x + lw,y - h);
	this.curveTo(x + cw_,y - h,x + w_,y - h_);
	this.curveTo(x + w,y - ch_,x + w,y - lh);
	this.lineTo(x + w,y + lh);
	this.ClosePolygon(false);
}
jeash.display.Graphics.prototype.CreateGradient = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var points = new Array();
	var _g1 = 0, _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		points.push({ col : colors[i], alpha : alphas[i], ratio : ratios[i]});
	}
	var flags = 0;
	if(type == jeash.display.GradientType.RADIAL) flags |= jeash.display.Graphics.RADIAL;
	if(spreadMethod == jeash.display.SpreadMethod.REPEAT) flags |= jeash.display.Graphics.SPREAD_REPEAT; else if(spreadMethod == jeash.display.SpreadMethod.REFLECT) flags |= jeash.display.Graphics.SPREAD_REFLECT;
	if(matrix == null) {
		matrix = new jeash.geom.Matrix();
		matrix.createGradientBox(25,25);
	} else matrix = matrix.clone();
	var focal = focalPointRatio == null?0:focalPointRatio;
	return { points : points, matrix : matrix, flags : flags, focal : focal};
}
jeash.display.Graphics.prototype.beginGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	this.ClosePolygon(true);
	this.mFilling = true;
	this.mBitmap = null;
	this.mSolidGradient = this.CreateGradient(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
}
jeash.display.Graphics.prototype.beginBitmapFill = function(bitmap,matrix,in_repeat,in_smooth) {
	this.ClosePolygon(true);
	var repeat = in_repeat == null?true:in_repeat;
	var smooth = in_smooth == null?false:in_smooth;
	this.mFilling = true;
	this.mSolidGradient = null;
	this.jeashExpandStandardExtent(bitmap.mTextureBuffer != null?bitmap.mTextureBuffer.width:0,bitmap.mTextureBuffer != null?bitmap.mTextureBuffer.height:0);
	this.mBitmap = { texture_buffer : bitmap.mTextureBuffer, matrix : matrix == null?matrix:matrix.clone(), flags : (repeat?jeash.display.Graphics.BMP_REPEAT:0) | (smooth?jeash.display.Graphics.BMP_SMOOTH:0)};
}
jeash.display.Graphics.prototype.jeashClearLine = function() {
	this.mCurrentLine = new jeash.display.LineJob(null,-1,-1,0.0,0.0,0,1,jeash.display.Graphics.CORNER_ROUND,jeash.display.Graphics.END_ROUND,jeash.display.Graphics.SCALE_NORMAL,3.0);
}
jeash.display.Graphics.prototype.jeashClearCanvas = function() {
	if(this.jeashSurface != null) {
		var w = this.jeashSurface.width;
		this.jeashSurface.width = w;
	}
}
jeash.display.Graphics.prototype.clear = function() {
	this.jeashClearLine();
	this.mPenX = 0.0;
	this.mPenY = 0.0;
	this.mDrawList = new Array();
	this.nextDrawIndex = 0;
	this.mPoints = [];
	this.mSolidGradient = null;
	this.mFilling = false;
	this.mFillColour = 0;
	this.mFillAlpha = 0.0;
	this.mLastMoveID = 0;
	this.jeashClearCanvas();
	this.mLineJobs = [];
	if(!this.mBoundsDirty) {
		this.mBoundsDirty = true;
		if(this.owner != null) this.owner.jeashInvalidateBounds();
	}
}
jeash.display.Graphics.prototype.jeashExpandStandardExtent = function(x,y) {
	var maxX, minX, maxY, minY;
	minX = this.jeashExtent.x;
	minY = this.jeashExtent.y;
	maxX = this.jeashExtent.width + minX;
	maxY = this.jeashExtent.height + minY;
	maxX = x > maxX?x:maxX;
	minX = x < minX?x:minX;
	maxY = y > maxY?y:maxY;
	minY = y < minY?y:minY;
	this.jeashExtent.x = minX;
	this.jeashExtent.y = minY;
	this.jeashExtent.width = maxX - minX;
	this.jeashExtent.height = maxY - minY;
}
jeash.display.Graphics.prototype.moveTo = function(inX,inY) {
	this.mPenX = inX;
	this.mPenY = inY;
	this.jeashExpandStandardExtent(inX,inY);
	if(!this.mFilling) this.ClosePolygon(false); else {
		this.AddLineSegment();
		this.mLastMoveID = this.mPoints.length;
		this.mPoints.push(new jeash.display.GfxPoint(this.mPenX,this.mPenY,0.0,0.0,jeash.display.Graphics.MOVE));
	}
}
jeash.display.Graphics.prototype.lineTo = function(inX,inY) {
	var pid = this.mPoints.length;
	if(pid == 0) {
		this.mPoints.push(new jeash.display.GfxPoint(this.mPenX,this.mPenY,0.0,0.0,jeash.display.Graphics.MOVE));
		pid++;
	}
	this.mPenX = inX;
	this.mPenY = inY;
	this.jeashExpandStandardExtent(inX,inY);
	this.mPoints.push(new jeash.display.GfxPoint(this.mPenX,this.mPenY,0.0,0.0,jeash.display.Graphics.LINE));
	if(this.mCurrentLine.grad != null || this.mCurrentLine.alpha > 0) {
		if(this.mCurrentLine.point_idx0 < 0) this.mCurrentLine.point_idx0 = pid - 1;
		this.mCurrentLine.point_idx1 = pid;
	}
	if(!this.mFilling) this.ClosePolygon(false);
}
jeash.display.Graphics.prototype.curveTo = function(inCX,inCY,inX,inY) {
	var pid = this.mPoints.length;
	if(pid == 0) {
		this.mPoints.push(new jeash.display.GfxPoint(this.mPenX,this.mPenY,0.0,0.0,jeash.display.Graphics.MOVE));
		pid++;
	}
	this.mPenX = inX;
	this.mPenY = inY;
	this.jeashExpandStandardExtent(inX,inY);
	this.mPoints.push(new jeash.display.GfxPoint(inX,inY,inCX,inCY,jeash.display.Graphics.CURVE));
	if(this.mCurrentLine.grad != null || this.mCurrentLine.alpha > 0) {
		if(this.mCurrentLine.point_idx0 < 0) this.mCurrentLine.point_idx0 = pid - 1;
		this.mCurrentLine.point_idx1 = pid;
	}
}
jeash.display.Graphics.prototype.flush = function() {
	this.ClosePolygon(true);
}
jeash.display.Graphics.prototype.AddDrawable = function(inDrawable) {
	if(inDrawable == null) return;
	this.mDrawList.unshift(inDrawable);
}
jeash.display.Graphics.prototype.AddLineSegment = function() {
	if(this.mCurrentLine.point_idx1 > 0) this.mLineJobs.push(new jeash.display.LineJob(this.mCurrentLine.grad,this.mCurrentLine.point_idx0,this.mCurrentLine.point_idx1,this.mCurrentLine.thickness,this.mCurrentLine.alpha,this.mCurrentLine.colour,this.mCurrentLine.pixel_hinting,this.mCurrentLine.joints,this.mCurrentLine.caps,this.mCurrentLine.scale_mode,this.mCurrentLine.miter_limit));
	this.mCurrentLine.point_idx0 = this.mCurrentLine.point_idx1 = -1;
}
jeash.display.Graphics.prototype.ClosePolygon = function(inCancelFill) {
	var l = this.mPoints.length;
	if(l > 0) {
		if(l > 1) {
			if(this.mFilling && l > 2) {
				if(this.mPoints[this.mLastMoveID].x != this.mPoints[l - 1].x || this.mPoints[this.mLastMoveID].y != this.mPoints[l - 1].y) this.lineTo(this.mPoints[this.mLastMoveID].x,this.mPoints[this.mLastMoveID].y);
			}
			this.AddLineSegment();
			var drawable = { points : this.mPoints, fillColour : this.mFillColour, fillAlpha : this.mFillAlpha, solidGradient : this.mSolidGradient, bitmap : this.mBitmap, lineJobs : this.mLineJobs};
			this.AddDrawable(drawable);
		}
		this.mLineJobs = [];
		this.mPoints = [];
	}
	if(inCancelFill) {
		this.mFillAlpha = 0;
		this.mSolidGradient = null;
		this.mBitmap = null;
		this.mFilling = false;
	}
	this.jeashChanged = true;
	if(!this.mBoundsDirty) {
		this.mBoundsDirty = true;
		if(this.owner != null) this.owner.jeashInvalidateBounds();
	}
}
jeash.display.Graphics.prototype.drawGraphicsData = function(points) {
	var _g = 0;
	while(_g < points.length) {
		var data = points[_g];
		++_g;
		if(data == null) this.mFilling = true; else switch(data.jeashGraphicsDataType) {
		case jeash.display.GraphicsDataType.STROKE:
			var stroke = data;
			if(stroke.fill == null) this.lineStyle(stroke.thickness,0,1.,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit); else switch(stroke.fill.jeashGraphicsFillType) {
			case jeash.display.GraphicsFillType.SOLID_FILL:
				var fill = stroke.fill;
				this.lineStyle(stroke.thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
				break;
			case jeash.display.GraphicsFillType.GRADIENT_FILL:
				var fill = stroke.fill;
				this.lineGradientStyle(fill.type,fill.colors,fill.alphas,fill.ratios,fill.matrix,fill.spreadMethod,fill.interpolationMethod,fill.focalPointRatio);
				break;
			}
			break;
		case jeash.display.GraphicsDataType.PATH:
			var path = data;
			var j = 0;
			var _g2 = 0, _g1 = path.commands.length;
			while(_g2 < _g1) {
				var i = _g2++;
				var command = path.commands[i];
				switch(command) {
				case 1:
					this.moveTo(path.data[j],path.data[j + 1]);
					j = j + 2;
					break;
				case 2:
					this.lineTo(path.data[j],path.data[j + 1]);
					j = j + 2;
					break;
				case 3:
					this.curveTo(path.data[j],path.data[j + 1],path.data[j + 2],path.data[j + 3]);
					j = j + 4;
					break;
				}
			}
			break;
		case jeash.display.GraphicsDataType.SOLID:
			var fill = data;
			this.beginFill(fill.color,fill.alpha);
			break;
		case jeash.display.GraphicsDataType.GRADIENT:
			var fill = data;
			this.beginGradientFill(fill.type,fill.colors,fill.alphas,fill.ratios,fill.matrix,fill.spreadMethod,fill.interpolationMethod,fill.focalPointRatio);
			break;
		}
	}
}
jeash.display.Graphics.prototype.drawTiles = function(sheet,xyid,smooth,flags) {
	if(flags == null) flags = 0;
	if(smooth == null) smooth = false;
	this.jeashIsTile = true;
	jeash.Lib.jeashDrawSurfaceRect(sheet.jeashSurface,this.jeashSurface,xyid[0],xyid[1],sheet.jeashTileRects[xyid[2]]);
	if(flags != 0) {
		if((flags & 1) == 1) jeash.Lib.jeashSetSurfaceScale(this.jeashSurface,xyid[3]);
		if((flags & 2) == 2) jeash.Lib.jeashSetSurfaceRotation(this.jeashSurface,xyid[4]);
		if((flags & 8) == 8) jeash.Lib.jeashSetSurfaceOpacity(this.jeashSurface,xyid[8]);
	}
}
jeash.display.Graphics.prototype.markBoundsClean = function() {
	this.mBoundsDirty = false;
}
jeash.display.Graphics.prototype.markBoundsDirty = function() {
	if(!this.mBoundsDirty) {
		this.mBoundsDirty = true;
		if(this.owner != null) this.owner.jeashInvalidateBounds();
	}
}
jeash.display.Graphics.prototype.getContext = function() {
	try {
		return this.jeashSurface.getContext("2d");
	} catch( e ) {
		jeash.Lib.trace("2d canvas API not implemented for: " + this.jeashSurface);
		return null;
	}
}
jeash.display.Graphics.prototype.jeashAdjustSurface = function() {
	var width = Math.ceil(this.jeashExtent.width - this.jeashExtent.x);
	var height = Math.ceil(this.jeashExtent.height - this.jeashExtent.y);
	if(width > 5000 || height > 5000) return;
	var dstCanvas = js.Lib.document.createElement("canvas");
	var ctx = dstCanvas.getContext("2d");
	dstCanvas.width = width;
	dstCanvas.height = height;
	jeash.Lib.jeashDrawToSurface(this.jeashSurface,dstCanvas);
	if(jeash.Lib.jeashIsOnStage(this.jeashSurface)) {
		jeash.Lib.jeashAppendSurface(dstCanvas);
		jeash.Lib.jeashCopyStyle(this.jeashSurface,dstCanvas);
		jeash.Lib.jeashSwapSurface(this.jeashSurface,dstCanvas);
		jeash.Lib.jeashRemoveSurface(this.jeashSurface);
	}
	this.jeashSurface = dstCanvas;
}
jeash.display.Graphics.prototype.__class__ = jeash.display.Graphics;
zpp_nape.ZPP_Config = function() { }
zpp_nape.ZPP_Config.__name__ = ["zpp_nape","ZPP_Config"];
zpp_nape.ZPP_Config.prototype.__class__ = zpp_nape.ZPP_Config;
$_ = {}
js.Boot.__res = {}
js.Boot.__init();
{
	String.prototype.__class__ = String;
	String.__name__ = ["String"];
	Array.prototype.__class__ = Array;
	Array.__name__ = ["Array"];
	Int = { __name__ : ["Int"]};
	Dynamic = { __name__ : ["Dynamic"]};
	Float = Number;
	Float.__name__ = ["Float"];
	Bool = { __ename__ : ["Bool"]};
	Class = { __name__ : ["Class"]};
	Enum = { };
	Void = { __ename__ : ["Void"]};
}
{
	Math.__name__ = ["Math"];
	Math.NaN = Number["NaN"];
	Math.NEGATIVE_INFINITY = Number["NEGATIVE_INFINITY"];
	Math.POSITIVE_INFINITY = Number["POSITIVE_INFINITY"];
	Math.isFinite = function(i) {
		return isFinite(i);
	};
	Math.isNaN = function(i) {
		return isNaN(i);
	};
}
haxe.Resource.content = [];
{
	Xml.Element = "element";
	Xml.PCData = "pcdata";
	Xml.CData = "cdata";
	Xml.Comment = "comment";
	Xml.DocType = "doctype";
	Xml.Prolog = "prolog";
	Xml.Document = "document";
}
js["XMLHttpRequest"] = window.XMLHttpRequest?XMLHttpRequest:window.ActiveXObject?function() {
	try {
		return new ActiveXObject("Msxml2.XMLHTTP");
	} catch( e ) {
		try {
			return new ActiveXObject("Microsoft.XMLHTTP");
		} catch( e1 ) {
			throw "Unable to create XMLHttpRequest object.";
		}
	}
}:(function($this) {
	var $r;
	throw "Unable to create XMLHttpRequest object.";
	return $r;
}(this));
{
	js.Lib.document = document;
	js.Lib.window = window;
	onerror = function(msg,url,line) {
		var f = js.Lib.onerror;
		if( f == null )
			return false;
		return f(msg,[url+":"+line]);
	}
}
{
	var d = Date;
	d.now = function() {
		return new Date();
	};
	d.fromTime = function(t) {
		var d1 = new Date();
		d1["setTime"](t);
		return d1;
	};
	d.fromString = function(s) {
		switch(s.length) {
		case 8:
			var k = s.split(":");
			var d1 = new Date();
			d1["setTime"](0);
			d1["setUTCHours"](k[0]);
			d1["setUTCMinutes"](k[1]);
			d1["setUTCSeconds"](k[2]);
			return d1;
		case 10:
			var k = s.split("-");
			return new Date(k[0],k[1] - 1,k[2],0,0,0);
		case 19:
			var k = s.split(" ");
			var y = k[0].split("-");
			var t = k[1].split(":");
			return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
		default:
			throw "Invalid date format : " + s;
		}
	};
	d.prototype["toString"] = function() {
		var date = this;
		var m = date.getMonth() + 1;
		var d1 = date.getDate();
		var h = date.getHours();
		var mi = date.getMinutes();
		var s = date.getSeconds();
		return date.getFullYear() + "-" + (m < 10?"0" + m:"" + m) + "-" + (d1 < 10?"0" + d1:"" + d1) + " " + (h < 10?"0" + h:"" + h) + ":" + (mi < 10?"0" + mi:"" + mi) + ":" + (s < 10?"0" + s:"" + s);
	};
	d.prototype.__class__ = d;
	d.__name__ = ["Date"];
}
zpp_nape.constraint.ZPP_Constraint.nextId = 0;
jeash.errors.Error.DEFAULT_TO_STRING = "Error";
jeash.display.DisplayObject.mNameID = 0;
haxe.xml.Check.blanks = new EReg("^[ \r\n\t]*$","");
jeash.events.Listener.sIDs = 1;
jeash.text.Font.DEFAULT_FONT_SCALE = 9.0;
jeash.text.Font.DEFAULT_FONT_NAME = "Bitstream_Vera_Sans";
jeash.text.Font.DEFAULT_CLASS_NAME = "jeash.text.Font";
jeash.text.Font.DEFAULT_FONT_DATA = "q:55oy6:ascentd950.5y4:dataad84d277.5d564d277.5d564d320.5d293d1024d187.5d1024d442.5d362.5d84d362.5d84d277.5hy6:_widthd651.5y4:xMaxd564y4:xMind84y4:yMaxd746.5y4:yMind0y7:_heightd662.5y7:leadingd168y7:descentd241.5y8:charCodei55y15:leftsideBearingd84y12:advanceWidthd651.5y8:commandsai1i2i2i2i2i2i2i2hg:111oR0d950.5R1ad313.5d528.5d239.5d528.5d196.5d586.25d153.5d644d153.5d744.5d153.5d845d196.25d902.75d239d960.5d313.5d960.5d387d960.5d430d902.5d473d844.5d473d744.5d473d645d430d586.75d387d528.5d313.5d528.5d313.5d450.5d433.5d450.5d502d528.5d570.5d606.5d570.5d744.5d570.5d882d502d960.25d433.5d1038.5d313.5d1038.5d193d1038.5d124.75d960.25d56.5d882d56.5d744.5d56.5d606.5d124.75d528.5d193d450.5d313.5d450.5hR2d626.5R3d570.5R4d56.5R5d573.5R6d-14.5R7d517R8d168R9d241.5R10i111R11d56.5R12d626.5R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:54oR0d950.5R1ad338d610.5d270d610.5d230.25d657d190.5d703.5d190.5d784.5d190.5d865d230.25d911.75d270d958.5d338d958.5d406d958.5d445.75d911.75d485.5d865d485.5d784.5d485.5d703.5d445.75d657d406d610.5d338d610.5d538.5d294d538.5d386d500.5d368d461.75d358.5d423d349d385d349d285d349d232.25d416.5d179.5d484d172d620.5d201.5d577d246d553.75d290.5d530.5d344d530.5d456.5d530.5d521.75d598.75d587d667d587d784.5d587d899.5d519d969d451d1038.5d338d1038.5d208.5d1038.5d140d939.25d71.5d840d71.5d651.5d71.5d474.5d155.5d369.25d239.5d264d381d264d419d264d457.75d271.5d496.5d279d538.5d294hR2d651.5R3d587R4d71.5R5d760R6d-14.5R7d688.5R8d168R9d241.5R10i54R11d71.5R12d651.5R13ai1i3i3i3i3i3i3i3i3i1i2i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3hg:110oR0d950.5R1ad562d686d562d1024d470d1024d470d689d470d609.5d439d570d408d530.5d346d530.5d271.5d530.5d228.5d578d185.5d625.5d185.5d707.5d185.5d1024d93d1024d93d464d185.5d464d185.5d551d218.5d500.5d263.25d475.5d308d450.5d366.5d450.5d463d450.5d512.5d510.25d562d570d562d686hR2d649R3d562R4d93R5d573.5R6d0R7d480.5R8d168R9d241.5R10i110R11d93R12d649R13ai1i2i2i2i3i3i3i3i2i2i2i2i2i3i3i3i3hg:53oR0d950.5R1ad110.5d277.5d507d277.5d507d362.5d203d362.5d203d545.5d225d538d247d534.25d269d530.5d291d530.5d416d530.5d489d599d562d667.5d562d784.5d562d905d487d971.75d412d1038.5d275.5d1038.5d228.5d1038.5d179.75d1030.5d131d1022.5d79d1006.5d79d905d124d929.5d172d941.5d220d953.5d273.5d953.5d360d953.5d410.5d908d461d862.5d461d784.5d461d706.5d410.5d661d360d615.5d273.5d615.5d233d615.5d192.75d624.5d152.5d633.5d110.5d652.5d110.5d277.5hR2d651.5R3d562R4d79R5d746.5R6d-14.5R7d667.5R8d168R9d241.5R10i53R11d79R12d651.5R13ai1i2i2i2i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3i2hg:109oR0d950.5R1ad532.5d571.5d567d509.5d615d480d663d450.5d728d450.5d815.5d450.5d863d511.75d910.5d573d910.5d686d910.5d1024d818d1024d818d689d818d608.5d789.5d569.5d761d530.5d702.5d530.5d631d530.5d589.5d578d548d625.5d548d707.5d548d1024d455.5d1024d455.5d689d455.5d608d427d569.25d398.5d530.5d339d530.5d268.5d530.5d227d578.25d185.5d626d185.5d707.5d185.5d1024d93d1024d93d464d185.5d464d185.5d551d217d499.5d261d475d305d450.5d365.5d450.5d426.5d450.5d469.25d481.5d512d512.5d532.5d571.5hR2d997.5R3d910.5R4d93R5d573.5R6d0R7d480.5R8d168R9d241.5R10i109R11d93R12d997.5R13ai1i3i3i3i3i2i2i2i3i3i3i3i2i2i2i3i3i3i3i2i2i2i2i2i3i3i3i3hg:52oR0d950.5R1ad387d365.5d132d764d387d764d387d365.5d360.5d277.5d487.5d277.5d487.5d764d594d764d594d848d487.5d848d487.5d1024d387d1024d387d848d50d848d50d750.5d360.5d277.5hR2d651.5R3d594R4d50R5d746.5R6d0R7d696.5R8d168R9d241.5R10i52R11d50R12d651.5R13ai1i2i2i2i1i2i2i2i2i2i2i2i2i2i2i2hg:108oR0d950.5R1ad96.5d246d188.5d246d188.5d1024d96.5d1024d96.5d246hR2d284.5R3d188.5R4d96.5R5d778R6d0R7d681.5R8d168R9d241.5R10i108R11d96.5R12d284.5R13ai1i2i2i2i2hg:51oR0d950.5R1ad415.5d621.5d488d637d528.75d686d569.5d735d569.5d807d569.5d917.5d493.5d978d417.5d1038.5d277.5d1038.5d230.5d1038.5d180.75d1029.25d131d1020d78d1001.5d78d904d120d928.5d170d941d220d953.5d274.5d953.5d369.5d953.5d419.25d916d469d878.5d469d807d469d741d422.75d703.75d376.5d666.5d294d666.5d207d666.5d207d583.5d298d583.5d372.5d583.5d412d553.75d451.5d524d451.5d468d451.5d410.5d410.75d379.75d370d349d294d349d252.5d349d205d358d157.5d367d100.5d386d100.5d296d158d280d208.25d272d258.5d264d303d264d418d264d485d316.25d552d368.5d552d457.5d552d519.5d516.5d562.25d481d605d415.5d621.5hR2d651.5R3d569.5R4d78R5d760R6d-14.5R7d682R8d168R9d241.5R10i51R11d78R12d651.5R13ai1i3i3i3i3i3i3i2i3i3i3i3i3i3i2i2i2i3i3i3i3i3i3i2i3i3i3i3i3i3hg:107oR0d950.5R1ad93d246d185.5d246d185.5d705.5d460d464d577.5d464d280.5d726d590d1024d470d1024d185.5d750.5d185.5d1024d93d1024d93d246hR2d593R3d590R4d93R5d778R6d0R7d685R8d168R9d241.5R10i107R11d93R12d593R13ai1i2i2i2i2i2i2i2i2i2i2i2hg:50oR0d950.5R1ad196.5d939d549d939d549d1024d75d1024d75d939d132.5d879.5d231.75d779.25d331d679d356.5d650d405d595.5d424.25d557.75d443.5d520d443.5d483.5d443.5d424d401.75d386.5d360d349d293d349d245.5d349d192.75d365.5d140d382d80d415.5d80d313.5d141d289d194d276.5d247d264d291d264d407d264d476d322d545d380d545d477d545d523d527.75d564.25d510.5d605.5d465d661.5d452.5d676d385.5d745.25d318.5d814.5d196.5d939hR2d651.5R3d549R4d75R5d760R6d0R7d685R8d168R9d241.5R10i50R11d75R12d651.5R13ai1i2i2i2i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3hg:106oR0d950.5R1ad96.5d464d188.5d464d188.5d1034d188.5d1141d147.75d1189d107d1237d16.5d1237d-18.5d1237d-18.5d1159d6d1159d58.5d1159d77.5d1134.75d96.5d1110.5d96.5d1034d96.5d464d96.5d246d188.5d246d188.5d362.5d96.5d362.5d96.5d246hR2d284.5R3d188.5R4d-18.5R5d778R6d-213R7d796.5R8d168R9d241.5R10i106R11d-18.5R12d284.5R13ai1i2i2i3i3i2i2i2i3i3i2i1i2i2i2i2hg:49oR0d950.5R1ad127d939d292d939d292d369.5d112.5d405.5d112.5d313.5d291d277.5d392d277.5d392d939d557d939d557d1024d127d1024d127d939hR2d651.5R3d557R4d112.5R5d746.5R6d0R7d634R8d168R9d241.5R10i49R11d112.5R12d651.5R13ai1i2i2i2i2i2i2i2i2i2i2i2hg:105oR0d950.5R1ad96.5d464d188.5d464d188.5d1024d96.5d1024d96.5d464d96.5d246d188.5d246d188.5d362.5d96.5d362.5d96.5d246hR2d284.5R3d188.5R4d96.5R5d778R6d0R7d681.5R8d168R9d241.5R10i105R11d96.5R12d284.5R13ai1i2i2i2i2i1i2i2i2i2hg:48oR0d950.5R1ad325.5d344d247.5d344d208.25d420.75d169d497.5d169d651.5d169d805d208.25d881.75d247.5d958.5d325.5d958.5d404d958.5d443.25d881.75d482.5d805d482.5d651.5d482.5d497.5d443.25d420.75d404d344d325.5d344d325.5d264d451d264d517.25d363.25d583.5d462.5d583.5d651.5d583.5d840d517.25d939.25d451d1038.5d325.5d1038.5d200d1038.5d133.75d939.25d67.5d840d67.5d651.5d67.5d462.5d133.75d363.25d200d264d325.5d264hR2d651.5R3d583.5R4d67.5R5d760R6d-14.5R7d692.5R8d168R9d241.5R10i48R11d67.5R12d651.5R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:104oR0d950.5R1ad562d686d562d1024d470d1024d470d689d470d609.5d439d570d408d530.5d346d530.5d271.5d530.5d228.5d578d185.5d625.5d185.5d707.5d185.5d1024d93d1024d93d246d185.5d246d185.5d551d218.5d500.5d263.25d475.5d308d450.5d366.5d450.5d463d450.5d512.5d510.25d562d570d562d686hR2d649R3d562R4d93R5d778R6d0R7d685R8d168R9d241.5R10i104R11d93R12d649R13ai1i2i2i2i3i3i3i3i2i2i2i2i2i3i3i3i3hg:47oR0d950.5R1ad260d277.5d345d277.5d85d1119d0d1119d260d277.5hR2d345R3d345R4d0R5d746.5R6d-95R7d746.5R8d168R9d241.5R10i47R11d0R12d345R13ai1i2i2i2i2hg:103oR0d950.5R1ad465d737.5d465d637.5d423.75d582.5d382.5d527.5d308d527.5d234d527.5d192.75d582.5d151.5d637.5d151.5d737.5d151.5d837d192.75d892d234d947d308d947d382.5d947d423.75d892d465d837d465d737.5d557d954.5d557d1097.5d493.5d1167.25d430d1237d299d1237d250.5d1237d207.5d1229.75d164.5d1222.5d124d1207.5d124d1118d164.5d1140d204d1150.5d243.5d1161d284.5d1161d375d1161d420d1113.75d465d1066.5d465d971d465d925.5d436.5d975d392d999.5d347.5d1024d285.5d1024d182.5d1024d119.5d945.5d56.5d867d56.5d737.5d56.5d607.5d119.5d529d182.5d450.5d285.5d450.5d347.5d450.5d392d475d436.5d499.5d465d549d465d464d557d464d557d954.5hR2d650R3d557R4d56.5R5d573.5R6d-213R7d517R8d168R9d241.5R10i103R11d56.5R12d650R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i2i3i3i3i3i2i3i3i3i3i3i3i3i3i2i2i2hg:46oR0d950.5R1ad109.5d897d215d897d215d1024d109.5d1024d109.5d897hR2d325.5R3d215R4d109.5R5d127R6d0R7d17.5R8d168R9d241.5R10i46R11d109.5R12d325.5R13ai1i2i2i2i2hg:102oR0d950.5R1ad380d246d380d322.5d292d322.5d242.5d322.5d223.25d342.5d204d362.5d204d414.5d204d464d355.5d464d355.5d535.5d204d535.5d204d1024d111.5d1024d111.5d535.5d23.5d535.5d23.5d464d111.5d464d111.5d425d111.5d331.5d155d288.75d198.5d246d293d246d380d246hR2d360.5R3d380R4d23.5R5d778R6d0R7d754.5R8d168R9d241.5R10i102R11d23.5R12d360.5R13ai1i2i2i3i3i2i2i2i2i2i2i2i2i2i2i2i3i3i2hg:45oR0d950.5R1ad50d702.5d319.5d702.5d319.5d784.5d50d784.5d50d702.5hR2d369.5R3d319.5R4d50R5d321.5R6d239.5R7d271.5R8d168R9d241.5R10i45R11d50R12d369.5R13ai1i2i2i2i2hg:101oR0d950.5R1ad575.5d721d575.5d766d152.5d766d158.5d861d209.75d910.75d261d960.5d352.5d960.5d405.5d960.5d455.25d947.5d505d934.5d554d908.5d554d995.5d504.5d1016.5d452.5d1027.5d400.5d1038.5d347d1038.5d213d1038.5d134.75d960.5d56.5d882.5d56.5d749.5d56.5d612d130.75d531.25d205d450.5d331d450.5d444d450.5d509.75d523.25d575.5d596d575.5d721d483.5d694d482.5d618.5d441.25d573.5d400d528.5d332d528.5d255d528.5d208.75d572d162.5d615.5d155.5d694.5d483.5d694hR2d630R3d575.5R4d56.5R5d573.5R6d-14.5R7d517R8d168R9d241.5R10i101R11d56.5R12d630R13ai1i2i2i3i3i3i3i2i3i3i3i3i3i3i3i3i1i3i3i3i3i2hg:44oR0d950.5R1ad120d897d225.5d897d225.5d983d143.5d1143d79d1143d120d983d120d897hR2d325.5R3d225.5R4d79R5d127R6d-119R7d48R8d168R9d241.5R10i44R11d79R12d325.5R13ai1i2i2i2i2i2i2hg:100oR0d950.5R1ad465d549d465d246d557d246d557d1024d465d1024d465d940d436d990d391.75d1014.25d347.5d1038.5d285.5d1038.5d184d1038.5d120.25d957.5d56.5d876.5d56.5d744.5d56.5d612.5d120.25d531.5d184d450.5d285.5d450.5d347.5d450.5d391.75d474.75d436d499d465d549d151.5d744.5d151.5d846d193.25d903.75d235d961.5d308d961.5d381d961.5d423d903.75d465d846d465d744.5d465d643d423d585.25d381d527.5d308d527.5d235d527.5d193.25d585.25d151.5d643d151.5d744.5hR2d650R3d557R4d56.5R5d778R6d-14.5R7d721.5R8d168R9d241.5R10i100R11d56.5R12d650R13ai1i2i2i2i2i2i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:43oR0d950.5R1ad471d382d471d660.5d749.5d660.5d749.5d745.5d471d745.5d471d1024d387d1024d387d745.5d108.5d745.5d108.5d660.5d387d660.5d387d382d471d382hR2d858R3d749.5R4d108.5R5d642R6d0R7d533.5R8d168R9d241.5R10i43R11d108.5R12d858R13ai1i2i2i2i2i2i2i2i2i2i2i2i2hg:99oR0d950.5R1ad499.5d485.5d499.5d571.5d460.5d550d421.25d539.25d382d528.5d342d528.5d252.5d528.5d203d585.25d153.5d642d153.5d744.5d153.5d847d203d903.75d252.5d960.5d342d960.5d382d960.5d421.25d949.75d460.5d939d499.5d917.5d499.5d1002.5d461d1020.5d419.75d1029.5d378.5d1038.5d332d1038.5d205.5d1038.5d131d959d56.5d879.5d56.5d744.5d56.5d607.5d131.75d529d207d450.5d338d450.5d380.5d450.5d421d459.25d461.5d468d499.5d485.5hR2d563R3d499.5R4d56.5R5d573.5R6d-14.5R7d517R8d168R9d241.5R10i99R11d56.5R12d563R13ai1i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3hg:42oR0d950.5R1ad481.5d400.5d302d497.5d481.5d595d452.5d644d284.5d542.5d284.5d731d227.5d731d227.5d542.5d59.5d644d30.5d595d210d497.5d30.5d400.5d59.5d351d227.5d452.5d227.5d264d284.5d264d284.5d452.5d452.5d351d481.5d400.5hR2d512R3d481.5R4d30.5R5d760R6d293R7d729.5R8d168R9d241.5R10i42R11d30.5R12d512R13ai1i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2hg:98oR0d950.5R1ad498.5d744.5d498.5d643d456.75d585.25d415d527.5d342d527.5d269d527.5d227.25d585.25d185.5d643d185.5d744.5d185.5d846d227.25d903.75d269d961.5d342d961.5d415d961.5d456.75d903.75d498.5d846d498.5d744.5d185.5d549d214.5d499d258.75d474.75d303d450.5d364.5d450.5d466.5d450.5d530.25d531.5d594d612.5d594d744.5d594d876.5d530.25d957.5d466.5d1038.5d364.5d1038.5d303d1038.5d258.75d1014.25d214.5d990d185.5d940d185.5d1024d93d1024d93d246d185.5d246d185.5d549hR2d650R3d594R4d93R5d778R6d-14.5R7d685R8d168R9d241.5R10i98R11d93R12d650R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i2i2i2i2i2hg:41oR0d950.5R1ad82d247d162d247d237d365d274.25d478d311.5d591d311.5d702.5d311.5d814.5d274.25d928d237d1041.5d162d1159d82d1159d148.5d1044.5d181.25d931.25d214d818d214d702.5d214d587d181.25d474.5d148.5d362d82d247hR2d399.5R3d311.5R4d82R5d777R6d-135R7d695R8d168R9d241.5R10i41R11d82R12d399.5R13ai1i2i3i3i3i3i2i3i3i3i3hg:97oR0d950.5R1ad351d742.5d239.5d742.5d196.5d768d153.5d793.5d153.5d855d153.5d904d185.75d932.75d218d961.5d273.5d961.5d350d961.5d396.25d907.25d442.5d853d442.5d763d442.5d742.5d351d742.5d534.5d704.5d534.5d1024d442.5d1024d442.5d939d411d990d364d1014.25d317d1038.5d249d1038.5d163d1038.5d112.25d990.25d61.5d942d61.5d861d61.5d766.5d124.75d718.5d188d670.5d313.5d670.5d442.5d670.5d442.5d661.5d442.5d598d400.75d563.25d359d528.5d283.5d528.5d235.5d528.5d190d540d144.5d551.5d102.5d574.5d102.5d489.5d153d470d200.5d460.25d248d450.5d293d450.5d414.5d450.5d474.5d513.5d534.5d576.5d534.5d704.5hR2d627.5R3d534.5R4d61.5R5d573.5R6d-14.5R7d512R8d168R9d241.5R10i97R11d61.5R12d627.5R13ai1i3i3i3i3i3i3i2i2i1i2i2i2i3i3i3i3i3i3i2i2i3i3i3i3i2i3i3i3i3hg:40oR0d950.5R1ad317.5d247d250.5d362d218d474.5d185.5d587d185.5d702.5d185.5d818d218.25d931.25d251d1044.5d317.5d1159d237.5d1159d162.5d1041.5d125.25d928d88d814.5d88d702.5d88d591d125d478d162d365d237.5d247d317.5d247hR2d399.5R3d317.5R4d88R5d777R6d-135R7d689R8d168R9d241.5R10i40R11d88R12d399.5R13ai1i3i3i3i3i2i3i3i3i3i2hg:96oR0d950.5R1ad183.5d205d324.5d392d248d392d85d205d183.5d205hR2d512R3d324.5R4d85R5d819R6d632R7d734R8d168R9d241.5R10i96R11d85R12d512R13ai1i2i2i2i2hg:39oR0d950.5R1ad183.5d277.5d183.5d555d98.5d555d98.5d277.5d183.5d277.5hR2d281.5R3d183.5R4d98.5R5d746.5R6d469R7d648R8d168R9d241.5R10i39R11d98.5R12d281.5R13ai1i2i2i2i2hg:95oR0d950.5R1ad522d1194d522d1265.5d-10d1265.5d-10d1194d522d1194hR2d512R3d522R4d-10R5d-170R6d-241.5R7d-160R8d168R9d241.5R10i95R11d-10R12d512R13ai1i2i2i2i2hg:38oR0d950.5R1ad249d622.5d203.5d663d182.25d703.25d161d743.5d161d787.5d161d860.5d214d909d267d957.5d347d957.5d394.5d957.5d436d941.75d477.5d926d514d894d249d622.5d319.5d566.5d573.5d826.5d603d782d619.5d731.25d636d680.5d639d623.5d732d623.5d726d689.5d700d754d674d818.5d627.5d881.5d767d1024d641d1024d569.5d950.5d517.5d995d460.5d1016.75d403.5d1038.5d338d1038.5d217.5d1038.5d141d969.75d64.5d901d64.5d793.5d64.5d729.5d98d673.25d131.5d617d198.5d567.5d174.5d536d162d504.75d149.5d473.5d149.5d443.5d149.5d362.5d205d313.25d260.5d264d352.5d264d394d264d435.25d273d476.5d282d519d300d519d391d475.5d367.5d436d355.25d396.5d343d362.5d343d310d343d277.25d370.75d244.5d398.5d244.5d442.5d244.5d468d259.25d493.75d274d519.5d319.5d566.5hR2d798.5R3d767R4d64.5R5d760R6d-14.5R7d695.5R8d168R9d241.5R10i38R11d64.5R12d798.5R13ai1i3i3i3i3i3i3i2i1i2i3i3i2i3i3i2i2i2i3i3i3i3i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3hg:94oR0d950.5R1ad478d277.5d749.5d556d649d556d429d358.5d209d556d108.5d556d380d277.5d478d277.5hR2d858R3d749.5R4d108.5R5d746.5R6d468R7d638R8d168R9d241.5R10i94R11d108.5R12d858R13ai1i2i2i2i2i2i2i2hg:37oR0d950.5R1ad744.5d695.5d701d695.5d676.25d732.5d651.5d769.5d651.5d835.5d651.5d900.5d676.25d937.75d701d975d744.5d975d787d975d811.75d937.75d836.5d900.5d836.5d835.5d836.5d770d811.75d732.75d787d695.5d744.5d695.5d744.5d632d823.5d632d870d687d916.5d742d916.5d835.5d916.5d929d869.75d983.75d823d1038.5d744.5d1038.5d664.5d1038.5d618d983.75d571.5d929d571.5d835.5d571.5d741.5d618.25d686.75d665d632d744.5d632d228.5d327.5d185.5d327.5d160.75d364.75d136d402d136d467d136d533d160.5d570d185d607d228.5d607d272d607d296.75d570d321.5d533d321.5d467d321.5d402.5d296.5d365d271.5d327.5d228.5d327.5d680d264d760d264d293d1038.5d213d1038.5d680d264d228.5d264d307.5d264d354.5d318.75d401.5d373.5d401.5d467d401.5d561.5d354.75d616d308d670.5d228.5d670.5d149d670.5d102.75d615.75d56.5d561d56.5d467d56.5d374d103d319d149.5d264d228.5d264hR2d973R3d916.5R4d56.5R5d760R6d-14.5R7d703.5R8d168R9d241.5R10i37R11d56.5R12d973R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i1i2i2i2i2i1i3i3i3i3i3i3i3i3hg:93oR0d950.5R1ad311.5d246d311.5d1159d99.5d1159d99.5d1087.5d219d1087.5d219d317.5d99.5d317.5d99.5d246d311.5d246hR2d399.5R3d311.5R4d99.5R5d778R6d-135R7d678.5R8d168R9d241.5R10i93R11d99.5R12d399.5R13ai1i2i2i2i2i2i2i2i2hg:36oR0d950.5R1ad346d1174.5d296d1174.5d295.5d1024d243d1023d190.5d1011.75d138d1000.5d85d978d85d888d136d920d188.25d936.25d240.5d952.5d296d953d296d725d185.5d707d135.25d664d85d621d85d546d85d464.5d139.5d417.5d194d370.5d296d363.5d296d246d346d246d346d362d392.5d364d436d371.75d479.5d379.5d521d393d521d480.5d479.5d459.5d435.75d448d392d436.5d346d434.5d346d648d459.5d665.5d513d710.5d566.5d755.5d566.5d833.5d566.5d918d509.75d966.75d453d1015.5d346d1023d346d1174.5d296d639d296d434d238d440.5d207.5d467d177d493.5d177d537.5d177d580.5d205.25d604.5d233.5d628.5d296d639d346d735d346d951.5d409.5d943d441.75d915.5d474d888d474d843d474d799d443.25d773d412.5d747d346d735hR2d651.5R3d566.5R4d85R5d778R6d-150.5R7d693R8d168R9d241.5R10i36R11d85R12d651.5R13ai1i2i2i3i3i2i3i3i2i3i3i3i3i2i2i2i3i3i2i3i3i2i3i3i3i3i2i1i2i3i3i3i3i1i2i3i3i3i3hg:92oR0d950.5R1ad85d277.5d345d1119d260d1119d0d277.5d85d277.5hR2d345R3d345R4d0R5d746.5R6d-95R7d746.5R8d168R9d241.5R10i92R11d0R12d345R13ai1i2i2i2i2hg:35oR0d950.5R1ad523.5d573.5d378d573.5d336d740.5d482.5d740.5d523.5d573.5d448.5d289d396.5d496.5d542.5d496.5d595d289d675d289d623.5d496.5d779.5d496.5d779.5d573.5d604d573.5d563d740.5d722d740.5d722d817d543.5d817d491.5d1024d411.5d1024d463d817d316.5d817d265d1024d184.5d1024d236.5d817d79d817d79d740.5d255d740.5d297d573.5d136d573.5d136d496.5d316.5d496.5d367.5d289d448.5d289hR2d858R3d779.5R4d79R5d735R6d0R7d656R8d168R9d241.5R10i35R11d79R12d858R13ai1i2i2i2i2i1i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2i2hg:91oR0d950.5R1ad88d246d300d246d300d317.5d180d317.5d180d1087.5d300d1087.5d300d1159d88d1159d88d246hR2d399.5R3d300R4d88R5d778R6d-135R7d690R8d168R9d241.5R10i91R11d88R12d399.5R13ai1i2i2i2i2i2i2i2i2hg:34oR0d950.5R1ad183.5d277.5d183.5d555d98.5d555d98.5d277.5d183.5d277.5d372.5d277.5d372.5d555d287.5d555d287.5d277.5d372.5d277.5hR2d471R3d372.5R4d98.5R5d746.5R6d469R7d648R8d168R9d241.5R10i34R11d98.5R12d471R13ai1i2i2i2i2i1i2i2i2i2hg:90oR0d950.5R1ad57.5d277.5d644d277.5d644d354.5d172d939d655.5d939d655.5d1024d46d1024d46d947d518d362.5d57.5d362.5d57.5d277.5hR2d701.5R3d655.5R4d46R5d746.5R6d0R7d700.5R8d168R9d241.5R10i90R11d46R12d701.5R13ai1i2i2i2i2i2i2i2i2i2i2hg:33oR0d950.5R1ad154.5d897d256d897d256d1024d154.5d1024d154.5d897d154.5d277.5d256d277.5d256d605d246d783.5d165d783.5d154.5d605d154.5d277.5hR2d410.5R3d256R4d154.5R5d746.5R6d0R7d592R8d168R9d241.5R10i33R11d154.5R12d410.5R13ai1i2i2i2i2i1i2i2i2i2i2i2hg:89oR0d950.5R1ad-2d277.5d106.5d277.5d313.5d584.5d519d277.5d627.5d277.5d363.5d668.5d363.5d1024d262d1024d262d668.5d-2d277.5hR2d625.5R3d627.5R4d-2R5d746.5R6d0R7d748.5R8d168R9d241.5R10i89R11d-2R12d625.5R13ai1i2i2i2i2i2i2i2i2i2hg:32oR0d950.5R1ahR2d325.5R3d0R4d0R5d0R6d0R7d0R8d168R9d241.5R10i32R11d0R12d325.5R13ahg:88oR0d950.5R1ad64.5d277.5d173d277.5d358.5d555d545d277.5d653.5d277.5d413.5d636d669.5d1024d561d1024d351d706.5d139.5d1024d30.5d1024d297d625.5d64.5d277.5hR2d701.5R3d669.5R4d30.5R5d746.5R6d0R7d716R8d168R9d241.5R10i88R11d30.5R12d701.5R13ai1i2i2i2i2i2i2i2i2i2i2i2i2hg:87oR0d950.5R1ad34d277.5d136d277.5d293d908.5d449.5d277.5d563d277.5d720d908.5d876.5d277.5d979d277.5d791.5d1024d664.5d1024d507d376d348d1024d221d1024d34d277.5hR2d1012.5R3d979R4d34R5d746.5R6d0R7d712.5R8d168R9d241.5R10i87R11d34R12d1012.5R13ai1i2i2i2i2i2i2i2i2i2i2i2i2i2hg:86oR0d950.5R1ad293d1024d8d277.5d113.5d277.5d350d906d587d277.5d692d277.5d407.5d1024d293d1024hR2d700.5R3d692R4d8R5d746.5R6d0R7d738.5R8d168R9d241.5R10i86R11d8R12d700.5R13ai1i2i2i2i2i2i2i2hg:85oR0d950.5R1ad89d277.5d190.5d277.5d190.5d731d190.5d851d234d903.75d277.5d956.5d375d956.5d472d956.5d515.5d903.75d559d851d559d731d559d277.5d660.5d277.5d660.5d743.5d660.5d889.5d588.25d964d516d1038.5d375d1038.5d233.5d1038.5d161.25d964d89d889.5d89d743.5d89d277.5hR2d749.5R3d660.5R4d89R5d746.5R6d-14.5R7d657.5R8d168R9d241.5R10i85R11d89R12d749.5R13ai1i2i2i3i3i3i3i2i2i2i3i3i3i3i2hg:84oR0d950.5R1ad-3d277.5d628.5d277.5d628.5d362.5d363.5d362.5d363.5d1024d262d1024d262d362.5d-3d362.5d-3d277.5hR2d625.5R3d628.5R4d-3R5d746.5R6d0R7d749.5R8d168R9d241.5R10i84R11d-3R12d625.5R13ai1i2i2i2i2i2i2i2i2hg:83oR0d950.5R1ad548d302d548d400.5d490.5d373d439.5d359.5d388.5d346d341d346d258.5d346d213.75d378d169d410d169d469d169d518.5d198.75d543.75d228.5d569d311.5d584.5d372.5d597d485.5d618.5d539.25d672.75d593d727d593d818d593d926.5d520.25d982.5d447.5d1038.5d307d1038.5d254d1038.5d194.25d1026.5d134.5d1014.5d70.5d991d70.5d887d132d921.5d191d939d250d956.5d307d956.5d393.5d956.5d440.5d922.5d487.5d888.5d487.5d825.5d487.5d770.5d453.75d739.5d420d708.5d343d693d281.5d681d168.5d658.5d118d610.5d67.5d562.5d67.5d477d67.5d378d137.25d321d207d264d329.5d264d382d264d436.5d273.5d491d283d548d302hR2d650R3d593R4d67.5R5d760R6d-14.5R7d692.5R8d168R9d241.5R10i83R11d67.5R12d650R13ai1i2i3i3i3i3i3i3i2i3i3i3i3i3i3i2i3i3i3i3i3i3i2i3i3i3i3i3i3hg:82oR0d950.5R1ad454.5d674d487d685d517.75d721d548.5d757d579.5d820d682d1024d573.5d1024d478d832.5d441d757.5d406.25d733d371.5d708.5d311.5d708.5d201.5d708.5d201.5d1024d100.5d1024d100.5d277.5d328.5d277.5d456.5d277.5d519.5d331d582.5d384.5d582.5d492.5d582.5d563d549.75d609.5d517d656d454.5d674d201.5d360.5d201.5d625.5d328.5d625.5d401.5d625.5d438.75d591.75d476d558d476d492.5d476d427d438.75d393.75d401.5d360.5d328.5d360.5d201.5d360.5hR2d711.5R3d682R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i82R11d100.5R12d711.5R13ai1i3i3i2i2i2i3i3i2i2i2i2i2i3i3i3i3i1i2i2i3i3i3i3i2hg:81oR0d950.5R1ad403.5d346d293.5d346d228.75d428d164d510d164d651.5d164d792.5d228.75d874.5d293.5d956.5d403.5d956.5d513.5d956.5d577.75d874.5d642d792.5d642d651.5d642d510d577.75d428d513.5d346d403.5d346d545d1010.5d678d1156d556d1156d445.5d1036.5d429d1037.5d420.25d1038d411.5d1038.5d403.5d1038.5d246d1038.5d151.75d933.25d57.5d828d57.5d651.5d57.5d474.5d151.75d369.25d246d264d403.5d264d560.5d264d654.5d369.25d748.5d474.5d748.5d651.5d748.5d781.5d696.25d874d644d966.5d545d1010.5hR2d806R3d748.5R4d57.5R5d760R6d-132R7d702.5R8d168R9d241.5R10i81R11d57.5R12d806R13ai1i3i3i3i3i3i3i3i3i1i2i2i2i3i3i3i3i3i3i3i3i3i3hg:80oR0d950.5R1ad201.5d360.5d201.5d641d328.5d641d399d641d437.5d604.5d476d568d476d500.5d476d433.5d437.5d397d399d360.5d328.5d360.5d201.5d360.5d100.5d277.5d328.5d277.5d454d277.5d518.25d334.25d582.5d391d582.5d500.5d582.5d611d518.25d667.5d454d724d328.5d724d201.5d724d201.5d1024d100.5d1024d100.5d277.5hR2d617.5R3d582.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i80R11d100.5R12d617.5R13ai1i2i2i3i3i3i3i2i1i2i3i3i3i3i2i2i2i2hg:79oR0d950.5R1ad403.5d346d293.5d346d228.75d428d164d510d164d651.5d164d792.5d228.75d874.5d293.5d956.5d403.5d956.5d513.5d956.5d577.75d874.5d642d792.5d642d651.5d642d510d577.75d428d513.5d346d403.5d346d403.5d264d560.5d264d654.5d369.25d748.5d474.5d748.5d651.5d748.5d828d654.5d933.25d560.5d1038.5d403.5d1038.5d246d1038.5d151.75d933.5d57.5d828.5d57.5d651.5d57.5d474.5d151.75d369.25d246d264d403.5d264hR2d806R3d748.5R4d57.5R5d760R6d-14.5R7d702.5R8d168R9d241.5R10i79R11d57.5R12d806R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:78oR0d950.5R1ad100.5d277.5d236.5d277.5d567.5d902d567.5d277.5d665.5d277.5d665.5d1024d529.5d1024d198.5d399.5d198.5d1024d100.5d1024d100.5d277.5hR2d766R3d665.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i78R11d100.5R12d766R13ai1i2i2i2i2i2i2i2i2i2i2hg:77oR0d950.5R1ad100.5d277.5d251d277.5d441.5d785.5d633d277.5d783.5d277.5d783.5d1024d685d1024d685d368.5d492.5d880.5d391d880.5d198.5d368.5d198.5d1024d100.5d1024d100.5d277.5hR2d883.5R3d783.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i77R11d100.5R12d883.5R13ai1i2i2i2i2i2i2i2i2i2i2i2i2i2hg:76oR0d950.5R1ad100.5d277.5d201.5d277.5d201.5d939d565d939d565d1024d100.5d1024d100.5d277.5hR2d570.5R3d565R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i76R11d100.5R12d570.5R13ai1i2i2i2i2i2i2hg:75oR0d950.5R1ad100.5d277.5d201.5d277.5d201.5d593d536.5d277.5d666.5d277.5d296d625.5d693d1024d560d1024d201.5d664.5d201.5d1024d100.5d1024d100.5d277.5hR2d671.5R3d693R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i75R11d100.5R12d671.5R13ai1i2i2i2i2i2i2i2i2i2i2i2hg:74oR0d950.5R1ad100.5d277.5d201.5d277.5d201.5d972d201.5d1107d150.25d1168d99d1229d-14.5d1229d-53d1229d-53d1144d-21.5d1144d45.5d1144d73d1106.5d100.5d1069d100.5d972d100.5d277.5hR2d302R3d201.5R4d-53R5d746.5R6d-205R7d799.5R8d168R9d241.5R10i74R11d-53R12d302R13ai1i2i2i3i3i2i2i2i3i3i2hg:73oR0d950.5R1ad100.5d277.5d201.5d277.5d201.5d1024d100.5d1024d100.5d277.5hR2d302R3d201.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i73R11d100.5R12d302R13ai1i2i2i2i2hg:72oR0d950.5R1ad100.5d277.5d201.5d277.5d201.5d583.5d568.5d583.5d568.5d277.5d669.5d277.5d669.5d1024d568.5d1024d568.5d668.5d201.5d668.5d201.5d1024d100.5d1024d100.5d277.5hR2d770R3d669.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i72R11d100.5R12d770R13ai1i2i2i2i2i2i2i2i2i2i2i2i2hg:71oR0d950.5R1ad609.5d917.5d609.5d717d444.5d717d444.5d634d709.5d634d709.5d954.5d651d996d580.5d1017.25d510d1038.5d430d1038.5d255d1038.5d156.25d936.25d57.5d834d57.5d651.5d57.5d468.5d156.25d366.25d255d264d430d264d503d264d568.75d282d634.5d300d690d335d690d442.5d634d395d571d371d508d347d438.5d347d301.5d347d232.75d423.5d164d500d164d651.5d164d802.5d232.75d879d301.5d955.5d438.5d955.5d492d955.5d534d946.25d576d937d609.5d917.5hR2d793.5R3d709.5R4d57.5R5d760R6d-14.5R7d702.5R8d168R9d241.5R10i71R11d57.5R12d793.5R13ai1i2i2i2i2i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3hg:70oR0d950.5R1ad100.5d277.5d529.5d277.5d529.5d362.5d201.5d362.5d201.5d582.5d497.5d582.5d497.5d667.5d201.5d667.5d201.5d1024d100.5d1024d100.5d277.5hR2d589R3d529.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i70R11d100.5R12d589R13ai1i2i2i2i2i2i2i2i2i2i2hg:126oR0d950.5R1ad749.5d615.5d749.5d704.5d697d744d652.25d761d607.5d778d559d778d504d778d431d748.5d425.5d746.5d423d745.5d419.5d744d412d741.5d334.5d710.5d287.5d710.5d243.5d710.5d200.5d729.75d157.5d749d108.5d790.5d108.5d701.5d161d662d205.75d644.75d250.5d627.5d299d627.5d354d627.5d427.5d657.5d432.5d659.5d435d660.5d439d662d446d664.5d523.5d695.5d570.5d695.5d613.5d695.5d655.75d676.5d698d657.5d749.5d615.5hR2d858R3d749.5R4d108.5R5d408.5R6d233.5R7d300R8d168R9d241.5R10i126R11d108.5R12d858R13ai1i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3hg:69oR0d950.5R1ad100.5d277.5d572.5d277.5d572.5d362.5d201.5d362.5d201.5d583.5d557d583.5d557d668.5d201.5d668.5d201.5d939d581.5d939d581.5d1024d100.5d1024d100.5d277.5hR2d647R3d581.5R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i69R11d100.5R12d647R13ai1i2i2i2i2i2i2i2i2i2i2i2i2hg:125oR0d950.5R1ad128d1119d163d1119d233d1119d254.25d1097.5d275.5d1076d275.5d1004.5d275.5d880.5d275.5d802.5d298d767d320.5d731.5d376d718d320.5d705.5d298d670d275.5d634.5d275.5d556d275.5d432d275.5d361d254.25d339.25d233d317.5d163d317.5d128d317.5d128d246d159.5d246d284d246d325.75d282.75d367.5d319.5d367.5d430d367.5d550d367.5d624.5d394.5d653.25d421.5d682d492.5d682d523.5d682d523.5d753.5d492.5d753.5d421.5d753.5d394.5d782.5d367.5d811.5d367.5d887d367.5d1006.5d367.5d1117d325.75d1154d284d1191d159.5d1191d128d1191d128d1119hR2d651.5R3d523.5R4d128R5d778R6d-167R7d650R8d168R9d241.5R10i125R11d128R12d651.5R13ai1i2i3i3i2i3i3i3i3i2i3i3i2i2i2i3i3i2i3i3i2i2i2i3i3i2i3i3i2i2hg:68oR0d950.5R1ad201.5d360.5d201.5d941d323.5d941d478d941d549.75d871d621.5d801d621.5d650d621.5d500d549.75d430.25d478d360.5d323.5d360.5d201.5d360.5d100.5d277.5d308d277.5d525d277.5d626.5d367.75d728d458d728d650d728d843d626d933.5d524d1024d308d1024d100.5d1024d100.5d277.5hR2d788.5R3d728R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i68R11d100.5R12d788.5R13ai1i2i2i3i3i3i3i2i1i2i3i3i3i3i2i2hg:124oR0d950.5R1ad215d241.5d215d1265.5d130d1265.5d130d241.5d215d241.5hR2d345R3d215R4d130R5d782.5R6d-241.5R7d652.5R8d168R9d241.5R10i124R11d130R12d345R13ai1i2i2i2i2hg:67oR0d950.5R1ad659.5d335d659.5d441.5d608.5d394d550.75d370.5d493d347d428d347d300d347d232d425.25d164d503.5d164d651.5d164d799d232d877.25d300d955.5d428d955.5d493d955.5d550.75d932d608.5d908.5d659.5d861d659.5d966.5d606.5d1002.5d547.25d1020.5d488d1038.5d422d1038.5d252.5d1038.5d155d934.75d57.5d831d57.5d651.5d57.5d471.5d155d367.75d252.5d264d422d264d489d264d548.25d281.75d607.5d299.5d659.5d335hR2d715R3d659.5R4d57.5R5d760R6d-14.5R7d702.5R8d168R9d241.5R10i67R11d57.5R12d715R13ai1i2i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3hg:123oR0d950.5R1ad523.5d1119d523.5d1191d492.5d1191d368d1191d325.75d1154d283.5d1117d283.5d1006.5d283.5d887d283.5d811.5d256.5d782.5d229.5d753.5d158.5d753.5d128d753.5d128d682d158.5d682d230d682d256.75d653.25d283.5d624.5d283.5d550d283.5d430d283.5d319.5d325.75d282.75d368d246d492.5d246d523.5d246d523.5d317.5d489.5d317.5d419d317.5d397.5d339.5d376d361.5d376d432d376d556d376d634.5d353.25d670d330.5d705.5d275.5d718d331d731.5d353.5d767d376d802.5d376d880.5d376d1004.5d376d1075d397.5d1097d419d1119d489.5d1119d523.5d1119hR2d651.5R3d523.5R4d128R5d778R6d-167R7d650R8d168R9d241.5R10i123R11d128R12d651.5R13ai1i2i2i3i3i2i3i3i2i2i2i3i3i2i3i3i2i2i2i3i3i2i3i3i3i3i2i3i3i2hg:66oR0d950.5R1ad201.5d667.5d201.5d941d363.5d941d445d941d484.25d907.25d523.5d873.5d523.5d804d523.5d734d484.25d700.75d445d667.5d363.5d667.5d201.5d667.5d201.5d360.5d201.5d585.5d351d585.5d425d585.5d461.25d557.75d497.5d530d497.5d473d497.5d416.5d461.25d388.5d425d360.5d351d360.5d201.5d360.5d100.5d277.5d358.5d277.5d474d277.5d536.5d325.5d599d373.5d599d462d599d530.5d567d571d535d611.5d473d621.5d547.5d637.5d588.75d688.25d630d739d630d815d630d915d562d969.5d494d1024d368.5d1024d100.5d1024d100.5d277.5hR2d702.5R3d630R4d100.5R5d746.5R6d0R7d646R8d168R9d241.5R10i66R11d100.5R12d702.5R13ai1i2i2i3i3i3i3i2i1i2i2i3i3i3i3i2i1i2i3i3i3i3i3i3i3i3i2i2hg:122oR0d950.5R1ad56.5d464d493.5d464d493.5d548d147.5d950.5d493.5d950.5d493.5d1024d44d1024d44d940d390d537.5d56.5d537.5d56.5d464hR2d537.5R3d493.5R4d44R5d560R6d0R7d516R8d168R9d241.5R10i122R11d44R12d537.5R13ai1i2i2i2i2i2i2i2i2i2i2hg:65oR0d950.5R1ad350d377d213d748.5d487.5d748.5d350d377d293d277.5d407.5d277.5d692d1024d587d1024d519d832.5d182.5d832.5d114.5d1024d8d1024d293d277.5hR2d700.5R3d692R4d8R5d746.5R6d0R7d738.5R8d168R9d241.5R10i65R11d8R12d700.5R13ai1i2i2i2i1i2i2i2i2i2i2i2i2hg:121oR0d950.5R1ad329.5d1076d290.5d1176d253.5d1206.5d216.5d1237d154.5d1237d81d1237d81d1160d135d1160d173d1160d194d1142d215d1124d240.5d1057d257d1015d30.5d464d128d464d303d902d478d464d575.5d464d329.5d1076hR2d606R3d575.5R4d30.5R5d560R6d-213R7d529.5R8d168R9d241.5R10i121R11d30.5R12d606R13ai1i3i3i2i2i2i3i3i2i2i2i2i2i2i2hg:64oR0d950.5R1ad381d755.5d381d827d416.5d867.75d452d908.5d514d908.5d575.5d908.5d610.75d867.5d646d826.5d646d755.5d646d685.5d610d644.25d574d603d513d603d452.5d603d416.75d644d381d685d381d755.5d653.5d905d623.5d943.5d584.75d961.75d546d980d494.5d980d408.5d980d354.75d917.75d301d855.5d301d755.5d301d655.5d355d593d409d530.5d494.5d530.5d546d530.5d585d549.25d624d568d653.5d606d653.5d540.5d725d540.5d725d908.5d798d897.5d839.25d841.75d880.5d786d880.5d697.5d880.5d644d864.75d597d849d550d817d510d765d444.5d690.25d409.75d615.5d375d527.5d375d466d375d409.5d391.25d353d407.5d305d439.5d226.5d490.5d182.25d573.25d138d656d138d752.5d138d832d166.75d901.5d195.5d971d250d1024d302.5d1076d371.5d1103.25d440.5d1130.5d519d1130.5d583.5d1130.5d645.75d1108.75d708d1087d760d1046.5d805d1102d742.5d1150.5d668.75d1176.25d595d1202d519d1202d426.5d1202d344.5d1169.25d262.5d1136.5d198.5d1074d134.5d1011.5d101d929.25d67.5d847d67.5d752.5d67.5d661.5d101.5d579d135.5d496.5d198.5d434d263d370.5d347.5d336.75d432d303d526.5d303d632.5d303d723.25d346.5d814d390d875.5d470d913d519d932.75d576.5d952.5d634d952.5d695.5d952.5d827d873d903d793.5d979d653.5d982d653.5d905hR2d1024R3d952.5R4d67.5R5d721R6d-178R7d653.5R8d168R9d241.5R10i64R11d67.5R12d1024R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i2i2i2i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i2i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i2hg:120oR0d950.5R1ad562d464d359.5d736.5d572.5d1024d464d1024d301d804d138d1024d29.5d1024d247d731d48d464d156.5d464d305d663.5d453.5d464d562d464hR2d606R3d572.5R4d29.5R5d560R6d0R7d530.5R8d168R9d241.5R10i120R11d29.5R12d606R13ai1i2i2i2i2i2i2i2i2i2i2i2i2hg:63oR0d950.5R1ad195.5d897d297d897d297d1024d195.5d1024d195.5d897d294d823.5d198.5d823.5d198.5d746.5d198.5d696d212.5d663.5d226.5d631d271.5d588d316.5d543.5d345d517d357.75d493.5d370.5d470d370.5d445.5d370.5d401d337.75d373.5d305d346d251d346d211.5d346d166.75d363.5d122d381d73.5d414.5d73.5d320.5d120.5d292d168.75d278d217d264d268.5d264d360.5d264d416.25d312.5d472d361d472d440.5d472d478.5d454d512.75d436d547d391d590d347d633d323.5d656.5d313.75d669.75d304d683d300d695.5d297d706d295.5d721d294d736d294d762d294d823.5hR2d543.5R3d472R4d73.5R5d760R6d0R7d686.5R8d168R9d241.5R10i63R11d73.5R12d543.5R13ai1i2i2i2i2i1i2i2i3i3i2i3i3i3i3i3i3i2i3i3i3i3i3i3i2i3i3i3i3i2hg:119oR0d950.5R1ad43d464d135d464d250d901d364.5d464d473d464d588d901d702.5d464d794.5d464d648d1024d539.5d1024d419d565d298d1024d189.5d1024d43d464hR2d837.5R3d794.5R4d43R5d560R6d0R7d517R8d168R9d241.5R10i119R11d43R12d837.5R13ai1i2i2i2i2i2i2i2i2i2i2i2i2i2hg:62oR0d950.5R1ad108.5d520d108.5d429d749.5d661.5d749.5d744.5d108.5d977d108.5d886d623.5d703.5d108.5d520hR2d858R3d749.5R4d108.5R5d595R6d47R7d486.5R8d168R9d241.5R10i62R11d108.5R12d858R13ai1i2i2i2i2i2i2i2hg:118oR0d950.5R1ad30.5d464d128d464d303d934d478d464d575.5d464d365.5d1024d240.5d1024d30.5d464hR2d606R3d575.5R4d30.5R5d560R6d0R7d529.5R8d168R9d241.5R10i118R11d30.5R12d606R13ai1i2i2i2i2i2i2i2hg:61oR0d950.5R1ad108.5d559d749.5d559d749.5d643d108.5d643d108.5d559d108.5d763d749.5d763d749.5d848d108.5d848d108.5d763hR2d858R3d749.5R4d108.5R5d465R6d176R7d356.5R8d168R9d241.5R10i61R11d108.5R12d858R13ai1i2i2i2i2i1i2i2i2i2hg:117oR0d950.5R1ad87d803d87d464d179d464d179d799.5d179d879d210d918.75d241d958.5d303d958.5d377.5d958.5d420.75d911d464d863.5d464d781.5d464d464d556d464d556d1024d464d1024d464d938d430.5d989d386.25d1013.75d342d1038.5d283.5d1038.5d187d1038.5d137d978.5d87d918.5d87d803hR2d649R3d556R4d87R5d560R6d-14.5R7d473R8d168R9d241.5R10i117R11d87R12d649R13ai1i2i2i2i3i3i3i3i2i2i2i2i2i3i3i3i3hg:60oR0d950.5R1ad749.5d520d233.5d703.5d749.5d886d749.5d977d108.5d744.5d108.5d661.5d749.5d429d749.5d520hR2d858R3d749.5R4d108.5R5d595R6d47R7d486.5R8d168R9d241.5R10i60R11d108.5R12d858R13ai1i2i2i2i2i2i2i2hg:116oR0d950.5R1ad187.5d305d187.5d464d377d464d377d535.5d187.5d535.5d187.5d839.5d187.5d908d206.25d927.5d225d947d282.5d947d377d947d377d1024d282.5d1024d176d1024d135.5d984.25d95d944.5d95d839.5d95d535.5d27.5d535.5d27.5d464d95d464d95d305d187.5d305hR2d401.5R3d377R4d27.5R5d719R6d0R7d691.5R8d168R9d241.5R10i116R11d27.5R12d401.5R13ai1i2i2i2i2i2i3i3i2i2i2i3i3i2i2i2i2i2i2hg:59oR0d950.5R1ad120d494.5d225.5d494.5d225.5d621.5d120d621.5d120d494.5d120d897d225.5d897d225.5d983d143.5d1143d79d1143d120d983d120d897hR2d345R3d225.5R4d79R5d529.5R6d-119R7d450.5R8d168R9d241.5R10i59R11d79R12d345R13ai1i2i2i2i2i1i2i2i2i2i2i2hg:115oR0d950.5R1ad453.5d480.5d453.5d567.5d414.5d547.5d372.5d537.5d330.5d527.5d285.5d527.5d217d527.5d182.75d548.5d148.5d569.5d148.5d611.5d148.5d643.5d173d661.75d197.5d680d271.5d696.5d303d703.5d401d724.5d442.25d762.75d483.5d801d483.5d869.5d483.5d947.5d421.75d993d360d1038.5d252d1038.5d207d1038.5d158.25d1029.75d109.5d1021d55.5d1003.5d55.5d908.5d106.5d935d156d948.25d205.5d961.5d254d961.5d319d961.5d354d939.25d389d917d389d876.5d389d839d363.75d819d338.5d799d253d780.5d221d773d135.5d755d97.5d717.75d59.5d680.5d59.5d615.5d59.5d536.5d115.5d493.5d171.5d450.5d274.5d450.5d325.5d450.5d370.5d458d415.5d465.5d453.5d480.5hR2d533.5R3d483.5R4d55.5R5d573.5R6d-14.5R7d518R8d168R9d241.5R10i115R11d55.5R12d533.5R13ai1i2i3i3i3i3i3i3i2i3i3i3i3i3i3i2i3i3i3i3i3i3i2i3i3i3i3i3i3hg:58oR0d950.5R1ad120d897d225.5d897d225.5d1024d120d1024d120d897d120d494.5d225.5d494.5d225.5d621.5d120d621.5d120d494.5hR2d345R3d225.5R4d120R5d529.5R6d0R7d409.5R8d168R9d241.5R10i58R11d120R12d345R13ai1i2i2i2i2i1i2i2i2i2hg:114oR0d950.5R1ad421d550d405.5d541d387.25d536.75d369d532.5d347d532.5d269d532.5d227.25d583.25d185.5d634d185.5d729d185.5d1024d93d1024d93d464d185.5d464d185.5d551d214.5d500d261d475.25d307.5d450.5d374d450.5d383.5d450.5d395d451.75d406.5d453d420.5d455.5d421d550hR2d421R3d421R4d93R5d573.5R6d0R7d480.5R8d168R9d241.5R10i114R11d93R12d421R13ai1i3i3i3i3i2i2i2i2i2i3i3i3i3i2hg:57oR0d950.5R1ad112.5d1008.5d112.5d916.5d150.5d934.5d189.5d944d228.5d953.5d266d953.5d366d953.5d418.75d886.25d471.5d819d479d682d450d725d405.5d748d361d771d307d771d195d771d129.75d703.25d64.5d635.5d64.5d518d64.5d403d132.5d333.5d200.5d264d313.5d264d443d264d511.25d363.25d579.5d462.5d579.5d651.5d579.5d828d495.75d933.25d412d1038.5d270.5d1038.5d232.5d1038.5d193.5d1031d154.5d1023.5d112.5d1008.5d313.5d692d381.5d692d421.25d645.5d461d599d461d518d461d437.5d421.25d390.75d381.5d344d313.5d344d245.5d344d205.75d390.75d166d437.5d166d518d166d599d205.75d645.5d245.5d692d313.5d692hR2d651.5R3d579.5R4d64.5R5d760R6d-14.5R7d695.5R8d168R9d241.5R10i57R11d64.5R12d651.5R13ai1i2i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:113oR0d950.5R1ad151.5d744.5d151.5d846d193.25d903.75d235d961.5d308d961.5d381d961.5d423d903.75d465d846d465d744.5d465d643d423d585.25d381d527.5d308d527.5d235d527.5d193.25d585.25d151.5d643d151.5d744.5d465d940d436d990d391.75d1014.25d347.5d1038.5d285.5d1038.5d184d1038.5d120.25d957.5d56.5d876.5d56.5d744.5d56.5d612.5d120.25d531.5d184d450.5d285.5d450.5d347.5d450.5d391.75d474.75d436d499d465d549d465d464d557d464d557d1237d465d1237d465d940hR2d650R3d557R4d56.5R5d573.5R6d-213R7d517R8d168R9d241.5R10i113R11d56.5R12d650R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i2i2i2i2i2hg:56oR0d950.5R1ad325.5d669.5d253.5d669.5d212.25d708d171d746.5d171d814d171d881.5d212.25d920d253.5d958.5d325.5d958.5d397.5d958.5d439d919.75d480.5d881d480.5d814d480.5d746.5d439.25d708d398d669.5d325.5d669.5d224.5d626.5d159.5d610.5d123.25d566d87d521.5d87d457.5d87d368d150.75d316d214.5d264d325.5d264d437d264d500.5d316d564d368d564d457.5d564d521.5d527.75d566d491.5d610.5d427d626.5d500d643.5d540.75d693d581.5d742.5d581.5d814d581.5d922.5d515.25d980.5d449d1038.5d325.5d1038.5d202d1038.5d135.75d980.5d69.5d922.5d69.5d814d69.5d742.5d110.5d693d151.5d643.5d224.5d626.5d187.5d467d187.5d525d223.75d557.5d260d590d325.5d590d390.5d590d427.25d557.5d464d525d464d467d464d409d427.25d376.5d390.5d344d325.5d344d260d344d223.75d376.5d187.5d409d187.5d467hR2d651.5R3d581.5R4d69.5R5d760R6d-14.5R7d690.5R8d168R9d241.5R10i56R11d69.5R12d651.5R13ai1i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hg:112oR0d950.5R1ad185.5d940d185.5d1237d93d1237d93d464d185.5d464d185.5d549d214.5d499d258.75d474.75d303d450.5d364.5d450.5d466.5d450.5d530.25d531.5d594d612.5d594d744.5d594d876.5d530.25d957.5d466.5d1038.5d364.5d1038.5d303d1038.5d258.75d1014.25d214.5d990d185.5d940d498.5d744.5d498.5d643d456.75d585.25d415d527.5d342d527.5d269d527.5d227.25d585.25d185.5d643d185.5d744.5d185.5d846d227.25d903.75d269d961.5d342d961.5d415d961.5d456.75d903.75d498.5d846d498.5d744.5hR2d650R3d594R4d93R5d573.5R6d-213R7d480.5R8d168R9d241.5R10i112R11d93R12d650R13ai1i2i2i2i2i2i3i3i3i3i3i3i3i3i1i3i3i3i3i3i3i3i3hgh";
zpp_nape.phys.ZPP_Body.nextId = 0;
jeash.events.Event.ACTIVATE = "activate";
jeash.events.Event.ADDED = "added";
jeash.events.Event.ADDED_TO_STAGE = "addedToStage";
jeash.events.Event.CANCEL = "cancel";
jeash.events.Event.CHANGE = "change";
jeash.events.Event.CLOSE = "close";
jeash.events.Event.COMPLETE = "complete";
jeash.events.Event.CONNECT = "connect";
jeash.events.Event.DEACTIVATE = "deactivate";
jeash.events.Event.ENTER_FRAME = "enterFrame";
jeash.events.Event.ID3 = "id3";
jeash.events.Event.INIT = "init";
jeash.events.Event.MOUSE_LEAVE = "mouseLeave";
jeash.events.Event.OPEN = "open";
jeash.events.Event.REMOVED = "removed";
jeash.events.Event.REMOVED_FROM_STAGE = "removedFromStage";
jeash.events.Event.RENDER = "render";
jeash.events.Event.RESIZE = "resize";
jeash.events.Event.SCROLL = "scroll";
jeash.events.Event.SELECT = "select";
jeash.events.Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
jeash.events.Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
jeash.events.Event.TAB_INDEX_CHANGE = "tabIndexChange";
jeash.events.Event.UNLOAD = "unload";
jeash.events.Event.SOUND_COMPLETE = "soundComplete";
jeash.events.KeyboardEvent.KEY_DOWN = "KEY_DOWN";
jeash.events.KeyboardEvent.KEY_UP = "KEY_UP";
zpp_nape.util.ZPP_Debug.internal = false;
zpp_nape.util.ZPP_ConstraintList.internal = false;
zpp_nape.util.ZPP_ListenerList.internal = false;
zpp_nape.util.ZPP_RayResultList.internal = false;
zpp_nape.util.ZPP_Vec2List.internal = false;
zpp_nape.util.ZPP_GeomPolyList.internal = false;
zpp_nape.util.ZPP_BodyList.internal = false;
zpp_nape.util.ZPP_EdgeList.internal = false;
zpp_nape.util.ZPP_ShapeList.internal = false;
zpp_nape.util.ZPP_ContactList.internal = false;
zpp_nape.util.ZPP_ArbiterList.internal = false;
zpp_nape.ZPP_Const.POSINF = Math.POSITIVE_INFINITY;
zpp_nape.ZPP_Const.NEGINF = Math.NEGATIVE_INFINITY;
zpp_nape.ZPP_Const.EPSILON = 1e-8;
zpp_nape.ZPP_Const.FMAX = 1e100;
jeash.events.IOErrorEvent.IO_ERROR = "IO_ERROR";
jeash.text.TextField.mDefaultFont = "Bitstream_Vera_Sans";
jeash.text.TextField.sSelectionOwner = null;
zpp_nape.shape.ZPP_Shape.nextId = 0;
zpp_nape.geom.ZPP_GeomVertexIterator.internal = false;
zpp_nape.util.ZPP_PubPool.poolVec2 = null;
zpp_nape.util.ZPP_PubPool.nextVec2 = null;
zpp_nape.callbacks.ZPP_Callback.internal = false;
zpp_nape.geom.ZPP_MarchingSquares.look_march = [-1,224,56,216,14,-1,54,214,131,99,-1,91,141,109,181,85];
jeash.display.StageQuality.BEST = "best";
jeash.display.StageQuality.HIGH = "high";
jeash.display.StageQuality.MEDIUM = "medium";
jeash.display.StageQuality.LOW = "low";
jeash.Lib.DEFAULT_PRIORITY = ["2d","swf"];
jeash.Lib.mShowCursor = true;
jeash.Lib.mShowFPS = false;
jeash.Lib.mFullscreen = false;
jeash.Lib.mCollectEveryFrame = false;
jeash.Lib.mQuitOnEscape = true;
jeash.Lib.mLastMouse = new jeash.geom.Point();
jeash.Lib.VENDOR_HTML_TAG = "data-";
jeash.Lib.HTML_DIV_EVENT_TYPES = ["resize","mouseup","mouseover","mouseout","mousemove","mousedown","mousewheel","focus","dblclick","click","blur"];
jeash.Lib.HTML_WINDOW_EVENT_TYPES = ["keyup","keypress","keydown"];
jeash.Lib.JEASH_IDENTIFIER = "haxe:jeash";
jeash.Lib.DEFAULT_WIDTH = 500;
jeash.Lib.DEFAULT_HEIGHT = 500;
jeash.text.TextFieldAutoSize.CENTER = "CENTER";
jeash.text.TextFieldAutoSize.LEFT = "LEFT";
jeash.text.TextFieldAutoSize.NONE = "NONE";
jeash.text.TextFieldAutoSize.RIGHT = "RIGHT";
zpp_nape.geom.ZPP_Ray.internal = false;
jeash.media.Sound.MEDIA_TYPE_MP3 = "audio/mpeg";
jeash.media.Sound.MEDIA_TYPE_OGG = "audio/ogg; codecs=\"vorbis\"";
jeash.media.Sound.MEDIA_TYPE_WAV = "audio/wav; codecs=\"1\"";
jeash.media.Sound.MEDIA_TYPE_AAC = "audio/mp4; codecs=\"mp4a.40.2\"";
jeash.media.Sound.EXTENSION_MP3 = "mp3";
jeash.media.Sound.EXTENSION_OGG = "ogg";
jeash.media.Sound.EXTENSION_WAV = "wav";
jeash.media.Sound.EXTENSION_AAC = "aac";
zpp_nape.dynamics.ZPP_Contact.internal = false;
zpp_nape.callbacks.ZPP_CbType.internal = false;
zpp_nape.callbacks.ZPP_CbType.nextId = 0;
zpp_nape.callbacks.ZPP_CbType.map = new Array();
zpp_nape.callbacks.ZPP_CbType.DEFAULT = new zpp_nape.callbacks.ZPP_CbType();
jeash.ui.Keyboard.KEY_0 = 48;
jeash.ui.Keyboard.KEY_1 = 49;
jeash.ui.Keyboard.KEY_2 = 50;
jeash.ui.Keyboard.KEY_3 = 51;
jeash.ui.Keyboard.KEY_4 = 52;
jeash.ui.Keyboard.KEY_5 = 53;
jeash.ui.Keyboard.KEY_6 = 54;
jeash.ui.Keyboard.KEY_7 = 55;
jeash.ui.Keyboard.KEY_8 = 56;
jeash.ui.Keyboard.KEY_9 = 57;
jeash.ui.Keyboard.A = 65;
jeash.ui.Keyboard.B = 66;
jeash.ui.Keyboard.C = 67;
jeash.ui.Keyboard.D = 68;
jeash.ui.Keyboard.E = 69;
jeash.ui.Keyboard.F = 70;
jeash.ui.Keyboard.G = 71;
jeash.ui.Keyboard.H = 72;
jeash.ui.Keyboard.I = 73;
jeash.ui.Keyboard.J = 74;
jeash.ui.Keyboard.K = 75;
jeash.ui.Keyboard.L = 76;
jeash.ui.Keyboard.M = 77;
jeash.ui.Keyboard.N = 78;
jeash.ui.Keyboard.O = 79;
jeash.ui.Keyboard.P = 80;
jeash.ui.Keyboard.Q = 81;
jeash.ui.Keyboard.R = 82;
jeash.ui.Keyboard.S = 83;
jeash.ui.Keyboard.T = 84;
jeash.ui.Keyboard.U = 85;
jeash.ui.Keyboard.V = 86;
jeash.ui.Keyboard.W = 87;
jeash.ui.Keyboard.X = 88;
jeash.ui.Keyboard.Y = 89;
jeash.ui.Keyboard.Z = 90;
jeash.ui.Keyboard.NUMPAD_0 = 96;
jeash.ui.Keyboard.NUMPAD_1 = 97;
jeash.ui.Keyboard.NUMPAD_2 = 98;
jeash.ui.Keyboard.NUMPAD_3 = 99;
jeash.ui.Keyboard.NUMPAD_4 = 100;
jeash.ui.Keyboard.NUMPAD_5 = 101;
jeash.ui.Keyboard.NUMPAD_6 = 102;
jeash.ui.Keyboard.NUMPAD_7 = 103;
jeash.ui.Keyboard.NUMPAD_8 = 104;
jeash.ui.Keyboard.NUMPAD_9 = 105;
jeash.ui.Keyboard.NUMPAD_MULTIPLY = 106;
jeash.ui.Keyboard.NUMPAD_ADD = 107;
jeash.ui.Keyboard.NUMPAD_ENTER = 108;
jeash.ui.Keyboard.NUMPAD_SUBTRACT = 109;
jeash.ui.Keyboard.NUMPAD_DECIMAL = 110;
jeash.ui.Keyboard.NUMPAD_DIVIDE = 111;
jeash.ui.Keyboard.F1 = 112;
jeash.ui.Keyboard.F2 = 113;
jeash.ui.Keyboard.F3 = 114;
jeash.ui.Keyboard.F4 = 115;
jeash.ui.Keyboard.F5 = 116;
jeash.ui.Keyboard.F6 = 117;
jeash.ui.Keyboard.F7 = 118;
jeash.ui.Keyboard.F8 = 119;
jeash.ui.Keyboard.F9 = 120;
jeash.ui.Keyboard.F10 = 121;
jeash.ui.Keyboard.F11 = 122;
jeash.ui.Keyboard.F12 = 123;
jeash.ui.Keyboard.F13 = 124;
jeash.ui.Keyboard.F14 = 125;
jeash.ui.Keyboard.F15 = 126;
jeash.ui.Keyboard.BACKSPACE = 8;
jeash.ui.Keyboard.TAB = 9;
jeash.ui.Keyboard.ENTER = 13;
jeash.ui.Keyboard.SHIFT = 16;
jeash.ui.Keyboard.CONTROL = 17;
jeash.ui.Keyboard.CAPS_LOCK = 18;
jeash.ui.Keyboard.ESCAPE = 27;
jeash.ui.Keyboard.SPACE = 32;
jeash.ui.Keyboard.PAGE_UP = 33;
jeash.ui.Keyboard.PAGE_DOWN = 34;
jeash.ui.Keyboard.END = 35;
jeash.ui.Keyboard.HOME = 36;
jeash.ui.Keyboard.LEFT = 37;
jeash.ui.Keyboard.RIGHT = 39;
jeash.ui.Keyboard.UP = 38;
jeash.ui.Keyboard.DOWN = 40;
jeash.ui.Keyboard.INSERT = 45;
jeash.ui.Keyboard.DELETE = 46;
jeash.ui.Keyboard.NUMLOCK = 144;
jeash.ui.Keyboard.BREAK = 19;
jeash.ui.Keyboard.DOM_VK_CANCEL = 3;
jeash.ui.Keyboard.DOM_VK_HELP = 6;
jeash.ui.Keyboard.DOM_VK_BACK_SPACE = 8;
jeash.ui.Keyboard.DOM_VK_TAB = 9;
jeash.ui.Keyboard.DOM_VK_CLEAR = 12;
jeash.ui.Keyboard.DOM_VK_RETURN = 13;
jeash.ui.Keyboard.DOM_VK_ENTER = 14;
jeash.ui.Keyboard.DOM_VK_SHIFT = 16;
jeash.ui.Keyboard.DOM_VK_CONTROL = 17;
jeash.ui.Keyboard.DOM_VK_ALT = 18;
jeash.ui.Keyboard.DOM_VK_PAUSE = 19;
jeash.ui.Keyboard.DOM_VK_CAPS_LOCK = 20;
jeash.ui.Keyboard.DOM_VK_ESCAPE = 27;
jeash.ui.Keyboard.DOM_VK_SPACE = 32;
jeash.ui.Keyboard.DOM_VK_PAGE_UP = 33;
jeash.ui.Keyboard.DOM_VK_PAGE_DOWN = 34;
jeash.ui.Keyboard.DOM_VK_END = 35;
jeash.ui.Keyboard.DOM_VK_HOME = 36;
jeash.ui.Keyboard.DOM_VK_LEFT = 37;
jeash.ui.Keyboard.DOM_VK_UP = 38;
jeash.ui.Keyboard.DOM_VK_RIGHT = 39;
jeash.ui.Keyboard.DOM_VK_DOWN = 40;
jeash.ui.Keyboard.DOM_VK_PRINTSCREEN = 44;
jeash.ui.Keyboard.DOM_VK_INSERT = 45;
jeash.ui.Keyboard.DOM_VK_DELETE = 46;
jeash.ui.Keyboard.DOM_VK_0 = 48;
jeash.ui.Keyboard.DOM_VK_1 = 49;
jeash.ui.Keyboard.DOM_VK_2 = 50;
jeash.ui.Keyboard.DOM_VK_3 = 51;
jeash.ui.Keyboard.DOM_VK_4 = 52;
jeash.ui.Keyboard.DOM_VK_5 = 53;
jeash.ui.Keyboard.DOM_VK_6 = 54;
jeash.ui.Keyboard.DOM_VK_7 = 55;
jeash.ui.Keyboard.DOM_VK_8 = 56;
jeash.ui.Keyboard.DOM_VK_9 = 57;
jeash.ui.Keyboard.DOM_VK_SEMICOLON = 59;
jeash.ui.Keyboard.DOM_VK_EQUALS = 61;
jeash.ui.Keyboard.DOM_VK_A = 65;
jeash.ui.Keyboard.DOM_VK_B = 66;
jeash.ui.Keyboard.DOM_VK_C = 67;
jeash.ui.Keyboard.DOM_VK_D = 68;
jeash.ui.Keyboard.DOM_VK_E = 69;
jeash.ui.Keyboard.DOM_VK_F = 70;
jeash.ui.Keyboard.DOM_VK_G = 71;
jeash.ui.Keyboard.DOM_VK_H = 72;
jeash.ui.Keyboard.DOM_VK_I = 73;
jeash.ui.Keyboard.DOM_VK_J = 74;
jeash.ui.Keyboard.DOM_VK_K = 75;
jeash.ui.Keyboard.DOM_VK_L = 76;
jeash.ui.Keyboard.DOM_VK_M = 77;
jeash.ui.Keyboard.DOM_VK_N = 78;
jeash.ui.Keyboard.DOM_VK_O = 79;
jeash.ui.Keyboard.DOM_VK_P = 80;
jeash.ui.Keyboard.DOM_VK_Q = 81;
jeash.ui.Keyboard.DOM_VK_R = 82;
jeash.ui.Keyboard.DOM_VK_S = 83;
jeash.ui.Keyboard.DOM_VK_T = 84;
jeash.ui.Keyboard.DOM_VK_U = 85;
jeash.ui.Keyboard.DOM_VK_V = 86;
jeash.ui.Keyboard.DOM_VK_W = 87;
jeash.ui.Keyboard.DOM_VK_X = 88;
jeash.ui.Keyboard.DOM_VK_Y = 89;
jeash.ui.Keyboard.DOM_VK_Z = 90;
jeash.ui.Keyboard.DOM_VK_CONTEXT_MENU = 93;
jeash.ui.Keyboard.DOM_VK_NUMPAD0 = 96;
jeash.ui.Keyboard.DOM_VK_NUMPAD1 = 97;
jeash.ui.Keyboard.DOM_VK_NUMPAD2 = 98;
jeash.ui.Keyboard.DOM_VK_NUMPAD3 = 99;
jeash.ui.Keyboard.DOM_VK_NUMPAD4 = 100;
jeash.ui.Keyboard.DOM_VK_NUMPAD5 = 101;
jeash.ui.Keyboard.DOM_VK_NUMPAD6 = 102;
jeash.ui.Keyboard.DOM_VK_NUMPAD7 = 103;
jeash.ui.Keyboard.DOM_VK_NUMPAD8 = 104;
jeash.ui.Keyboard.DOM_VK_NUMPAD9 = 105;
jeash.ui.Keyboard.DOM_VK_MULTIPLY = 106;
jeash.ui.Keyboard.DOM_VK_ADD = 107;
jeash.ui.Keyboard.DOM_VK_SEPARATOR = 108;
jeash.ui.Keyboard.DOM_VK_SUBTRACT = 109;
jeash.ui.Keyboard.DOM_VK_DECIMAL = 110;
jeash.ui.Keyboard.DOM_VK_DIVIDE = 111;
jeash.ui.Keyboard.DOM_VK_F1 = 112;
jeash.ui.Keyboard.DOM_VK_F2 = 113;
jeash.ui.Keyboard.DOM_VK_F3 = 114;
jeash.ui.Keyboard.DOM_VK_F4 = 115;
jeash.ui.Keyboard.DOM_VK_F5 = 116;
jeash.ui.Keyboard.DOM_VK_F6 = 117;
jeash.ui.Keyboard.DOM_VK_F7 = 118;
jeash.ui.Keyboard.DOM_VK_F8 = 119;
jeash.ui.Keyboard.DOM_VK_F9 = 120;
jeash.ui.Keyboard.DOM_VK_F10 = 121;
jeash.ui.Keyboard.DOM_VK_F11 = 122;
jeash.ui.Keyboard.DOM_VK_F12 = 123;
jeash.ui.Keyboard.DOM_VK_F13 = 124;
jeash.ui.Keyboard.DOM_VK_F14 = 125;
jeash.ui.Keyboard.DOM_VK_F15 = 126;
jeash.ui.Keyboard.DOM_VK_F16 = 127;
jeash.ui.Keyboard.DOM_VK_F17 = 128;
jeash.ui.Keyboard.DOM_VK_F18 = 129;
jeash.ui.Keyboard.DOM_VK_F19 = 130;
jeash.ui.Keyboard.DOM_VK_F20 = 131;
jeash.ui.Keyboard.DOM_VK_F21 = 132;
jeash.ui.Keyboard.DOM_VK_F22 = 133;
jeash.ui.Keyboard.DOM_VK_F23 = 134;
jeash.ui.Keyboard.DOM_VK_F24 = 135;
jeash.ui.Keyboard.DOM_VK_NUM_LOCK = 144;
jeash.ui.Keyboard.DOM_VK_SCROLL_LOCK = 145;
jeash.ui.Keyboard.DOM_VK_COMMA = 188;
jeash.ui.Keyboard.DOM_VK_PERIOD = 190;
jeash.ui.Keyboard.DOM_VK_SLASH = 191;
jeash.ui.Keyboard.DOM_VK_BACK_QUOTE = 192;
jeash.ui.Keyboard.DOM_VK_OPEN_BRACKET = 219;
jeash.ui.Keyboard.DOM_VK_BACK_SLASH = 220;
jeash.ui.Keyboard.DOM_VK_CLOSE_BRACKET = 221;
jeash.ui.Keyboard.DOM_VK_QUOTE = 222;
jeash.ui.Keyboard.DOM_VK_META = 224;
jeash.ui.Keyboard.DOM_VK_KANA = 21;
jeash.ui.Keyboard.DOM_VK_HANGUL = 21;
jeash.ui.Keyboard.DOM_VK_JUNJA = 23;
jeash.ui.Keyboard.DOM_VK_FINAL = 24;
jeash.ui.Keyboard.DOM_VK_HANJA = 25;
jeash.ui.Keyboard.DOM_VK_KANJI = 25;
jeash.ui.Keyboard.DOM_VK_CONVERT = 28;
jeash.ui.Keyboard.DOM_VK_NONCONVERT = 29;
jeash.ui.Keyboard.DOM_VK_ACEPT = 30;
jeash.ui.Keyboard.DOM_VK_MODECHANGE = 31;
jeash.ui.Keyboard.DOM_VK_SELECT = 41;
jeash.ui.Keyboard.DOM_VK_PRINT = 42;
jeash.ui.Keyboard.DOM_VK_EXECUTE = 43;
jeash.ui.Keyboard.DOM_VK_SLEEP = 95;
jeash.events.FocusEvent.FOCUS_IN = "FOCUS_IN";
jeash.events.FocusEvent.FOCUS_OUT = "FOCUS_OUT";
jeash.events.FocusEvent.KEY_FOCUS_CHANGE = "KEY_FOCUS_CHANGE";
jeash.events.FocusEvent.MOUSE_FOCUS_CHANGE = "MOUSE_FOCUS_CHANGE";
Xml.enode = new EReg("^<([a-zA-Z0-9:_-]+)","");
Xml.ecdata = new EReg("^<!\\[CDATA\\[","i");
Xml.edoctype = new EReg("^<!DOCTYPE ","i");
Xml.eend = new EReg("^</([a-zA-Z0-9:_-]+)>","");
Xml.epcdata = new EReg("^[^<]+","");
Xml.ecomment = new EReg("^<!--","");
Xml.eprolog = new EReg("^<\\?[^\\?]+\\?>","");
Xml.eattribute = new EReg("^\\s*([a-zA-Z0-9:_-]+)\\s*=\\s*([\"'])([^\\2]*?)\\2","");
Xml.eclose = new EReg("^[ \r\n\t]*(>|(/>))","");
Xml.ecdata_end = new EReg("\\]\\]>","");
Xml.edoctype_elt = new EReg("[\\[|\\]>]","");
Xml.ecomment_end = new EReg("-->","");
zpp_nape.geom.ZPP_Collide.flowpoly = new zpp_nape.util.ZNPList_ZPP_Vec2();
zpp_nape.geom.ZPP_Collide.flowsegs = new zpp_nape.util.ZNPList_ZPP_Vec2();
zpp_nape.dynamics.ZPP_Arbiter.internal = false;
zpp_nape.dynamics.ZPP_Arbiter.COL = 0;
zpp_nape.dynamics.ZPP_Arbiter.FLUID = 1;
zpp_nape.dynamics.ZPP_Arbiter.SENSOR = 2;
zpp_nape.dynamics.ZPP_ColArbiter.FACE1 = 0;
zpp_nape.dynamics.ZPP_ColArbiter.FACE2 = 1;
zpp_nape.dynamics.ZPP_ColArbiter.CIRCLE = 2;
jeash.events.MouseEvent.CLICK = "click";
jeash.events.MouseEvent.DOUBLE_CLICK = "doubleClick";
jeash.events.MouseEvent.MOUSE_DOWN = "mouseDown";
jeash.events.MouseEvent.MOUSE_MOVE = "mouseMove";
jeash.events.MouseEvent.MOUSE_OUT = "mouseOut";
jeash.events.MouseEvent.MOUSE_OVER = "mouseOver";
jeash.events.MouseEvent.MOUSE_UP = "mouseUp";
jeash.events.MouseEvent.MOUSE_WHEEL = "mouseWheel";
jeash.events.MouseEvent.ROLL_OUT = "rollOut";
jeash.events.MouseEvent.ROLL_OVER = "rollOver";
jeash.events.EventPhase.CAPTURING_PHASE = 0;
jeash.events.EventPhase.AT_TARGET = 1;
jeash.events.EventPhase.BUBBLING_PHASE = 2;
zpp_nape.callbacks.ZPP_Listener.internal = false;
jeash.text.FontInstance.mSolidFonts = new Hash();
jeash.display.GraphicsPathCommand.LINE_TO = 2;
jeash.display.GraphicsPathCommand.MOVE_TO = 1;
jeash.display.GraphicsPathCommand.CURVE_TO = 3;
jeash.display.GraphicsPathCommand.WIDE_LINE_TO = 5;
jeash.display.GraphicsPathCommand.WIDE_MOVE_TO = 4;
jeash.display.GraphicsPathCommand.NO_OP = 0;
haxe.Unserializer.DEFAULT_RESOLVER = Type;
haxe.Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe.Unserializer.CODES = null;
zpp_nape.space.ZPP_AABBTree.tmpaabb = new zpp_nape.geom.ZPP_AABB();
zpp_nape.space.ZPP_DynAABBPhase.FATTEN = 3.0;
zpp_nape.space.ZPP_DynAABBPhase.VEL_STEPS = 2.0;
jeash.display.BitmapDataChannel.ALPHA = 8;
jeash.display.BitmapDataChannel.BLUE = 4;
jeash.display.BitmapDataChannel.GREEN = 2;
jeash.display.BitmapDataChannel.RED = 1;
js.Lib.onerror = null;
jeash.display.Stage.jeashMouseChanges = [jeash.events.MouseEvent.MOUSE_OUT,jeash.events.MouseEvent.MOUSE_OVER,jeash.events.MouseEvent.ROLL_OUT,jeash.events.MouseEvent.ROLL_OVER];
jeash.display.Stage.DEFAULT_FRAMERATE = 60.0;
jeash.display.Stage.DEFAULT_PROJ_MATRIX = [1.,0,0,0,0,1,0,0,0,0,-1,-1,0,0,0,0];
jeash.text.TextFieldType.DYNAMIC = "DYNAMIC";
jeash.text.TextFieldType.INPUT = "INPUT";
zpp_nape.geom.ZPP_Distance.defcache = new zpp_nape.geom.ZPP_SCache();
zpp_nape.util.ZPP_Flags.internal = false;
zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN = 0;
zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING = 1;
zpp_nape.util.ZPP_Flags.id_CbEvent_END = 2;
zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE = 3;
zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP = 4;
zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK = 5;
zpp_nape.util.ZPP_Flags.id_ImmFlag_ACCEPT = 0;
zpp_nape.util.ZPP_Flags.id_ImmFlag_IGNORE = 2;
zpp_nape.util.ZPP_Flags.id_ImmFlag_ACCEPT_ONCE = 3;
zpp_nape.util.ZPP_Flags.id_ImmFlag_IGNORE_ONCE = 4;
zpp_nape.util.ZPP_Flags.id_ListenerType_BODY = 0;
zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT = 1;
zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION = 2;
zpp_nape.util.ZPP_Flags.id_ListenerType_IMM = 3;
zpp_nape.util.ZPP_Flags.id_Broadphase_DYNAMIC_AABB_TREE = 0;
zpp_nape.util.ZPP_Flags.id_Broadphase_SWEEP_AND_PRUNE = 1;
zpp_nape.util.ZPP_Flags.id_Winding_UNDEFINED = 0;
zpp_nape.util.ZPP_Flags.id_Winding_CLOCKWISE = 1;
zpp_nape.util.ZPP_Flags.id_Winding_ANTICLOCKWISE = 2;
zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT = 0;
zpp_nape.util.ZPP_Flags.id_MassMode_FIXED = 1;
zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT = 0;
zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED = 1;
zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED = 2;
zpp_nape.util.ZPP_Flags.id_BodyType_STATIC = 1;
zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC = 2;
zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC = 3;
zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT = 0;
zpp_nape.util.ZPP_Flags.id_InertiaMode_FIXED = 1;
zpp_nape.util.ZPP_Flags.id_ValidationResult_VALID = 0;
zpp_nape.util.ZPP_Flags.id_ValidationResult_DEGENERATE = 1;
zpp_nape.util.ZPP_Flags.id_ValidationResult_DEGENERATE_EDGES = 2;
zpp_nape.util.ZPP_Flags.id_ValidationResult_CONCAVE = 3;
zpp_nape.util.ZPP_Flags.id_ValidationResult_SELF_INTERSECTING = 4;
zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE = 0;
zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON = 1;
zpp_nape.util.ZPP_Flags.id_ArbiterType_COLLISION = 0;
zpp_nape.util.ZPP_Flags.id_ArbiterType_FLUID = 1;
zpp_nape.util.ZPP_Flags.id_ArbiterType_SENSOR = 2;
zpp_nape.geom.ZPP_SimpleVert.nextId = 0;
zpp_nape.geom.ZPP_SimpleSeg.nextId = 0;
zpp_nape.geom.ZPP_Simple.sweep = new zpp_nape.geom.ZPP_SimpleSweep();
zpp_nape.geom.ZPP_Simple.inthash = new zpp_nape.util.FastHash2_Hashable2_Bool();
zpp_nape.phys.ZPP_Material.WAKE = 1;
zpp_nape.phys.ZPP_Material.PROPS = 2;
zpp_nape.phys.ZPP_Material.ANGDRAG = 4;
zpp_nape.phys.ZPP_Material.ARBITERS = 8;
haxe.Timer.arr = new Array();
jeash.display.Graphics.defaultFontName = "ARIAL.TTF";
jeash.display.Graphics.defaultFontSize = 12;
jeash.display.Graphics.immediateMatrix = null;
jeash.display.Graphics.immediateMask = null;
jeash.display.Graphics.TOP = 0;
jeash.display.Graphics.CENTER = 1;
jeash.display.Graphics.BOTTOM = 2;
jeash.display.Graphics.LEFT = 0;
jeash.display.Graphics.RIGHT = 2;
jeash.display.Graphics.RADIAL = 1;
jeash.display.Graphics.SPREAD_REPEAT = 2;
jeash.display.Graphics.SPREAD_REFLECT = 4;
jeash.display.Graphics.EDGE_MASK = 240;
jeash.display.Graphics.EDGE_CLAMP = 0;
jeash.display.Graphics.EDGE_REPEAT = 16;
jeash.display.Graphics.EDGE_UNCHECKED = 32;
jeash.display.Graphics.EDGE_REPEAT_POW2 = 48;
jeash.display.Graphics.END_NONE = 0;
jeash.display.Graphics.END_ROUND = 256;
jeash.display.Graphics.END_SQUARE = 512;
jeash.display.Graphics.END_MASK = 768;
jeash.display.Graphics.END_SHIFT = 8;
jeash.display.Graphics.CORNER_ROUND = 0;
jeash.display.Graphics.CORNER_MITER = 4096;
jeash.display.Graphics.CORNER_BEVEL = 8192;
jeash.display.Graphics.CORNER_MASK = 12288;
jeash.display.Graphics.CORNER_SHIFT = 12;
jeash.display.Graphics.PIXEL_HINTING = 16384;
jeash.display.Graphics.BMP_REPEAT = 16;
jeash.display.Graphics.BMP_SMOOTH = 65536;
jeash.display.Graphics.SCALE_NONE = 0;
jeash.display.Graphics.SCALE_VERTICAL = 1;
jeash.display.Graphics.SCALE_HORIZONTAL = 2;
jeash.display.Graphics.SCALE_NORMAL = 3;
jeash.display.Graphics.MOVE = 0;
jeash.display.Graphics.LINE = 1;
jeash.display.Graphics.CURVE = 2;
jeash.display.Graphics.BLEND_ADD = 0;
jeash.display.Graphics.BLEND_ALPHA = 1;
jeash.display.Graphics.BLEND_DARKEN = 2;
jeash.display.Graphics.BLEND_DIFFERENCE = 3;
jeash.display.Graphics.BLEND_ERASE = 4;
jeash.display.Graphics.BLEND_HARDLIGHT = 5;
jeash.display.Graphics.BLEND_INVERT = 6;
jeash.display.Graphics.BLEND_LAYER = 7;
jeash.display.Graphics.BLEND_LIGHTEN = 8;
jeash.display.Graphics.BLEND_MULTIPLY = 9;
jeash.display.Graphics.BLEND_NORMAL = 10;
jeash.display.Graphics.BLEND_OVERLAY = 11;
jeash.display.Graphics.BLEND_SCREEN = 12;
jeash.display.Graphics.BLEND_SUBTRACT = 13;
jeash.display.Graphics.BLEND_SHADER = 14;
jeash.display.Graphics.TILE_SCALE = 1;
jeash.display.Graphics.TILE_ROTATION = 2;
jeash.display.Graphics.TILE_RGB = 4;
jeash.display.Graphics.TILE_ALPHA = 8;
jeash.display.Graphics.TILE_SMOOTH = 4096;
jeash.display.Graphics.JEASH_SIZING_WARM_UP = 10;
jeash.display.Graphics.JEASH_MAX_DIMENSION = 5000;
zpp_nape.ZPP_Config.ANGDRAGCOEF_FRICTION = 2.5;
zpp_nape.ZPP_Config.ANGDRAGCOEF_DRAG = 100;
zpp_nape.ZPP_Config.ANGDRAGCOEF_VACUUM = 0.5;
zpp_nape.ZPP_Config.FLUID_COEF_LIN = 0.5;
zpp_nape.ZPP_Config.FLUID_COEF_ANG = 1e-6;
zpp_nape.ZPP_Config.OVERLAP = 0.25;
zpp_nape.ZPP_Config.SLOP = 0.01;
zpp_nape.ZPP_Config.ANGSLOP = 1e-6;
zpp_nape.ZPP_Config.PERSIST = 6;
zpp_nape.ZPP_Config.MIN_BIAS_COEF = 0.1;
zpp_nape.ZPP_Config.MAX_BIAS_COEF = 0.8;
zpp_nape.ZPP_Config.VEL_BIAS_COEF = 0.9;
zpp_nape.ZPP_Config.BIAS_PEN_COEF = 0.01;
zpp_nape.ZPP_Config.INT_BIAS_COEF = 0.85;
zpp_nape.ZPP_Config.DEL_BIAS_COEF = 0.8 - 0.1;
zpp_nape.ZPP_Config.SUB_BIAS_COEF = 1.0 - 0.85;
zpp_nape.ZPP_Config.ILL = 4e5;
zpp_nape.ZPP_Config.STATIC_VELSQ = 4;
zpp_nape.ZPP_Config.SLEEP_DELAY = 60;
zpp_nape.ZPP_Config.SLEEP_LINEAR_SQ = 0.2;
zpp_nape.ZPP_Config.SLEEP_ANGULAR_SQ = 0.4;
zpp_nape.ZPP_Config.GLOBAL_LIN_DRAG = 0.015;
zpp_nape.ZPP_Config.GLOBAL_ANG_DRAG = 0.015;
ApplicationMain.main()